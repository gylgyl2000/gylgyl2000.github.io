(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{214:function(e,t,n){"use strict";n.r(t),n.d(t,"MDXContext",(function(){return d})),n.d(t,"MDXProvider",(function(){return p})),n.d(t,"mdx",(function(){return x})),n.d(t,"useMDXComponents",(function(){return u})),n.d(t,"withMDXComponents",(function(){return m}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(){return(s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=r.a.createContext({}),m=function(e){return function(t){var n=u(t.components);return r.a.createElement(e,s({},t,{components:n}))}},u=function(e){var t=r.a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.a.createElement(d.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},j=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,p=d["".concat(s,".").concat(m)]||d[m]||b[m]||o;return n?r.a.createElement(p,i(i({ref:t},l),{},{components:n})):r.a.createElement(p,i({ref:t},l))}));function x(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=j;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var c=2;c<o;c++)s[c]=n[c];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,n)}j.displayName="MDXCreateElement"},89:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return d}));var a=n(3),r=n(7),o=(n(0),n(214)),s={id:"freeCodeCamp-ES6-fr",title:"ES6"},l={unversionedId:"freeCodeCamp/freeCodeCamp-ES6-fr",id:"freeCodeCamp/freeCodeCamp-ES6-fr",isDocsHomePage:!1,title:"ES6",description:"Pr\xe9sentation des d\xe9fis ES6",source:"@site/docs/freeCodeCamp/freeCodeCamp-ES6-fr.md",slug:"/freeCodeCamp/freeCodeCamp-ES6-fr",permalink:"/docs/freeCodeCamp/freeCodeCamp-ES6-fr",editUrl:"https://github.com/gylgyl2000/laloutre.github.io/edit/main/docs/freeCodeCamp/freeCodeCamp-ES6-fr.md",version:"current",sidebar:"docs",previous:{title:"JavaScript de base",permalink:"/docs/freeCodeCamp/freeCodeCamp-Basic_JavaScript-fr"},next:{title:"Expressions r\xe9guli\xe8res",permalink:"/docs/freeCodeCamp/freeCodeCamp-Regular_Expressions-fr"}},i=[{value:"Pr\xe9sentation des d\xe9fis ES6",id:"pr\xe9sentation-des-d\xe9fis-es6",children:[]},{value:"1. Explorer les diff\xe9rences entre les mots-cl\xe9s <code>var</code> et <code>let</code>",id:"1-explorer-les-diff\xe9rences-entre-les-mots-cl\xe9s-var-et-let",children:[]},{value:"2. Comparez les port\xe9es des mots cl\xe9s <code>var</code> et <code>let</code>",id:"2-comparez-les-port\xe9es-des-mots-cl\xe9s-var-et-let",children:[]},{value:"3. D\xe9clarer une variable en lecture seule avec le mot-cl\xe9 <code>const</code>",id:"3-d\xe9clarer-une-variable-en-lecture-seule-avec-le-mot-cl\xe9-const",children:[]},{value:"4. Muter un tableau d\xe9clar\xe9 avec <code>const</code>",id:"4-muter-un-tableau-d\xe9clar\xe9-avec-const",children:[]},{value:"5. Emp\xeacher la mutation d&#39;objet",id:"5-emp\xeacher-la-mutation-dobjet",children:[]},{value:"6. Utiliser les fonctions fl\xe9ch\xe9es pour \xe9crire des fonctions anonymes concises",id:"6-utiliser-les-fonctions-fl\xe9ch\xe9es-pour-\xe9crire-des-fonctions-anonymes-concises",children:[]},{value:"7. \xc9crire des fonctions fl\xe9ch\xe9es avec des param\xe8tres",id:"7-\xe9crire-des-fonctions-fl\xe9ch\xe9es-avec-des-param\xe8tres",children:[]},{value:"8. D\xe9finir les param\xe8tres par d\xe9faut pour vos fonctions",id:"8-d\xe9finir-les-param\xe8tres-par-d\xe9faut-pour-vos-fonctions",children:[]},{value:"9. Utiliser <code>rest parameter</code> avec les param\xe8tres de fonction",id:"9-utiliser-rest-parameter-avec-les-param\xe8tres-de-fonction",children:[]},{value:"10. Utilisez l&#39;op\xe9rateur de d\xe9composition pour \xe9valuer les tableaux sur place",id:"10-utilisez-lop\xe9rateur-de-d\xe9composition-pour-\xe9valuer-les-tableaux-sur-place",children:[]},{value:"11. Utiliser l&#39;affectation de d\xe9composition pour extraire des valeurs d&#39;objets",id:"11-utiliser-laffectation-de-d\xe9composition-pour-extraire-des-valeurs-dobjets",children:[]},{value:"12. Utiliser l&#39;affectation de d\xe9composition pour affecter des variables \xe0 partir d&#39;objets",id:"12-utiliser-laffectation-de-d\xe9composition-pour-affecter-des-variables-\xe0-partir-dobjets",children:[]},{value:"13. Utiliser l&#39;affectation de d\xe9composition pour affecter des variables \xe0 partir d&#39;objets imbriqu\xe9s",id:"13-utiliser-laffectation-de-d\xe9composition-pour-affecter-des-variables-\xe0-partir-dobjets-imbriqu\xe9s",children:[]},{value:"14. Utiliser l&#39;affectation de d\xe9composition pour affecter des variables \xe0 partir de tableaux",id:"14-utiliser-laffectation-de-d\xe9composition-pour-affecter-des-variables-\xe0-partir-de-tableaux",children:[]},{value:"15. Utiliser l\u2019affectation de d\xe9composition avec le param\xe8tre Rest pour r\xe9attribuer des \xe9l\xe9ments de tableau",id:"15-utiliser-laffectation-de-d\xe9composition-avec-le-param\xe8tre-rest-pour-r\xe9attribuer-des-\xe9l\xe9ments-de-tableau",children:[]},{value:"16. Utiliser l&#39;affectation de d\xe9composition pour transmettre un objet en tant que param\xe8tres d&#39;une fonction",id:"16-utiliser-laffectation-de-d\xe9composition-pour-transmettre-un-objet-en-tant-que-param\xe8tres-dune-fonction",children:[]},{value:"17. Cr\xe9er des cha\xeenes \xe0 l&#39;aide de litt\xe9raux de gabarits",id:"17-cr\xe9er-des-cha\xeenes-\xe0-laide-de-litt\xe9raux-de-gabarits",children:[]},{value:"18. \xc9crire des d\xe9clarations concises de litt\xe9ral d&#39;objet \xe0 l&#39;aide d&#39;un raccourci de propri\xe9t\xe9 d&#39;objet",id:"18-\xe9crire-des-d\xe9clarations-concises-de-litt\xe9ral-dobjet-\xe0-laide-dun-raccourci-de-propri\xe9t\xe9-dobjet",children:[]},{value:"19. \xc9crire des fonctions d\xe9claratives concises avec ES6",id:"19-\xe9crire-des-fonctions-d\xe9claratives-concises-avec-es6",children:[]},{value:"20. Utiliser la syntaxe de classe pour d\xe9finir une fonction constructeur",id:"20-utiliser-la-syntaxe-de-classe-pour-d\xe9finir-une-fonction-constructeur",children:[]},{value:"21. Utiliser des accesseurs (getters) et des mutateurs (setters) pour contr\xf4ler l&#39;acc\xe8s \xe0 un objet",id:"21-utiliser-des-accesseurs-getters-et-des-mutateurs-setters-pour-contr\xf4ler-lacc\xe8s-\xe0-un-objet",children:[]},{value:"22. Cr\xe9er un module script",id:"22-cr\xe9er-un-module-script",children:[]},{value:"23. Utiliser <code>export</code> pour partager un bloc de code",id:"23-utiliser-export-pour-partager-un-bloc-de-code",children:[]},{value:"24. R\xe9utiliser le code JavaScript \xe0 l&#39;aide de <code>import</code>",id:"24-r\xe9utiliser-le-code-javascript-\xe0-laide-de-import",children:[]},{value:"25. Utilisez * pour tout importer \xe0 partir d&#39;un fichier",id:"25-utilisez--pour-tout-importer-\xe0-partir-dun-fichier",children:[]},{value:"26. Cr\xe9er une exportation de secours avec <code>export default</code>",id:"26-cr\xe9er-une-exportation-de-secours-avec-export-default",children:[]},{value:"27. Importer un <code>export default</code>",id:"27-importer-un-export-default",children:[]},{value:"28. Cr\xe9er une promesse JavaScript",id:"28-cr\xe9er-une-promesse-javascript",children:[]},{value:"29. Accomplissez une promesse avec <code>resolve</code> et <code>reject</code>",id:"29-accomplissez-une-promesse-avec-resolve-et-reject",children:[]},{value:"30. G\xe9rez une promesse tenue avec <code>then</code>",id:"30-g\xe9rez-une-promesse-tenue-avec-then",children:[]},{value:"31. G\xe9rer une promesse rejet\xe9e avec <code>catch</code>",id:"31-g\xe9rer-une-promesse-rejet\xe9e-avec-catch",children:[]}],c={rightToc:i};function d(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.mdx)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(o.mdx)("h2",{id:"pr\xe9sentation-des-d\xe9fis-es6"},"Pr\xe9sentation des d\xe9fis ES6"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/"}),"ES6 | freeCodeCamp.org")),Object(o.mdx)("p",null,"ECMAScript est une version standardis\xe9e de JavaScript dans le but  d'unifier les sp\xe9cifications et les fonctionnalit\xe9s du langage. Comme  tous les principaux navigateurs et environnements d'ex\xe9cution JavaScript suivent cette sp\xe9cification, le terme ",Object(o.mdx)("em",{parentName:"p"},"ECMAScript")," est interchangeable  avec le terme ",Object(o.mdx)("em",{parentName:"p"},"JavaScript"),"."),Object(o.mdx)("p",null,"La plupart des d\xe9fis de freeCodeCamp  utilisent la sp\xe9cification ECMAScript 5 (ES5) du langage, finalis\xe9e en  2009. Mais JavaScript est un langage de programmation en \xe9volution. Au  fur et \xe0 mesure que des fonctionnalit\xe9s sont ajout\xe9es et que des  r\xe9visions sont apport\xe9es, de nouvelles versions du langage sont publi\xe9es pour \xeatre utilis\xe9es par les d\xe9veloppeurs."),Object(o.mdx)("p",null,"La version  standardis\xe9e la plus r\xe9cente s'appelle ECMAScript 6 (ES6), sortie en  2015. Cette nouvelle version du langage ajoute quelques fonctionnalit\xe9s  puissantes qui seront couvertes dans cette section de d\xe9fis, notamment :"),Object(o.mdx)("ul",null,Object(o.mdx)("li",{parentName:"ul"},"Fonctions fl\xe9ch\xe9es"),Object(o.mdx)("li",{parentName:"ul"},"Classes"),Object(o.mdx)("li",{parentName:"ul"},"Modules"),Object(o.mdx)("li",{parentName:"ul"},"Promesses"),Object(o.mdx)("li",{parentName:"ul"},"G\xe9n\xe9rateurs"),Object(o.mdx)("li",{parentName:"ul"},"let et const")),Object(o.mdx)("p",null,Object(o.mdx)("strong",{parentName:"p"},"Remarque :")," tous les navigateurs ne prennent pas en charge les fonctionnalit\xe9s ES6. Si vous utilisez ES6 dans vos propres projets, vous devrez peut-\xeatre  utiliser un programme (transpileur) pour convertir votre code ES6 en  ES5 jusqu'\xe0 ce que les navigateurs prennent en charge ES6."),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"1-explorer-les-diff\xe9rences-entre-les-mots-cl\xe9s-var-et-let"},"1. Explorer les diff\xe9rences entre les mots-cl\xe9s ",Object(o.mdx)("inlineCode",{parentName:"h2"},"var")," et ",Object(o.mdx)("inlineCode",{parentName:"h2"},"let")),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/explore-differences-between-the-var-and-let-keywords"}),"Learn ES6: Explore Differences Between the var and let Keywords | freeCodeCamp.org")),Object(o.mdx)("p",null,"L'un des plus gros probl\xe8mes avec la d\xe9claration de variables avec le  mot-cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"var")," est que vous pouvez \xe9craser les d\xe9clarations de variables  sans erreur."),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"var camper = 'James';\nvar camper = 'David';\nconsole.log(camper);\n// logs 'David'\n")),Object(o.mdx)("p",null,"Comme vous pouvez le voir dans le code ci-dessus, la variable ",Object(o.mdx)("inlineCode",{parentName:"p"},"camper")," est initialement d\xe9clar\xe9e en tant que ",Object(o.mdx)("inlineCode",{parentName:"p"},"James"),", puis remplac\xe9e par ",Object(o.mdx)("inlineCode",{parentName:"p"},"David"),". Dans une petite application, vous risquez de ne pas rencontrer ce type de  probl\xe8me, mais lorsque votre code devient plus volumineux, vous pouvez  accidentellement \xe9craser une variable que vous n'aviez pas l'intention  d'\xe9craser. \xc9tant donn\xe9 que ce comportement ne g\xe9n\xe8re pas d'erreur, la  recherche et la correction des bugs deviennent plus difficiles.\nUn  nouveau mot-cl\xe9 appel\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"let")," a \xe9t\xe9 introduit dans ES6 pour r\xe9soudre ce  probl\xe8me potentiel avec le mot-cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"var"),". Si vous deviez remplacer ",Object(o.mdx)("inlineCode",{parentName:"p"},"var")," par ",Object(o.mdx)("inlineCode",{parentName:"p"},"let")," dans les d\xe9clarations de variables du code ci-dessus, le r\xe9sultat  serait une erreur."),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let camper = 'James';\nlet camper = 'David'; // throws an error\n")),Object(o.mdx)("p",null,"Cette erreur peut \xeatre vue dans la console de votre navigateur. Donc,  contrairement \xe0 ",Object(o.mdx)("inlineCode",{parentName:"p"},"var"),", lors de l'utilisation de ",Object(o.mdx)("inlineCode",{parentName:"p"},"let"),', une variable du m\xeame nom ne peut \xeatre d\xe9clar\xe9e qu\'une seule fois. Notez le "use strict". Cela active le mode strict, qui d\xe9tecte les erreurs de codage courantes et  les actions "dangereuses". Par exemple :'),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'"use strict";\nx = 3.14; // throws an error because x is not declared\n')),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Mettez \xe0 jour le code pour qu'il n'utilise que le mot cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"let"),"."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},Object(o.mdx)("inlineCode",{parentName:"p"},"var")," ne doit pas exister dans le code.\n",Object(o.mdx)("inlineCode",{parentName:"p"},"catName")," doit \xeatre ",Object(o.mdx)("inlineCode",{parentName:"p"},"Oliver"),".\nla citation devrait \xeatre ",Object(o.mdx)("inlineCode",{parentName:"p"},'"Oliver says Meow!"'))),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'var catName;\nvar quote;\nfunction catTalk() {\n  "use strict";\n  catName = "Oliver";\n  quote = catName + " says Meow!";\n}\ncatTalk();\n')),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'let catName;\nlet quote;\nfunction catTalk() {\n  "use strict";\n  catName = "Oliver";\n  quote = catName + " says Meow!";\n}\ncatTalk();\nconsole.log(quote); // Oliver says Meow!\n')),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"2-comparez-les-port\xe9es-des-mots-cl\xe9s-var-et-let"},"2. Comparez les port\xe9es des mots cl\xe9s ",Object(o.mdx)("inlineCode",{parentName:"h2"},"var")," et ",Object(o.mdx)("inlineCode",{parentName:"h2"},"let")),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/compare-scopes-of-the-var-and-let-keywords"}),"Learn ES6: Compare Scopes of the var and let Keywords | freeCodeCamp.org")),Object(o.mdx)("p",null,"Lorsque vous d\xe9clarez une variable avec le mot-cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"var"),", elle est d\xe9clar\xe9e globalement, ou localement si elle est d\xe9clar\xe9e \xe0 l'int\xe9rieur d'une  fonction.\nLe mot-cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"let")," se comporte de la m\xeame mani\xe8re, mais  avec quelques fonctionnalit\xe9s suppl\xe9mentaires. Lorsque vous d\xe9clarez une variable avec le mot-cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"let")," dans un bloc, une instruction ou une  expression, sa port\xe9e est limit\xe9e \xe0 ce bloc, cette instruction ou cette  expression.\nPar exemple :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"var numArray = [];\nfor (var i = 0; i < 3; i++) {\n  numArray.push(i);\n}\nconsole.log(numArray); // returns [0, 1, 2]\nconsole.log(i); // returns 3\n")),Object(o.mdx)("p",null,"Avec le mot-cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"var"),", ",Object(o.mdx)("inlineCode",{parentName:"p"},"i")," est d\xe9clar\xe9 globalement. Ainsi, lorsque ",Object(o.mdx)("inlineCode",{parentName:"p"},"i++")," est  ex\xe9cut\xe9, il met \xe0 jour la variable globale. Ce code est similaire au  suivant :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"var numArray = [];\nvar i;\nfor (i = 0; i < 3; i++) {\n  numArray.push(i);\n}\nconsole.log(numArray); // returns [0, 1, 2]\nconsole.log(i); // returns 3\n")),Object(o.mdx)("p",null,"Ce comportement posera des probl\xe8mes si vous deviez cr\xe9er une fonction et la stocker pour une utilisation ult\xe9rieure dans une boucle ",Object(o.mdx)("inlineCode",{parentName:"p"},"for")," qui  utilise la variable ",Object(o.mdx)("inlineCode",{parentName:"p"},"i"),". En effet, la fonction stock\xe9e fera toujours  r\xe9f\xe9rence \xe0 la valeur de la variable ",Object(o.mdx)("inlineCode",{parentName:"p"},"i")," globale mise \xe0 jour."),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"var printNumTwo;\nfor (var i = 0; i < 3; i++) {\n  if (i === 2) {\n    printNumTwo = function() {\n      return i;\n    };\n  }\n}\nconsole.log(printNumTwo()); // returns 3\n")),Object(o.mdx)("p",null,"Comme vous pouvez le voir, ",Object(o.mdx)("inlineCode",{parentName:"p"},"printNumTwo()")," affiche 3 et non 2. Cela est  d\xfb au fait que la valeur affect\xe9e \xe0 ",Object(o.mdx)("inlineCode",{parentName:"p"},"i")," a \xe9t\xe9 mise \xe0 jour et que  ",Object(o.mdx)("inlineCode",{parentName:"p"},"printNumTwo()")," renvoie le ",Object(o.mdx)("inlineCode",{parentName:"p"},"i")," global et non la valeur que j'avais lorsque  la fonction a \xe9t\xe9 cr\xe9\xe9e dans la boucle ",Object(o.mdx)("inlineCode",{parentName:"p"},"for"),". Le mot cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"let")," ne suit pas ce comportement :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"'use strict';\nlet printNumTwo;\nfor (let i = 0; i < 3; i++) {\n  if (i === 2) {\n    printNumTwo = function() {\n      return i;\n    };\n  }\n}\nconsole.log(printNumTwo()); // returns 2\nconsole.log(i); // returns \"i is not defined\"\n")),Object(o.mdx)("p",null,Object(o.mdx)("inlineCode",{parentName:"p"},"i")," n'est pas d\xe9fini car il n'a pas \xe9t\xe9 d\xe9clar\xe9 dans la port\xe9e globale. Il n'est d\xe9clar\xe9 que dans l'instruction de la boucle ",Object(o.mdx)("inlineCode",{parentName:"p"},"for"),". ",Object(o.mdx)("inlineCode",{parentName:"p"},"printNumTwo()")," a renvoy\xe9 la valeur correcte car trois variables ",Object(o.mdx)("inlineCode",{parentName:"p"},"i")," diff\xe9rentes avec des valeurs uniques (0, 1 et 2) ont \xe9t\xe9 cr\xe9\xe9es par le mot-cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"let")," dans l'instruction de boucle."),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Corrigez le code pour que ",Object(o.mdx)("inlineCode",{parentName:"p"},"i")," d\xe9clar\xe9  dans l'instruction ",Object(o.mdx)("inlineCode",{parentName:"p"},"if")," soit une variable distincte de celle que ",Object(o.mdx)("inlineCode",{parentName:"p"},"i")," d\xe9clar\xe9 dans la premi\xe8re ligne de la fonction. Assurez-vous de ne pas  utiliser le mot-cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"var")," dans votre code."),Object(o.mdx)("p",null,"Cet exercice est con\xe7u  pour illustrer la diff\xe9rence entre la fa\xe7on dont les mots-cl\xe9s ",Object(o.mdx)("inlineCode",{parentName:"p"},"var")," et  ",Object(o.mdx)("inlineCode",{parentName:"p"},"let")," attribuent une port\xe9e \xe0 la variable d\xe9clar\xe9e. Lors de la  programmation d'une fonction similaire \xe0 celle utilis\xe9e dans cet  exercice, il est souvent pr\xe9f\xe9rable d'utiliser des noms de variables  diff\xe9rents pour \xe9viter toute confusion."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},Object(o.mdx)("inlineCode",{parentName:"p"},"var")," ne devrait pas exister dans le code.\nLa variable que ",Object(o.mdx)("inlineCode",{parentName:"p"},"i"),' d\xe9clar\xe9e dans l\'instruction if doit \xeatre \xe9gale \xe0 "block scope".\n',Object(o.mdx)("inlineCode",{parentName:"p"},"checkScope()"),' devrait renvoyer "function scope"')),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function checkScope() {\n  'use strict';\n  var i = 'function scope';\n  if (true) {\n    i = 'block scope';\n    console.log('Block scope i is: ', i);\n  }\n  console.log('Function scope i is: ', i);\n  return i;\n}\n")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function checkScope() {\n  'use strict';\n  let i = 'function scope';\n  if (true) {\n    let i = 'block scope';\n    console.log('Block scope i is: ', i); // Block scope i is:  block scope\n  }\n  console.log('Function scope i is: ', i); // Function scope i is:  function scope\n  return i;\n}\nconsole.log(checkScope()); // function scope\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"3-d\xe9clarer-une-variable-en-lecture-seule-avec-le-mot-cl\xe9-const"},"3. D\xe9clarer une variable en lecture seule avec le mot-cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"h2"},"const")),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/declare-a-read-only-variable-with-the-const-keyword"}),"Learn ES6: Declare a Read-Only Variable with the const Keyword | freeCodeCamp.org")),Object(o.mdx)("p",null,"Le mot cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"let")," n'est pas la seule nouvelle fa\xe7on de d\xe9clarer des  variables. Dans ES6, vous pouvez \xe9galement d\xe9clarer des variables \xe0  l'aide du mot cl\xe9 const.\n",Object(o.mdx)("inlineCode",{parentName:"p"},"const")," a toutes les fonctionnalit\xe9s impressionnantes que ",Object(o.mdx)("inlineCode",{parentName:"p"},"let")," a, avec le bonus suppl\xe9mentaire que les  variables d\xe9clar\xe9es \xe0 l'aide de ",Object(o.mdx)("inlineCode",{parentName:"p"},"const")," sont en lecture seule. Il s'agit  d'une valeur constante, ce qui signifie qu'une fois qu'une variable est  affect\xe9e avec ",Object(o.mdx)("inlineCode",{parentName:"p"},"const"),", elle ne peut pas \xeatre r\xe9affect\xe9e."),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'"use strict";\nconst FAV_PET = "Cats";\nFAV_PET = "Dogs"; // returns error\n')),Object(o.mdx)("p",null,"Comme vous pouvez le voir, essayer de r\xe9affecter une variable d\xe9clar\xe9e avec ",Object(o.mdx)("inlineCode",{parentName:"p"},"const")," l\xe8vera une erreur. Vous devez toujours nommer les variables que  vous ne souhaitez pas r\xe9affecter \xe0 l'aide du mot-cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"const"),". Cela aide  lorsque vous essayez accidentellement de r\xe9affecter une variable cens\xe9e  rester constante. Une pratique courante lors de la d\xe9nomination des  constantes consiste \xe0 utiliser toutes les lettres majuscules, avec des  mots s\xe9par\xe9s par un trait de soulignement."),Object(o.mdx)("p",null,Object(o.mdx)("strong",{parentName:"p"},"Remarque :")," Il est  courant pour les d\xe9veloppeurs d'utiliser des identificateurs de variable en majuscules pour les valeurs immuables et en minuscules ou camelCase  pour les valeurs mutables (objets et tableaux). Dans un d\xe9fi ult\xe9rieur,  vous verrez un exemple d'identifiant de variable minuscule utilis\xe9 pour  un tableau."),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Modifiez le code pour que toutes les variables soient d\xe9clar\xe9es \xe0 l'aide de ",Object(o.mdx)("inlineCode",{parentName:"p"},"let")," ou ",Object(o.mdx)("inlineCode",{parentName:"p"},"const"),". Utilisez ",Object(o.mdx)("inlineCode",{parentName:"p"},"let")," lorsque vous souhaitez que la variable change et ",Object(o.mdx)("inlineCode",{parentName:"p"},"const")," lorsque vous souhaitez que la variable  reste constante. De plus, renommez les variables d\xe9clar\xe9es avec ",Object(o.mdx)("inlineCode",{parentName:"p"},"const"),"  pour se conformer aux pratiques courantes, ce qui signifie que les  constantes doivent \xeatre en majuscules."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},Object(o.mdx)("inlineCode",{parentName:"p"},"var")," ne devrait pas exister dans votre code.\n",Object(o.mdx)("inlineCode",{parentName:"p"},"SENTENCE")," doit \xeatre une variable constante d\xe9clar\xe9e avec ",Object(o.mdx)("inlineCode",{parentName:"p"},"const"),".\n",Object(o.mdx)("inlineCode",{parentName:"p"},"i")," devrais \xeatre d\xe9clar\xe9 avec ",Object(o.mdx)("inlineCode",{parentName:"p"},"let"),".\n",Object(o.mdx)("inlineCode",{parentName:"p"},"console.log")," doit \xeatre modifi\xe9 pour imprimer la variable ",Object(o.mdx)("inlineCode",{parentName:"p"},"SENTENCE"),".")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'function printManyTimes(str) {\n  "use strict";\n  // Only change code below this line\n  var sentence = str + " is cool!";\n  for (var i = 0; i < str.length; i+=2) {\n    console.log(sentence);\n  }\n  // Only change code above this line\n}\nprintManyTimes("freeCodeCamp");\n')),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'function printManyTimes(str) {\n  "use strict";\n  // Only change code below this line\n  const SENTENCE = str + " is cool!";\n  for (let i = 0; i < str.length; i+=2) {\n    console.log(SENTENCE);\n  }\n  // Only change code above this line\n}\nprintManyTimes("freeCodeCamp");\n')),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"freeCodeCamp is cool!\nfreeCodeCamp is cool!\nfreeCodeCamp is cool!\nfreeCodeCamp is cool!\nfreeCodeCamp is cool!\nfreeCodeCamp is cool!\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"4-muter-un-tableau-d\xe9clar\xe9-avec-const"},"4. Muter un tableau d\xe9clar\xe9 avec ",Object(o.mdx)("inlineCode",{parentName:"h2"},"const")),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/mutate-an-array-declared-with-const"}),"Learn ES6: Mutate an Array Declared with const | freeCodeCamp.org")),Object(o.mdx)("p",null,"La d\xe9claration ",Object(o.mdx)("inlineCode",{parentName:"p"},"const")," a de nombreux cas d'utilisation dans JavaScript moderne.\nCertains d\xe9veloppeurs pr\xe9f\xe8rent affecter toutes leurs variables en utilisant  ",Object(o.mdx)("inlineCode",{parentName:"p"},"const")," par d\xe9faut, \xe0 moins qu'ils ne sachent qu'ils devront r\xe9affecter la valeur. Seulement dans ce cas, ils utilisent ",Object(o.mdx)("inlineCode",{parentName:"p"},"let"),".\nCependant, il  est important de comprendre que les objets (y compris les tableaux et  les fonctions) affect\xe9s \xe0 une variable \xe0 l'aide de ",Object(o.mdx)("inlineCode",{parentName:"p"},"const")," sont toujours modifiables. L'utilisation de la d\xe9claration ",Object(o.mdx)("inlineCode",{parentName:"p"},"const")," emp\xeache uniquement la r\xe9affectation de l'identificateur de variable."),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'"use strict";\nconst s = [5, 6, 7];\ns = [1, 2, 3]; // envoie une erreur, en essayant d\'attribuer un const\ns[2] = 45; // fonctionne comme il le ferait avec un tableau d\xe9clar\xe9 avec var ou let\nconsole.log(s); // retourne [5, 6, 45]\n')),Object(o.mdx)("p",null,"Comme vous pouvez le voir, vous pouvez muter l'objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"[5, 6, 7]")," lui-m\xeame et la variable ",Object(o.mdx)("inlineCode",{parentName:"p"},"s")," pointera toujours vers le tableau modifi\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"[5, 6, 45]"),". Comme  tous les tableaux, les \xe9l\xe9ments du tableau dans ",Object(o.mdx)("inlineCode",{parentName:"p"},"s")," sont modifiables, mais comme ",Object(o.mdx)("inlineCode",{parentName:"p"},"const")," a \xe9t\xe9 utilis\xe9, vous ne pouvez pas utiliser l'identificateur de variable ",Object(o.mdx)("inlineCode",{parentName:"p"},"s")," pour pointer vers un tableau diff\xe9rent \xe0 l'aide de  l'op\xe9rateur d'affectation."),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Un tableau est d\xe9clar\xe9 comme ",Object(o.mdx)("inlineCode",{parentName:"p"},"const s = [5, 7, 2]"),". Modifiez le tableau en ",Object(o.mdx)("inlineCode",{parentName:"p"},"[2, 5, 7]")," en utilisant diverses  affectations d'\xe9l\xe9ments."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"Vous ne devez pas remplacer le mot-cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"const"),".\n",Object(o.mdx)("inlineCode",{parentName:"p"},"s")," doit \xeatre une variable constante (en utilisant ",Object(o.mdx)("inlineCode",{parentName:"p"},"const"),").\nVous ne devez pas modifier la d\xe9claration de tableau d'origine.\n",Object(o.mdx)("inlineCode",{parentName:"p"},"s")," doit \xeatre \xe9gal \xe0 ",Object(o.mdx)("inlineCode",{parentName:"p"},"[2, 5, 7]"),".")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const s = [5, 7, 2];\nfunction editInPlace() {\n  'use strict';\n  // Only change code below this line\n  s.unshift(2);\n  s.pop();\n  // Using s = [2, 5, 7] would be invalid\n  // Only change code above this line\n}\neditInPlace();\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"5-emp\xeacher-la-mutation-dobjet"},"5. Emp\xeacher la mutation d'objet"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/prevent-object-mutation"}),"Learn ES6: Prevent Object Mutation | freeCodeCamp.org")),Object(o.mdx)("p",null,"Comme vu dans le d\xe9fi pr\xe9c\xe9dent, la d\xe9claration ",Object(o.mdx)("inlineCode",{parentName:"p"},"const")," seule ne prot\xe8ge  pas vraiment vos donn\xe9es de la mutation. Pour vous assurer que vos  donn\xe9es ne changent pas, JavaScript fournit une fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"Object.freeze"),"  pour emp\xeacher la mutation des donn\xe9es.\nUne fois l'objet fig\xe9,  vous ne pouvez plus y ajouter, mettre \xe0 jour ou supprimer des  propri\xe9t\xe9s. Toute tentative de changement d'objet sera rejet\xe9e sans  erreur."),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'let obj = {\n  name:"FreeCodeCamp",\n  review:"Awesome"\n};\nObject.freeze(obj);\nobj.review = "bad"; // sera ignor\xe9. Mutation non autoris\xe9e\nobj.newProp = "Test"; // sera ignor\xe9. Mutation non autoris\xe9e\nconsole.log(obj); // { name: "FreeCodeCamp", review:"Awesome"}\n')),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Dans ce d\xe9fi, vous allez utiliser ",Object(o.mdx)("inlineCode",{parentName:"p"},"Object.freeze")," pour emp\xeacher les constantes math\xe9matiques de changer. Vous devez figer l'objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"MATH_CONSTANTS")," afin  que personne ne puisse modifier la valeur de ",Object(o.mdx)("inlineCode",{parentName:"p"},"PI"),", ajouter ou supprimer  des propri\xe9t\xe9s."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"Vous ne devez pas remplacer le mot-cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"const"),".\n",Object(o.mdx)("inlineCode",{parentName:"p"},"MATH_CONSTANTS")," doit \xeatre une variable constante (en utilisant ",Object(o.mdx)("inlineCode",{parentName:"p"},"const"),").\nVous ne devez pas modifier ",Object(o.mdx)("inlineCode",{parentName:"p"},"MATH_CONSTANTS")," d'origine.\n",Object(o.mdx)("inlineCode",{parentName:"p"},"PI")," doit \xeatre \xe9gal \xe0 ",Object(o.mdx)("inlineCode",{parentName:"p"},"3.14"),".")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function freezeObj() {\n  'use strict';\n  const MATH_CONSTANTS = {\n    PI: 3.14\n  };\n  // Only change code below this line\n  Object.freeze(MATH_CONSTANTS);\n  // Only change code above this line\n  try {\n    MATH_CONSTANTS.PI = 99;\n  } catch(ex) {\n    console.log(ex);\n  }\n  return MATH_CONSTANTS.PI;\n}\nconst PI = freezeObj();\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"6-utiliser-les-fonctions-fl\xe9ch\xe9es-pour-\xe9crire-des-fonctions-anonymes-concises"},"6. Utiliser les fonctions fl\xe9ch\xe9es pour \xe9crire des fonctions anonymes concises"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/use-arrow-functions-to-write-concise-anonymous-functions"}),"Learn ES6: Use Arrow Functions to Write Concise Anonymous Functions | freeCodeCamp.org")),Object(o.mdx)("p",null,"En JavaScript, nous n'avons souvent pas besoin de nommer nos fonctions,  en particulier lors de la transmission d'une fonction comme argument \xe0  une autre fonction. Au lieu de cela, nous cr\xe9ons des fonctions en ligne. Nous n'avons pas besoin de nommer ces fonctions car nous ne les  r\xe9utilisons nulle part ailleurs.\nPour y parvenir, nous utilisons souvent la syntaxe suivante :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const myFunc = function() {\n  const myVar = "value";\n  return myVar;\n}\n')),Object(o.mdx)("p",null,"ES6 nous fournit le sucre syntaxique pour ne pas avoir \xe0 \xe9crire des  fonctions anonymes de cette fa\xe7on. Au lieu de cela, vous pouvez utiliser ",Object(o.mdx)("strong",{parentName:"p"},"la syntaxe de la fonction fl\xe9ch\xe9e")," :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const myFunc = () => {\n  const myVar = "value";\n  return myVar;\n}\n')),Object(o.mdx)("p",null,"Lorsqu'il n'y a pas de corps de fonction et seulement une valeur de retour, la  syntaxe de la fonction fl\xe9ch\xe9e vous permet d'omettre le mot-cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"return")," ainsi que les crochets entourant le code. Cela permet de simplifier les fonctions plus petites en instructions sur une ligne :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const myFunc = () => "value";\n')),Object(o.mdx)("p",null,"Ce code retournera toujours ",Object(o.mdx)("inlineCode",{parentName:"p"},"value")," par d\xe9faut."),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"R\xe9\xe9crivez la fonction affect\xe9e \xe0 la variable ",Object(o.mdx)("inlineCode",{parentName:"p"},"magic")," qui renvoie une ",Object(o.mdx)("inlineCode",{parentName:"p"},"new Date()")," pour utiliser la syntaxe de la fonction fl\xe9ch\xe9e. Assurez-vous  \xe9galement que rien n'est d\xe9fini \xe0 l'aide du mot-cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"var"),"."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"L'utilisateur doit remplacer le mot-cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"var"),".\n",Object(o.mdx)("inlineCode",{parentName:"p"},"magic")," devrait \xeatre une variable constante (en utilisant ",Object(o.mdx)("inlineCode",{parentName:"p"},"const"),").\n",Object(o.mdx)("inlineCode",{parentName:"p"},"magic")," devrait \xeatre une fonction.\n",Object(o.mdx)("inlineCode",{parentName:"p"},"magic()")," doit renvoyer la date correcte.\nLe mot cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"function")," ne doit pas \xeatre utilis\xe9.")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'var magic = function() {\n  "use strict";\n  return new Date();\n};\n')),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const magic = () => new Date();\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"7-\xe9crire-des-fonctions-fl\xe9ch\xe9es-avec-des-param\xe8tres"},"7. \xc9crire des fonctions fl\xe9ch\xe9es avec des param\xe8tres"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/write-arrow-functions-with-parameters"}),"Learn ES6: Write Arrow Functions with Parameters | freeCodeCamp.org")),Object(o.mdx)("p",null,"Tout comme une fonction normale, vous pouvez passer des arguments dans une fonction fl\xe9ch\xe9e."),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// double la valeur d'entr\xe9e et la renvoie\nconst doubler = (item) => item * 2;\n")),Object(o.mdx)("p",null,"Si une fonction fl\xe9ch\xe9e a un seul argument, les parenth\xe8ses entourant l'argument peuvent \xeatre omises."),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// la m\xeame fonction, sans l'argument entre parenth\xe8ses\nconst doubler = item => item * 2;\n")),Object(o.mdx)("p",null,"Il est possible de passer plus d'un argument dans une fonction fl\xe9ch\xe9e."),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// multiplie la premi\xe8re valeur d'entr\xe9e par la seconde et la renvoie\nconst multiplier = (item, multi) => item * multi;\n")),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"R\xe9\xe9crivez la fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"myConcat")," qui ajoute le contenu de ",Object(o.mdx)("inlineCode",{parentName:"p"},"arr2")," \xe0 ",Object(o.mdx)("inlineCode",{parentName:"p"},"arr1")," afin que la  fonction utilise la syntaxe de la fonction fl\xe9ch\xe9e."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"Vous devez remplacer le mot-cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"var"),".\n",Object(o.mdx)("inlineCode",{parentName:"p"},"myConcat")," doit \xeatre une variable constante (en utilisant ",Object(o.mdx)("inlineCode",{parentName:"p"},"const"),").\n",Object(o.mdx)("inlineCode",{parentName:"p"},"myConcat")," doit \xeatre une fonction fl\xe9ch\xe9e avec deux param\xe8tres.\n",Object(o.mdx)("inlineCode",{parentName:"p"},"myConcat()")," doit renvoyer ",Object(o.mdx)("inlineCode",{parentName:"p"},"[1, 2, 3, 4, 5]"),".\nLe mot cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"function")," ne doit pas \xeatre utilis\xe9.")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'var myConcat = function(arr1, arr2) {\n  "use strict";\n  return arr1.concat(arr2);\n};\nconsole.log(myConcat([1, 2], [3, 4, 5]));\n')),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const myConcat = (arr1, arr2) => arr1.concat(arr2);\nconsole.log(myConcat([1, 2], [3, 4, 5])); // [1, 2, 3, 4, 5]\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"8-d\xe9finir-les-param\xe8tres-par-d\xe9faut-pour-vos-fonctions"},"8. D\xe9finir les param\xe8tres par d\xe9faut pour vos fonctions"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/set-default-parameters-for-your-functions"}),"Learn ES6: Set Default Parameters for Your Functions | freeCodeCamp.org")),Object(o.mdx)("p",null,"Afin de nous aider \xe0 cr\xe9er des fonctions plus flexibles, ES6 introduit ",Object(o.mdx)("em",{parentName:"p"},"des param\xe8tres par d\xe9faut")," pour les fonctions.\nConsultez ce code :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const greeting = (name = "Anonymous") => "Hello " + name;\n\nconsole.log(greeting("John")); // Hello John\nconsole.log(greeting()); // Hello Anonymous\n')),Object(o.mdx)("p",null,"Le param\xe8tre par d\xe9faut intervient lorsque l'argument n'est pas sp\xe9cifi\xe9  (il n'est pas d\xe9fini). Comme vous pouvez le voir dans l'exemple  ci-dessus, le param\xe8tre ",Object(o.mdx)("inlineCode",{parentName:"p"},"name")," recevra sa valeur par d\xe9faut ",Object(o.mdx)("inlineCode",{parentName:"p"},'"Anonymous"')," lorsque vous ne fournissez pas de valeur pour le param\xe8tre. Vous pouvez  ajouter des valeurs par d\xe9faut pour autant de param\xe8tres que vous le  souhaitez."),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Modifiez la fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"increment")," en ajoutant des  param\xe8tres par d\xe9faut afin qu'il ajoute 1 au ",Object(o.mdx)("inlineCode",{parentName:"p"},"number")," si ",Object(o.mdx)("inlineCode",{parentName:"p"},"value")," n'est  pas sp\xe9cifi\xe9e."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"Le r\xe9sultat de ",Object(o.mdx)("inlineCode",{parentName:"p"},"increment(5, 2)")," doit \xeatre ",Object(o.mdx)("inlineCode",{parentName:"p"},"7"),".\nLe r\xe9sultat de ",Object(o.mdx)("inlineCode",{parentName:"p"},"increment(5)")," doit \xeatre ",Object(o.mdx)("inlineCode",{parentName:"p"},"6"),".\nUne valeur de param\xe8tre par d\xe9faut de ",Object(o.mdx)("inlineCode",{parentName:"p"},"1")," doit \xeatre utilis\xe9e pour ",Object(o.mdx)("inlineCode",{parentName:"p"},"value"),".")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// Only change code below this line\nconst increment = (number, value) => number + value;\n// Only change code above this line\n")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const increment = (number, value = 1) => number + value;\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"9-utiliser-rest-parameter-avec-les-param\xe8tres-de-fonction"},"9. Utiliser ",Object(o.mdx)("inlineCode",{parentName:"h2"},"rest parameter")," avec les param\xe8tres de fonction"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/use-the-rest-parameter-with-function-parameters"}),"Learn ES6: Use the Rest Parameter with Function Parameters | freeCodeCamp.org")),Object(o.mdx)("p",null,"Afin de nous aider \xe0 cr\xe9er des fonctions plus flexibles, ES6 introduit ",Object(o.mdx)("em",{parentName:"p"},"rest parameter")," pour les param\xe8tres de fonction. Avec ",Object(o.mdx)("em",{parentName:"p"},"rest parameter"),", vous pouvez cr\xe9er des fonctions qui acceptent un nombre variable  d'arguments. Ces arguments sont stock\xe9s dans un tableau accessible ult\xe9rieurement depuis l'int\xe9rieur de la fonction.\nConsultez ce code :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'function howMany(...args) {\n  return "You have passed " + args.length + " arguments.";\n}\nconsole.log(howMany(0, 1, 2)); // Vous avez pass\xe9 3 arguments.\nconsole.log(howMany("string", null, [1, 2, 3], { })); // Vous avez pass\xe9 4 arguments.\n')),Object(o.mdx)("p",null,Object(o.mdx)("em",{parentName:"p"},"rest parameter")," \xe9limine le besoin de v\xe9rifier le tableau ",Object(o.mdx)("inlineCode",{parentName:"p"},"args")," et nous permet d'appliquer ",Object(o.mdx)("inlineCode",{parentName:"p"},"map()"),", ",Object(o.mdx)("inlineCode",{parentName:"p"},"filter()")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"reduce()"),"sur le tableau de param\xe8tres."),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Modifiez la fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"sum")," en utilisant ",Object(o.mdx)("em",{parentName:"p"},"rest parameter")," de mani\xe8re \xe0 ce que la fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"sum")," puisse prendre n'importe quel  nombre d'arguments et renvoyer leur somme."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"Le r\xe9sultat de ",Object(o.mdx)("inlineCode",{parentName:"p"},"sum(0,1,2)")," doit \xeatre 3\nLe r\xe9sultat de ",Object(o.mdx)("inlineCode",{parentName:"p"},"sum(1,2,3,4)")," devrait \xeatre 10\nLe r\xe9sultat de ",Object(o.mdx)("inlineCode",{parentName:"p"},"sum(5)")," doit \xeatre 5\nLe r\xe9sultat de ",Object(o.mdx)("inlineCode",{parentName:"p"},"sum()")," doit \xeatre 0\nLa fonction sum doit utiliser ",Object(o.mdx)("em",{parentName:"p"},"rest parameter")," ",Object(o.mdx)("inlineCode",{parentName:"p"},"...")," sur le param\xe8tre ",Object(o.mdx)("inlineCode",{parentName:"p"},"args"),".")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const sum = (x, y, z) => {\n  const args = [x, y, z];\n  return args.reduce((a, b) => a + b, 0);\n}\n")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const sum = (...args) => args.reduce((a, b) => a + b, 0);\nconsole.log(sum(0, 1, 2)); // 3\nconsole.log(sum(1, 2, 3, 4)); // 10\nconsole.log(sum(5)); // 5\nconsole.log(sum(0)); // 0\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"10-utilisez-lop\xe9rateur-de-d\xe9composition-pour-\xe9valuer-les-tableaux-sur-place"},"10. Utilisez l'op\xe9rateur de d\xe9composition pour \xe9valuer les tableaux sur place"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/use-the-spread-operator-to-evaluate-arrays-in-place"}),"Learn ES6: Use the Spread Operator to Evaluate Arrays In-Place | freeCodeCamp.org")),Object(o.mdx)("p",null,"ES6 introduit ",Object(o.mdx)("em",{parentName:"p"},"l'op\xe9rateur de d\xe9composition"),", qui nous permet de d\xe9velopper  des tableaux et d'autres expressions dans des endroits o\xf9 plusieurs  param\xe8tres ou \xe9l\xe9ments sont attendus.\nLe code ES5 ci-dessous utilise ",Object(o.mdx)("inlineCode",{parentName:"p"},"apply()")," pour calculer la valeur maximale dans un tableau :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"var arr = [6, 89, 3, 45];\nvar maximus = Math.max.apply(null, arr); // renvoie 89\n")),Object(o.mdx)("p",null,"Nous avons d\xfb utiliser ",Object(o.mdx)("inlineCode",{parentName:"p"},"Math.max.apply(null, arr)")," car ",Object(o.mdx)("inlineCode",{parentName:"p"},"Math.max(arr)")," renvoie ",Object(o.mdx)("inlineCode",{parentName:"p"},"NaN"),". ",Object(o.mdx)("inlineCode",{parentName:"p"},"Math.max()")," attend des arguments s\xe9par\xe9s par des virgules, mais pas un tableau. L'op\xe9rateur de d\xe9composition rend cette syntaxe bien meilleure \xe0  lire et \xe0 maintenir."),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const arr = [6, 89, 3, 45];\nconst maximus = Math.max(...arr); // renvoie 89\n")),Object(o.mdx)("p",null,Object(o.mdx)("inlineCode",{parentName:"p"},"...arr")," renvoie un tableau d\xe9compress\xe9. En d'autres termes, il ",Object(o.mdx)("em",{parentName:"p"},"d\xe9compose")," le  tableau. Cependant, l'op\xe9rateur de d\xe9composition ne fonctionne que sur  place, comme dans un argument \xe0 une fonction ou dans un litt\xe9ral de tableau. Le code suivant ne fonctionnera pas :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const spreaded = ...arr; // lancera une erreur de syntaxe\n")),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Copiez tout le contenu de ",Object(o.mdx)("inlineCode",{parentName:"p"},"arr1")," dans un autre tableau ",Object(o.mdx)("inlineCode",{parentName:"p"},"arr2")," \xe0 l'aide de l'op\xe9rateur de d\xe9composition."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},Object(o.mdx)("inlineCode",{parentName:"p"},"arr2")," doit \xeatre une copie correcte de ",Object(o.mdx)("inlineCode",{parentName:"p"},"arr1"),".\nL'op\xe9rateur de d\xe9composition ",Object(o.mdx)("inlineCode",{parentName:"p"},"...")," doit \xeatre utilis\xe9 pour dupliquer ",Object(o.mdx)("inlineCode",{parentName:"p"},"arr1"),".\n",Object(o.mdx)("inlineCode",{parentName:"p"},"arr2")," doit rester inchang\xe9 lorsque ",Object(o.mdx)("inlineCode",{parentName:"p"},"arr1")," est modifi\xe9.")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const arr1 = ['JAN', 'FEB', 'MAR', 'APR', 'MAY'];\nlet arr2;\narr2 = [];  // Change this line\nconsole.log(arr2);\n")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const arr1 = ['JAN', 'FEB', 'MAR', 'APR', 'MAY'];\nlet arr2;\narr2 = [...arr1];\nconsole.log(arr2);\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"11-utiliser-laffectation-de-d\xe9composition-pour-extraire-des-valeurs-dobjets"},"11. Utiliser l'affectation de d\xe9composition pour extraire des valeurs d'objets"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/use-destructuring-assignment-to-extract-values-from-objects"}),"Learn ES6: Use Destructuring Assignment to Extract Values from Objects | freeCodeCamp.org")),Object(o.mdx)("p",null,Object(o.mdx)("em",{parentName:"p"},"L'affectation de d\xe9composition")," est une syntaxe sp\xe9ciale introduite  dans ES6, pour attribuer proprement des valeurs prises directement \xe0  partir d'un objet.\nConsid\xe9rez le code ES5 suivant :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const user = { name: 'John Doe', age: 34 };\n\nconst name = user.name; // name = 'John Doe'\nconst age = user.age; // age = 34\n")),Object(o.mdx)("p",null,"Voici une instruction d'affectation \xe9quivalente utilisant la syntaxe de d\xe9structuration ES6 :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { name, age } = user;\n// name = 'John Doe', age = 34\n")),Object(o.mdx)("p",null,"Ici, les variables ",Object(o.mdx)("inlineCode",{parentName:"p"},"name")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"age")," seront cr\xe9\xe9es et affect\xe9es aux valeurs de leurs valeurs respectives \xe0 partir de l'objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"user"),". Vous pouvez  voir \xe0 quel point c'est plus propre.\nVous pouvez extraire autant ou peu de valeurs de l'objet que vous le souhaitez."),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Remplacez les deux affectations par une affectation de d\xe9composition  \xe9quivalente. Elle doit encore affecter aux variables ",Object(o.mdx)("inlineCode",{parentName:"p"},"today")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"tomorrow")," les valeurs ",Object(o.mdx)("inlineCode",{parentName:"p"},"today")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"tomorrow")," \xe0 partir de l'objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"HIGH_TEMPERATURES"),"."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"Vous devez supprimer la syntaxe d'affectation ES5.\nVous devez utiliser la d\xe9structuration pour cr\xe9er la variable ",Object(o.mdx)("inlineCode",{parentName:"p"},"today"),".\nVous devez utiliser la d\xe9structuration pour cr\xe9er la variable ",Object(o.mdx)("inlineCode",{parentName:"p"},"tomorrow"),".\n",Object(o.mdx)("inlineCode",{parentName:"p"},"today")," devrait \xeatre \xe9gal \xe0 ",Object(o.mdx)("inlineCode",{parentName:"p"},"77")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"tomorrow")," devrait \xeatre \xe9gal \xe0 ",Object(o.mdx)("inlineCode",{parentName:"p"},"80"),".")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const HIGH_TEMPERATURES = {\n  yesterday: 75,\n  today: 77,\n  tomorrow: 80\n};\n// Only change code below this line\nconst today = HIGH_TEMPERATURES.today;\nconst tomorrow = HIGH_TEMPERATURES.tomorrow;\n// Only change code above this line\n")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const HIGH_TEMPERATURES = {\n  yesterday: 75,\n  today: 77,\n  tomorrow: 80\n};\nconst { today, tomorrow } = HIGH_TEMPERATURES;\nconsole.log(today); // 77\nconsole.log(tomorrow); // 80\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"12-utiliser-laffectation-de-d\xe9composition-pour-affecter-des-variables-\xe0-partir-dobjets"},"12. Utiliser l'affectation de d\xe9composition pour affecter des variables \xe0 partir d'objets"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/use-destructuring-assignment-to-assign-variables-from-objects"}),"Learn ES6: Use Destructuring Assignment to Assign Variables from Objects | freeCodeCamp.org")),Object(o.mdx)("p",null,"La d\xe9composition vous permet d'attribuer un nouveau nom de variable lors  de l'extraction des valeurs. Vous pouvez le faire en mettant le nouveau  nom apr\xe8s un deux-points lors de l'attribution de la valeur.\nEn utilisant le m\xeame objet du dernier exemple :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const user = { name: 'John Doe', age: 34 };\n")),Object(o.mdx)("p",null,"Voici comment vous pouvez donner de nouveaux noms de variable dans l'affectation :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { name: userName, age: userAge } = user;\n// userName = 'John Doe', userAge = 34\n")),Object(o.mdx)("p",null,"Vous pouvez le lire comme \xab obtenir la valeur de ",Object(o.mdx)("inlineCode",{parentName:"p"},"user.name")," et l'assigner \xe0  une nouvelle variable nomm\xe9e ",Object(o.mdx)("inlineCode",{parentName:"p"},"userName")," \xbb et ainsi de suite."),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Remplacez les deux affectations par une affectation de d\xe9composition  \xe9quivalente. Elle doit toujours affecter aux variables ",Object(o.mdx)("inlineCode",{parentName:"p"},"highToday")," et  ",Object(o.mdx)("inlineCode",{parentName:"p"},"highTomorrow")," les valeurs ",Object(o.mdx)("inlineCode",{parentName:"p"},"today")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"tomorrow")," \xe0 partir de l'objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"HIGH_TEMPERATURES"),"."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"Vous devez supprimer la syntaxe d'affectation ES5.\nVous devez utiliser la d\xe9composition pour cr\xe9er la variable ",Object(o.mdx)("inlineCode",{parentName:"p"},"highToday"),".\nVous devez utiliser la d\xe9composition pour cr\xe9er la variable ",Object(o.mdx)("inlineCode",{parentName:"p"},"highTomorrow"),".\n",Object(o.mdx)("inlineCode",{parentName:"p"},"highToday")," doit \xeatre \xe9gal \xe0 ",Object(o.mdx)("inlineCode",{parentName:"p"},"77")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"highTomorrow")," doit \xeatre \xe9gal \xe0 ",Object(o.mdx)("inlineCode",{parentName:"p"},"80"),".")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const HIGH_TEMPERATURES = {\n  yesterday: 75,\n  today: 77,\n  tomorrow: 80\n};\n// Only change code below this line  \nconst highToday = HIGH_TEMPERATURES.today;\nconst highTomorrow = HIGH_TEMPERATURES.tomorrow;\n// Only change code above this line\n")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const HIGH_TEMPERATURES = {\n  yesterday: 75,\n  today: 77,\n  tomorrow: 80\n};  \nconst { today: highToday, tomorrow: highTomorrow } = HIGH_TEMPERATURES;\nconsole.log(highToday); // 77\nconsole.log(highTomorrow); // 80\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"13-utiliser-laffectation-de-d\xe9composition-pour-affecter-des-variables-\xe0-partir-dobjets-imbriqu\xe9s"},"13. Utiliser l'affectation de d\xe9composition pour affecter des variables \xe0 partir d'objets imbriqu\xe9s"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/use-destructuring-assignment-to-assign-variables-from-nested-objects"}),"Learn ES6: Use Destructuring Assignment to Assign Variables from Nested Objects | freeCodeCamp.org")),Object(o.mdx)("p",null,"Vous pouvez utiliser les m\xeames principes des deux le\xe7ons pr\xe9c\xe9dentes pour d\xe9composer les valeurs d'objets imbriqu\xe9s.\nEn utilisant un objet similaire aux exemples pr\xe9c\xe9dents :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const user = {\n  johnDoe: { \n    age: 34,\n    email: 'johnDoe@freeCodeCamp.com'\n  }\n};\n")),Object(o.mdx)("p",null,"Voici comment extraire les valeurs des propri\xe9t\xe9s d'objet et les affecter \xe0 des variables du m\xeame nom :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { johnDoe: { age, email }} = user;\n")),Object(o.mdx)("p",null,"Et voici comment attribuer les valeurs des propri\xe9t\xe9s d'un objet \xe0 des variables avec des noms diff\xe9rents :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const { johnDoe: { age: userAge, email: userEmail }} = user;\n")),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Remplacez les deux affectations par une affectation de d\xe9composition  \xe9quivalente. Elle doit toujours affecter aux variables ",Object(o.mdx)("inlineCode",{parentName:"p"},"lowToday")," et  ",Object(o.mdx)("inlineCode",{parentName:"p"},"highToday")," les valeurs de ",Object(o.mdx)("inlineCode",{parentName:"p"},"today.low")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"today.high")," de l'objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"LOCAL_FORECAST"),"."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"Vous devez supprimer la syntaxe d'affectation ES5.\nVous devez utiliser la d\xe9composition pour cr\xe9er la variable ",Object(o.mdx)("inlineCode",{parentName:"p"},"lowToday"),".\nVous devez utiliser la d\xe9composition pour cr\xe9er la variable ",Object(o.mdx)("inlineCode",{parentName:"p"},"highToday"),".\n",Object(o.mdx)("inlineCode",{parentName:"p"},"lowToday")," doit \xeatre \xe9gal \xe0 ",Object(o.mdx)("inlineCode",{parentName:"p"},"64")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"highToday")," doit \xeatre \xe9gal \xe0 ",Object(o.mdx)("inlineCode",{parentName:"p"},"77"),".")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const LOCAL_FORECAST = {\n  yesterday: { low: 61, high: 75 },\n  today: { low: 64, high: 77 },\n  tomorrow: { low: 68, high: 80 }\n};\n// Only change code below this line  \nconst lowToday = LOCAL_FORECAST.today.low;\nconst highToday = LOCAL_FORECAST.today.high;\n// Only change code above this line\n")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const LOCAL_FORECAST = {\n  yesterday: { low: 61, high: 75 },\n  today: { low: 64, high: 77 },\n  tomorrow: { low: 68, high: 80 }\n};\nconst { today: { low: lowToday, high: highToday }} = LOCAL_FORECAST;\nconsole.log(lowToday); // 64\nconsole.log(highToday); // 77\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"14-utiliser-laffectation-de-d\xe9composition-pour-affecter-des-variables-\xe0-partir-de-tableaux"},"14. Utiliser l'affectation de d\xe9composition pour affecter des variables \xe0 partir de tableaux"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/use-destructuring-assignment-to-assign-variables-from-arrays"}),"Learn ES6: Use Destructuring Assignment to Assign Variables from Arrays | freeCodeCamp.org")),Object(o.mdx)("p",null,"ES6 rend la d\xe9composition des tableaux aussi simple que la d\xe9composition des objets.\nUne diff\xe9rence cl\xe9 entre l'op\xe9rateur de propagation et la d\xe9composition  de tableau est que l'op\xe9rateur de d\xe9composition d\xe9compresse tout le  contenu d'un tableau dans une liste s\xe9par\xe9e par des virgules. Par  cons\xe9quent, vous ne pouvez pas s\xe9lectionner ou choisir les \xe9l\xe9ments que  vous souhaitez affecter aux variables.\nLa d\xe9composition d'un tableau nous permet de faire exactement cela :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const [a, b] = [1, 2, 3, 4, 5, 6];\nconsole.log(a, b); // 1, 2\n")),Object(o.mdx)("p",null,"La variable ",Object(o.mdx)("inlineCode",{parentName:"p"},"a")," re\xe7oit la premi\xe8re valeur du tableau et ",Object(o.mdx)("inlineCode",{parentName:"p"},"b")," la deuxi\xe8me valeur du tableau. Nous pouvons \xe9galement acc\xe9der \xe0 la valeur \xe0 n'importe quel index dans un tableau avec d\xe9composition en utilisant des virgules  pour atteindre l'index souhait\xe9 :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const [a, b,,, c] = [1, 2, 3, 4, 5, 6];\nconsole.log(a, b, c); // 1, 2, 5\n")),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Utilisez l'affectation de d\xe9composition pour permuter les valeurs de ",Object(o.mdx)("inlineCode",{parentName:"p"},"a")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"b"),"  afin que ",Object(o.mdx)("inlineCode",{parentName:"p"},"a")," re\xe7oive la valeur stock\xe9e dans ",Object(o.mdx)("inlineCode",{parentName:"p"},"b")," et que ",Object(o.mdx)("inlineCode",{parentName:"p"},"b")," re\xe7oive la valeur stock\xe9e dans ",Object(o.mdx)("inlineCode",{parentName:"p"},"a"),"."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"La valeur de ",Object(o.mdx)("inlineCode",{parentName:"p"},"a")," doit \xeatre ",Object(o.mdx)("inlineCode",{parentName:"p"},"6"),", apr\xe8s \xe9change.\nLa valeur de ",Object(o.mdx)("inlineCode",{parentName:"p"},"b")," doit \xeatre ",Object(o.mdx)("inlineCode",{parentName:"p"},"8"),", apr\xe8s \xe9change.\nVous devez utiliser la d\xe9composition de tableau pour permuter ",Object(o.mdx)("inlineCode",{parentName:"p"},"a")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"b"),".")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let a = 8, b = 6;\n// Only change code below this line\n[a, b] = [b, a];\nconsole.log(a); // 6\nconsole.log(b); // 8\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"15-utiliser-laffectation-de-d\xe9composition-avec-le-param\xe8tre-rest-pour-r\xe9attribuer-des-\xe9l\xe9ments-de-tableau"},"15. Utiliser l\u2019affectation de d\xe9composition avec le param\xe8tre Rest pour r\xe9attribuer des \xe9l\xe9ments de tableau"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/use-destructuring-assignment-with-the-rest-parameter-to-reassign-array-elements"}),"Learn ES6: Use Destructuring Assignment with the Rest Parameter to Reassign Array Elements | freeCodeCamp.org")),Object(o.mdx)("p",null,"Dans certaines situations impliquant la d\xe9composition d'un tableau, nous pourrions vouloir rassembler le reste des \xe9l\xe9ments dans un tableau s\xe9par\xe9.\nLe r\xe9sultat est similaire \xe0 ",Object(o.mdx)("inlineCode",{parentName:"p"},"Array.prototype.slice()"),", comme indiqu\xe9 ci-dessous :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const [a, b, ...arr] = [1, 2, 3, 4, 5, 7];\nconsole.log(a, b); // 1, 2\nconsole.log(arr); // [3, 4, 5, 7]\n")),Object(o.mdx)("p",null,"Les variables ",Object(o.mdx)("inlineCode",{parentName:"p"},"a")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"b")," prennent les premi\xe8re et deuxi\xe8me valeurs du tableau.  Apr\xe8s cela, en raison de la pr\xe9sence du param\xe8tre ",Object(o.mdx)("inlineCode",{parentName:"p"},"rest"),", ",Object(o.mdx)("inlineCode",{parentName:"p"},"arr")," obtient le  reste des valeurs sous la forme d'un tableau. L'\xe9l\xe9ment ",Object(o.mdx)("inlineCode",{parentName:"p"},"rest")," ne  fonctionne correctement que comme derni\xe8re variable de la liste. Ainsi, vous ne pouvez pas utiliser le param\xe8tre ",Object(o.mdx)("inlineCode",{parentName:"p"},"rest")," pour intercepter un  sous-tableau qui laisse de c\xf4t\xe9 le dernier \xe9l\xe9ment du tableau d'origine."),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Utilisez l'affectation de d\xe9composition avec le param\xe8tre ",Object(o.mdx)("inlineCode",{parentName:"p"},"rest")," pour effectuer un ",Object(o.mdx)("inlineCode",{parentName:"p"},"Array.prototype.slice()")," efficace de sorte que ",Object(o.mdx)("inlineCode",{parentName:"p"},"arr")," soit un sous-tableau de la source du tableau d'origine avec les deux premiers  \xe9l\xe9ments omis."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},Object(o.mdx)("inlineCode",{parentName:"p"},"arr")," doit \xeatre ",Object(o.mdx)("inlineCode",{parentName:"p"},"[3,4,5,6,7,8,9,10]"),".\n",Object(o.mdx)("inlineCode",{parentName:"p"},"source")," doit \xeatre ",Object(o.mdx)("inlineCode",{parentName:"p"},"[1,2,3,4,5,6,7,8,9,10]"),".\n",Object(o.mdx)("inlineCode",{parentName:"p"},"Array.slice()")," ne doit pas \xeatre utilis\xe9.\nLa d\xe9composition sur ",Object(o.mdx)("inlineCode",{parentName:"p"},"list")," doit \xeatre utilis\xe9e.")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const source = [1,2,3,4,5,6,7,8,9,10];\nfunction removeFirstTwo(list) {\n  "use strict";\n  // Only change code below this line\n  const arr = list; // Change this line\n  // Only change code above this line\n  return arr;\n}\nconst arr = removeFirstTwo(source);\n')),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const source = [1,2,3,4,5,6,7,8,9,10];\nfunction removeFirstTwo(list) {\n  "use strict";\n  const [a, b, ...arr] = list;\n  return arr;  \n}\nconst arr = removeFirstTwo(source);\nconsole.log(source); // [1,2,3,4,5,6,7,8,9,10]\nconsole.log(arr); // [3,4,5,6,7,8,9,10]\n')),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"16-utiliser-laffectation-de-d\xe9composition-pour-transmettre-un-objet-en-tant-que-param\xe8tres-dune-fonction"},"16. Utiliser l'affectation de d\xe9composition pour transmettre un objet en tant que param\xe8tres d'une fonction"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/use-destructuring-assignment-to-pass-an-object-as-a-functions-parameters"}),"Learn ES6: Use Destructuring Assignment to Pass an Object as a Function's Parameters | freeCodeCamp.org")),Object(o.mdx)("p",null,"Dans certains cas, vous pouvez d\xe9structurer l'objet dans un argument de fonction lui-m\xeame.\nConsid\xe9rez le code ci-dessous :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const profileUpdate = (profileData) => {\n  const { name, age, nationality, location } = profileData;\n  // faire quelque chose avec ces variables\n}\n")),Object(o.mdx)("p",null,"Cela d\xe9truit efficacement l'objet envoy\xe9 dans la fonction. Cela peut \xe9galement \xeatre fait sur place :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const profileUpdate = ({ name, age, nationality, location }) => {\n  / * faire quelque chose avec ces champs * /\n}\n")),Object(o.mdx)("p",null,"Lorsque ",Object(o.mdx)("inlineCode",{parentName:"p"},"profileData")," est pass\xe9 \xe0 la fonction ci-dessus, les valeurs sont  d\xe9structur\xe9es du param\xe8tre de fonction pour \xeatre utilis\xe9es dans la  fonction."),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Utilisez l'affectation de d\xe9composition dans  l'argument de la fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"half")," pour envoyer uniquement ",Object(o.mdx)("inlineCode",{parentName:"p"},"max")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"min")," \xe0  l'int\xe9rieur de la fonction."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},Object(o.mdx)("inlineCode",{parentName:"p"},"stats")," devrait \xeatre un objet.\n",Object(o.mdx)("inlineCode",{parentName:"p"},"half(stats)")," doit \xeatre ",Object(o.mdx)("inlineCode",{parentName:"p"},"28.015"),".\nLa d\xe9composition doit \xeatre utilis\xe9e.\nLe param\xe8tre d\xe9compos\xe9 doit \xeatre utilis\xe9.")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const stats = {\n  max: 56.78,\n  standard_deviation: 4.34,\n  median: 34.54,\n  mode: 23.87,\n  min: -0.75,\n  average: 35.85\n};\n// Only change code below this line\nconst half = (stats) => (stats.max + stats.min) / 2.0; \n// Only change code above this line\n")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const stats = {\n  max: 56.78,\n  standard_deviation: 4.34,\n  median: 34.54,\n  mode: 23.87,\n  min: -0.75,\n  average: 35.85\n};\nconst half = ({max, min}) => {\n  return (max + min) / 2.0;\n};\nconsole.log(half(stats)); // 28.015\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"17-cr\xe9er-des-cha\xeenes-\xe0-laide-de-litt\xe9raux-de-gabarits"},"17. Cr\xe9er des cha\xeenes \xe0 l'aide de litt\xe9raux de gabarits"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/create-strings-using-template-literals"}),"Learn ES6: Create Strings using Template Literals | freeCodeCamp.org")),Object(o.mdx)("p",null,"Une nouvelle fonctionnalit\xe9 d'ES6 est le ",Object(o.mdx)("em",{parentName:"p"},"litt\xe9ral de gabarits"),". Il s'agit  d'un type sp\xe9cial de cha\xeene qui facilite la cr\xe9ation de cha\xeenes  complexes.\nLes litt\xe9raux de gabarits vous permettent de cr\xe9er des  cha\xeenes multilignes et d'utiliser des fonctionnalit\xe9s d'interpolation de cha\xeene pour cr\xe9er des cha\xeenes.\nConsid\xe9rez le code ci-dessous :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const person = {\n  name: \"Zodiac Hasbro\",\n  age: 56\n};\n// Mod\xe8le litt\xe9ral avec interpolation multiligne et cha\xeene\nconst greeting = `Bonjour, mon nom est ${person.name}!\nJ'ai ${person.age} ans.`;\nconsole.log (greeting); // imprime\n// Bonjour, je m'appelle Zodiac Hasbro!\n// J'ai 56 ans.\n")),Object(o.mdx)("p",null,"Beaucoup de choses s'y sont pass\xe9es. Tout d'abord, l'exemple utilise des accents invers\xe9s (backticks) (`",Object(o.mdx)("inlineCode",{parentName:"p"}," "),"), pas des guillemets (quotes) (",Object(o.mdx)("inlineCode",{parentName:"p"},"'")," ou ",Object(o.mdx)("inlineCode",{parentName:"p"},'"'),"), pour envelopper la cha\xeene.  Deuxi\xe8mement, notez que la cha\xeene est multiligne, \xe0 la fois dans le code et dans la sortie. Cela \xe9vite l'insertion ",Object(o.mdx)("inlineCode",{parentName:"p"},"\\n")," dans les cha\xeenes. La  syntaxe ",Object(o.mdx)("inlineCode",{parentName:"p"},"${variable}")," utilis\xe9e ci-dessus est un espace r\xe9serv\xe9. En gros,  vous n'aurez plus \xe0 utiliser la concat\xe9nation avec l'op\xe9rateur ",Object(o.mdx)("inlineCode",{parentName:"p"},"+"),". Pour  ajouter des variables aux cha\xeenes, d\xe9posez simplement la variable dans  une cha\xeene de mod\xe8le et enveloppez-la avec ",Object(o.mdx)("inlineCode",{parentName:"p"},"${")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"}"),". De m\xeame, vous pouvez  inclure d'autres expressions dans votre cha\xeene litt\xe9rale, par exemple ",Object(o.mdx)("inlineCode",{parentName:"p"},"$ {a + b}"),". Cette nouvelle fa\xe7on de cr\xe9er des cha\xeenes vous offre plus de  flexibilit\xe9 pour cr\xe9er des cha\xeenes robustes."),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Utilisez la syntaxe  litt\xe9rale de gabarits avec des accents invers\xe9s pour cr\xe9er un tableau de  cha\xeenes d'\xe9l\xe9ments de liste (",Object(o.mdx)("inlineCode",{parentName:"p"},"li"),"). Le texte de chaque \xe9l\xe9ment de liste  doit \xeatre l'un des \xe9l\xe9ments de tableau de la propri\xe9t\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"failure")," sur  l'objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"result")," et avoir un attribut ",Object(o.mdx)("inlineCode",{parentName:"p"},"class")," avec la valeur ",Object(o.mdx)("inlineCode",{parentName:"p"},"text-warning"),". La fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"makeList")," doit retourner le tableau des cha\xeenes d'\xe9l\xe9ments de liste.\nUtilisez une m\xe9thode it\xe9ratrice (tout type de boucle) pour obtenir la sortie souhait\xe9e (illustr\xe9e ci-dessous)."),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"[\n  '<li class=\"text-warning\">no-var</li>',\n  '<li class=\"text-warning\">var-on-top</li>',\n  '<li class=\"text-warning\">linebreak</li>'\n]\n")),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},Object(o.mdx)("inlineCode",{parentName:"p"},"failuresList")," doit \xeatre un tableau contenant des messages ",Object(o.mdx)("inlineCode",{parentName:"p"},"result failure"),".\n",Object(o.mdx)("inlineCode",{parentName:"p"},"failuresList")," doit \xeatre \xe9gal \xe0 la sortie sp\xe9cifi\xe9e.\nLes cha\xeenes de gabarits et l'interpolation d'expression doivent \xeatre utilis\xe9es.\nUn it\xe9rateur doit \xeatre utilis\xe9.")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const result = {\n  success: ["max-length", "no-amd", "prefer-arrow-functions"],\n  failure: ["no-var", "var-on-top", "linebreak"],\n  skipped: ["no-extra-semi", "no-dup-keys"]\n};\nfunction makeList(arr) {\n  // Changer uniquement le code en dessous de cette ligne\n  const failureItems = [];\n  // Ne changez le code qu\'au-dessus de cette ligne\n  return failureItems;\n}\nconst failuresList = makeList(result.failure);\n')),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const result = {\n  success: ["max-length", "no-amd", "prefer-arrow-functions"],\n  failure: ["no-var", "var-on-top", "linebreak"],\n  skipped: ["no-extra-semi", "no-dup-keys"]\n};\nfunction makeList(arr) {\n  let failureItems = [];\n  for (let i = 0; i < result.failure.length; i++) {\n    failureItems.push(`<li class="text-warning">${result.failure[i]}</li>`)   \n  };\n  return failureItems;\n}\nconst failuresList = makeList(result.failure);\nconsole.log(failuresList)\n// [ \'<li class="text-warning">no-var</li>\',\n//  \'<li class="text-warning">var-on-top</li>\',\n//  \'<li class="text-warning">linebreak</li>\' ]\n')),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"18-\xe9crire-des-d\xe9clarations-concises-de-litt\xe9ral-dobjet-\xe0-laide-dun-raccourci-de-propri\xe9t\xe9-dobjet"},"18. \xc9crire des d\xe9clarations concises de litt\xe9ral d'objet \xe0 l'aide d'un raccourci de propri\xe9t\xe9 d'objet"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/write-concise-object-literal-declarations-using-object-property-shorthand"}),"Learn ES6: Write Concise Object Literal Declarations Using Object Property Shorthand | freeCodeCamp.org")),Object(o.mdx)("p",null,"ES6 ajoute un support int\xe9ressant pour d\xe9finir facilement les litt\xe9raux d'objets.\nConsid\xe9rez le code suivant :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const getMousePosition = (x, y) => ({\n  x: x,\n  y: y\n});\n")),Object(o.mdx)("p",null,Object(o.mdx)("inlineCode",{parentName:"p"},"getMousePosition")," est une fonction simple qui renvoie un objet contenant deux propri\xe9t\xe9s. ES6 fournit le sucre syntaxique pour \xe9liminer la redondance d'avoir \xe0  \xe9crire ",Object(o.mdx)("inlineCode",{parentName:"p"},"x: x"),". Vous pouvez simplement \xe9crire ",Object(o.mdx)("inlineCode",{parentName:"p"},"x")," une fois, et il sera  converti en ",Object(o.mdx)("inlineCode",{parentName:"p"},"x: x")," (ou quelque chose d'\xe9quivalent) sous le capot. Voici  la m\xeame fonction ci-dessus r\xe9\xe9crite pour utiliser cette nouvelle  syntaxe :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const getMousePosition = (x, y) => ({ x, y });\n")),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Utilisez un raccourci de propri\xe9t\xe9 d'objet avec des litt\xe9raux d'objet pour cr\xe9er et renvoyer un objet avec des propri\xe9t\xe9s ",Object(o.mdx)("inlineCode",{parentName:"p"},"name"),", ",Object(o.mdx)("inlineCode",{parentName:"p"},"age")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"gender"),"."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},Object(o.mdx)("inlineCode",{parentName:"p"},'createPerson("Zodiac Hasbro", 56, "male")')," doit renvoyer ",Object(o.mdx)("inlineCode",{parentName:"p"},'{name: "Zodiac Hasbro", age: 56, gender: "male"}'),".\nVotre code ne doit pas utiliser ",Object(o.mdx)("inlineCode",{parentName:"p"},"key:value"),".")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const createPerson = (name, age, gender) => {\n  "use strict";\n  // Changer uniquement le code en dessous de cette ligne\n  return {\n    name: name,\n    age: age,\n    gender: gender\n  };\n  // Ne changez le code qu\'au-dessus de cette ligne\n};\n')),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const createPerson = (name, age, gender) => {\n  "use strict";\n  return { name, age, gender };\n};\nconsole.log(createPerson("Zodiac Hasbro", 56, "male"))\n// { name: \'Zodiac Hasbro\', age: 56, gender: \'male\' }\n')),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"19-\xe9crire-des-fonctions-d\xe9claratives-concises-avec-es6"},"19. \xc9crire des fonctions d\xe9claratives concises avec ES6"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/write-concise-declarative-functions-with-es6"}),"Learn ES6: Write Concise Declarative Functions with ES6 | freeCodeCamp.org")),Object(o.mdx)("p",null,"Lors de la d\xe9finition de fonctions dans des objets dans ES5, nous devons utiliser le mot-cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"function")," comme suit :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const person = {\n  name: "Taylor",\n  sayHello: function() {\n    return `Hello! My name is ${this.name}.`;\n  }\n};\n')),Object(o.mdx)("p",null,"Avec ES6, vous pouvez supprimer compl\xe8tement le mot-cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"function")," et les  deux points lors de la d\xe9finition de fonctions dans les objets. Voici un exemple de cette syntaxe :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const person = {\n  name: "Taylor",\n  sayHello() {\n    return `Hello! My name is ${this.name}.`;\n  }\n};\n')),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Refactorisez la fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"setGear")," \xe0 l'int\xe9rieur de l'objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"bicycle")," pour utiliser la syntaxe abr\xe9g\xe9e d\xe9crite ci-dessus."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"L'expression de fonction traditionnelle ne doit pas \xeatre utilis\xe9e.\n",Object(o.mdx)("inlineCode",{parentName:"p"},"setGear")," doit \xeatre une fonction d\xe9clarative.\n",Object(o.mdx)("inlineCode",{parentName:"p"},"bike.setGear(48)")," doit changer la valeur de ",Object(o.mdx)("inlineCode",{parentName:"p"},"gear")," \xe0 ",Object(o.mdx)("inlineCode",{parentName:"p"},"48"),".")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// Changer uniquement le code en dessous de cette ligne\nconst bicycle = {\n  gear: 2,\n  setGear: function(newGear) {\n    this.gear = newGear;\n  }\n};\n// Only change code above this line\nbicycle.setGear(3);\nconsole.log(bicycle.gear);\n")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const bicycle = {\n  gear: 2,\n  setGear(newGear) {\n    this.gear = newGear;\n  }\n};\nbicycle.setGear(48);\nconsole.log(bicycle.gear); // 48\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"20-utiliser-la-syntaxe-de-classe-pour-d\xe9finir-une-fonction-constructeur"},"20. Utiliser la syntaxe de classe pour d\xe9finir une fonction constructeur"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/use-class-syntax-to-define-a-constructor-function"}),"Learn ES6: Use class Syntax to Define a Constructor Function | freeCodeCamp.org")),Object(o.mdx)("p",null,"ES6 fournit une nouvelle syntaxe pour cr\xe9er des objets, \xe0 l'aide du mot-cl\xe9 ",Object(o.mdx)("em",{parentName:"p"},"class"),".\nIl convient de noter que la syntaxe ",Object(o.mdx)("inlineCode",{parentName:"p"},"class")," n'est que de la syntaxe, et  non une impl\xe9mentation \xe0 part enti\xe8re bas\xe9e sur les classes d'un  paradigme orient\xe9 objet, contrairement \xe0 des langages tels que Java,  Python, Ruby, etc.\nDans ES5, nous d\xe9finissons g\xe9n\xe9ralement une fonction constructeur et utilisons le mot-cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"new")," pour instancier un objet."),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"var SpaceShuttle = function(targetPlanet){\n  this.targetPlanet = targetPlanet;\n}\nvar zeus = new SpaceShuttle('Jupiter');\n")),Object(o.mdx)("p",null,"La syntaxe ",Object(o.mdx)("inlineCode",{parentName:"p"},"class")," remplace simplement la cr\xe9ation de la fonction constructeur :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"class SpaceShuttle {\n  constructor(targetPlanet) {\n    this.targetPlanet = targetPlanet;\n  }\n}\nconst zeus = new SpaceShuttle('Jupiter');\n")),Object(o.mdx)("p",null,"Il est \xe0 noter que le mot-cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"class")," d\xe9clare une nouvelle fonction, \xe0  laquelle un constructeur est ajout\xe9. Ce constructeur est appel\xe9 lorsque ",Object(o.mdx)("inlineCode",{parentName:"p"},"new")," est appel\xe9 pour cr\xe9er un nouvel objet.\n",Object(o.mdx)("strong",{parentName:"p"},"Remarques :")),Object(o.mdx)("ul",null,Object(o.mdx)("li",{parentName:"ul"},"UpperCamelCase doit \xeatre utilis\xe9 par convention pour les noms de classe ES6, comme dans ",Object(o.mdx)("inlineCode",{parentName:"li"},"SpaceShuttle")," utilis\xe9 ci-dessus."),Object(o.mdx)("li",{parentName:"ul"},"La m\xe9thode constructeur est une m\xe9thode sp\xe9ciale pour cr\xe9er et  initialiser un objet cr\xe9\xe9 avec une classe. Vous en apprendrez plus \xe0 ce  sujet dans la section Programmation orient\xe9e objet de la certification  des algorithmes JavaScript et des structures de donn\xe9es.")),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Utilisez le mot-cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"class")," et \xe9crivez un constructeur pour cr\xe9er la classe ",Object(o.mdx)("inlineCode",{parentName:"p"},"Vegetable"),".\nLa classe ",Object(o.mdx)("inlineCode",{parentName:"p"},"Vegetable")," vous permet de cr\xe9er un objet l\xe9gume avec une propri\xe9t\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"name")," qui est transmis au constructeur."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},Object(o.mdx)("inlineCode",{parentName:"p"},"Vegetable")," doit \xeatre une classe avec une m\xe9thode ",Object(o.mdx)("inlineCode",{parentName:"p"},"constructor")," d\xe9finie.\nLe mot-cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"class")," doit \xeatre utilis\xe9.\n",Object(o.mdx)("inlineCode",{parentName:"p"},"Vegetable")," doit pouvoir \xeatre instanci\xe9.\n",Object(o.mdx)("inlineCode",{parentName:"p"},"carrot.name")," doit renvoyer ",Object(o.mdx)("inlineCode",{parentName:"p"},"carrot"),".")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// Changer uniquement le code en dessous de cette ligne\n// Changer uniquement le code au-dessus de cette ligne\nconst carrot = new Vegetable('carrot');\nconsole.log(carrot.name); // Doit afficher 'carrot'\n")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"class Vegetable {\n  constructor(name) {\n    this.name = name;\n  };\n};\nconst carrot = new Vegetable('carrot');\nconsole.log(carrot.name); // carrot\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"21-utiliser-des-accesseurs-getters-et-des-mutateurs-setters-pour-contr\xf4ler-lacc\xe8s-\xe0-un-objet"},"21. Utiliser des accesseurs (getters) et des mutateurs (setters) pour contr\xf4ler l'acc\xe8s \xe0 un objet"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/use-getters-and-setters-to-control-access-to-an-object"}),"Learn ES6: Use getters and setters to Control Access to an Object | freeCodeCamp.org")),Object(o.mdx)("p",null,"Vous pouvez obtenir des valeurs d'un objet et d\xe9finir la valeur d'une propri\xe9t\xe9 dans un objet.\nCelles-ci sont classiquement appel\xe9es ",Object(o.mdx)("em",{parentName:"p"},"getters")," et ",Object(o.mdx)("em",{parentName:"p"},"setters"),".\nLes fonctions accesseur sont cens\xe9es simplement renvoyer (get) la valeur de la variable priv\xe9e d'un objet \xe0 l'utilisateur sans que  l'utilisateur acc\xe8de directement \xe0 la variable priv\xe9e.\nLes fonctions mutateur sont destin\xe9es \xe0 modifier (set) la valeur de la variable priv\xe9e d'un objet en fonction de la valeur transmise \xe0 la  fonction de d\xe9finition. Ce changement peut impliquer des calculs, voire  \xe9craser compl\xe8tement la valeur pr\xe9c\xe9dente."),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"class Book {\n  constructor(author) {\n    this._author = author;\n  }\n  // getter\n  get writer() {\n    return this._author;\n  }\n  // setter\n  set writer(updatedAuthor) {\n    this._author = updatedAuthor;\n  }\n}\nconst novel = new Book('anonymous');\nconsole.log(novel.writer);  // anonymous\nnovel.writer = 'newAuthor';\nconsole.log(novel.writer);  // newAuthor\n")),Object(o.mdx)("p",null,"Notez la syntaxe utilis\xe9e pour appeler le getter et le setter. Ils ne ressemblent m\xeame pas \xe0 des fonctions. Les getters et les setters sont  importants car ils masquent les d\xe9tails d'impl\xe9mentation internes. ",Object(o.mdx)("strong",{parentName:"p"},"Remarque :")," il est conventionnel de faire pr\xe9c\xe9der le nom d'une variable priv\xe9e d'un trait de soulignement (",Object(o.mdx)("inlineCode",{parentName:"p"},"_"),"). Cependant, la pratique elle-m\xeame  ne rend pas une variable priv\xe9e."),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Utilisez le mot-cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"class")," pour cr\xe9er une classe ",Object(o.mdx)("inlineCode",{parentName:"p"},"Thermostat"),". Le constructeur accepte une temp\xe9rature Fahrenheit.\nCr\xe9ez maintenant un ",Object(o.mdx)("inlineCode",{parentName:"p"},"getter")," et un ",Object(o.mdx)("inlineCode",{parentName:"p"},"setter")," dans la classe, pour obtenir la temp\xe9rature en Celsius.\nN'oubliez pas que ",Object(o.mdx)("inlineCode",{parentName:"p"},"C = 5/9 * (F - 32)")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"F = C * 9,0 / 5 + 32"),", o\xf9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"F")," est la valeur  de la temp\xe9rature en Fahrenheit et ",Object(o.mdx)("inlineCode",{parentName:"p"},"C")," est la valeur de la m\xeame  temp\xe9rature en Celsius.\n",Object(o.mdx)("strong",{parentName:"p"},"Remarque :")," lorsque vous impl\xe9mentez cela, vous suivrez la temp\xe9rature \xe0 l'int\xe9rieur de la classe sur une \xe9chelle,  soit Fahrenheit, soit Celsius.\nC'est la puissance d'un getter et  d'un setter. Vous cr\xe9ez une API pour un autre utilisateur, qui peut  obtenir le r\xe9sultat correct quel que soit celui que vous suivez.\nEn d'autres termes, vous faites abstraction des d\xe9tails d'impl\xe9mentation de l'utilisateur."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},Object(o.mdx)("inlineCode",{parentName:"p"},"Thermostat")," doit \xeatre une ",Object(o.mdx)("inlineCode",{parentName:"p"},"class")," avec une m\xe9thode ",Object(o.mdx)("inlineCode",{parentName:"p"},"constructor")," d\xe9finie.\nLe mot-cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"class")," doit \xeatre utilis\xe9.\n",Object(o.mdx)("inlineCode",{parentName:"p"},"Thermostat")," doit pouvoir \xeatre instanci\xe9.\nUn ",Object(o.mdx)("inlineCode",{parentName:"p"},"getter")," doit \xeatre d\xe9fini.\nUn ",Object(o.mdx)("inlineCode",{parentName:"p"},"setter")," doit \xeatre d\xe9fini.\nL'appel du ",Object(o.mdx)("inlineCode",{parentName:"p"},"setter")," devrait r\xe9gler la temp\xe9rature.")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// Changer uniquement le code en dessous de cette ligne\n// Ne changez le code qu'au-dessus de cette ligne\nconst thermos = new Thermostat(76); // R\xe9glage en \xe9chelle Fahrenheit\nlet temp = thermos.temperature; // 24.44 en Celsius\nthermos.temperature = 26;\ntemp = thermos.temperature; // 26 en Celsius\n")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"class Thermostat {\n  constructor(Fahrenheit) {\n    this._Fahrenheit = (Fahrenheit - 32) * 5/9;\n  };\n  get temperature() {\n    return this._Fahrenheit;\n  };\n  set temperature(Celsius) {\n    this._Fahrenheit = Celsius;\n  };\n};\nconst thermos = new Thermostat(76); // Setting in Fahrenheit scale\nlet temp = thermos.temperature; // 24.44 in Celsius\nthermos.temperature = 26;\ntemp = thermos.temperature; // 26 in Celsius\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"22-cr\xe9er-un-module-script"},"22. Cr\xe9er un module script"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/create-a-module-script"}),"Learn ES6: Create a Module Script | freeCodeCamp.org")),Object(o.mdx)("p",null,"JavaScript a commenc\xe9 avec un petit r\xf4le \xe0 jouer sur un site Web  essentiellement HTML. Aujourd'hui, c'est \xe9norme, et certains sites Web  sont presque enti\xe8rement construits avec JavaScript. Afin de rendre  JavaScript plus modulaire, propre et maintenable ; ES6 a introduit un  moyen de partager facilement du code entre des fichiers JavaScript. Cela implique l'exportation de parties d'un fichier \xe0 utiliser dans un ou  plusieurs autres fichiers et l'importation des parties dont vous avez  besoin, l\xe0 o\xf9 vous en avez besoin. Afin de profiter de cette  fonctionnalit\xe9, vous devez cr\xe9er un script dans votre document HTML avec un type de module. Voici un exemple :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),'<script type="module" src="filename.js"><\/script>\n')),Object(o.mdx)("p",null,"Un script qui utilise ce type ",Object(o.mdx)("inlineCode",{parentName:"p"},"module")," peut d\xe9sormais utiliser les  fonctionnalit\xe9s ",Object(o.mdx)("inlineCode",{parentName:"p"},"import")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"export")," que vous d\xe9couvrirez dans les prochains d\xe9fis."),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Ajoutez un script au document HTML de type ",Object(o.mdx)("inlineCode",{parentName:"p"},"module")," et donnez-lui le fichier source ",Object(o.mdx)("inlineCode",{parentName:"p"},"index.js"),"."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"Vous devez cr\xe9er une balise ",Object(o.mdx)("inlineCode",{parentName:"p"},"script"),".\nVotre balise ",Object(o.mdx)("inlineCode",{parentName:"p"},"script")," doit \xeatre de type ",Object(o.mdx)("inlineCode",{parentName:"p"},"module"),".\nVotre balise ",Object(o.mdx)("inlineCode",{parentName:"p"},"script")," doit avoir comme ",Object(o.mdx)("inlineCode",{parentName:"p"},"src")," ",Object(o.mdx)("inlineCode",{parentName:"p"},"index.js"),".")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),"<html>\n  <body>\n    \x3c!-- Changer uniquement le code en dessous de cette ligne --\x3e\n    \x3c!-- Ne changez le code qu'au-dessus de cette ligne --\x3e\n  </body>\n</html>\n")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),'<html>\n  <body>\n    <script type="module" src="index.js"><\/script>\n  </body>\n</html>\n')),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"23-utiliser-export-pour-partager-un-bloc-de-code"},"23. Utiliser ",Object(o.mdx)("inlineCode",{parentName:"h2"},"export")," pour partager un bloc de code"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/use-export-to-share-a-code-block"}),"Learn ES6: Use export to Share a Code Block | freeCodeCamp.org")),Object(o.mdx)("p",null,"Imaginez un fichier appel\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"math_functions.js")," qui contient plusieurs  fonctions li\xe9es aux op\xe9rations math\xe9matiques. L'un d'eux est stock\xe9 dans une variable, ",Object(o.mdx)("inlineCode",{parentName:"p"},"add"),", qui prend deux nombres et renvoie leur somme. Vous  souhaitez utiliser cette fonction dans plusieurs fichiers JavaScript  diff\xe9rents. Pour le partager avec ces autres fichiers, vous devez  d'abord l'exporter."),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"export const add = (x, y) => {\n  return x + y;\n}\n")),Object(o.mdx)("p",null,"Ce qui pr\xe9c\xe8de est un moyen courant d'exporter une seule fonction, mais vous pouvez r\xe9aliser la m\xeame chose comme ceci :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const add = (x, y) => {\n  return x + y;\n}\n\nexport { add };\n")),Object(o.mdx)("p",null,"Lorsque vous exportez une variable ou une fonction, vous pouvez l'importer dans un autre fichier et l'utiliser sans avoir \xe0 r\xe9\xe9crire le code. Vous  pouvez exporter plusieurs \xe9l\xe9ments en r\xe9p\xe9tant le premier exemple pour  chaque \xe9l\xe9ment que vous souhaitez exporter, ou en les pla\xe7ant tous dans  l'instruction d'exportation du deuxi\xe8me exemple, comme ceci :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"export { add, subtract };\n")),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Il existe deux fonctions li\xe9es aux cha\xeenes dans l'\xe9diteur. Exportez les deux en utilisant la m\xe9thode de votre choix."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"Vous devez correctement exporter ",Object(o.mdx)("inlineCode",{parentName:"p"},"uppercaseString"),".\nVous devez correctement exporter ",Object(o.mdx)("inlineCode",{parentName:"p"},"lowercaseString"),".")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const uppercaseString = (string) => {\n  return string.toUpperCase();\n}\nconst lowercaseString = (string) => {\n  return string.toLowerCase()\n}\n")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"export const uppercaseString = (string) => {\n  return string.toUpperCase();\n};\nconst lowercaseString = (string) => {\n  return string.toLowerCase()\n};\nexport { lowercaseString };\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"24-r\xe9utiliser-le-code-javascript-\xe0-laide-de-import"},"24. R\xe9utiliser le code JavaScript \xe0 l'aide de ",Object(o.mdx)("inlineCode",{parentName:"h2"},"import")),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/reuse-javascript-code-using-import"}),"Learn ES6: Reuse JavaScript Code Using import | freeCodeCamp.org")),Object(o.mdx)("p",null,Object(o.mdx)("inlineCode",{parentName:"p"},"import")," vous permet de choisir les parties d'un fichier ou d'un  module \xe0 charger. Dans la le\xe7on pr\xe9c\xe9dente, les exemples export\xe9s  ",Object(o.mdx)("inlineCode",{parentName:"p"},"add")," \xe0 partir du fichier ",Object(o.mdx)("inlineCode",{parentName:"p"},"math_functions.js"),". Voici comment vous  pouvez l'importer pour l'utiliser dans un autre fichier :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { add } from './math_functions.js';\n")),Object(o.mdx)("p",null,"Ici, ",Object(o.mdx)("inlineCode",{parentName:"p"},"import")," trouvera ",Object(o.mdx)("inlineCode",{parentName:"p"},"add")," dans ",Object(o.mdx)("inlineCode",{parentName:"p"},"math_functions.js"),", importe uniquement cette  fonction pour que vous puissiez l'utiliser et ignorez le reste. Le ",Object(o.mdx)("inlineCode",{parentName:"p"},"./"),"  indique \xe0 l'importation de rechercher le fichier ",Object(o.mdx)("inlineCode",{parentName:"p"},"math_functions.js")," dans  le m\xeame dossier que le fichier actuel. Le chemin de fichier relatif (",Object(o.mdx)("inlineCode",{parentName:"p"},"./"),") et l'extension de fichier (",Object(o.mdx)("inlineCode",{parentName:"p"},".js"),") sont requis lors de l'utilisation de  l'importation de cette mani\xe8re.\nVous pouvez importer plus d'un \xe9l\xe9ment du fichier en les ajoutant dans l'instruction ",Object(o.mdx)("inlineCode",{parentName:"p"},"import")," comme ceci :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { add, subtract } from './math_functions.js';\n")),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Ajoutez l'instruction ",Object(o.mdx)("inlineCode",{parentName:"p"},"import")," appropri\xe9e qui permettra au fichier actuel d'utiliser les fonctions ",Object(o.mdx)("inlineCode",{parentName:"p"},"uppercaseString")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"lowercaseString")," que vous  avez export\xe9es dans la le\xe7on pr\xe9c\xe9dente. Ces fonctions se trouvent dans  un fichier appel\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"string_functions.js"),", qui se trouve dans le m\xeame  r\xe9pertoire que le fichier actuel."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"Vous devez correctement importer ",Object(o.mdx)("inlineCode",{parentName:"p"},"uppercaseString"),".\nVous devez correctement importer ",Object(o.mdx)("inlineCode",{parentName:"p"},"lowercaseString"),".")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'// Ne changez le code qu\'au-dessus de cette ligne\nuppercaseString("hello");\nlowercaseString("WORLD!");\n')),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import { uppercaseString, lowercaseString } from \'./string_functions.js\';\nuppercaseString("hello");\nlowercaseString("WORLD!");\n')),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"25-utilisez--pour-tout-importer-\xe0-partir-dun-fichier"},"25. Utilisez * pour tout importer \xe0 partir d'un fichier"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/use--to-import-everything-from-a-file"}),"Learn ES6: Use * to Import Everything from a File | freeCodeCamp.org")),Object(o.mdx)("p",null,"Supposons que vous ayez un fichier et que vous souhaitiez importer tout son contenu dans le fichier courant. Cela peut \xeatre fait avec la syntaxe ",Object(o.mdx)("inlineCode",{parentName:"p"},"import * as"),". Voici un exemple o\xf9 le contenu d'un fichier nomm\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"math_functions.js")," est import\xe9 dans un fichier du m\xeame r\xe9pertoire :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import * as myMathModule from "./math_functions.js";\n')),Object(o.mdx)("p",null,"L'instruction d'importation ci-dessus cr\xe9era un objet appel\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"myMathModule"),". Ceci est  juste un nom de variable, vous pouvez le nommer n'importe comment. L'objet  contiendra toutes les exportations de ",Object(o.mdx)("inlineCode",{parentName:"p"},"math_functions.js"),", afin que vous  puissiez acc\xe9der aux fonctions comme vous le feriez pour toute autre  propri\xe9t\xe9 d'objet. Voici comment utiliser les fonctions ",Object(o.mdx)("inlineCode",{parentName:"p"},"add")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"subtract")," qui ont \xe9t\xe9 import\xe9es :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"myMathModule.add(2,3);\nmyMathModule.subtract(5,3);\n")),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Le code de ce fichier requiert le contenu du fichier : ",Object(o.mdx)("inlineCode",{parentName:"p"},"string_functions.js"),", qui se trouve dans le m\xeame r\xe9pertoire que le fichier actuel. Utilisez la syntaxe ",Object(o.mdx)("inlineCode",{parentName:"p"},"import * as")," pour tout importer du fichier dans un objet appel\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"stringFunctions"),"."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"Votre code doit utiliser correctement la syntaxe ",Object(o.mdx)("inlineCode",{parentName:"p"},"import * as"),".")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'// Ne changez le code qu\'au-dessus de cette ligne\nstringFunctions.uppercaseString("hello");\nstringFunctions.lowercaseString("WORLD!");\n')),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import * as stringFunctions from "./string_functions.js";\nstringFunctions.uppercaseString("hello");\nstringFunctions.lowercaseString("WORLD!");\n')),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"26-cr\xe9er-une-exportation-de-secours-avec-export-default"},"26. Cr\xe9er une exportation de secours avec ",Object(o.mdx)("inlineCode",{parentName:"h2"},"export default")),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/create-an-export-fallback-with-export-default"}),"Learn ES6: Create an Export Fallback with export default | freeCodeCamp.org")),Object(o.mdx)("p",null,"Dans la le\xe7on sur ",Object(o.mdx)("inlineCode",{parentName:"p"},"export"),", vous avez d\xe9couvert la syntaxe appel\xe9e ",Object(o.mdx)("em",{parentName:"p"},"named export")," (exportation nomm\xe9e). Cela vous a permis de rendre plusieurs fonctions et variables disponibles pour une utilisation dans d'autres fichiers.\nIl existe une autre syntaxe ",Object(o.mdx)("inlineCode",{parentName:"p"},"export")," que vous devez conna\xeetre, connue sous le nom ",Object(o.mdx)("em",{parentName:"p"},"export default")," (exportation par d\xe9faut). Vous utiliserez g\xe9n\xe9ralement  cette syntaxe si une seule valeur est export\xe9e \xe0 partir d'un fichier. Il est \xe9galement utilis\xe9 pour cr\xe9er une valeur de secours pour un fichier  ou un module.\nVous trouverez ci-dessous des exemples d'utilisation de ",Object(o.mdx)("inlineCode",{parentName:"p"},"export default")," :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// fonction nomm\xe9e\nexport default function add(x, y) {\n  return x + y;\n}\n// fonction anonyme\nexport default function(x, y) {\n  return x + y;\n}\n")),Object(o.mdx)("p",null,"Puisque ",Object(o.mdx)("inlineCode",{parentName:"p"},"export default")," est utilis\xe9e pour d\xe9clarer une  valeur de secours pour un module ou un fichier, vous ne pouvez avoir  qu'une seule valeur comme exportation par d\xe9faut dans chaque module ou  fichier. De plus, vous ne pouvez pas utiliser ",Object(o.mdx)("inlineCode",{parentName:"p"},"export default"),"  avec ",Object(o.mdx)("inlineCode",{parentName:"p"},"var"),", ",Object(o.mdx)("inlineCode",{parentName:"p"},"let")," ou ",Object(o.mdx)("inlineCode",{parentName:"p"},"const"),"."),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"La fonction suivante doit \xeatre la valeur de secours du module. Veuillez ajouter le code n\xe9cessaire pour ce faire."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"Votre code doit utiliser ",Object(o.mdx)("inlineCode",{parentName:"p"},"export")," de secours.")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function subtract(x, y) {\n  return x - y;\n}\n")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"export default function subtract(x, y) {\n  return x - y;\n}\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"27-importer-un-export-default"},"27. Importer un ",Object(o.mdx)("inlineCode",{parentName:"h2"},"export default")),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/import-a-default-export"}),"Learn ES6: Import a Default Export | freeCodeCamp.org")),Object(o.mdx)("p",null,"Dans le dernier d\xe9fi, vous avez d\xe9couvert ",Object(o.mdx)("inlineCode",{parentName:"p"},"export default")," et ses utilisations. Pour importer un ",Object(o.mdx)("inlineCode",{parentName:"p"},"export default"),", vous devez utiliser une syntaxe ",Object(o.mdx)("inlineCode",{parentName:"p"},"import")," diff\xe9rente. Dans l'exemple suivant, ",Object(o.mdx)("inlineCode",{parentName:"p"},"add")," est l'exportation par d\xe9faut du fichier ",Object(o.mdx)("inlineCode",{parentName:"p"},"math_functions.js"),". Voici comment l'importer :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import add from "./math_functions.js";\n')),Object(o.mdx)("p",null,"La syntaxe diff\xe8re \xe0 un endroit cl\xe9. La valeur import\xe9e, ",Object(o.mdx)("inlineCode",{parentName:"p"},"add"),", n'est pas  entour\xe9e d'accolades (",Object(o.mdx)("inlineCode",{parentName:"p"},"{}"),"). Ici, ",Object(o.mdx)("inlineCode",{parentName:"p"},"add")," est simplement un nom de variable  pour quel que soit l'export par d\xe9faut du fichier ",Object(o.mdx)("inlineCode",{parentName:"p"},"math_functions.js"),".  Vous pouvez utiliser n'importe quel nom ici lors de l'importation d'une valeur par d\xe9faut."),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Dans le code suivant, importez l'exportation par d\xe9faut \xe0 partir du fichier ",Object(o.mdx)("inlineCode",{parentName:"p"},"math_functions.js"),", qui se trouve dans le  m\xeame r\xe9pertoire que ce fichier. Donnez \xe0 l'importation le nom ",Object(o.mdx)("inlineCode",{parentName:"p"},"subtract"),"."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"Vous devez correctement importer ",Object(o.mdx)("inlineCode",{parentName:"p"},"subtract")," de ",Object(o.mdx)("inlineCode",{parentName:"p"},"math_functions.js"),".")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// Ne changez le code qu'au-dessus de cette ligne\nsubtract(7,4);\n")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'import subtract from "./math_functions.js";\nsubtract(7,4);\n')),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"28-cr\xe9er-une-promesse-javascript"},"28. Cr\xe9er une promesse JavaScript"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/create-a-javascript-promise"}),"Learn ES6: Create a JavaScript Promise | freeCodeCamp.org")),Object(o.mdx)("p",null,"Une promesse en JavaScript est exactement ce \xe0 quoi elle ressemble -  vous l'utilisez pour promettre de faire quelque chose, g\xe9n\xe9ralement de mani\xe8re asynchrone. Lorsque la t\xe2che est termin\xe9e, soit vous remplissez votre promesse, soit vous ne le faites pas. ",Object(o.mdx)("inlineCode",{parentName:"p"},"Promise")," est une fonction constructeur, vous devez donc utiliser le mot cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"new")," pour en cr\xe9er  un. Il prend une fonction, comme argument, avec deux param\xe8tres -  ",Object(o.mdx)("inlineCode",{parentName:"p"},"resolve")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"reject"),". Ce sont des m\xe9thodes utilis\xe9es pour d\xe9terminer le  r\xe9sultat de la promesse. La syntaxe ressemble \xe0 ceci :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const myPromise = new Promise((resolve, reject) => {\n    \n});\n")),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Cr\xe9ez une nouvelle promesse appel\xe9e ",Object(o.mdx)("inlineCode",{parentName:"p"},"makeServerRequest"),". Transmettez une fonction avec des param\xe8tres ",Object(o.mdx)("inlineCode",{parentName:"p"},"resolve")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"reject")," au constructeur."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"Vous devez affecter une promesse \xe0 une variable d\xe9clar\xe9e nomm\xe9e ",Object(o.mdx)("inlineCode",{parentName:"p"},"makeServerRequest"),".\nVotre promesse devrait recevoir une fonction avec ",Object(o.mdx)("inlineCode",{parentName:"p"},"resolve")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"reject")," comme param\xe8tres.")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const makeServerRequest = new Promise((resolve, reject) => {\n\n});\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"29-accomplissez-une-promesse-avec-resolve-et-reject"},"29. Accomplissez une promesse avec ",Object(o.mdx)("inlineCode",{parentName:"h2"},"resolve")," et ",Object(o.mdx)("inlineCode",{parentName:"h2"},"reject")),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/complete-a-promise-with-resolve-and-reject"}),"Learn ES6: Complete a Promise with resolve and reject | freeCodeCamp.org")),Object(o.mdx)("p",null,"Une promesse comporte trois \xe9tats : ",Object(o.mdx)("inlineCode",{parentName:"p"},"pending"),", ",Object(o.mdx)("inlineCode",{parentName:"p"},"fulfilled"),", et ",Object(o.mdx)("inlineCode",{parentName:"p"},"rejected")," (en attente, honor\xe9e et rejet\xe9e). La  promesse que vous avez cr\xe9\xe9e dans le dernier d\xe9fi est \xe0 jamais bloqu\xe9e dans l'\xe9tat ",Object(o.mdx)("inlineCode",{parentName:"p"},"pending")," parce que vous n'avez pas ajout\xe9 de moyen de  remplir la promesse. Les param\xe8tres ",Object(o.mdx)("inlineCode",{parentName:"p"},"resolve")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"reject")," donn\xe9s \xe0  l'argument de promesse sont utilis\xe9s pour le faire. ",Object(o.mdx)("inlineCode",{parentName:"p"},"resolve")," est  utilis\xe9 lorsque vous souhaitez que votre promesse aboutisse, et ",Object(o.mdx)("inlineCode",{parentName:"p"},"reject")," est utilis\xe9 lorsque vous souhaitez qu'elle \xe9choue. Ce sont des  m\xe9thodes qui prennent un argument, comme indiqu\xe9 ci-dessous."),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const myPromise = new Promise((resolve, reject) => {\n  if(condition here) {\n    resolve("La promesse a \xe9t\xe9 remplie");\n  } else {\n    reject("La promesse a \xe9t\xe9 rejet\xe9e");\n  }\n});\n')),Object(o.mdx)("p",null,"L'exemple ci-dessus utilise des cha\xeenes pour l'argument de ces fonctions, mais  cela peut vraiment \xeatre n'importe quoi. Souvent, il peut s'agir d'un objet dont vous utiliseriez des donn\xe9es, pour les mettre sur votre site  Web ou ailleurs."),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Faites en sorte que la promesse g\xe8re le succ\xe8s et l'\xe9chec. Si ",Object(o.mdx)("inlineCode",{parentName:"p"},"responseFromServer")," est ",Object(o.mdx)("inlineCode",{parentName:"p"},"true"),", appelez la m\xe9thode ",Object(o.mdx)("inlineCode",{parentName:"p"},"resolve")," pour terminer la promesse avec succ\xe8s. Passez ",Object(o.mdx)("inlineCode",{parentName:"p"},"resolve")," une  cha\xeene avec la valeur ",Object(o.mdx)("inlineCode",{parentName:"p"},"Nous avons obtenu les donn\xe9es"),". Si  ",Object(o.mdx)("inlineCode",{parentName:"p"},"responseFromServer")," est ",Object(o.mdx)("inlineCode",{parentName:"p"},"false"),", utilisez la m\xe9thode ",Object(o.mdx)("inlineCode",{parentName:"p"},"reject")," \xe0 la place et transmettez-lui la cha\xeene : ",Object(o.mdx)("inlineCode",{parentName:"p"},"Donn\xe9es non re\xe7ues"),"."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},Object(o.mdx)("inlineCode",{parentName:"p"},"resolve")," doit \xeatre appel\xe9 avec la cha\xeene attendue lorsque la condition ",Object(o.mdx)("inlineCode",{parentName:"p"},"if")," est ",Object(o.mdx)("inlineCode",{parentName:"p"},"true"),".\n",Object(o.mdx)("inlineCode",{parentName:"p"},"reject")," doit \xeatre appel\xe9 avec la cha\xeene attendue lorsque la condition ",Object(o.mdx)("inlineCode",{parentName:"p"},"if")," est ",Object(o.mdx)("inlineCode",{parentName:"p"},"false"),".")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const makeServerRequest = new Promise((resolve, reject) => {\n  // responseFromServer repr\xe9sente une r\xe9ponse d'un serveur\n  let responseFromServer;    \n  if(responseFromServer) {\n    // Changer cette ligne\n  } else {  \n    // Changer cette ligne\n  }\n});\n")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const makeServerRequest = new Promise((resolve, reject) => {\n  let responseFromServer;\n  if(responseFromServer) {\n    resolve("We got the data");\n  } else {  \n    reject("Data not received");\n  };\n});\n')),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"30-g\xe9rez-une-promesse-tenue-avec-then"},"30. G\xe9rez une promesse tenue avec ",Object(o.mdx)("inlineCode",{parentName:"h2"},"then")),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/handle-a-fulfilled-promise-with-then"}),"Learn ES6: Handle a Fulfilled Promise with then | freeCodeCamp.org")),Object(o.mdx)("p",null,"Les promesses sont plus utiles lorsque vous avez un processus qui prend une dur\xe9e inconnu dans votre code (c'est-\xe0-dire quelque chose  d'asynchrone), souvent une requ\xeate du serveur. Lorsque vous faites une  demande de serveur, cela prend un certain temps, et une fois qu'elle est termin\xe9e, vous voulez g\xe9n\xe9ralement faire quelque chose avec la r\xe9ponse  du serveur. Ceci peut \xeatre r\xe9alis\xe9 en utilisant la m\xe9thode ",Object(o.mdx)("inlineCode",{parentName:"p"},"then"),". La m\xe9thode ",Object(o.mdx)("inlineCode",{parentName:"p"},"then")," est ex\xe9cut\xe9e imm\xe9diatement apr\xe8s que votre promesse est  remplie avec ",Object(o.mdx)("inlineCode",{parentName:"p"},"resolve"),". Voici un exemple :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"myPromise.then(result => {\n  // faire quelque chose avec le r\xe9sultat.\n});\n")),Object(o.mdx)("p",null,Object(o.mdx)("inlineCode",{parentName:"p"},"result")," provient de l'argument donn\xe9 \xe0 la m\xe9thode ",Object(o.mdx)("inlineCode",{parentName:"p"},"resolve"),"."),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Ajoutez la m\xe9thode ",Object(o.mdx)("inlineCode",{parentName:"p"},"then")," \xe0 votre promesse. Utilisez ",Object(o.mdx)("inlineCode",{parentName:"p"},"result")," comme param\xe8tre de sa fonction de rappel et consignez ",Object(o.mdx)("inlineCode",{parentName:"p"},"resolve")," dans la console."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"Vous devez appeler la m\xe9thode ",Object(o.mdx)("inlineCode",{parentName:"p"},"then")," sur la promesse.\nVotre m\xe9thode ",Object(o.mdx)("inlineCode",{parentName:"p"},"then")," doit avoir une fonction de rappel avec ",Object(o.mdx)("inlineCode",{parentName:"p"},"result")," comme param\xe8tre.\nVous devez enregistrer ",Object(o.mdx)("inlineCode",{parentName:"p"},"result")," sur la console.")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const makeServerRequest = new Promise((resolve, reject) => {\n  // responseFromServer est d\xe9fini sur true pour repr\xe9senter une r\xe9ponse r\xe9ussie d\'un serveur\n  let responseFromServer = true;    \n  if(responseFromServer) {\n    resolve("We got the data");\n  } else {  \n    reject("Data not received");\n  }\n});\n')),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const makeServerRequest = new Promise((resolve, reject) => {\n  let responseFromServer = true;    \n  if(responseFromServer) {\n    resolve("We got the data");\n  } else {  \n    reject("Data not received");\n  }\n});\nmakeServerRequest.then(result => {\n  console.log(result);\n});\n')),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"31-g\xe9rer-une-promesse-rejet\xe9e-avec-catch"},"31. G\xe9rer une promesse rejet\xe9e avec ",Object(o.mdx)("inlineCode",{parentName:"h2"},"catch")),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/es6/handle-a-rejected-promise-with-catch"}),"Learn ES6: Handle a Rejected Promise with catch | freeCodeCamp.org")),Object(o.mdx)("p",null,Object(o.mdx)("inlineCode",{parentName:"p"},"catch")," est la m\xe9thode utilis\xe9e lorsque votre promesse a \xe9t\xe9 rejet\xe9e. Il  est ex\xe9cut\xe9 imm\xe9diatement apr\xe8s l'appel de la m\xe9thode ",Object(o.mdx)("inlineCode",{parentName:"p"},"reject")," d'une promesse. Voici la syntaxe :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"myPromise.catch(error => {\n  // faire quelque chose avec l'erreur.\n});\n")),Object(o.mdx)("p",null,Object(o.mdx)("inlineCode",{parentName:"p"},"error")," est l'argument transmis \xe0 la m\xe9thode ",Object(o.mdx)("inlineCode",{parentName:"p"},"reject"),".\n",Object(o.mdx)("strong",{parentName:"p"},"Remarque :")," les m\xe9thodes ",Object(o.mdx)("inlineCode",{parentName:"p"},"then")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"catch")," peuvent \xeatre cha\xeen\xe9es \xe0 la d\xe9claration de promesse si vous le souhaitez."),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Ajoutez la m\xe9thode ",Object(o.mdx)("inlineCode",{parentName:"p"},"catch")," \xe0 votre promesse. Utilisez ",Object(o.mdx)("inlineCode",{parentName:"p"},"error")," comme param\xe8tre de sa fonction de rappel et enregistrez ",Object(o.mdx)("inlineCode",{parentName:"p"},"error")," dans la console."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"Vous devez appeler la m\xe9thode ",Object(o.mdx)("inlineCode",{parentName:"p"},"catch")," sur la promesse.\nVotre m\xe9thode ",Object(o.mdx)("inlineCode",{parentName:"p"},"catch")," doit avoir une fonction de rappel avec ",Object(o.mdx)("inlineCode",{parentName:"p"},"error")," comme param\xe8tre.\nVous devez enregistrer ",Object(o.mdx)("inlineCode",{parentName:"p"},"error")," sur la console.")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const makeServerRequest = new Promise((resolve, reject) => {\n  // responseFromServer est d\xe9fini sur false pour repr\xe9senter une r\xe9ponse infructueuse d\'un serveur\n  let responseFromServer = false;    \n  if(responseFromServer) {\n    resolve("We got the data");\n  } else {  \n    reject("Data not received");\n  }\n});\nmakeServerRequest.then(result => {\n  console.log(result);\n});\n')),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const makeServerRequest = new Promise((resolve, reject) => {\n  let responseFromServer = false;    \n  if(responseFromServer) {\n    resolve("We got the data");\n  } else {  \n    reject("Data not received");\n  }\n});\nmakeServerRequest.then(result => {\n  console.log(result);\n});\nmakeServerRequest.catch(error => {\n  console.log(error);\n});\n')))}d.isMDXComponent=!0}}]);
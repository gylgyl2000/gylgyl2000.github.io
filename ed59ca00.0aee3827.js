(window.webpackJsonp=window.webpackJsonp||[]).push([[130],{200:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return a})),t.d(n,"metadata",(function(){return o})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return s}));var i=t(3),r=t(7),l=(t(0),t(212)),a={id:"guide_JS-04",title:"Boucles et it\xe9rations"},o={unversionedId:"MDN-web-docs/guide_JS-04",id:"MDN-web-docs/guide_JS-04",isDocsHomePage:!1,title:"Boucles et it\xe9rations",description:"Les boucles permettent de r\xe9p\xe9ter des actions simplement et rapidement. Ce chapitre du guide JavaScript pr\xe9sente les diff\xe9rentes instructions qu'il est possible d'utiliser en JavaScript pour effectuer des it\xe9rations.",source:"@site/docs/MDN-web-docs/guide_JS-04.md",slug:"/MDN-web-docs/guide_JS-04",permalink:"/docs/MDN-web-docs/guide_JS-04",editUrl:"https://github.com/gylgyl2000/laloutre.github.io/edit/main/docs/MDN-web-docs/guide_JS-04.md",version:"current",sidebar:"docs",previous:{title:"Contr\xf4le du flux d'instructions et gestion des erreurs",permalink:"/docs/MDN-web-docs/guide_JS-03"},next:{title:"Fonctions",permalink:"/docs/MDN-web-docs/guide_JS-05"}},c=[{value:"L&#39;instruction for",id:"linstruction-for",children:[{value:"<strong>Exemple</strong>",id:"exemple",children:[]}]},{value:"L&#39;instruction <code>do...while</code>",id:"linstruction-dowhile",children:[{value:"Exemple",id:"exemple-1",children:[]}]},{value:"L&#39;instruction <code>while</code>",id:"linstruction-while",children:[{value:"Exemple 1",id:"exemple-1-1",children:[]},{value:"Exemple 2",id:"exemple-2",children:[]}]},{value:"L&#39;instruction <code>label</code>",id:"linstruction-label",children:[{value:"Exemple",id:"exemple-3",children:[]}]},{value:"L&#39;instruction <code>break</code>",id:"linstruction-break",children:[{value:"Exemple <strong>1</strong>",id:"exemple-1-2",children:[]},{value:"Exemple 2",id:"exemple-2-1",children:[]}]},{value:"L&#39;instruction <code>continue</code>",id:"linstruction-continue",children:[{value:"Exemple 1",id:"exemple-1-3",children:[]},{value:"Exemple 2",id:"exemple-2-2",children:[]}]},{value:"L&#39;instruction <code>for...in</code>",id:"linstruction-forin",children:[{value:"Exemple",id:"exemple-4",children:[]},{value:"Les tableaux (arrays) et <code>for...in</code>",id:"les-tableaux-arrays-et-forin",children:[]}]},{value:"L&#39;instruction <code>for...of</code>",id:"linstruction-forof",children:[]}],u={rightToc:c};function s(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(l.mdx)("wrapper",Object(i.a)({},u,t,{components:n,mdxType:"MDXLayout"}),Object(l.mdx)("p",null,"Les boucles permettent de r\xe9p\xe9ter des actions simplement et rapidement. Ce chapitre du",Object(l.mdx)("a",Object(i.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide"})," guide JavaScript")," pr\xe9sente les diff\xe9rentes instructions qu'il est possible d'utiliser en JavaScript pour effectuer des it\xe9rations."),Object(l.mdx)("p",null,"Les boucles permettent de r\xe9p\xe9ter des actions simplement et rapidement. Une boucle peut \xeatre vue comme une version informatique de \xab copier N lignes \xbb ou de \xab faire X fois quelque chose \xbb. Par exemple, en JavaScript, on pourrait traduire \xab Faire 5 pas vers l'est \xbb avec cette boucle :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(i.a)({parentName:"pre"},{className:"language-js"}),"for (let pas = 0; pas < 5; pas++) {\n  // Ceci sera ex\xe9cut\xe9 5 fois\n  // \xc0 chaque \xe9x\xe9cution, la variable \"pas\" augmentera de 1\n  // Lorsque'elle sera arriv\xe9e \xe0 5, le boucle se terminera.\n  console.log('Faire ' + pas + ' pas vers l\\'est');\n}\n")),Object(l.mdx)("p",null,"Il y a diff\xe9rents types de boucles mais elles se ressemblent toutes au sens o\xf9 elles r\xe9p\xe8tent une action un certain nombre de fois (ce nombre peut \xe9ventuellement \xeatre z\xe9ro). Les diff\xe9rents types de boucles permettent d'utiliser diff\xe9rentes fa\xe7on de commencer et de terminer une boucle. Chaque type de boucle pourra \xeatre utilis\xe9 en fonction de la situation et du probl\xe8me que l'on cherche \xe0 r\xe9soudre."),Object(l.mdx)("p",null,"Voici les diff\xe9rentes boucles fournies par JavaScript :"),Object(l.mdx)("ul",null,Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("a",Object(i.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Boucles_et_it%C3%A9ration#L'instruction_for"}),"L'instruction for")),Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("a",Object(i.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Boucles_et_it%C3%A9ration#L'instruction_do...while"}),"L'instruction do...while")),Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("a",Object(i.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Boucles_et_it%C3%A9ration#L'instruction_while"}),"L'instruction while")),Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("a",Object(i.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Boucles_et_it%C3%A9ration#L'instruction_label"}),"L'instruction label")),Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("a",Object(i.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Boucles_et_it%C3%A9ration#L'instruction_break"}),"L'instruction break")),Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("a",Object(i.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Boucles_et_it%C3%A9ration#L'instruction_continue"}),"L'instruction continue")),Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("a",Object(i.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Boucles_et_it%C3%A9ration#L'instruction_for...in"}),"L'instruction for...in")),Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("a",Object(i.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Boucles_et_it%C3%A9ration#L'instruction_for...of"}),"L'instruction for...of"))),Object(l.mdx)("h2",{id:"linstruction-for"},"L'instruction for"),Object(l.mdx)("p",null,"Une boucle ",Object(l.mdx)("a",Object(i.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/statements/for"}),Object(l.mdx)("inlineCode",{parentName:"a"},"for"))," r\xe9p\xe8te des instructions jusqu'\xe0 ce qu'une condition donn\xe9e ne soit plus v\xe9rifi\xe9e. La boucle ",Object(l.mdx)("inlineCode",{parentName:"p"},"for")," JavaScript ressemble beaucoup \xe0 celle utilis\xe9e en C ou en Java. Une boucle ",Object(l.mdx)("inlineCode",{parentName:"p"},"for")," s'utilise de la fa\xe7on suivante :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(i.a)({parentName:"pre"},{className:"language-js"}),"for ([expressionInitiale]; [condition]; [expressionIncr\xe9ment])\n  instruction\n")),Object(l.mdx)("p",null,"Voici ce qui se passe quand une boucle ",Object(l.mdx)("inlineCode",{parentName:"p"},"for")," s'ex\xe9cute :"),Object(l.mdx)("ol",null,Object(l.mdx)("li",{parentName:"ol"},"L'expression initiale ",Object(l.mdx)("inlineCode",{parentName:"li"},"expressionInitiale")," est ex\xe9cut\xe9e si elle est pr\xe9sente. G\xe9n\xe9ralement, on utilise cette expression pour initialiser un ou plusieurs compteurs dont on se servira dans la boucle. Il est possible d'utiliser des expressions plus complexes si besoin. Elle peut servir \xe0 d\xe9clarer des variables."),Object(l.mdx)("li",{parentName:"ol"},"L'expression ",Object(l.mdx)("inlineCode",{parentName:"li"},"condition")," est \xe9valu\xe9e, si elle vaut ",Object(l.mdx)("inlineCode",{parentName:"li"},"true"),", les instructions contenues dans la boucle sont ex\xe9cut\xe9es. Si la valeur de ",Object(l.mdx)("inlineCode",{parentName:"li"},"condition")," est ",Object(l.mdx)("inlineCode",{parentName:"li"},"false"),", la boucle ",Object(l.mdx)("inlineCode",{parentName:"li"},"for")," se termine. Si la condition est absente, elle est consid\xe9r\xe9e comme ",Object(l.mdx)("inlineCode",{parentName:"li"},"true"),"."),Object(l.mdx)("li",{parentName:"ol"},"L'instruction ",Object(l.mdx)("inlineCode",{parentName:"li"},"instruction")," est ex\xe9cut\xe9e. Si l'on souhaite ex\xe9cuter plusieurs instructions, on utilisera un bloc d'instructions (",Object(l.mdx)("inlineCode",{parentName:"li"},"{ ... }"),") afin de les grouper."),Object(l.mdx)("li",{parentName:"ol"},"Si elle est pr\xe9sente, l'expression de mise \xe0 jour",Object(l.mdx)("inlineCode",{parentName:"li"}," expressionIncr\xe9ment")," est ex\xe9cut\xe9e."),Object(l.mdx)("li",{parentName:"ol"},"On retourne ensuite \xe0 l'\xe9tape 2.")),Object(l.mdx)("h3",{id:"exemple"},Object(l.mdx)("strong",{parentName:"h3"},"Exemple")),Object(l.mdx)("p",null,"La fonction suivante contient une instruction ",Object(l.mdx)("inlineCode",{parentName:"p"},"for")," qui compte le nombre d'options s\xe9lectionn\xe9es dans une liste d\xe9roulante (ici, un objet ",Object(l.mdx)("a",Object(i.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/HTML/Element/select"}),"``")," permettant une s\xe9lection multiple). L'instruction ",Object(l.mdx)("inlineCode",{parentName:"p"},"for")," d\xe9clare une variable ",Object(l.mdx)("inlineCode",{parentName:"p"},"i")," et l'initialise \xe0 z\xe9ro. Elle v\xe9rifie que ",Object(l.mdx)("inlineCode",{parentName:"p"},"i")," est bien inf\xe9rieur au nombre d'options et, pour chaque option, effectue un test conditionnel pour savoir si l'option est s\xe9lectionn\xe9e puis passe \xe0 l'option suivante en incr\xe9mentant la variable ",Object(l.mdx)("inlineCode",{parentName:"p"},"i")," pour chaque it\xe9ration."),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(i.a)({parentName:"pre"},{className:"language-html"}),'<form name="selectForm">\n  <p>\n    <label for="typesMusique">Veuillez choisir des genres musicaux, puis cliquez :</label>\n    <select id="typesMusique" name="typesMusique" multiple="multiple">\n      <option selected="selected">R&B</option>\n      <option>Jazz</option>\n      <option>Blues</option>\n      <option>New Age</option>\n      <option>Classique</option>\n      <option>Opera</option>\n    </select>\n  </p>\n  <p><button id="btn" type="button">Combien sont s\xe9lectionn\xe9s ?</button></p>\n</form>\n\n<script>\nfunction quantit\xe9(selectObject) {\n  let qt\xe9S\xe9lectionn\xe9e = 0;\n  for (let i = 0; i < selectObject.options.length; i++) {\n    if (selectObject.options[i].selected) {\n      qt\xe9S\xe9lectionn\xe9e++;\n    }\n  }\n  return qt\xe9S\xe9lectionn\xe9e;\n}\n\nlet btn = document.getElementById("btn");\nbtn.addEventListener("click", function(){\n  alert(\'Nombre d\\\'options choisies : \' + quantit\xe9(document.selectForm.typesMusique))\n});\n<\/script>\n')),Object(l.mdx)("h2",{id:"linstruction-dowhile"},"L'instruction ",Object(l.mdx)("inlineCode",{parentName:"h2"},"do...while")),Object(l.mdx)("p",null,"L'instruction ",Object(l.mdx)("a",Object(i.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/statements/do...while"}),Object(l.mdx)("inlineCode",{parentName:"a"},"do...while"))," permet de r\xe9p\xe9ter un ensemble d'instructions jusqu'\xe0 ce qu'une condition donn\xe9e ne soit plus v\xe9rifi\xe9e. (",Object(l.mdx)("em",{parentName:"p"},"NdT")," : litt\xe9ralement \xab do...while \xbb signifie \xab faire... tant que \xbb). Une instruction ",Object(l.mdx)("inlineCode",{parentName:"p"},"do...while")," s'utilise de la fa\xe7on suivante :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(i.a)({parentName:"pre"},{className:"language-js"}),"do\n  instruction\nwhile (condition);\n")),Object(l.mdx)("p",null,Object(l.mdx)("inlineCode",{parentName:"p"},"instruction")," est ex\xe9cut\xe9e au moins une fois avant que la condition soit v\xe9rifi\xe9e. Pour utiliser plusieurs instructions \xe0 cet endroit, on utilisera une instruction de bloc (",Object(l.mdx)("inlineCode",{parentName:"p"},"{ ... }"),") pour regrouper diff\xe9rentes instructions. Si la ",Object(l.mdx)("inlineCode",{parentName:"p"},"condition")," est v\xe9rifi\xe9e, l'instruction est \xe0 nouveau ex\xe9cut\xe9e. \xc0 la fin de chaque ex\xe9cution, la condition est v\xe9rifi\xe9e. Quand la condition n'est plus v\xe9rifi\xe9e (vaut ",Object(l.mdx)("inlineCode",{parentName:"p"},"false")," ou une valeur \xe9quivalente), l'ex\xe9cution de l'instruction",Object(l.mdx)("inlineCode",{parentName:"p"}," do...while")," est stopp\xe9e et le contr\xf4le passe \xe0 l'instruction suivante."),Object(l.mdx)("h3",{id:"exemple-1"},"Exemple"),Object(l.mdx)("p",null,"Dans l'exemple qui suit, la boucle ",Object(l.mdx)("inlineCode",{parentName:"p"},"do")," est ex\xe9cut\xe9e au moins une fois et r\xe9p\xe9t\xe9e jusqu'\xe0 ce que ",Object(l.mdx)("inlineCode",{parentName:"p"},"i")," ne soit plus inf\xe9rieur \xe0 5."),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(i.a)({parentName:"pre"},{className:"language-js"}),"let i = 0;\ndo {\n  i += 1;\n  console.log(i);\n} while (i < 5);\n")),Object(l.mdx)("h2",{id:"linstruction-while"},"L'instruction ",Object(l.mdx)("inlineCode",{parentName:"h2"},"while")),Object(l.mdx)("p",null,"Une instruction ",Object(l.mdx)("a",Object(i.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/statements/while"}),Object(l.mdx)("inlineCode",{parentName:"a"},"while"))," permet d'ex\xe9cuter une instruction tant qu'une condition donn\xe9e est v\xe9rifi\xe9e. Cette instruction ",Object(l.mdx)("inlineCode",{parentName:"p"},"while")," s'utilise de la fa\xe7on suivante :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(i.a)({parentName:"pre"},{className:"language-js"}),"while (condition)\n  instruction\n")),Object(l.mdx)("p",null,"Si la condition n'est pas v\xe9rifi\xe9e, l'instruction",Object(l.mdx)("inlineCode",{parentName:"p"}," instruction")," n'est pas ex\xe9cut\xe9e et le contr\xf4le passe directement \xe0 l'instruction suivant la boucle."),Object(l.mdx)("p",null,"Le test de la condition s'effectue avant d'ex\xe9cuter ",Object(l.mdx)("inlineCode",{parentName:"p"},"instruction"),". Si la condition renvoie ",Object(l.mdx)("inlineCode",{parentName:"p"},"true")," (ou une valeur \xe9quivalente), ",Object(l.mdx)("inlineCode",{parentName:"p"},"instruction")," sera ex\xe9cut\xe9e et la condition sera test\xe9e \xe0 nouveau. Si la condition renvoie ",Object(l.mdx)("inlineCode",{parentName:"p"},"false")," (ou une valeur \xe9quivalente), l'ex\xe9cution s'arr\xeate et le contr\xf4le est pass\xe9 \xe0 l'instruction qui suit ",Object(l.mdx)("inlineCode",{parentName:"p"},"while"),"."),Object(l.mdx)("p",null,"Pour pouvoir utiliser plusieurs instructions dans la boucle, on utilisera une instruction de bloc (",Object(l.mdx)("inlineCode",{parentName:"p"},"{ ... }"),") afin de les regrouper."),Object(l.mdx)("h3",{id:"exemple-1-1"},"Exemple 1"),Object(l.mdx)("p",null,"La boucle ",Object(l.mdx)("inlineCode",{parentName:"p"},"while")," qui suit permet d'effectuer des it\xe9rations tant que ",Object(l.mdx)("inlineCode",{parentName:"p"},"n")," est inf\xe9rieur \xe0 3 :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(i.a)({parentName:"pre"},{className:"language-js"}),"let n = 0;\nlet x = 0;\nwhile (n < 3) {\n  n++;\n  x += n;\n}\n")),Object(l.mdx)("p",null,"\xc0 chaque it\xe9ration, la boucle incr\xe9mente ",Object(l.mdx)("inlineCode",{parentName:"p"},"n")," et ajoute la valeur de ",Object(l.mdx)("inlineCode",{parentName:"p"},"n")," \xe0 ",Object(l.mdx)("inlineCode",{parentName:"p"},"x"),". ",Object(l.mdx)("inlineCode",{parentName:"p"},"x")," et ",Object(l.mdx)("inlineCode",{parentName:"p"},"n")," prendront ainsi les valeurs suivantes :"),Object(l.mdx)("ul",null,Object(l.mdx)("li",{parentName:"ul"},"Apr\xe8s la premi\xe8re it\xe9ration : ",Object(l.mdx)("inlineCode",{parentName:"li"},"n")," = 1 et ",Object(l.mdx)("inlineCode",{parentName:"li"},"x")," = 1"),Object(l.mdx)("li",{parentName:"ul"},"Apr\xe8s la deuxi\xe8me it\xe9ration : ",Object(l.mdx)("inlineCode",{parentName:"li"},"n")," = 2 et ",Object(l.mdx)("inlineCode",{parentName:"li"},"x")," = 3"),Object(l.mdx)("li",{parentName:"ul"},"Apr\xe8s la troisi\xe8me it\xe9ration : ",Object(l.mdx)("inlineCode",{parentName:"li"},"n")," = 3 et ",Object(l.mdx)("inlineCode",{parentName:"li"},"x")," = 6")),Object(l.mdx)("p",null,"Une fois la troisi\xe8me it\xe9ration effectu\xe9e, la condition ",Object(l.mdx)("inlineCode",{parentName:"p"},"n < 3")," n'est plus v\xe9rifi\xe9e, par cons\xe9quent, la boucle se termine."),Object(l.mdx)("h3",{id:"exemple-2"},"Exemple 2"),Object(l.mdx)("p",null,"Attention \xe0 \xe9viter les boucles infinies. Il faut bien s'assurer que la condition utilis\xe9e dans la boucle ne soit plus v\xe9rifi\xe9e \xe0 un moment donn\xe9. Si la condition est toujours v\xe9rifi\xe9e, la boucle se r\xe9p\xe9tera sans jamais s'arr\xeater. Dans l'exemple qui suit, les instructions contenues dans la boucle ",Object(l.mdx)("inlineCode",{parentName:"p"},"while")," s'ex\xe9cutent sans discontinuer car la condition est toujours v\xe9rifi\xe9e :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(i.a)({parentName:"pre"},{className:"language-js"}),'while (true) {\n  console.log("Coucou monde !");\n}\n')),Object(l.mdx)("h2",{id:"linstruction-label"},"L'instruction ",Object(l.mdx)("inlineCode",{parentName:"h2"},"label")),Object(l.mdx)("p",null,"Un ",Object(l.mdx)("a",Object(i.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/statements/label"}),Object(l.mdx)("inlineCode",{parentName:"a"},"label"))," (ou \xe9tiquette) permet de fournir un identifiant pour une instruction afin d'y faire r\xe9f\xe9rence depuis un autre endroit dans le programme. On peut ainsi identifier une boucle gr\xe2ce \xe0 un label puis utiliser les instructions ",Object(l.mdx)("inlineCode",{parentName:"p"},"break")," ou ",Object(l.mdx)("inlineCode",{parentName:"p"},"continue")," pour indiquer si le programme doit interrompre ou poursuivre l'ex\xe9cution de cette boucle."),Object(l.mdx)("p",null,"On utilise un label de la fa\xe7on suivante :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(i.a)({parentName:"pre"},{className:"language-js"}),"label:\n  instruction\n")),Object(l.mdx)("p",null,"La valeur de ",Object(l.mdx)("inlineCode",{parentName:"p"},"*label*")," peut \xeatre n'importe quel identifiant JavaScript valide (et ne doit pas \xeatre un mot r\xe9serv\xe9 pour le langage). L'",Object(l.mdx)("inlineCode",{parentName:"p"},"*instruction*")," peut \xeatre n'importe quelle instruction JavaScript valide (y compris un bloc)."),Object(l.mdx)("h3",{id:"exemple-3"},"Exemple"),Object(l.mdx)("p",null,"Dans cet exemple, on utilise un label ",Object(l.mdx)("inlineCode",{parentName:"p"},"memoBoucle")," pour identifier une boucle ",Object(l.mdx)("inlineCode",{parentName:"p"},"while"),"."),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(i.a)({parentName:"pre"},{className:"language-js"}),"memoBoucle:\nwhile (memo == true) {\n  faireQQC();\n}\n")),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"Note :")," Pour plus de d\xe9tails sur cette instruction, voir la page de la r\xe9f\xe9rence JavaScript pour ",Object(l.mdx)("a",Object(i.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Instructions/label"}),Object(l.mdx)("inlineCode",{parentName:"a"},"label")),"."),Object(l.mdx)("h2",{id:"linstruction-break"},"L'instruction ",Object(l.mdx)("inlineCode",{parentName:"h2"},"break")),Object(l.mdx)("p",null,"L'instruction ",Object(l.mdx)("a",Object(i.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/statements/break"}),Object(l.mdx)("inlineCode",{parentName:"a"},"break"))," est utilis\xe9e pour finir l'ex\xe9cution d'une boucle, d'une instruction ",Object(l.mdx)("inlineCode",{parentName:"p"},"switch"),", ou avec un label."),Object(l.mdx)("ul",null,Object(l.mdx)("li",{parentName:"ul"},"Lorsque ",Object(l.mdx)("inlineCode",{parentName:"li"},"break")," est utilis\xe9 sans label, il provoque la fin de l'instruction ",Object(l.mdx)("inlineCode",{parentName:"li"},"while"),", ",Object(l.mdx)("inlineCode",{parentName:"li"},"do-while"),", ",Object(l.mdx)("inlineCode",{parentName:"li"},"for"),", ou ",Object(l.mdx)("inlineCode",{parentName:"li"},"switch")," dans laquelle il est inscrit (on finit l'instruction la plus imbriqu\xe9e), le contr\xf4le est ensuite pass\xe9 \xe0 l'instruction suivante."),Object(l.mdx)("li",{parentName:"ul"},"Lorsque ",Object(l.mdx)("inlineCode",{parentName:"li"},"break")," est utilis\xe9 avec un label, il provoque la fin de l'instruction correspondante.")),Object(l.mdx)("p",null,"La syntaxe de cette instruction poss\xe8de donc deux formes :"),Object(l.mdx)("ol",null,Object(l.mdx)("li",{parentName:"ol"},Object(l.mdx)("inlineCode",{parentName:"li"},"break;")),Object(l.mdx)("li",{parentName:"ol"},Object(l.mdx)("inlineCode",{parentName:"li"},"break *label*;"))),Object(l.mdx)("p",null,"La premi\xe8re forme permet d'interrompre la boucle la plus imbriqu\xe9e (ou le ",Object(l.mdx)("inlineCode",{parentName:"p"},"switch"),") dans laquelle on se trouve. La seconde forme interrompt l'ex\xe9cution d'une instruction identifi\xe9e par un label."),Object(l.mdx)("h3",{id:"exemple-1-2"},"Exemple ",Object(l.mdx)("strong",{parentName:"h3"},"1")),Object(l.mdx)("p",null,"Dans l'exemple qui suit, on it\xe8re sur un tableau gr\xe2ce \xe0 une boucle jusqu'\xe0 trouver un \xe9l\xe9ment dont la valeur est ",Object(l.mdx)("inlineCode",{parentName:"p"},"valeurTest "),":"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(i.a)({parentName:"pre"},{className:"language-js"}),"for (i = 0; i < a.length; i++) {\n  if (a[i] === valeurTest) {\n    break;\n  }\n}\n")),Object(l.mdx)("h3",{id:"exemple-2-1"},"Exemple 2"),Object(l.mdx)("p",null,"Ici, on utilise ",Object(l.mdx)("inlineCode",{parentName:"p"},"break")," des deux fa\xe7ons : avec une instruction repr\xe9sent\xe9e par un label et sans."),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(i.a)({parentName:"pre"},{className:"language-js"}),'let x = 0;\nlet z = 0;\nlabelAnnuleBoucle: while (true) {\n  console.log("Boucle externe : " + x);\n  x += 1;\n  z = 1;\n  while (true) {\n    console.log("Boucle interne : " + z);\n    z += 1;\n    if (z === 10 && x === 10) {\n      break labelAnnuleBoucle;\n    } else if (z === 10) {\n      break;\n    }\n  }\n}\n')),Object(l.mdx)("h2",{id:"linstruction-continue"},"L'instruction ",Object(l.mdx)("inlineCode",{parentName:"h2"},"continue")),Object(l.mdx)("p",null,"L'instruction ",Object(l.mdx)("a",Object(i.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/statements/continue"}),Object(l.mdx)("inlineCode",{parentName:"a"},"continue"))," permet de reprendre une boucle ",Object(l.mdx)("inlineCode",{parentName:"p"},"while"),", ",Object(l.mdx)("inlineCode",{parentName:"p"},"do-while"),", ",Object(l.mdx)("inlineCode",{parentName:"p"},"for"),", ou une instruction ",Object(l.mdx)("inlineCode",{parentName:"p"},"label"),"."),Object(l.mdx)("ul",null,Object(l.mdx)("li",{parentName:"ul"},"Lorsque ",Object(l.mdx)("inlineCode",{parentName:"li"},"continue")," est utilis\xe9 sans label, l'it\xe9ration courante de la boucle (celle la plus imbriqu\xe9e) est termin\xe9e et la boucle passe \xe0 l'ex\xe9cution de la prochaine it\xe9ration. \xc0 la diff\xe9rence de l'instruction ",Object(l.mdx)("inlineCode",{parentName:"li"},"break"),", ",Object(l.mdx)("inlineCode",{parentName:"li"},"continue")," ne stoppe pas enti\xe8rement l'ex\xe9cution de la boucle. Si elle est utilis\xe9e dans une boucle ",Object(l.mdx)("inlineCode",{parentName:"li"},"while"),", l'it\xe9ration reprend au niveau de la condition d'arr\xeat. Dans une boucle ",Object(l.mdx)("inlineCode",{parentName:"li"},"for"),", l'it\xe9ration reprend au niveau de l'expression d'incr\xe9ment pour la boucle."),Object(l.mdx)("li",{parentName:"ul"},"Lorsque ",Object(l.mdx)("inlineCode",{parentName:"li"},"continue")," est utilis\xe9 avec un label, il est appliqu\xe9 \xe0 l'instruction de boucle correspondante.")),Object(l.mdx)("p",null,"L'instruction ",Object(l.mdx)("inlineCode",{parentName:"p"},"continue")," s'utilise donc de la fa\xe7on suivante :"),Object(l.mdx)("ol",null,Object(l.mdx)("li",{parentName:"ol"},Object(l.mdx)("inlineCode",{parentName:"li"},"continue;")),Object(l.mdx)("li",{parentName:"ol"},Object(l.mdx)("inlineCode",{parentName:"li"},"continue "),Object(l.mdx)("em",{parentName:"li"},Object(l.mdx)("inlineCode",{parentName:"em"},"label;")))),Object(l.mdx)("h3",{id:"exemple-1-3"},"Exemple 1"),Object(l.mdx)("p",null,"Dans l'exemple qui suit, on utilise une boucle ",Object(l.mdx)("inlineCode",{parentName:"p"},"while")," avec une instruction ",Object(l.mdx)("inlineCode",{parentName:"p"},"continue")," qui est ex\xe9cut\xe9e lorsque ",Object(l.mdx)("inlineCode",{parentName:"p"},"i")," vaut 3. Ici, ",Object(l.mdx)("inlineCode",{parentName:"p"},"n")," prendra donc les valeurs 1, 3, 7 et 12."),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(i.a)({parentName:"pre"},{className:"language-js"}),"let i = 0;\nlet n = 0;\nwhile (i < 5) {\n  i++;\n  if (i === 3) {\n    continue;\n  }\n  n += i;\n  console.log(n);\n}\n// 1, 3, 7, 12\n")),Object(l.mdx)("h3",{id:"exemple-2-2"},"Exemple 2"),Object(l.mdx)("p",null,"Dans l'exemple suivant, on a une instruction \xe9tiquet\xe9e ",Object(l.mdx)("inlineCode",{parentName:"p"},"v\xe9rifIetJ")," qui contient une autre instruction \xe9tiquet\xe9e ",Object(l.mdx)("inlineCode",{parentName:"p"},"v\xe9rifJ"),". Si l'instruction ",Object(l.mdx)("inlineCode",{parentName:"p"},"continue")," est utilis\xe9e, le programme reprend l'ex\xe9cution au d\xe9but de l'instruction ",Object(l.mdx)("inlineCode",{parentName:"p"},"v\xe9rifJ"),". Chaque fois que ",Object(l.mdx)("inlineCode",{parentName:"p"},"continue")," est utilis\xe9, ",Object(l.mdx)("inlineCode",{parentName:"p"},"v\xe9rifJ")," r\xe9it\xe8re jusqu'\xe0 ce que sa condition renvoie ",Object(l.mdx)("inlineCode",{parentName:"p"},"false"),". Lorsque c'est le cas, le reste de l'instruction ",Object(l.mdx)("inlineCode",{parentName:"p"},"v\xe9rifIetJ")," est ex\xe9cut\xe9."),Object(l.mdx)("p",null,"Si ",Object(l.mdx)("inlineCode",{parentName:"p"},"continue")," utilisait l'\xe9tiquette ",Object(l.mdx)("inlineCode",{parentName:"p"},"v\xe9rifIetJ"),", le programme continuerait au d\xe9but de l'instruction ",Object(l.mdx)("inlineCode",{parentName:"p"},"v\xe9rifIetJ")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(i.a)({parentName:"pre"},{className:"language-js"}),'let i = 0;\nlet j = 8;\n\nv\xe9rifIetJ: while (i < 4) {\n  console.log("i : " + i);\n  i += 1;\n\n  v\xe9rifJ: while (j > 4) {\n    console.log("j : "+ j);\n    j -= 1;\n    if ((j % 2) === 0){\n      continue v\xe9rifJ;\n    }\n    console.log(j + " est impaire.");\n   }\n   console.log("i = " + i);\n   console.log("j = " + j);\n}\n')),Object(l.mdx)("h2",{id:"linstruction-forin"},"L'instruction ",Object(l.mdx)("inlineCode",{parentName:"h2"},"for...in")),Object(l.mdx)("p",null,"L'instruction ",Object(l.mdx)("a",Object(i.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/statements/for...in"}),Object(l.mdx)("inlineCode",{parentName:"a"},"for...in"))," permet d'it\xe9rer sur l'ensemble des propri\xe9t\xe9s \xe9num\xe9rables d'un objet. Pour chaque propri\xe9t\xe9, JavaScript ex\xe9cutera l'instruction indiqu\xe9e. Cette instruction s'utilise de la fa\xe7on suivante :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(i.a)({parentName:"pre"},{}),"for (variable in objet) {\n  instruction\n}\n")),Object(l.mdx)("h3",{id:"exemple-4"},"Exemple"),Object(l.mdx)("p",null,"La fonction suivante prend comme argument un objet et le nom de cet objet. Elle parcourt ensuite les propri\xe9t\xe9s de l'objet et renvoie une cha\xeene de caract\xe8res qui liste les propri\xe9t\xe9s avec leurs noms et leurs valeurs respectives :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(i.a)({parentName:"pre"},{className:"language-js"}),'function afficherProps(obj, nomObj) {\n  var result = "";\n  for (var i in obj) {\n    result += nomObj + "." + i + " = " + obj[i] + "\\n";\n  }\n  result += "\\n";\n  return result; \n}\n')),Object(l.mdx)("p",null,"Pour un objet ",Object(l.mdx)("inlineCode",{parentName:"p"},"voiture")," dont les propri\xe9t\xe9s sont ",Object(l.mdx)("inlineCode",{parentName:"p"},"fabricant")," et ",Object(l.mdx)("inlineCode",{parentName:"p"},"mod\xe8le"),", ",Object(l.mdx)("inlineCode",{parentName:"p"},"result")," serait :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(i.a)({parentName:"pre"},{className:"language-js"}),"voiture.fabricant = Ford\nvoiture.mod\xe8le = Mustang\n")),Object(l.mdx)("h3",{id:"les-tableaux-arrays-et-forin"},"Les tableaux (arrays) et ",Object(l.mdx)("inlineCode",{parentName:"h3"},"for...in")),Object(l.mdx)("p",null,"Bien qu'il soit tentant d'utiliser cette instruction pour parcourir les \xe9l\xe9ments d'un objet ",Object(l.mdx)("inlineCode",{parentName:"p"},"Array")," , cela peut avoir des comportements inattendus. En effet, ",Object(l.mdx)("inlineCode",{parentName:"p"},"for...in")," permet de parcourir les propri\xe9t\xe9s d\xe9finies par l'utilisateur ainsi que les \xe9l\xe9ments de tableau. Ainsi, si l'on modifie un objet ",Object(l.mdx)("inlineCode",{parentName:"p"},"Array")," en lui ajoutant des propri\xe9t\xe9s et/ou des m\xe9thodes, la boucle ",Object(l.mdx)("inlineCode",{parentName:"p"},"for...in")," renverra le nom de ces nouvelles propri\xe9t\xe9s en plus des indices des \xe9l\xe9ments du tableau. C'est pourquoi, il est pr\xe9f\xe9rable d'utiliser une boucle ",Object(l.mdx)("inlineCode",{parentName:"p"},"for")," avec les indices du tableau pour parcourir ses \xe9l\xe9ments."),Object(l.mdx)("h2",{id:"linstruction-forof"},"L'instruction ",Object(l.mdx)("inlineCode",{parentName:"h2"},"for...of")),Object(l.mdx)("p",null,"L'instruction ",Object(l.mdx)("a",Object(i.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/statements/for...of"}),Object(l.mdx)("inlineCode",{parentName:"a"},"for...of"))," cr\xe9e une boucle qui fonctionne avec ",Object(l.mdx)("a",Object(i.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Les_protocoles_iteration"}),"les objets it\xe9rables")," (qui incluent ",Object(l.mdx)("a",Object(i.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Array"}),Object(l.mdx)("inlineCode",{parentName:"a"},"Array")),", ",Object(l.mdx)("a",Object(i.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Map"}),Object(l.mdx)("inlineCode",{parentName:"a"},"Map")),", ",Object(l.mdx)("a",Object(i.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Set"}),Object(l.mdx)("inlineCode",{parentName:"a"},"Set")),", l'objet ",Object(l.mdx)("inlineCode",{parentName:"p"},"arguments"),", etc.). La boucle appelle un m\xe9canisme d'it\xe9ration propre \xe0 l'objet utilis\xe9 et elle parcourt l'objet et les valeurs de ses diff\xe9rentes propri\xe9t\xe9s."),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(i.a)({parentName:"pre"},{className:"language-js"}),"for (variable of objet) {\n  instruction\n}\n")),Object(l.mdx)("p",null,"Dans l'exemple suivant, on illustre la diff\xe9rence entre une boucle ",Object(l.mdx)("inlineCode",{parentName:"p"},"for...of")," et une boucle ",Object(l.mdx)("inlineCode",{parentName:"p"},"for...in"),". ",Object(l.mdx)("inlineCode",{parentName:"p"},"for...in")," parcourt les noms des propri\xe9t\xe9s d'un objet alors que ",Object(l.mdx)("inlineCode",{parentName:"p"},"for...of")," parcourt les ",Object(l.mdx)("strong",{parentName:"p"},"valeurs")," des propri\xe9t\xe9s :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(i.a)({parentName:"pre"},{className:"language-js"}),'let arr = [3, 5, 7];\narr.toto = "coucou";\n\nfor (let i in arr) {\n  console.log(i); // affiche 0, 1, 2, "toto" dans la console\n}\n\nfor (let i of arr) {\n  console.log(i); // affiche 3, 5, 7 dans la console\n}\n')))}s.isMDXComponent=!0},212:function(e,n,t){"use strict";t.r(n),t.d(n,"MDXContext",(function(){return s})),t.d(n,"MDXProvider",(function(){return m})),t.d(n,"mdx",(function(){return x})),t.d(n,"useMDXComponents",(function(){return p})),t.d(n,"withMDXComponents",(function(){return d}));var i=t(0),r=t.n(i);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(){return(a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e}).apply(this,arguments)}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},l=Object.keys(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=r.a.createContext({}),d=function(e){return function(n){var t=p(n.components);return r.a.createElement(e,a({},n,{components:t}))}},p=function(e){var n=r.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},m=function(e){var n=p(e.components);return r.a.createElement(s.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},j=r.a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,a=e.parentName,o=u(e,["components","mdxType","originalType","parentName"]),s=p(t),d=i,m=s["".concat(a,".").concat(d)]||s[d]||b[d]||l;return t?r.a.createElement(m,c(c({ref:n},o),{},{components:t})):r.a.createElement(m,c({ref:n},o))}));function x(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,a=new Array(l);a[0]=j;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:i,a[1]=o;for(var u=2;u<l;u++)a[u]=t[u];return r.a.createElement.apply(null,a)}return r.a.createElement.apply(null,t)}j.displayName="MDXCreateElement"}}]);
const isOperator = /[x/+‑]/;
const endsWithOperator = /[x+‑/]$/;
class Calculatrice extends React.Component {
  constructor(props) {
    super(props)
    this.state = {
      display: '0', /* currentVal */
      prevVal: '0',
      formula: '',
      currentSign: 'pos',
      lastClicked: ''
    }

    this.toggleToNegative = this.toggleToNegative.bind(this);
    this.toggleToPositive = this.toggleToPositive.bind(this);
    this.lockOperators = this.lockOperators.bind(this);
    this.maxDigitWarning = this.maxDigitWarning.bind(this);
    this.handleOperators = this.handleOperators.bind(this);
    this.handleEvaluate = this.handleEvaluate.bind(this);
    this.handleToggleSign = this.handleToggleSign.bind(this);
    this.initialize = this.initialize.bind(this);
    this.handleCE = this.handleCE.bind(this);
    this.handleDecimal = this.handleDecimal.bind(this);
    this.handleNumbers = this.handleNumbers.bind(this);
    this.myEval = this.myEval.bind(this);
  }

  toggleToNegative(formula, display) {
    this.setState({
      display: '-' + this.state.formula.match(/(\d*\.?\d*)$/)[0],
      formula: formula.replace(/(\d*\.?\d*)$/,
        '(-' + this.state.formula.match(/(\d*\.?\d*)$/)[0]),
      currentSign: 'neg'
    });
  }

  toggleToPositive(formula, lastOpen, display) {
    this.setState({
      currentSign: 'pos'
    });
    if (this.state.lastClicked === 'CE') {
      this.setState({
        display: this.state.formula.match(/(\d+\.?\d*)$/)[0],
        formula: formula.substring(0, lastOpen) +
          formula.substring(lastOpen + 2),
      });
    } else if (display === '-') {
      this.setState({
        display: '0',
        formula: formula.substring(0, lastOpen) +
          formula.substring(lastOpen + 2),
      });
    } else {
      this.setState({
        display: display.slice(display.indexOf('-') + 1),
        formula: formula.substring(0, lastOpen) +
          formula.substring(lastOpen + 2),
      });
    }
  }

  lockOperators(formula, display) {
    return formula.lastIndexOf('.') === formula.length - 1 ||
      formula.lastIndexOf('-') === formula.length - 1 ||
      display.indexOf('Met') !== -1
  }

  maxDigitWarning() {
    this.setState({
      display: 'Limite de chiffres atteinte',
      prevVal: this.state.display
    });
    setTimeout(() => this.setState({
      display: this.state.prevVal
    }), 1000)
  }

  myEval(value) {
    try {
      value = eval(value)
    } catch (error) {
      console.log(error)
        value = NaN
    }
    return value;
  }

  handleEvaluate() {
    if (!this.lockOperators(this.state.formula, this.state.display)) {
      let expression = this.state.formula;
      if (endsWithOperator.test(expression)) expression = expression.slice(0, -1);
      expression = expression.replace(/x/g, "*").replace(/‑/g, "-");
      expression = expression.lastIndexOf('(') > expression.lastIndexOf(')') ?
        expression + ')' : expression;
      let answer = Math.round(1000000000000 * this.myEval(expression)) / 1000000000000;
      this.setState({
        display: answer.toString(),
        formula: expression.replace(/\*/g, '⋅').replace(/-/g, '‑') + '=' + answer,
        prevVal: answer,
        currentSign: answer[0] === '-' ? 'neg' : 'pos',
        lastClicked: 'evaluated'
      });
    }
  }

  handleOperators(e) {
    if (!this.lockOperators(this.state.formula, this.state.display)) {
      if (this.state.formula.lastIndexOf('(') > this.state.formula.lastIndexOf(')')) {
        this.setState({
          formula: this.state.formula + ')' + e.target.value,
          prevVal: this.state.formula + ')'
        });
      } else if (this.state.formula.indexOf('=') != -1) {
        this.setState({
          formula: this.state.prevVal + e.target.value
        }); /* prevVal stocke le résultat de l'évaluation, si le résultat est opéré, cela
        permet d'ajouter l'opération à la formule. */
      } else {
        this.setState({ /* prevVal stocke la formule telle qu'elle était avant la saisie du premier
        opérateur pour permettre le changement d'opérateur avant la saisie de l'élément suivant. */
          prevVal: !isOperator.test(this.state.display) ?
            this.state.formula : this.state.prevVal,
          formula: !isOperator.test(this.state.display) ?
            this.state.formula += e.target.value : this.state.prevVal += e.target.value
        });
      } /* valeurs par défaut de l'opérateur : */
      this.setState({
        currentSign: 'pos',
        display: e.target.value,
        lastClicked: 'operator'
      });
    }
  }

  handleToggleSign() {
    this.setState({
      lastClicked: 'toggleSign'
    });
    if (this.state.lastClicked === 'evaluated') { /* Le basculement du signe d'un nombre
    qui est le résultat d'une évaluation nécessite une logique légèrement différente,
    ceci est géré ici. */
      this.setState({
        display: this.state.display.indexOf('-') > -1 ?
          this.state.display.slice(1) : '-' + this.state.display,
        formula: this.state.display.indexOf('-') > -1 ?
          this.state.display.slice(1) : '(-' + this.state.display,
        currentSign: this.state.display.indexOf('-') > -1 ?
          'pos' : 'neg',
      });
    } else if (this.state.currentSign === 'neg') {
      this.toggleToPositive(
        this.state.formula,
        this.state.formula.lastIndexOf('(-'),
        this.state.display)
    } else {
      this.toggleToNegative(
        this.state.formula,
        this.state.display
      )
    }
  }

  handleNumbers(e) {
    if (this.state.display.indexOf('Limite') === -1) {
      this.setState({
        lastClicked: 'num'
      });
      if (this.state.display.length > 21) {
        this.maxDigitWarning();
      } else if (this.state.lastClicked === 'CE' && this.state.formula !== '') {
        this.setState({
          display:
            !endsWithOperator.test(this.state.formula) ?
            this.state.formula.match(/(-?\d+\.?\d*)$/)[0] + e.target.value : e.target.value,
          formula: this.state.formula += e.target.value
        });
      } else if (this.state.formula.indexOf('=') !== -1) {
        this.setState({
          display: e.target.value,
          formula: e.target.value !== '0' ? e.target.value : '',
        });
      } else {
        this.setState({
          display: this.state.display === '0' ||
            isOperator.test(this.state.display) ?
            e.target.value : this.state.display + e.target.value,
          formula: this.state.display === '0' && e.target.value === '0' ?
            this.state.formula : /([^.0-9]0)$/.test(this.state.formula) ?
            this.state.formula.slice(0, -1) + e.target.value : this.state.formula + e.target.value,
        });
      }
    }
  }

  handleDecimal() {
    if (this.state.display.indexOf('.') === -1 &&
      this.state.display.indexOf('Limit') === -1) {
      this.setState({
          lastClicked: this.state.lastClicked === 'CE' ? 'CE' : 'decimal'
        }) /* Même si lastClicked doit être décimal, lorsque le clic est immédiatement suivi de CE,
        lastClicked reste CE afin de faciliter le basculement des signes. */
      if (this.state.display.length > 21) {
        this.maxDigitWarning();
      } else if (this.state.lastClicked === 'evaluated' ||
        endsWithOperator.test(this.state.formula) ||
        this.state.display === '0' && this.state.formula === '' ||
        /-$/.test(this.state.formula)) {
        this.setState({
          display: '0.',
          formula: this.state.lastClicked === 'evaluated' ? '0.' : this.state.formula + '0.'
        });
      } else if (this.state.formula.match(/(\(?\d+\.?\d*)$/)[0].indexOf('.') > -1) {
        /* Il s'agit spécifiquement de la gestion de la logique liée au bouton CE. Normalement,
le bouton décimal se verrouille si display a une valeur décimale. Toutefois, lorsque le
bouton 'Effacer l'entrée' est appelé, display devient 0, mais le dernier nombre de la
formule peut toujours avoir une décimale, auquel cas le bouton décimal doit être verrouillé
à nouveau. Cela ne peut pas être utilisé comme contrôle principal pour verrouiller le bouton
décimal car si la valeur de formula est initialisée, le bouton se verrouille de manière
incorrecte. */
      } else {
        this.setState({
          display: this.state.formula.match(/(-?\d+\.?\d*)$/)[0] + '.',
          formula: this.state.formula + '.',
        })
      }
    }
  }

  initialize() {
    this.setState({
      display: '0',
      prevVal: '0',
      formula: '',
      currentSign: 'pos',
      lastClicked: ''
    });
  }

  handleCE() {
    let thisWith = new RegExp(/[x+‑\/]$|\d+\.?\d*$|(\(-\d+\.?\d*)$|(\(-)$|\)[x+‑\/]$/);
    if (this.state.formula.indexOf('=') !== -1) {
      this.replaceState(this.getInitialState())
    } else {
      this.setState({
        formula: this.state.formula.replace(thisWith, ''),
        display: '0',
        lastClicked: 'CE',
      });
    }
    setTimeout(() => {
      this.setState({
        currentSign: this.state.formula === '' ||
          endsWithOperator.test(this.state.formula) ||
          this.state.formula.match(/(\(?-?\d+\.?\d*)$/)[0].indexOf('-') === -1 ?
          'pos' : 'neg'
      });
    }, 100);
  }

  render() {
    return (
      <div className="container">
        <Formula formula={this.state.formula.replace(/x/g, '⋅')} />
        <Output currentValue={this.state.display} />
        <Buttons onClick={this.handleClick}
          handleEval={this.handleEvaluate}
          handleOperators={this.handleOperators}
          handleToggleSign={this.handleToggleSign}
          handleNumbers={this.handleNumbers}
          handleDecimal={this.handleDecimal}
          handleCE={this.handleCE}
          init={this.initialize} />
      </div>
    )
  }
}

class Buttons extends React.Component {
  render() {
    return (
      <div>
        <button value="AC" className="btn btn-info allClear" id="clear" onClick={this.props.init}>AC</button>
        <button value="CE" className="btn btn-info clearEntry" id="clearEntry" onClick={this.props.handleCE}>CE</button>
        <button value="±" className="btn btn-secondary toggleSign" id="toggleSign" onClick={this.props.handleToggleSign}>±</button>
        <button value="/" className="btn btn-secondary divide" id="divide" onClick={this.props.handleOperators}>/</button>
        <button value="7" className="btn btn-light seven" id="seven" onClick={this.props.handleNumbers}>7</button>
        <button value="8" className="btn btn-light eight" id="eight" onClick={this.props.handleNumbers}>8</button>
        <button value="9" className="btn btn-light nine" id="nine" onClick={this.props.handleNumbers}>9</button>
        <button value="x" className="btn btn-secondary multiply" id="multiply" onClick={this.props.handleOperators}>x</button>
        <button value="4" className="btn btn-light four" id="four" onClick={this.props.handleNumbers}>4</button>
        <button value="5" className="btn btn-light five" id="five" onClick={this.props.handleNumbers}>5</button>
        <button value="6" className="btn btn-light six" id="six" onClick={this.props.handleNumbers}>6</button>
        <button value="-" className="btn btn-secondary subtract" id="subtract" onClick={this.props.handleOperators}>-</button>
        <button value="1" className="btn btn-light one" id="one" onClick={this.props.handleNumbers}>1</button>
        <button value="2" className="btn btn-light two" id="two" onClick={this.props.handleNumbers}>2</button>
        <button value="3" className="btn btn-light three" id="three" onClick={this.props.handleNumbers}>3</button>
        <button value="+" className="btn btn-secondary add" id="add" onClick={this.props.handleOperators}>+</button>
        <button value="0" className="btn btn-light zero" id="zero" onClick={this.props.handleNumbers}>0</button>
        <button value="." className="btn btn-light decimal" id="decimal" onClick={this.props.handleDecimal}>.</button>
        <button value="=" className="btn btn-success equals" id="equals" onClick={this.props.handleEval}>=</button>
      </div>
    );
  }
}

const Output = (props) => {
  return <div className="outputScreen" id="display">{props.currentValue}</div>
};

const Formula = (props) => {
  return <div className="formulaScreen">{props.formula}</div>
};

const Author = () => (
<div className="author">Fait à la main par<br />
<a target="_blank" rel="noreferrer" href="https://codepen.io/gylgyl2000">
  LaLoutre
</a>
</div>
);

const App = () => (
<div>
  <Calculatrice />
  <Author />
</div>
);


ReactDOM.render(
  <App />,
  document.getElementById('root')
);

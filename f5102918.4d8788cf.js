(window.webpackJsonp=window.webpackJsonp||[]).push([[133],{203:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return l})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return u}));var a=t(3),r=t(7),o=(t(0),t(212)),i={id:"freeCodeCamp-Basic_Data_Structures-fr",title:"Structures de donn\xe9es de base"},l={unversionedId:"freeCodeCamp/freeCodeCamp-Basic_Data_Structures-fr",id:"freeCodeCamp/freeCodeCamp-Basic_Data_Structures-fr",isDocsHomePage:!1,title:"Structures de donn\xe9es de base",description:"Introduction aux d\xe9fis de la structure de donn\xe9es de base",source:"@site/docs/freeCodeCamp/freeCodeCamp-Basic_Data_Structures-fr.md",slug:"/freeCodeCamp/freeCodeCamp-Basic_Data_Structures-fr",permalink:"/docs/freeCodeCamp/freeCodeCamp-Basic_Data_Structures-fr",editUrl:"https://github.com/gylgyl2000/laloutre.github.io/edit/main/docs/freeCodeCamp/freeCodeCamp-Basic_Data_Structures-fr.md",version:"current",sidebar:"docs",previous:{title:"D\xe9bogage",permalink:"/docs/freeCodeCamp/freeCodeCamp-Debugging-fr"},next:{title:"Script d'algorithme de base",permalink:"/docs/freeCodeCamp/freeCodeCamp-Basic_Algorithm_Scripting-fr"}},s=[{value:"Introduction aux d\xe9fis de la structure de donn\xe9es de base",id:"introduction-aux-d\xe9fis-de-la-structure-de-donn\xe9es-de-base",children:[]},{value:"1. Utiliser un tableau pour stocker une collection de donn\xe9es",id:"1-utiliser-un-tableau-pour-stocker-une-collection-de-donn\xe9es",children:[]},{value:"2. Acc\xe9der aux contenus d&#39;un tableau \xe0 l&#39;aide de la notation entre crochets",id:"2-acc\xe9der-aux-contenus-dun-tableau-\xe0-laide-de-la-notation-entre-crochets",children:[]},{value:"3. Ajouter des \xe9l\xe9ments \xe0 un tableau avec <code>push()</code> et <code>unshift()</code>",id:"3-ajouter-des-\xe9l\xe9ments-\xe0-un-tableau-avec-push-et-unshift",children:[]},{value:"4. Supprimer des \xe9l\xe9ments d&#39;un tableau avec <code>pop()</code> et <code>shift()</code>",id:"4-supprimer-des-\xe9l\xe9ments-dun-tableau-avec-pop-et-shift",children:[]},{value:"5. Supprimer des \xe9l\xe9ments \xe0 l&#39;aide de <code>splice()</code>",id:"5-supprimer-des-\xe9l\xe9ments-\xe0-laide-de-splice",children:[]},{value:"6. Ajouter des \xe9l\xe9ments \xe0 l&#39;aide de <code>splice()</code>",id:"6-ajouter-des-\xe9l\xe9ments-\xe0-laide-de-splice",children:[]},{value:"7. Copier les \xe9l\xe9ments du tableau \xe0 l\u2019aide de <code>slice()</code>",id:"7-copier-les-\xe9l\xe9ments-du-tableau-\xe0-laide-de-slice",children:[]},{value:"8. Copier un tableau avec l&#39;op\xe9rateur Spread <code>[...]</code>",id:"8-copier-un-tableau-avec-lop\xe9rateur-spread-",children:[]},{value:"9. Combiner des tableaux avec l&#39;op\xe9rateur de propagation (spread) (<code>[...]</code>)",id:"9-combiner-des-tableaux-avec-lop\xe9rateur-de-propagation-spread-",children:[]},{value:"10. V\xe9rifier la pr\xe9sence d&#39;un \xe9l\xe9ment avec <code>indexOf()</code>",id:"10-v\xe9rifier-la-pr\xe9sence-dun-\xe9l\xe9ment-avec-indexof",children:[]},{value:"11. It\xe9rer \xe0 travers tous les \xe9l\xe9ments d&#39;un tableau \xe0 l&#39;aide de boucles <code>for</code>",id:"11-it\xe9rer-\xe0-travers-tous-les-\xe9l\xe9ments-dun-tableau-\xe0-laide-de-boucles-for",children:[]},{value:"12. Cr\xe9ez des tableaux multidimensionnels complexes",id:"12-cr\xe9ez-des-tableaux-multidimensionnels-complexes",children:[]},{value:"13. Ajouter des paires cl\xe9-valeur aux objets JavaScript",id:"13-ajouter-des-paires-cl\xe9-valeur-aux-objets-javascript",children:[]},{value:"14. Modifier un objet imbriqu\xe9 dans un objet",id:"14-modifier-un-objet-imbriqu\xe9-dans-un-objet",children:[]},{value:"15. Acc\xe9der aux noms de propri\xe9t\xe9s avec la notation entre crochets",id:"15-acc\xe9der-aux-noms-de-propri\xe9t\xe9s-avec-la-notation-entre-crochets",children:[]},{value:"16. Utilisez le mot-cl\xe9 <code>delete</code> pour supprimer les propri\xe9t\xe9s de l&#39;objet",id:"16-utilisez-le-mot-cl\xe9-delete-pour-supprimer-les-propri\xe9t\xe9s-de-lobjet",children:[]},{value:"17. V\xe9rifier si un objet a une propri\xe9t\xe9 (<code>hasOwnProperty()</code>) - (<code>in</code>)",id:"17-v\xe9rifier-si-un-objet-a-une-propri\xe9t\xe9-hasownproperty---in",children:[]},{value:"18. It\xe9rer \xe0 travers les cl\xe9s d&#39;un objet avec une instruction <code>for... in</code>",id:"18-it\xe9rer-\xe0-travers-les-cl\xe9s-dun-objet-avec-une-instruction-for-in",children:[]},{value:"19. G\xe9n\xe9rer un tableau de toutes les cl\xe9s d&#39;objet avec <code>Object.keys()</code>",id:"19-g\xe9n\xe9rer-un-tableau-de-toutes-les-cl\xe9s-dobjet-avec-objectkeys",children:[]},{value:"20. Modifier un tableau stock\xe9 dans un objet",id:"20-modifier-un-tableau-stock\xe9-dans-un-objet",children:[]}],d={rightToc:s};function u(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(o.mdx)("wrapper",Object(a.a)({},d,t,{components:n,mdxType:"MDXLayout"}),Object(o.mdx)("h2",{id:"introduction-aux-d\xe9fis-de-la-structure-de-donn\xe9es-de-base"},"Introduction aux d\xe9fis de la structure de donn\xe9es de base"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/"}),"Basic Data Structures | freeCodeCamp.org")),Object(o.mdx)("p",null,"Les  donn\xe9es peuvent \xeatre stock\xe9es et accessibles de diff\xe9rentes mani\xe8res, \xe0  la fois en JavaScript et dans d'autres langues. Cette section vous  apprendra \xe0 manipuler les tableaux, ainsi qu'\xe0 acc\xe9der et \xe0 copier les  informations qu'ils contiennent. Il vous apprendra \xe9galement comment  manipuler et acc\xe9der aux donn\xe9es dans les objets JavaScript, en  utilisant \xe0 la fois la notation par points et entre crochets. Lorsque  vous avez termin\xe9 avec cette section, vous devez comprendre les  propri\xe9t\xe9s de base et les diff\xe9rences entre les tableaux et les objets,  ainsi que la fa\xe7on de choisir lesquels utiliser dans un but donn\xe9."),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"1-utiliser-un-tableau-pour-stocker-une-collection-de-donn\xe9es"},"1. Utiliser un tableau pour stocker une collection de donn\xe9es"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/use-an-array-to-store-a-collection-of-data"}),"Learn Basic Data Structures: Use an Array to Store a Collection of Data | freeCodeCamp.org")),Object(o.mdx)("p",null,"Voici un exemple de l'impl\xe9mentation la plus simple d'une structure de  donn\xe9es de tableau. Ceci est connu sous le nom de ",Object(o.mdx)("em",{parentName:"p"},"tableau unidimensionnel"),", ce qui signifie qu'il n'a qu'un seul niveau, ou qu'il  n'a pas d'autres tableaux imbriqu\xe9s \xe0 l'int\xe9rieur. Notez qu'il contient  des ",Object(o.mdx)("em",{parentName:"p"},"bool\xe9ens"),", des ",Object(o.mdx)("em",{parentName:"p"},"cha\xeenes")," et des ",Object(o.mdx)("em",{parentName:"p"},"nombres"),", parmi d'autres types de  donn\xe9es JavaScript valides :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let simpleArray = ['one', 2, 'three', true, false, undefined, null];\nconsole.log(simpleArray.length);\n// logs 7 // journaux 7\n")),Object(o.mdx)("p",null,"Tous les tableaux ont une propri\xe9t\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"length"),", qui, comme indiqu\xe9 ci-dessus,  est tr\xe8s facilement accessible avec la syntaxe ",Object(o.mdx)("inlineCode",{parentName:"p"},"Array.length"),". Une  impl\xe9mentation plus complexe d'un tableau peut \xeatre vue ci-dessous.  C'est ce qu'on appelle un ",Object(o.mdx)("em",{parentName:"p"},"tableau multidimensionnel")," ou un tableau qui  contient d'autres tableaux. Notez que ce tableau contient \xe9galement des ",Object(o.mdx)("em",{parentName:"p"},"objets")," JavaScript, que nous examinerons de tr\xe8s pr\xe8s dans notre  prochaine section, mais pour l'instant, tout ce que vous devez savoir  est que les tableaux sont \xe9galement capables de stocker des objets  complexes."),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'let complexArray = [\n  [\n    {\n      one: 1,\n      two: 2\n    },\n    {\n      three: 3,\n      four: 4\n    }\n  ],\n  [\n    {\n      a: "a",\n      b: "b"\n    },\n    {\n      c: "c",\n      d: "d"\n    }\n  ]\n];\n')),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Nous avons d\xe9fini une variable appel\xe9e ",Object(o.mdx)("inlineCode",{parentName:"p"},"yourArray"),". Compl\xe9tez l'instruction en affectant un tableau d'au moins 5 \xe9l\xe9ments de longueur \xe0 la variable  ",Object(o.mdx)("inlineCode",{parentName:"p"},"yourArray"),". Votre tableau doit contenir au moins une ",Object(o.mdx)("em",{parentName:"p"},"cha\xeene"),", un ",Object(o.mdx)("em",{parentName:"p"},"nombre")," et un ",Object(o.mdx)("em",{parentName:"p"},"bool\xe9en"),"."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},Object(o.mdx)("inlineCode",{parentName:"p"},"yourArray")," doit \xeatre un tableau.\n",Object(o.mdx)("inlineCode",{parentName:"p"},"yourArray")," doit comporter au moins 5 \xe9l\xe9ments.\n",Object(o.mdx)("inlineCode",{parentName:"p"},"yourArray")," doit contenir au moins un ",Object(o.mdx)("inlineCode",{parentName:"p"},"boolean"),".\n",Object(o.mdx)("inlineCode",{parentName:"p"},"yourArray")," doit contenir au moins un ",Object(o.mdx)("inlineCode",{parentName:"p"},"number"),".\n",Object(o.mdx)("inlineCode",{parentName:"p"},"yourArray")," doit contenir au moins une ",Object(o.mdx)("inlineCode",{parentName:"p"},"string"),".")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let yourArray; // Change this line\n")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'let yourArray = [true, false, 8, "hello!", "good bye"];\n')),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"2-acc\xe9der-aux-contenus-dun-tableau-\xe0-laide-de-la-notation-entre-crochets"},"2. Acc\xe9der aux contenus d'un tableau \xe0 l'aide de la notation entre crochets"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/access-an-arrays-contents-using-bracket-notation"}),"Learn Basic Data Structures: Access an Array's Contents Using Bracket Notation | freeCodeCamp.org")),Object(o.mdx)("p",null,"La caract\xe9ristique fondamentale de toute structure de donn\xe9es est, bien  s\xfbr, la possibilit\xe9 non seulement de stocker des donn\xe9es, mais aussi de  pouvoir les r\xe9cup\xe9rer sur commande. Donc, maintenant que nous avons  appris \xe0 cr\xe9er un tableau, commen\xe7ons \xe0 r\xe9fl\xe9chir \xe0 la fa\xe7on dont nous  pouvons acc\xe9der aux informations de ce tableau.\nLorsque nous d\xe9finissons un tableau simple comme indiqu\xe9 ci-dessous, il contient 3 \xe9l\xe9ments :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'let ourArray = ["a", "b", "c"];\n')),Object(o.mdx)("p",null,"Dans un tableau, chaque \xe9l\xe9ment du tableau a un ",Object(o.mdx)("em",{parentName:"p"},"index"),". Cet index sert  \xe9galement de position de cet \xe9l\xe9ment dans le tableau et de la mani\xe8re  dont vous le r\xe9f\xe9rencez. Cependant, il est important de noter que les  tableaux JavaScript sont ",Object(o.mdx)("em",{parentName:"p"},"index\xe9s \xe0 z\xe9ro"),", ce qui signifie que le premier  \xe9l\xe9ment d'un tableau est en fait \xe0 la position ",Object(o.mdx)("strong",{parentName:"p"},"z\xe9ro"),", pas le premier.  Afin de r\xe9cup\xe9rer un \xe9l\xe9ment d'un tableau, nous pouvons placer un index  entre crochets et l'ajouter \xe0 la fin d'un tableau, ou plus commun\xe9ment, \xe0 une variable qui r\xe9f\xe9rence un objet tableau. C'est ce qu'on appelle la ",Object(o.mdx)("em",{parentName:"p"},"notation entre crochets"),". Par exemple, si nous voulons r\xe9cup\xe9rer le ",Object(o.mdx)("inlineCode",{parentName:"p"},'"a"'),"  de ",Object(o.mdx)("inlineCode",{parentName:"p"},"ourArray")," et l'assigner \xe0 une variable, nous pouvons le faire  avec le code suivant :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'let ourVariable = ourArray[0];\n// ourVariable est \xe9gal \xe0 "a"\n')),Object(o.mdx)("p",null,"En plus d'acc\xe9der \xe0 la valeur associ\xe9e \xe0 un index, vous pouvez \xe9galement  d\xe9finir un index sur une valeur en utilisant la m\xeame notation :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'ourArray[1] = "not b anymore";\n// ourArray est maintenant \xe9gal \xe0 ["a", "not b anymore", "c"];\n')),Object(o.mdx)("p",null,"En utilisant la notation entre crochets, nous avons maintenant r\xe9initialis\xe9 l'\xe9l\xe9ment \xe0 l'index 1 de ",Object(o.mdx)("inlineCode",{parentName:"p"},'"b"')," \xe0 ",Object(o.mdx)("inlineCode",{parentName:"p"},'"nor b anymore"'),"."),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Afin de relever ce d\xe9fi, d\xe9finissez la 2\xe8me position (index ",Object(o.mdx)("inlineCode",{parentName:"p"},"1"),") de ",Object(o.mdx)("inlineCode",{parentName:"p"},"myArray")," sur tout ce que vous voulez, \xe0 part ",Object(o.mdx)("inlineCode",{parentName:"p"},'"b"'),"."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},Object(o.mdx)("inlineCode",{parentName:"p"},"myArray[0]")," doit \xeatre \xe9gal \xe0 ",Object(o.mdx)("inlineCode",{parentName:"p"},'"a"'),"\n",Object(o.mdx)("inlineCode",{parentName:"p"},"myArray[1]")," ne doit pas \xeatre \xe9gal \xe0 ",Object(o.mdx)("inlineCode",{parentName:"p"},'"b"'),"\n",Object(o.mdx)("inlineCode",{parentName:"p"},"myArray[2]")," doit \xeatre \xe9gal \xe0 ",Object(o.mdx)("inlineCode",{parentName:"p"},'"c"'),"\n",Object(o.mdx)("inlineCode",{parentName:"p"},"myArray[3]")," doit \xeatre \xe9gal \xe0 ",Object(o.mdx)("inlineCode",{parentName:"p"},'"d"'))),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let myArray = [\"a\", \"b\", \"c\", \"d\"];\n// Changer uniquement le code en dessous de cette ligne\n// Changer uniquement le code au-dessus de cette ligne\nconsole.log(myArray); // [ 'a', 'b', 'c', 'd' ]\n")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'let myArray = ["a", "b", "c", "d"];\nmyArray[1] = "What?"\nconsole.log(myArray); // [ \'a\', \'What?\', \'c\', \'d\' ]\n')),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"3-ajouter-des-\xe9l\xe9ments-\xe0-un-tableau-avec-push-et-unshift"},"3. Ajouter des \xe9l\xe9ments \xe0 un tableau avec ",Object(o.mdx)("inlineCode",{parentName:"h2"},"push()")," et ",Object(o.mdx)("inlineCode",{parentName:"h2"},"unshift()")),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/add-items-to-an-array-with-push-and-unshift"}),"Learn Basic Data Structures: Add Items to an Array with push() and unshift() | freeCodeCamp.org")),Object(o.mdx)("p",null,"La longueur d'un tableau, comme les types de donn\xe9es qu'il peut  contenir, n'est pas fixe. Les tableaux peuvent \xeatre d\xe9finis avec une  longueur de n'importe quel nombre d'\xe9l\xe9ments, et des \xe9l\xe9ments peuvent  \xeatre ajout\xe9s ou supprim\xe9s au fil du temps ; en d'autres termes, les  tableaux sont ",Object(o.mdx)("em",{parentName:"p"},"mutables"),". Dans ce d\xe9fi, nous examinerons deux m\xe9thodes  avec lesquelles nous pouvons modifier un tableau par programmation :  ",Object(o.mdx)("inlineCode",{parentName:"p"},"Array.push()")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"Array.unshift()"),".\nLes deux m\xe9thodes prennent un  ou plusieurs \xe9l\xe9ments comme param\xe8tres et ajoutent ces \xe9l\xe9ments au  tableau sur lequel la m\xe9thode est appel\xe9e ; la m\xe9thode ",Object(o.mdx)("inlineCode",{parentName:"p"},"push()")," ajoute des \xe9l\xe9ments \xe0 la fin d'un tableau et ",Object(o.mdx)("inlineCode",{parentName:"p"},"unshift()")," ajoute des \xe9l\xe9ments au  d\xe9but. Consid\xe9rer ce qui suit :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let twentyThree = 'XXIII';\nlet romanNumerals = ['XXI', 'XXII'];\nromanNumerals.unshift('XIX', 'XX');\n// est maintenant \xe9gal \xe0 ['XIX', 'XX', 'XXI', 'XXII']\nromanNumerals.push(twentyThree);\n// est maintenant \xe9gal \xe0 ['XIX', 'XX', 'XXI', 'XXII', 'XXIII'] Notez que nous pouvons \xe9galement passer des variables, ce qui nous permet encore plus de  flexibilit\xe9 pour modifier dynamiquement les donn\xe9es de notre tableau.\n")),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Nous avons d\xe9fini une fonction, ",Object(o.mdx)("inlineCode",{parentName:"p"},"mixedNumbers"),", \xe0 laquelle nous transmettons  un tableau en argument. Modifiez la fonction en utilisant ",Object(o.mdx)("inlineCode",{parentName:"p"},"push()")," et  ",Object(o.mdx)("inlineCode",{parentName:"p"},"unshift()")," pour ajouter ",Object(o.mdx)("inlineCode",{parentName:"p"},"'I', 2, 'three'")," au d\xe9but du tableau et ",Object(o.mdx)("inlineCode",{parentName:"p"},"7, 'VIII', 9")," \xe0 la fin afin que le tableau retourn\xe9 contienne des  repr\xe9sentations des nombres 1-9 dans l'ordre."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},Object(o.mdx)("inlineCode",{parentName:"p"},'mixedNumbers(["IV", 5, "six"])')," doit maintenant renvoyer ",Object(o.mdx)("inlineCode",{parentName:"p"},'["I", 2, "three", "IV", 5, "six", 7, "VIII", 9]'),"\nLa fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"mixedNumbers")," doit utiliser la m\xe9thode ",Object(o.mdx)("inlineCode",{parentName:"p"},"push()"),"\nLa fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"mixedNumbers")," doit utiliser la m\xe9thode ",Object(o.mdx)("inlineCode",{parentName:"p"},"unshift()"))),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function mixedNumbers(arr) {\n  // Only change code below this line\n  // Only change code above this line\n  return arr;\n}\nconsole.log(mixedNumbers(['IV', 5, 'six'])); // [ 'IV', 5, 'six' ]\n")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function mixedNumbers(arr) {\n  arr.push(7, \"VIII\", 9);\n  arr.unshift(\"I\", 2, \"three\");\n  return arr;\n}\nconsole.log(mixedNumbers(['IV', 5, 'six'])); // [ 'I', 2, 'three', 'IV', 5, 'six', 7, 'VIII', 9 ]\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"4-supprimer-des-\xe9l\xe9ments-dun-tableau-avec-pop-et-shift"},"4. Supprimer des \xe9l\xe9ments d'un tableau avec ",Object(o.mdx)("inlineCode",{parentName:"h2"},"pop()")," et ",Object(o.mdx)("inlineCode",{parentName:"h2"},"shift()")),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/remove-items-from-an-array-with-pop-and-shift"}),"Learn Basic Data Structures: Remove Items from an Array with pop() and shift() | freeCodeCamp.org")),Object(o.mdx)("p",null,"Les deux ",Object(o.mdx)("inlineCode",{parentName:"p"},"push()")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"unshift()")," ont des m\xe9thodes correspondantes qui sont presque des oppos\xe9s fonctionnels : ",Object(o.mdx)("inlineCode",{parentName:"p"},"pop()")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"shift()"),". Comme vous l'avez peut-\xeatre devin\xe9, au lieu d'ajouter, ",Object(o.mdx)("inlineCode",{parentName:"p"},"pop()")," ",Object(o.mdx)("em",{parentName:"p"},"supprime")," un \xe9l\xe9ment de la  fin d'un tableau, tandis que ",Object(o.mdx)("inlineCode",{parentName:"p"},"shift()")," supprime un \xe9l\xe9ment du d\xe9but. La  principale diff\xe9rence entre ",Object(o.mdx)("inlineCode",{parentName:"p"},"pop()")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"shift()")," et leurs cousins ",Object(o.mdx)("inlineCode",{parentName:"p"},"push()")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"unshift()"),", est qu'aucune m\xe9thode ne prend de param\xe8tres, et  chacune ne permet qu'un tableau \xe0 \xeatre modifi\xe9 par un seul \xe9l\xe9ment \xe0 la  fois.\nNous allons jeter un coup d\u2019\u0153il :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let greetings = ['whats up?', 'hello', 'see ya!'];\ngreetings.pop();\n// est maintenant \xe9gal \xe0 ['whats up?', 'hello']\ngreetings.shift();\n// est maintenant \xe9gal \xe0 ['hello']\n")),Object(o.mdx)("p",null,"Nous pouvons \xe9galement renvoyer la valeur de l'\xe9l\xe9ment supprim\xe9 avec l'une ou l'autre des m\xe9thodes comme celle-ci :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let popped = greetings.pop();\n// renvoie 'hello'\n// greetings est maintenant \xe9gal \xe0 []\n")),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Nous avons d\xe9fini une fonction, ",Object(o.mdx)("inlineCode",{parentName:"p"},"popShift"),", qui prend un tableau comme  argument et renvoie un nouveau tableau. Modifiez la fonction, en  utilisant ",Object(o.mdx)("inlineCode",{parentName:"p"},"pop()")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"shift()"),", pour supprimer les premier et dernier  \xe9l\xe9ments du tableau d'arguments, et affectez les \xe9l\xe9ments supprim\xe9s \xe0  leurs variables correspondantes, de sorte que le tableau renvoy\xe9  contienne leurs valeurs."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},Object(o.mdx)("inlineCode",{parentName:"p"},'popShift(["challenge", "is", "not", "complete"])')," devrait retourner ",Object(o.mdx)("inlineCode",{parentName:"p"},'["challenge", "complete"]'),"\nLa fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"popShift")," doit utiliser la m\xe9thode ",Object(o.mdx)("inlineCode",{parentName:"p"},"pop()"),"\nLa fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"popShift")," doit utiliser la m\xe9thode ",Object(o.mdx)("inlineCode",{parentName:"p"},"shift()"))),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function popShift(arr) {\n  let popped; // Changer cette ligne\n  let shifted; // Changer cette ligne\n  return [shifted, popped];\n}\nconsole.log(popShift(['challenge', 'is', 'not', 'complete'])); // [ undefined, undefined ]\n")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function popShift(arr) {\n  let popped = arr.pop();\n  let shifted = arr.shift();\n  return [shifted, popped];\n}\nconsole.log(popShift(['challenge', 'is', 'not', 'complete'])); // [ 'challenge', 'complete' ]\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"5-supprimer-des-\xe9l\xe9ments-\xe0-laide-de-splice"},"5. Supprimer des \xe9l\xe9ments \xe0 l'aide de ",Object(o.mdx)("inlineCode",{parentName:"h2"},"splice()")),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/remove-items-using-splice"}),"Learn Basic Data Structures: Remove Items Using splice() | freeCodeCamp.org")),Object(o.mdx)("p",null,"Ok, nous avons donc appris comment supprimer des \xe9l\xe9ments du d\xe9but et de la fin des tableaux en utilisant ",Object(o.mdx)("inlineCode",{parentName:"p"},"shift()")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"pop()"),", mais que faire si  nous voulons supprimer un \xe9l\xe9ment quelque part au milieu ? Ou supprimer plus d'un \xe9l\xe9ment \xe0 la fois ? Eh bien, c'est l\xe0 que ",Object(o.mdx)("inlineCode",{parentName:"p"},"splice()")," entre en  jeu. ",Object(o.mdx)("inlineCode",{parentName:"p"},"splice()")," nous permet de faire exactement cela : ",Object(o.mdx)("strong",{parentName:"p"},"supprimer n'importe quel nombre d'\xe9l\xe9ments cons\xe9cutifs")," de n'importe o\xf9 dans un tableau.\n",Object(o.mdx)("inlineCode",{parentName:"p"},"splice()")," peut prendre jusqu'\xe0 3 param\xe8tres, mais pour l'instant, nous allons  nous concentrer uniquement sur le premier 2. Les deux premiers  param\xe8tres de ",Object(o.mdx)("inlineCode",{parentName:"p"},"splice()")," sont des entiers qui repr\xe9sentent des index, ou  des positions, du tableau que ",Object(o.mdx)("inlineCode",{parentName:"p"},"splice()")," est appel\xe9. Et rappelez-vous que les tableaux sont ",Object(o.mdx)("em",{parentName:"p"},"index\xe9s \xe0 z\xe9ro"),", donc pour indiquer le premier \xe9l\xe9ment d'un tableau, nous utiliserions ",Object(o.mdx)("inlineCode",{parentName:"p"},"0"),". Le premier param\xe8tre de ",Object(o.mdx)("inlineCode",{parentName:"p"},"splice()"),"  repr\xe9sente l'index du tableau \xe0 partir duquel commencer \xe0 supprimer des  \xe9l\xe9ments, tandis que le deuxi\xe8me param\xe8tre indique le nombre d'\xe9l\xe9ments \xe0 supprimer. Par exemple :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let array = ['today', 'was', 'not', 'so', 'great'];\narray.splice(2, 2);\n// supprime 2 \xe9l\xe9ments commen\xe7ant par le 3\xe8me \xe9l\xe9ment\n// tableau maintenant \xe9gal \xe0 ['today', 'was', 'great']\n")),Object(o.mdx)("p",null,Object(o.mdx)("inlineCode",{parentName:"p"},"splice()")," modifie non seulement le tableau sur lequel il est appel\xe9, mais il  renvoie \xe9galement un nouveau tableau contenant la valeur des \xe9l\xe9ments  supprim\xe9s :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let array = ['I', 'am', 'feeling', 'really', 'happy'];\nlet newArray = array.splice(3, 2);\n// newArray est \xe9gal \xe0 ['really', 'happy']\n")),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Nous avons initialis\xe9 un tableau ",Object(o.mdx)("inlineCode",{parentName:"p"},"arr"),". Utilisez ",Object(o.mdx)("inlineCode",{parentName:"p"},"splice()")," pour supprimer des  \xe9l\xe9ments de ",Object(o.mdx)("inlineCode",{parentName:"p"},"arr"),", afin qu'il ne contienne que des \xe9l\xe9ments dont la somme  est \xe9gale \xe0 ",Object(o.mdx)("inlineCode",{parentName:"p"},"10"),"."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"Vous ne devez pas changer la ligne d'origine de ",Object(o.mdx)("inlineCode",{parentName:"p"},"const arr = [2, 4, 5, 1, 7, 5, 2, 1];"),".\n",Object(o.mdx)("inlineCode",{parentName:"p"},"arr")," ne doit contenir que des \xe9l\xe9ments dont la somme est \xe9gale \xe0 ",Object(o.mdx)("inlineCode",{parentName:"p"},"10"),".\nVotre code doit utiliser la m\xe9thode ",Object(o.mdx)("inlineCode",{parentName:"p"},"splice()")," sur ",Object(o.mdx)("inlineCode",{parentName:"p"},"arr"),".\nL'\xe9pissure (splice) ne doit supprimer que des \xe9l\xe9ments de ",Object(o.mdx)("inlineCode",{parentName:"p"},"arr")," et n'ajouter aucun \xe9l\xe9ment suppl\xe9mentaire \xe0 ",Object(o.mdx)("inlineCode",{parentName:"p"},"arr"),".")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const arr = [2, 4, 5, 1, 7, 5, 2, 1];\n// Changer uniquement le code en dessous de cette ligne\n// Changer uniquement le code au-dessus de cette ligne\nconsole.log(arr); // [ 2, 4, 5, 1, 7, 5, 2, 1 ]\n")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const arr = [2, 4, 5, 1, 7, 5, 2, 1];\narr.splice(1, 4);\nconsole.log(arr); // [ 2, 5, 2, 1 ]\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"6-ajouter-des-\xe9l\xe9ments-\xe0-laide-de-splice"},"6. Ajouter des \xe9l\xe9ments \xe0 l'aide de ",Object(o.mdx)("inlineCode",{parentName:"h2"},"splice()")),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/add-items-using-splice"}),"Learn Basic Data Structures: Add Items Using splice() | freeCodeCamp.org")),Object(o.mdx)("p",null,"Rappelez-vous dans le dernier d\xe9fi que nous avons mentionn\xe9 que ",Object(o.mdx)("inlineCode",{parentName:"p"},"splice()")," peut prendre jusqu'\xe0 trois param\xe8tres ? Eh bien, vous pouvez utiliser  le troisi\xe8me param\xe8tre, compos\xe9 d'un ou plusieurs \xe9l\xe9ment(s), \xe0 ajouter au tableau. Cela peut \xeatre incroyablement utile pour remplacer  rapidement un \xe9l\xe9ment ou un ensemble d'\xe9l\xe9ments par un autre."),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const numbers = [10, 11, 12, 12, 15];\nconst startIndex = 3;\nconst amountToDelete = 1;\nnumbers.splice(startIndex, amountToDelete, 13, 14);\n// la deuxi\xe8me entr\xe9e de 12 est supprim\xe9e, et nous ajoutons 13 et 14 au m\xeame index\nconsole.log(numbers);\n// renvoie [10, 11, 12, 13, 14, 15]\n")),Object(o.mdx)("p",null,"Ici, nous commen\xe7ons par un tableau de nombres. Nous passons ensuite ce qui  suit \xe0 ",Object(o.mdx)("inlineCode",{parentName:"p"},"splice()"),". L'index auquel commencer la suppression des \xe9l\xe9ments  (3), le nombre d'\xe9l\xe9ments \xe0 supprimer (1) et les \xe9l\xe9ments (13, 14) \xe0  ins\xe9rer \xe0 ce m\xeame index. Notez qu'il peut y avoir n'importe quel nombre  d'\xe9l\xe9ments (s\xe9par\xe9s par des virgules) apr\xe8s ",Object(o.mdx)("inlineCode",{parentName:"p"},"amountToDelete"),", chacun \xe9tant ins\xe9r\xe9."),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Nous avons d\xe9fini une fonction, ",Object(o.mdx)("inlineCode",{parentName:"p"},"htmlColorNames"),", qui  prend un tableau de couleurs HTML comme argument. Modifiez la fonction  en utilisant ",Object(o.mdx)("inlineCode",{parentName:"p"},"splice()")," pour supprimer les deux premiers \xe9l\xe9ments du  tableau et ajoutez ",Object(o.mdx)("inlineCode",{parentName:"p"},"'DarkSalmon'")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"'BlanchedAlmond'")," \xe0 leurs emplacements respectifs."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},Object(o.mdx)("inlineCode",{parentName:"p"},"htmlColorNames")," doit renvoyer ",Object(o.mdx)("inlineCode",{parentName:"p"},"['DarkSalmon', 'BlanchedAlmond', 'LavenderBlush', 'PaleTurquoise', 'FireBrick']"),"\nLa fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"htmlColorNames")," doit utiliser la m\xe9thode ",Object(o.mdx)("inlineCode",{parentName:"p"},"splice()"),"\nVous ne devez pas utiliser ",Object(o.mdx)("inlineCode",{parentName:"p"},"shift()")," ou ",Object(o.mdx)("inlineCode",{parentName:"p"},"unshift()"),".\nVous ne devez pas utiliser la notation entre crochets de tableau.")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function htmlColorNames(arr) {\n  // Changer uniquement le code en dessous de cette ligne\n  // Changer uniquement le code au-dessus de cette ligne\n  return arr;\n}\nconsole.log(htmlColorNames(['DarkGoldenRod', 'WhiteSmoke', 'LavenderBlush', 'PaleTurquoise', 'FireBrick']));\n/*\n[ 'DarkGoldenRod',\n  'WhiteSmoke',\n  'LavenderBlush',\n  'PaleTurquoise',\n  'FireBrick' ]\n*/\n")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function htmlColorNames(arr) {\n  arr.splice(0, 2, 'DarkSalmon', 'BlanchedAlmond')\n  return arr;\n}\nconsole.log(htmlColorNames(['DarkGoldenRod', 'WhiteSmoke', 'LavenderBlush', 'PaleTurquoise', 'FireBrick']));\n/*\n[ 'DarkSalmon',\n  'BlanchedAlmond',\n  'LavenderBlush',\n  'PaleTurquoise',\n  'FireBrick' ]\n*/\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"7-copier-les-\xe9l\xe9ments-du-tableau-\xe0-laide-de-slice"},"7. Copier les \xe9l\xe9ments du tableau \xe0 l\u2019aide de ",Object(o.mdx)("inlineCode",{parentName:"h2"},"slice()")),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/copy-array-items-using-slice"}),"Learn Basic Data Structures: Copy Array Items Using slice() | freeCodeCamp.org")),Object(o.mdx)("p",null,"La m\xe9thode suivante que nous aborderons est ",Object(o.mdx)("inlineCode",{parentName:"p"},"slice()"),". Plut\xf4t que de  modifier un tableau, ",Object(o.mdx)("inlineCode",{parentName:"p"},"slice()")," copie ou extrait un nombre donn\xe9  d'\xe9l\xe9ments dans un nouveau tableau, laissant le tableau sur lequel il  est appel\xe9 intact. ",Object(o.mdx)("inlineCode",{parentName:"p"},"slice()")," ne prend que 2 param\xe8tres - le premier est  l'index auquel commencer l'extraction, et le second est l'index auquel  arr\xeater l'extraction (l'extraction se produira jusqu'\xe0, mais sans  inclure l'\xe9l\xe9ment \xe0 cet index). Consid\xe9rez ceci :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let weatherConditions = ['rain', 'snow', 'sleet', 'hail', 'clear'];\nlet todaysWeather = weatherConditions.slice(1, 3);\n// todaysWeather est \xe9gal \xe0 ['snow', 'sleet'];\n// weatherConditions est toujours \xe9gal \xe0 ['rain', 'snow', 'sleet', 'hail', 'clear']\n")),Object(o.mdx)("p",null,"En effet, nous avons cr\xe9\xe9 un nouveau tableau en extrayant des \xe9l\xe9ments d'un tableau existant."),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Nous avons d\xe9fini une fonction, ",Object(o.mdx)("inlineCode",{parentName:"p"},"forecast"),",  qui prend un tableau comme  argument. Modifiez la fonction \xe0 l'aide de ",Object(o.mdx)("inlineCode",{parentName:"p"},"slice()")," pour extraire les  informations du tableau d'arguments et renvoyer un nouveau tableau  contenant les \xe9l\xe9ments ",Object(o.mdx)("inlineCode",{parentName:"p"},"'warm'")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"'sunny'"),"."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},Object(o.mdx)("inlineCode",{parentName:"p"},"forecast")," devraient renvoyer ",Object(o.mdx)("inlineCode",{parentName:"p"},'["warm", "sunny"]'),"\nLa fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"forecast")," doit utiliser la m\xe9thode ",Object(o.mdx)("inlineCode",{parentName:"p"},"slice()"))),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function forecast(arr) {\n  // Changer uniquement le code en dessous de cette ligne\n  return arr;\n}\n// Changer uniquement le code au-dessus de cette ligne\nconsole.log(forecast(['cold', 'rainy', 'warm', 'sunny', 'cool', 'thunderstorms']));\n// [ 'cold', 'rainy', 'warm', 'sunny', 'cool', 'thunderstorms' ]\n")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function forecast(arr) {\n  return arr.slice(2, 4);\n}\nconsole.log(forecast(['cold', 'rainy', 'warm', 'sunny', 'cool', 'thunderstorms']));\n// [ 'warm', 'sunny' ]\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"8-copier-un-tableau-avec-lop\xe9rateur-spread-"},"8. Copier un tableau avec l'op\xe9rateur Spread ",Object(o.mdx)("inlineCode",{parentName:"h2"},"[...]")),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/copy-an-array-with-the-spread-operator"}),"Learn Basic Data Structures: Copy an Array with the Spread Operator | freeCodeCamp.org")),Object(o.mdx)("p",null,"Alors que ",Object(o.mdx)("inlineCode",{parentName:"p"},"slice()")," nous permet d'\xeatre s\xe9lectifs sur les \xe9l\xe9ments d'un  tableau \xe0 copier, parmi plusieurs autres t\xe2ches utiles, le nouvel ",Object(o.mdx)("em",{parentName:"p"},"op\xe9rateur de propagation")," d'ES6 nous permet de copier facilement tous les \xe9l\xe9ments d'un tableau, dans l'ordre, avec une syntaxe simple et  hautement lisible. La syntaxe de diffusion ressemble simplement \xe0 ceci : ",Object(o.mdx)("inlineCode",{parentName:"p"},"..."),"\nEn pratique, nous pouvons utiliser l'op\xe9rateur spread pour copier un tableau comme ceci :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let thisArray = [true, true, undefined, false, null];\nlet thatArray = [...thisArray];\n// thatArray est \xe9gal \xe0 [true, true, undefined, false, null]\n// thisArray reste inchang\xe9 et thatArray contient les m\xeames \xe9l\xe9ments que thisArray\n")),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Nous avons d\xe9fini une fonction, ",Object(o.mdx)("inlineCode",{parentName:"p"},"copyMachine")," qui prend ",Object(o.mdx)("inlineCode",{parentName:"p"},"arr")," (un tableau) et  ",Object(o.mdx)("inlineCode",{parentName:"p"},"num")," (un nombre) comme arguments. La fonction est cens\xe9e renvoyer un  nouveau tableau compos\xe9 de ",Object(o.mdx)("inlineCode",{parentName:"p"},"num")," de copies de ",Object(o.mdx)("inlineCode",{parentName:"p"},"arr"),". Nous avons fait  l'essentiel du travail pour vous, mais cela ne fonctionne pas encore  tout \xe0 fait correctement. Modifiez la fonction en utilisant la syntaxe spread pour qu'elle fonctionne correctement (indice : une autre  m\xe9thode que nous avons d\xe9j\xe0 couverte pourrait \xeatre utile ici !)."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},Object(o.mdx)("inlineCode",{parentName:"p"},"copyMachine([true, false, true], 2)")," doit renvoyer ",Object(o.mdx)("inlineCode",{parentName:"p"},"[[true, false, true], [true, false, true]]"),"\n",Object(o.mdx)("inlineCode",{parentName:"p"},"copyMachine([1, 2, 3], 5)")," doit renvoyer ",Object(o.mdx)("inlineCode",{parentName:"p"},"[[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]"),"\n",Object(o.mdx)("inlineCode",{parentName:"p"},"copyMachine([true, true, null], 1)")," doit renvoyer ",Object(o.mdx)("inlineCode",{parentName:"p"},"[[true, true, null]]"),"\n",Object(o.mdx)("inlineCode",{parentName:"p"},'copyMachine(["it works"], 3)')," devrait retourner ",Object(o.mdx)("inlineCode",{parentName:"p"},'[["it works"], ["it works"], ["it works"]]'),"\nLa fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"copyMachine")," doit utiliser le ",Object(o.mdx)("inlineCode",{parentName:"p"},"spread operator")," avec le tableau ",Object(o.mdx)("inlineCode",{parentName:"p"},"arr"))),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function copyMachine(arr, num) {\n  let newArr = [];\n  while (num >= 1) {\n    // Changer uniquement le code en dessous de cette ligne\n    // Changer uniquement le code au-dessus de cette ligne\n    num--;\n  }\n  return newArr;\n}\nconsole.log(copyMachine([true, false, true], 2)); // []\n")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function copyMachine(arr, num) {\n  let newArr = [];\n  while (num >= 1) {\n    newArr.push([...arr]);\n    num--;\n  }\n  return newArr;\n}\nconsole.log(copyMachine([true, false, true], 2)); // [[true, false, true], [true, false, true]]\nconsole.log(copyMachine([1, 2, 3], 5)); // [[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]\nconsole.log(copyMachine([true, true, null], 1)); // [[true, true, null]]\nconsole.log(copyMachine([\"it works\"], 3)); // [['it works'], ['it works'], ['it works']]\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"9-combiner-des-tableaux-avec-lop\xe9rateur-de-propagation-spread-"},"9. Combiner des tableaux avec l'op\xe9rateur de propagation (spread) (",Object(o.mdx)("inlineCode",{parentName:"h2"},"[...]"),")"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/combine-arrays-with-the-spread-operator"}),"Learn Basic Data Structures: Combine Arrays with the Spread Operator | freeCodeCamp.org")),Object(o.mdx)("p",null,"Un autre \xe9norme avantage de l'op\xe9rateur de propagation (",Object(o.mdx)("em",{parentName:"p"},"spread"),") est la  possibilit\xe9 de combiner des tableaux ou d'ins\xe9rer tous les \xe9l\xe9ments d'un tableau dans un autre, \xe0 n'importe quel index. Avec des syntaxes plus  traditionnelles, nous pouvons concat\xe9ner des tableaux, mais cela ne nous permet de combiner des tableaux qu'\xe0 la fin de l'un et au d\xe9but d'un  autre. La syntaxe de diffusion rend l'op\xe9ration suivante extr\xeamement  simple :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let thisArray = ['sage', 'rosemary', 'parsley', 'thyme'];\nlet thatArray = ['basil', 'cilantro', ...thisArray, 'coriander'];\n// thatArray \xe9quivaut d\xe9sormais \xe0 ['basil', 'cilantro', 'sage', 'rosemary', 'parsley', 'thyme', 'coriander']\n")),Object(o.mdx)("p",null,"En utilisant la syntaxe de propagation, nous venons de r\xe9aliser une  op\xe9ration qui aurait \xe9t\xe9 plus complexe et plus verbeuse si nous avions  utilis\xe9 les m\xe9thodes traditionnelles."),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Nous avons d\xe9fini une  fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"spreadOut")," qui renvoie la variable ",Object(o.mdx)("inlineCode",{parentName:"p"},"sentence"),". Modifiez la fonction  en utilisant l'op\xe9rateur ",Object(o.mdx)("em",{parentName:"p"},"spread")," pour qu'elle renvoie le tableau  ",Object(o.mdx)("inlineCode",{parentName:"p"},"['learning', 'to', 'code', 'is', 'fun']"),"."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},Object(o.mdx)("inlineCode",{parentName:"p"},"spreadOut")," doit renvoyer ",Object(o.mdx)("inlineCode",{parentName:"p"},"['learning', 'to', 'code', 'is', 'fun']"),"\nLa fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"spreadOut")," doit utiliser la syntaxe de propagation")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function spreadOut() {\n  let fragment = ['to', 'code'];\n  let sentence; // Change this line\n  return sentence;\n}\nconsole.log(spreadOut()); // undefined\n")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function spreadOut() {\n  let fragment = ['to', 'code'];\n  let sentence = ['learning', ...fragment, 'is', 'fun'];\n  return sentence;\n}\nconsole.log(spreadOut()); // [ 'learning', 'to', 'code', 'is', 'fun' ]\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"10-v\xe9rifier-la-pr\xe9sence-dun-\xe9l\xe9ment-avec-indexof"},"10. V\xe9rifier la pr\xe9sence d'un \xe9l\xe9ment avec ",Object(o.mdx)("inlineCode",{parentName:"h2"},"indexOf()")),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/check-for-the-presence-of-an-element-with-indexof"}),"Learn Basic Data Structures: Check For The Presence of an Element With indexOf() | freeCodeCamp.org")),Object(o.mdx)("p",null,"\xc9tant donn\xe9 que les tableaux peuvent \xeatre modifi\xe9s ou ",Object(o.mdx)("em",{parentName:"p"},"mut\xe9s")," \xe0 tout moment, il n'y a aucune garantie sur l'emplacement d'un \xe9l\xe9ment de donn\xe9es  particulier sur un tableau donn\xe9, ou si cet \xe9l\xe9ment existe encore.  Heureusement, JavaScript nous fournit une autre m\xe9thode int\xe9gr\xe9e, ",Object(o.mdx)("inlineCode",{parentName:"p"},"indexOf()"),", qui nous permet de v\xe9rifier rapidement et facilement la  pr\xe9sence d'un \xe9l\xe9ment sur un tableau. ",Object(o.mdx)("inlineCode",{parentName:"p"},"indexOf()")," prend un \xe9l\xe9ment comme  param\xe8tre, et lorsqu'il est appel\xe9, il renvoie la position, ou l'index,  de cet \xe9l\xe9ment, ou ",Object(o.mdx)("inlineCode",{parentName:"p"},"-1")," si l'\xe9l\xe9ment n'existe pas sur le tableau.\nPar exemple :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let fruits = ['apples', 'pears', 'oranges', 'peaches', 'pears'];\nfruits.indexOf ('dates'); // renvoie -1\nfruits.indexOf ('oranges'); // renvoie 2\nfruits.indexOf ('pears'); // retourne 1, le premier index auquel l'\xe9l\xe9ment existe\n")),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,Object(o.mdx)("inlineCode",{parentName:"p"},"indexOf()")," peut \xeatre incroyablement utile pour v\xe9rifier rapidement la pr\xe9sence  d'un \xe9l\xe9ment sur un tableau. Nous avons d\xe9fini une fonction, ",Object(o.mdx)("inlineCode",{parentName:"p"},"quickCheck"),", qui prend un tableau et un \xe9l\xe9ment comme arguments. Modifiez la  fonction en utilisant ",Object(o.mdx)("inlineCode",{parentName:"p"},"indexOf()")," pour qu'elle renvoie ",Object(o.mdx)("inlineCode",{parentName:"p"},"true")," si l'\xe9l\xe9ment  pass\xe9 existe sur le tableau et ",Object(o.mdx)("inlineCode",{parentName:"p"},"false")," dans le cas contraire."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"La fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"quickCheck")," doit renvoyer un bool\xe9en (",Object(o.mdx)("inlineCode",{parentName:"p"},"true")," or ",Object(o.mdx)("inlineCode",{parentName:"p"},"false"),"), pas une cha\xeene (",Object(o.mdx)("inlineCode",{parentName:"p"},'"true"')," or ",Object(o.mdx)("inlineCode",{parentName:"p"},'"false"'),")\n",Object(o.mdx)("inlineCode",{parentName:"p"},'quickCheck(["squash", "onions", "shallots"], "mushrooms")')," devrait renvoyer ",Object(o.mdx)("inlineCode",{parentName:"p"},"false"),"\n",Object(o.mdx)("inlineCode",{parentName:"p"},'quickCheck(["onions", "squash", "shallots"], "onions")')," devrait renvoyer ",Object(o.mdx)("inlineCode",{parentName:"p"},"true"),"\n",Object(o.mdx)("inlineCode",{parentName:"p"},"quickCheck([3, 5, 9, 125, 45, 2], 125)")," doit renvoyer ",Object(o.mdx)("inlineCode",{parentName:"p"},"true"),"\n",Object(o.mdx)("inlineCode",{parentName:"p"},"quickCheck([true, false, false], undefined)")," doit renvoyer ",Object(o.mdx)("inlineCode",{parentName:"p"},"false"),"\nLa fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"quickCheck")," doit utiliser la m\xe9thode ",Object(o.mdx)("inlineCode",{parentName:"p"},"indexOf()"))),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function quickCheck(arr, elem) {\n  // Only change code below this line\n  // Only change code above this line\n}\nconsole.log(quickCheck(['squash', 'onions', 'shallots'], 'mushrooms')); // undefined\n")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function quickCheck(arr, elem) {\n  if (arr.indexOf(elem) != -1) {\n    return true;\n  } else {\n    return false;\n  };\n};\nconsole.log(quickCheck(['squash', 'onions', 'shallots'], 'mushrooms')); // false\nconsole.log(quickCheck([\"onions\", \"squash\", \"shallots\"], \"onions\")); // true\nconsole.log(quickCheck([3, 5, 9, 125, 45, 2], 125)); // true\nconsole.log(quickCheck([true, false, false], undefined)); // false\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"11-it\xe9rer-\xe0-travers-tous-les-\xe9l\xe9ments-dun-tableau-\xe0-laide-de-boucles-for"},"11. It\xe9rer \xe0 travers tous les \xe9l\xe9ments d'un tableau \xe0 l'aide de boucles ",Object(o.mdx)("inlineCode",{parentName:"h2"},"for")),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/iterate-through-all-an-arrays-items-using-for-loops"}),"Learn Basic Data Structures: Iterate Through All an Array's Items Using For Loops | freeCodeCamp.org")),Object(o.mdx)("p",null,"Parfois, lorsque vous travaillez avec des tableaux, il est tr\xe8s pratique de  pouvoir parcourir chaque \xe9l\xe9ment pour trouver un ou plusieurs \xe9l\xe9ments  dont nous pourrions avoir besoin, ou de manipuler un tableau en fonction des \xe9l\xe9ments de donn\xe9es r\xe9pondant \xe0 un certain ensemble de crit\xe8res.  JavaScript propose plusieurs m\xe9thodes int\xe9gr\xe9es qui it\xe8rent chacune sur  des tableaux de mani\xe8res l\xe9g\xe8rement diff\xe9rentes pour obtenir des  r\xe9sultats diff\xe9rents (tels que ",Object(o.mdx)("inlineCode",{parentName:"p"},"every()"),", ",Object(o.mdx)("inlineCode",{parentName:"p"},"forEach()"),", ",Object(o.mdx)("inlineCode",{parentName:"p"},"map()"),", etc.), mais la technique qui est la plus flexible et nous offre la meilleure la  quantit\xe9 de contr\xf4le est une simple boucle ",Object(o.mdx)("inlineCode",{parentName:"p"},"for"),".\nConsid\xe9rer ce qui suit :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function greaterThanTen(arr) {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 10) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n}\ngreaterThanTen([2, 12, 8, 14, 80, 0, 1]);\n// renvoie [12, 14, 80]\n")),Object(o.mdx)("p",null,"En utilisant une boucle ",Object(o.mdx)("inlineCode",{parentName:"p"},"for"),", cette fonction parcourt et acc\xe8de \xe0 chaque  \xe9l\xe9ment du tableau, et le soumet \xe0 un test simple que nous avons cr\xe9\xe9.  De cette fa\xe7on, nous avons d\xe9termin\xe9 facilement et par programme les  \xe9l\xe9ments de donn\xe9es sup\xe9rieurs \xe0 10 et renvoy\xe9 un nouveau tableau  contenant ces \xe9l\xe9ments."),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Nous avons d\xe9fini une fonction, ",Object(o.mdx)("inlineCode",{parentName:"p"},"filteredArray"),", qui prend ",Object(o.mdx)("inlineCode",{parentName:"p"},"arr"),", un tableau imbriqu\xe9 et ",Object(o.mdx)("inlineCode",{parentName:"p"},"elem")," comme  arguments, et renvoie un nouveau tableau. ",Object(o.mdx)("inlineCode",{parentName:"p"},"elem")," repr\xe9sente un \xe9l\xe9ment qui peut ou non \xeatre pr\xe9sent sur un ou plusieurs des tableaux imbriqu\xe9s  dans ",Object(o.mdx)("inlineCode",{parentName:"p"},"arr"),". Modifiez la fonction, en utilisant une boucle ",Object(o.mdx)("inlineCode",{parentName:"p"},"for"),", pour  renvoyer une version filtr\xe9e du tableau pass\xe9 de sorte que tout tableau imbriqu\xe9 dans ",Object(o.mdx)("inlineCode",{parentName:"p"},"arr")," contenant ",Object(o.mdx)("inlineCode",{parentName:"p"},"elem")," ait \xe9t\xe9 supprim\xe9."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},Object(o.mdx)("inlineCode",{parentName:"p"},"filteredArray([[10, 8, 3], [14, 6, 23], [3, 18, 6]], 18)")," doit renvoyer ",Object(o.mdx)("inlineCode",{parentName:"p"},"[ [10, 8, 3], [14, 6, 23] ]"),"\n",Object(o.mdx)("inlineCode",{parentName:"p"},'filteredArray([ ["trumpets", 2], ["flutes", 4], ["saxophones", 2] ], 2)')," doit renvoyer ",Object(o.mdx)("inlineCode",{parentName:"p"},'[ ["flutes", 4] ]'),"\n",Object(o.mdx)("inlineCode",{parentName:"p"},'filteredArray([ ["amy", "beth", "sam"], ["dave", "sean", "peter"] ], "peter")')," doit renvoyer ",Object(o.mdx)("inlineCode",{parentName:"p"},'[ ["amy", "beth", "sam"] ]'),"\n",Object(o.mdx)("inlineCode",{parentName:"p"},"filteredArray([[3, 2, 3], [1, 6, 3], [3, 13, 26], [19, 3, 9]], 3)")," doit renvoyer ",Object(o.mdx)("inlineCode",{parentName:"p"},"[ ]"),"\nLa fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"filteredArray")," doit utiliser une boucle ",Object(o.mdx)("inlineCode",{parentName:"p"},"for"))),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function filteredArray(arr, elem) {\n  let newArr = [];\n  // Only change code below this line\n  // Only change code above this line\n  return newArr;\n}\nconsole.log(filteredArray([[3, 2, 3], [1, 6, 3], [3, 13, 26], [19, 3, 9]], 3)); // []\n")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'function filteredArray(arr, elem) {\n  let newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i].indexOf(elem) == -1) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n}\nconsole.log(filteredArray([[10, 8, 3], [14, 6, 23], [3, 18, 6]], 18)); // [[10, 8, 3], [14, 6, 23]]\nconsole.log(filteredArray([ ["trumpets", 2], ["flutes", 4], ["saxophones", 2] ], 2)); // [[\'flutes\', 4]]\nconsole.log(filteredArray([ ["amy", "beth", "sam"], ["dave", "sean", "peter"] ], "peter")); // [[\'amy\', \'beth\', \'sam\']]\nconsole.log(filteredArray([[3, 2, 3], [1, 6, 3], [3, 13, 26], [19, 3, 9]], 3)); // []\n')),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"12-cr\xe9ez-des-tableaux-multidimensionnels-complexes"},"12. Cr\xe9ez des tableaux multidimensionnels complexes"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/create-complex-multi-dimensional-arrays"}),"Learn Basic Data Structures: Create complex multi-dimensional arrays | freeCodeCamp.org")),Object(o.mdx)("p",null,"Impressionnant ! Vous venez d'apprendre une tonne sur les tableaux ! Cela a \xe9t\xe9 un aper\xe7u de niveau assez \xe9lev\xe9, et il y a beaucoup plus \xe0  apprendre sur le travail avec des tableaux, dont vous verrez une grande  partie dans les sections suivantes. Mais avant de passer \xe0 l'examen des  objets, jetons un autre coup d'\u0153il et voyons comment les tableaux  peuvent devenir un peu plus complexes que ce que nous avons vu dans les  d\xe9fis pr\xe9c\xe9dents.\nL'une des fonctionnalit\xe9s les plus puissantes  lorsque l'on consid\xe8re les tableaux comme des structures de donn\xe9es est  que les tableaux peuvent contenir, voire \xeatre enti\xe8rement constitu\xe9s  d'autres tableaux. Nous avons vu des tableaux qui contiennent des  tableaux dans les d\xe9fis pr\xe9c\xe9dents, mais des tableaux assez simples.  Cependant, les tableaux peuvent contenir une profondeur infinie de  tableaux qui peuvent contenir d'autres tableaux, chacun avec leurs  propres niveaux de profondeur arbitraires, et ainsi de suite. De cette  mani\xe8re, un tableau peut tr\xe8s rapidement devenir une structure de  donn\xe9es tr\xe8s complexe, connue sous le nom de tableau ",Object(o.mdx)("em",{parentName:"p"},"multidimensionnel"),"  ou imbriqu\xe9. Prenons l'exemple suivant :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let nestedArray = [// top, ou premier niveau - le tableau le plus ext\xe9rieur\n  ['deep'], // un tableau dans un tableau, 2 niveaux de profondeur\n  [\n    ['deeper'], ['deeper'] // 2 tableaux imbriqu\xe9s sur 3 niveaux de profondeur\n  ],\n  [\n    [\n      ['deepest'], ['deepest'] // 2 tableaux imbriqu\xe9s sur 4 niveaux de profondeur\n    ],\n    [\n      [\n        ['deepest-est?'] // un tableau imbriqu\xe9 de 5 niveaux de profondeur\n      ]\n    ]\n  ]\n];\n")),Object(o.mdx)("p",null,"Bien que cet exemple puisse sembler compliqu\xe9, ce niveau de complexit\xe9 n'est pas inconnu, ni m\xeame inhabituel, lorsqu'il s'agit de grandes quantit\xe9s  de donn\xe9es. Cependant, nous pouvons toujours acc\xe9der tr\xe8s facilement aux niveaux les plus profonds d'un tableau aussi complexe avec la notation  entre crochets :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"console.log(nestedArray[2][1][0][0][0]);\n// logs: deepest-est?\n")),Object(o.mdx)("p",null,"Et maintenant que nous savons o\xf9 se trouve cette donn\xe9e, nous pouvons la r\xe9initialiser si nous devons :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"nestedArray[2][1][0][0][0] = 'deeper still';\nconsole.log(nestedArray[2][1][0][0][0]);\n// now logs: deeper still\n")),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Nous avons d\xe9fini une variable, ",Object(o.mdx)("inlineCode",{parentName:"p"},"myNestedArray"),", d\xe9finie \xe9gale \xe0 un tableau. Modifiez ",Object(o.mdx)("inlineCode",{parentName:"p"},"myNestedArray"),", en utilisant n'importe quelle combinaison de  ",Object(o.mdx)("em",{parentName:"p"},"cha\xeenes"),", de ",Object(o.mdx)("em",{parentName:"p"},"nombres")," et de ",Object(o.mdx)("em",{parentName:"p"},"bool\xe9ens")," pour les \xe9l\xe9ments de donn\xe9es, de  sorte qu'il ait exactement cinq niveaux de profondeur (rappelez-vous, le tableau le plus ext\xe9rieur est le niveau 1). Quelque part au troisi\xe8me  niveau, incluez la cha\xeene ",Object(o.mdx)("inlineCode",{parentName:"p"},"'deep'"),", au quatri\xe8me niveau, incluez la cha\xeene ",Object(o.mdx)("inlineCode",{parentName:"p"},"'deeper'"),", et au cinqui\xe8me niveau, incluez la cha\xeene ",Object(o.mdx)("inlineCode",{parentName:"p"},"'deepest'"),"."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},Object(o.mdx)("inlineCode",{parentName:"p"},"myNestedArray")," ne doit contenir que des nombres, des bool\xe9ens et des cha\xeenes comme \xe9l\xe9ments de donn\xe9es\n",Object(o.mdx)("inlineCode",{parentName:"p"},"myNestedArray")," doit avoir exactement 5 niveaux de profondeur\n",Object(o.mdx)("inlineCode",{parentName:"p"},"myNestedArray")," doit contenir exactement une occurrence de la cha\xeene ",Object(o.mdx)("inlineCode",{parentName:"p"},"'deep'")," sur un tableau imbriqu\xe9 \xe0 3 niveaux de profondeur\n",Object(o.mdx)("inlineCode",{parentName:"p"},"myNestedArray")," doit contenir exactement une occurrence de la cha\xeene ",Object(o.mdx)("inlineCode",{parentName:"p"},"'deeper'")," sur un tableau imbriqu\xe9 4 niveaux de profondeur\n",Object(o.mdx)("inlineCode",{parentName:"p"},"myNestedArray")," doit contenir exactement une occurrence de la cha\xeene ",Object(o.mdx)("inlineCode",{parentName:"p"},"'deepest'")," sur un tableau imbriqu\xe9 de 5 niveaux de profondeur")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let myNestedArray = [\n  // Only change code below this line\n  ['unshift', false, 1, 2, 3, 'complex', 'nested'],\n  ['loop', 'shift', 6, 7, 1000, 'method'],\n  ['concat', false, true, 'spread', 'array'],\n  ['mutate', 1327.98, 'splice', 'slice', 'push'],\n  ['iterate', 1.3849, 7, '8.4876', 'arbitrary', 'depth']\n  // Only change code above this line\n];\n")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let myNestedArray = [\n    [\n        ['deep'], [\n            ['deeper'], [\n                ['deepest'],\n                ['unshift', false, 1, 2, 3, 'complex', 'nested'],\n                ['loop', 'shift', 6, 7, 1000, 'method'],\n                ['concat', false, true, 'spread', 'array'],\n                ['mutate', 1327.98, 'splice', 'slice', 'push'],\n                ['iterate', 1.3849, 7, '8.4876', 'arbitrary', 'depth']\n            ]\n        ]\n    ]\n];\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"13-ajouter-des-paires-cl\xe9-valeur-aux-objets-javascript"},"13. Ajouter des paires cl\xe9-valeur aux objets JavaScript"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/add-key-value-pairs-to-javascript-objects"}),"Learn Basic Data Structures: Add Key-Value Pairs to JavaScript Objects | freeCodeCamp.org")),Object(o.mdx)("p",null,"Dans leur forme la plus \xe9l\xe9mentaire, les objets ne sont que des  collections de paires ",Object(o.mdx)("em",{parentName:"p"},"cl\xe9-valeur"),". En d'autres termes, ce sont des  \xe9l\xe9ments de donn\xe9es (",Object(o.mdx)("em",{parentName:"p"},"valeurs"),") mapp\xe9s \xe0 des identificateurs uniques  appel\xe9s propri\xe9t\xe9s (",Object(o.mdx)("em",{parentName:"p"},"cl\xe9s"),"). Jetez un \u0153il \xe0 un exemple :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const tekkenCharacter = {\n  player: 'Hwoarang',\n  fightingStyle: 'Tae Kwon Doe',\n  human: true\n};\n")),Object(o.mdx)("p",null,"Le code ci-dessus d\xe9finit un objet de personnage de jeu vid\xe9o Tekken appel\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"tekkenCharacter"),". Il a trois propri\xe9t\xe9s, chacune correspondant \xe0  une valeur sp\xe9cifique. Si vous souhaitez ajouter une propri\xe9t\xe9  suppl\xe9mentaire, telle que \xab origine \xbb, vous pouvez le faire en attribuant  ",Object(o.mdx)("inlineCode",{parentName:"p"},"origin")," \xe0 l'objet :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tekkenCharacter.origin = 'South Korea';\n")),Object(o.mdx)("p",null,"Cela utilise la notation par points. Si vous deviez observer l'objet  ",Object(o.mdx)("inlineCode",{parentName:"p"},"tekkenCharacter"),", il inclura d\xe9sormais la propri\xe9t\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"origin"),". Hwoarang  avait \xe9galement des cheveux orange distincts. Vous pouvez ajouter cette  propri\xe9t\xe9 avec la notation entre crochets en faisant :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"tekkenCharacter['hair color'] = 'dyed orange';\n")),Object(o.mdx)("p",null,"La notation entre crochets est requise si votre propri\xe9t\xe9 contient un  espace ou si vous souhaitez utiliser une variable pour nommer la  propri\xe9t\xe9. Dans le cas ci-dessus, la propri\xe9t\xe9 est plac\xe9e entre  guillemets pour la d\xe9signer comme une cha\xeene et sera ajout\xe9e exactement  comme indiqu\xe9. Sans guillemets, elle sera \xe9valu\xe9e comme une variable et  le nom de la propri\xe9t\xe9 sera quelle que soit la valeur de la variable.  Voici un exemple avec une variable :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const eyes = 'eye color';\ntekkenCharacter[eyes] = 'brown';\n")),Object(o.mdx)("p",null,"Apr\xe8s avoir ajout\xe9 tous les exemples, l'objet ressemblera \xe0 ceci :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"{\n  player: 'Hwoarang',\n  fightingStyle: 'Tae Kwon Doe',\n  human: true,\n  origin: 'South Korea',\n  'hair color': 'dyed orange',\n  'eye color': 'brown'\n};\n")),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Un objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"foods")," a \xe9t\xe9 cr\xe9\xe9 avec trois entr\xe9es. En utilisant la syntaxe de  votre choix, ajoutez-y trois autres entr\xe9es : ",Object(o.mdx)("inlineCode",{parentName:"p"},"bananas")," d'une valeur de ",Object(o.mdx)("inlineCode",{parentName:"p"},"13"),", ",Object(o.mdx)("inlineCode",{parentName:"p"},"grapes")," d'une valeur de ",Object(o.mdx)("inlineCode",{parentName:"p"},"35")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"strawberries")," d'une valeur de ",Object(o.mdx)("inlineCode",{parentName:"p"},"27"),"."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},Object(o.mdx)("inlineCode",{parentName:"p"},"foods")," doit \xeatre un objet.\nL'objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"foods")," doit avoir une cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},'"bananas"')," d'une valeur de ",Object(o.mdx)("inlineCode",{parentName:"p"},"13"),".\nL'objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"foods")," doit avoir une cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},'"grapes"')," d'une valeur de ",Object(o.mdx)("inlineCode",{parentName:"p"},"35"),".\nL'objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"foods")," doit avoir une cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},'"strawberries"')," d'une valeur de ",Object(o.mdx)("inlineCode",{parentName:"p"},"27"),".\nLes paires cl\xe9-valeur doivent \xeatre d\xe9finies en utilisant la notation point ou crochet.")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let foods = {\n  apples: 25,\n  oranges: 32,\n  plums: 28\n};\n// Changer uniquement le code en dessous de cette ligne\n// Changer uniquement le code au-dessus de cette ligne\nconsole.log(foods); // { apples: 25, oranges: 32, plums: 28 }\n")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let foods = {\n  apples: 25,\n  oranges: 32,\n  plums: 28\n};\nfoods.bananas = 13;\nfoods['grapes'] = 35;\nconst berries = 'strawberries';\nfoods[berries] = 27;\nconsole.log(foods); // { apples: 25, oranges: 32, plums: 28, bananas: 13, grapes: 35, strawberries: 27 }\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"14-modifier-un-objet-imbriqu\xe9-dans-un-objet"},"14. Modifier un objet imbriqu\xe9 dans un objet"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/modify-an-object-nested-within-an-object"}),"Learn Basic Data Structures: Modify an Object Nested Within an Object | freeCodeCamp.org")),Object(o.mdx)("p",null,"Jetons maintenant un coup d'\u0153il \xe0 un objet l\xe9g\xe8rement plus complexe. Les propri\xe9t\xe9s des objets peuvent \xeatre imbriqu\xe9es \xe0 une profondeur arbitraire, et leurs valeurs peuvent \xeatre n'importe quel type de donn\xe9es pris en charge par JavaScript, y compris des tableaux et m\xeame d'autres  objets. Consid\xe9rer ce qui suit :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let nestedObject = {\n  id: 28802695164,\n  date: 'December 31, 2016',\n  data: {\n    totalUsers: 99,\n    online: 80,\n    onlineStatus: {\n      active: 67,\n      away: 13,\n      busy: 8\n    }\n  }\n};\n")),Object(o.mdx)("p",null,Object(o.mdx)("inlineCode",{parentName:"p"},"nestedObject")," a trois propri\xe9t\xe9s : ",Object(o.mdx)("inlineCode",{parentName:"p"},"id")," (la valeur est un nombre), ",Object(o.mdx)("inlineCode",{parentName:"p"},"date")," (la valeur est une cha\xeene) et ",Object(o.mdx)("inlineCode",{parentName:"p"},"data")," (la valeur est un objet avec sa structure imbriqu\xe9e). Si les structures peuvent rapidement devenir complexes,  nous pouvons toujours utiliser les m\xeames notations pour acc\xe9der aux  informations dont nous avons besoin. Pour affecter la valeur ",Object(o.mdx)("inlineCode",{parentName:"p"},"10")," \xe0 la  propri\xe9t\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"busy")," de l'objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"onlineStatus")," imbriqu\xe9, nous utilisons la  notation par points pour r\xe9f\xe9rencer la propri\xe9t\xe9 :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"nestedObject.data.onlineStatus.busy = 10;\n")),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Ici, nous avons d\xe9fini un objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"userActivity"),", qui comprend un autre objet  imbriqu\xe9 en son sein. D\xe9finissez la valeur de la cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"online")," sur ",Object(o.mdx)("inlineCode",{parentName:"p"},"45"),"."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},Object(o.mdx)("inlineCode",{parentName:"p"},"userActivity")," doit avoir des propri\xe9t\xe9s ",Object(o.mdx)("inlineCode",{parentName:"p"},"id"),", ",Object(o.mdx)("inlineCode",{parentName:"p"},"date")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"data"),".\n",Object(o.mdx)("inlineCode",{parentName:"p"},"userActivity")," doit avoir une cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"data")," d\xe9finie sur un objet avec des cl\xe9s ",Object(o.mdx)("inlineCode",{parentName:"p"},"totalUsers")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"online"),".\nLa propri\xe9t\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"online")," imbriqu\xe9e dans la cl\xe9 de donn\xe9es de ",Object(o.mdx)("inlineCode",{parentName:"p"},"userActivity")," doit \xeatre d\xe9finie sur ",Object(o.mdx)("inlineCode",{parentName:"p"},"45"),"\nLa propri\xe9t\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"online")," doit \xeatre d\xe9finie \xe0 l'aide de la notation par points ou entre crochets.")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let userActivity = {\n  id: 23894201352,\n  date: 'January 1, 2017',\n  data: {\n    totalUsers: 51,\n    online: 42\n  }\n};\n// Only change code below this line\n// Only change code above this line\nconsole.log(userActivity);\n/*\n{ id: 23894201352,\n  date: 'January 1, 2017',\n  data: { totalUsers: 51, online: 42 } }\n*/\n")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let userActivity = {\n  id: 23894201352,\n  date: 'January 1, 2017',\n  data: {\n    totalUsers: 51,\n    online: 42\n  }\n};\nuserActivity.data.online = 45;\nconsole.log(userActivity);\n/*\n{ id: 23894201352,\n  date: 'January 1, 2017',\n  data: { totalUsers: 51, online: 45 } }\n*/\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"15-acc\xe9der-aux-noms-de-propri\xe9t\xe9s-avec-la-notation-entre-crochets"},"15. Acc\xe9der aux noms de propri\xe9t\xe9s avec la notation entre crochets"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/access-property-names-with-bracket-notation"}),"Learn Basic Data Structures: Access Property Names with Bracket Notation | freeCodeCamp.org")),Object(o.mdx)("p",null,"Dans le premier d\xe9fi d'objet, nous avons mentionn\xe9 l'utilisation de la  notation entre crochets comme moyen d'acc\xe9der aux valeurs de propri\xe9t\xe9  en utilisant l'\xe9valuation d'une variable. Par exemple, imaginez que  notre objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"foods")," soit utilis\xe9 dans un programme pour une caisse  enregistreuse de supermarch\xe9. Nous avons une fonction qui d\xe9finit le ",Object(o.mdx)("inlineCode",{parentName:"p"},"selectedFood")," et nous voulons v\xe9rifier notre objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"foods")," pour la  pr\xe9sence de cet aliment. Cela pourrait ressembler \xe0 :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let selectedFood = getCurrentFood(scannedItem);\nlet inventory = foods[selectedFood];\n")),Object(o.mdx)("p",null,"Ce code \xe9valuera la valeur stock\xe9e dans la variable ",Object(o.mdx)("inlineCode",{parentName:"p"},"selectedFood")," et  retournera la valeur de cette cl\xe9 dans l'objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"foods"),", ou ",Object(o.mdx)("inlineCode",{parentName:"p"},"undefined")," si  elle n'est pas pr\xe9sente. La notation entre crochets est tr\xe8s utile car  parfois les propri\xe9t\xe9s des objets ne sont pas connues avant l'ex\xe9cution  ou nous devons y acc\xe9der de mani\xe8re plus dynamique."),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Nous avons  d\xe9fini une fonction, ",Object(o.mdx)("inlineCode",{parentName:"p"},"checkInventory"),", qui re\xe7oit un \xe9l\xe9ment scann\xe9 comme  argument. Renvoyez la valeur actuelle de la cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"scannedItem")," dans l'objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"foods"),". Vous pouvez supposer que seules les cl\xe9s valides seront  fournies comme argument \xe0 ",Object(o.mdx)("inlineCode",{parentName:"p"},"checkInventory"),"."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},Object(o.mdx)("inlineCode",{parentName:"p"},"checkInventory")," doit \xeatre une fonction.\nL'objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"foods")," ne doit avoir que les paires valeur-cl\xe9 suivantes :  ",Object(o.mdx)("inlineCode",{parentName:"p"},"apples: 25"),", ",Object(o.mdx)("inlineCode",{parentName:"p"},"oranges: 32"),", ",Object(o.mdx)("inlineCode",{parentName:"p"},"plums: 28"),", ",Object(o.mdx)("inlineCode",{parentName:"p"},"bananas: 13"),", ",Object(o.mdx)("inlineCode",{parentName:"p"},"grapes: 35"),", ",Object(o.mdx)("inlineCode",{parentName:"p"},"strawberries: 27"),".\n",Object(o.mdx)("inlineCode",{parentName:"p"},'checkInventory("apples")')," doit renvoyer ",Object(o.mdx)("inlineCode",{parentName:"p"},"25"),".\n",Object(o.mdx)("inlineCode",{parentName:"p"},'checkInventory("bananas")')," doit renvoyer ",Object(o.mdx)("inlineCode",{parentName:"p"},"13"),".\n",Object(o.mdx)("inlineCode",{parentName:"p"},'checkInventory("strawberries")')," doit renvoyer ",Object(o.mdx)("inlineCode",{parentName:"p"},"27"),".")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'let foods = {\n  apples: 25,\n  oranges: 32,\n  plums: 28,\n  bananas: 13,\n  grapes: 35,\n  strawberries: 27\n};\nfunction checkInventory(scannedItem) {\n  // Changer uniquement le code en dessous de cette ligne\n  // Changer uniquement le code au-dessus de cette ligne\n}\nconsole.log(checkInventory("apples")); // undefined\n')),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'let foods = {\n  apples: 25,\n  oranges: 32,\n  plums: 28,\n  bananas: 13,\n  grapes: 35,\n  strawberries: 27\n};\nfunction checkInventory(scannedItem) {\n  return foods[scannedItem];\n}\nconsole.log(checkInventory("apples")); // 25\nconsole.log(checkInventory("bananas")); // 13\nconsole.log(checkInventory("strawberries")); // 27\n')),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"16-utilisez-le-mot-cl\xe9-delete-pour-supprimer-les-propri\xe9t\xe9s-de-lobjet"},"16. Utilisez le mot-cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"h2"},"delete")," pour supprimer les propri\xe9t\xe9s de l'objet"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/use-the-delete-keyword-to-remove-object-properties"}),"Learn Basic Data Structures: Use the delete Keyword to Remove Object Properties | freeCodeCamp.org")),Object(o.mdx)("p",null,"Vous savez maintenant ce que sont les objets et leurs caract\xe9ristiques et avantages de base. En bref, ce sont des magasins de cl\xe9s-valeurs qui  offrent un moyen flexible et intuitif de structurer les donn\xe9es ,",Object(o.mdx)("strong",{parentName:"p"},Object(o.mdx)("em",{parentName:"strong"},"et")),", offrent un temps de recherche tr\xe8s rapide. Tout au long du reste de ces  d\xe9fis, nous d\xe9crirons plusieurs op\xe9rations courantes que vous pouvez  effectuer sur des objets afin que vous puissiez vous familiariser avec  l'application de ces structures de donn\xe9es utiles dans vos programmes.\nDans les d\xe9fis pr\xe9c\xe9dents, nous avons \xe0 la fois ajout\xe9 et modifi\xe9 les paires cl\xe9-valeur d'un objet. Ici, nous allons voir comment nous pouvons ",Object(o.mdx)("em",{parentName:"p"},"supprimer")," une paire cl\xe9-valeur d'un objet.\nRevenons une derni\xe8re  fois \xe0 notre exemple d'objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"foods"),". Si nous voulions supprimer la cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"apples"),", nous pouvons la supprimer en utilisant le mot-cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"delete")," comme  ceci :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"delete foods.apples;\n")),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Utilisez le mot-cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"delete")," pour supprimer les cl\xe9s ",Object(o.mdx)("inlineCode",{parentName:"p"},"oranges"),", ",Object(o.mdx)("inlineCode",{parentName:"p"},"plums"),", et ",Object(o.mdx)("inlineCode",{parentName:"p"},"strawberries")," de l'objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"foods"),"."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"L'objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"foods")," ne doit avoir que trois cl\xe9s : ",Object(o.mdx)("inlineCode",{parentName:"p"},"apples"),", ",Object(o.mdx)("inlineCode",{parentName:"p"},"grapes"),", et ",Object(o.mdx)("inlineCode",{parentName:"p"},"bananas"),".\nLes cl\xe9s ",Object(o.mdx)("inlineCode",{parentName:"p"},"oranges"),", ",Object(o.mdx)("inlineCode",{parentName:"p"},"plums"),", et ",Object(o.mdx)("inlineCode",{parentName:"p"},"strawberries")," doivent \xeatre supprim\xe9es \xe0 l'aide de ",Object(o.mdx)("inlineCode",{parentName:"p"},"delete"),".")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let foods = {\n  apples: 25,\n  oranges: 32,\n  plums: 28,\n  bananas: 13,\n  grapes: 35,\n  strawberries: 27\n};\n// Changer uniquement le code en dessous de cette ligne\n// Changer uniquement le code au-dessus de cette ligne\nconsole.log(foods); // {apples: 25, oranges: 32, plums: 28, bananas: 13, grapes: 35, strawberries: 27}\n")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let foods = {\n  apples: 25,\n  oranges: 32,\n  plums: 28,\n  bananas: 13,\n  grapes: 35,\n  strawberries: 27\n};\ndelete foods.oranges;\ndelete foods.plums;\ndelete foods.strawberries;\nconsole.log(foods); // { apples: 25, bananas: 13, grapes: 35 }\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"17-v\xe9rifier-si-un-objet-a-une-propri\xe9t\xe9-hasownproperty---in"},"17. V\xe9rifier si un objet a une propri\xe9t\xe9 (",Object(o.mdx)("inlineCode",{parentName:"h2"},"hasOwnProperty()"),") - (",Object(o.mdx)("inlineCode",{parentName:"h2"},"in"),")"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/check-if-an-object-has-a-property"}),"Learn Basic Data Structures: Check if an Object has a Property | freeCodeCamp.org")),Object(o.mdx)("p",null,"Nous pouvons maintenant ajouter, modifier et supprimer des cl\xe9s d'objets. Mais que faire si nous voulions simplement savoir si un objet a une propri\xe9t\xe9 sp\xe9cifique ? JavaScript nous offre deux fa\xe7ons diff\xe9rentes de le faire. L'un utilise la m\xe9thode ",Object(o.mdx)("inlineCode",{parentName:"p"},"hasOwnProperty()")," et l'autre utilise le mot-cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"in"),". Si nous avons un objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"users")," avec une  propri\xe9t\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"Alan"),", nous pourrions v\xe9rifier sa pr\xe9sence de l'une des  mani\xe8res suivantes :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"users.hasOwnProperty('Alan');\n'Alan' in users;\n// les deux retournent vrai\n")),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Nous avons cr\xe9\xe9 un objet, ",Object(o.mdx)("inlineCode",{parentName:"p"},"users"),", avec quelques utilisateurs et une fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"isEveryoneHere"),", \xe0 laquelle nous passons l'objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"users")," en tant  qu'argument. Terminez d'\xe9crire cette fonction pour qu'elle ne renvoie ",Object(o.mdx)("inlineCode",{parentName:"p"},"true")," que si l'objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"users")," contient les quatre noms, ",Object(o.mdx)("inlineCode",{parentName:"p"},"Alan"),", ",Object(o.mdx)("inlineCode",{parentName:"p"},"Jeff"),", ",Object(o.mdx)("inlineCode",{parentName:"p"},"Sarah")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"Ryan"),", comme cl\xe9s, et ",Object(o.mdx)("inlineCode",{parentName:"p"},"false")," dans le cas contraire."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"L'objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"users")," ne doit contenir que les cl\xe9s ",Object(o.mdx)("inlineCode",{parentName:"p"},"Alan"),", ",Object(o.mdx)("inlineCode",{parentName:"p"},"Jeff"),", ",Object(o.mdx)("inlineCode",{parentName:"p"},"Sarah")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"Ryan"),"\nLa fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"isEveryoneHere")," doit renvoyer ",Object(o.mdx)("inlineCode",{parentName:"p"},"true")," si ",Object(o.mdx)("inlineCode",{parentName:"p"},"Alan"),", ",Object(o.mdx)("inlineCode",{parentName:"p"},"Jeff"),", ",Object(o.mdx)("inlineCode",{parentName:"p"},"Sarah")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"Ryan")," sont des propri\xe9t\xe9s de l'objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"users"),"\nLa fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"isEveryoneHere")," doit renvoyer ",Object(o.mdx)("inlineCode",{parentName:"p"},"false")," si ",Object(o.mdx)("inlineCode",{parentName:"p"},"Alan")," n'est pas une propri\xe9t\xe9 de l'objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"users"),"\nLa fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"isEveryoneHere")," doit renvoyer ",Object(o.mdx)("inlineCode",{parentName:"p"},"false")," si ",Object(o.mdx)("inlineCode",{parentName:"p"},"Jeff")," n'est pas une propri\xe9t\xe9 de l'objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"users"),"\nLa fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"isEveryoneHere")," doit renvoyer ",Object(o.mdx)("inlineCode",{parentName:"p"},"false")," si ",Object(o.mdx)("inlineCode",{parentName:"p"},"Sarah")," n'est pas une propri\xe9t\xe9 de l'objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"users"),"\nLa fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"isEveryoneHere")," doit renvoyer ",Object(o.mdx)("inlineCode",{parentName:"p"},"false")," si ",Object(o.mdx)("inlineCode",{parentName:"p"},"Ryan")," n'est pas une propri\xe9t\xe9 de l'objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"users"))),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let users = {\n  Alan: {\n    age: 27,\n    online: true\n  },\n  Jeff: {\n    age: 32,\n    online: true\n  },\n  Sarah: {\n    age: 48,\n    online: true\n  },\n  Ryan: {\n    age: 19,\n    online: true\n  }\n};\nfunction isEveryoneHere(obj) {\n  // Changer uniquement le code en dessous de cette ligne\n  // Changer uniquement le code au-dessus de cette ligne\n}\nconsole.log(isEveryoneHere(users)); // undefined\n")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let users = {\n  Alan: {\n    age: 27,\n    online: true\n  },\n  Jeff: {\n    age: 32,\n    online: true\n  },\n  Sarah: {\n    age: 48,\n    online: true\n  },\n  Ryan: {\n    age: 19,\n    online: true\n  }\n};\nfunction isEveryoneHere(obj) {\n  if (\n    obj.hasOwnProperty(\"Alan\") &&\n    obj.hasOwnProperty(\"Jeff\") &&\n    obj.hasOwnProperty(\"Sarah\") &&\n    obj.hasOwnProperty(\"Ryan\")\n  ) {\n    return true;\n  }\n  return false;\n}\nconsole.log(isEveryoneHere(users)); // true\n// ou\nfunction isEveryoneHere(obj) {\n  if (\n    'Alan' in users &&\n    'Jeff' in users &&\n    'Sarah' in users &&\n    'Ryan' in users\n  ) {\n    return true;\n  }\n  return false;\n}\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"18-it\xe9rer-\xe0-travers-les-cl\xe9s-dun-objet-avec-une-instruction-for-in"},"18. It\xe9rer \xe0 travers les cl\xe9s d'un objet avec une instruction ",Object(o.mdx)("inlineCode",{parentName:"h2"},"for... in")),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/iterate-through-the-keys-of-an-object-with-a-for---in-statement"}),"Learn Basic Data Structures: Iterate Through the Keys of an Object with a for...in Statement | freeCodeCamp.org")),Object(o.mdx)("p",null,"Parfois, vous devrez peut-\xeatre parcourir toutes les cl\xe9s d'un objet.  Cela n\xe9cessite une syntaxe sp\xe9cifique en JavaScript appel\xe9e instruction ",Object(o.mdx)("em",{parentName:"p"},"for...in"),". Pour notre objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"users"),", cela pourrait ressembler \xe0 :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"for (let user in users) {\n  console.log(user);\n}\n// logs:\nAlan\nJeff\nSarah\nRyan\n")),Object(o.mdx)("p",null,"Dans cette instruction, nous avons d\xe9fini une variable ",Object(o.mdx)("inlineCode",{parentName:"p"},"user")," et, comme vous pouvez le voir, cette variable a \xe9t\xe9 r\xe9initialis\xe9e \xe0 chaque  it\xe9ration sur chacune des cl\xe9s de l'objet lorsque l'instruction a  parcouru l'objet en boucle, ce qui a entra\xeen\xe9 l'impression du nom de  chaque utilisateur sur la console. ",Object(o.mdx)("strong",{parentName:"p"},"REMARQUE :")," les objets ne conservent  pas l'ordre des cl\xe9s stock\xe9es comme le font les tableaux ; ainsi, la  position d'une cl\xe9 sur un objet, ou l'ordre relatif dans lequel elle  appara\xeet, n'est pas pertinente lors du r\xe9f\xe9rencement ou de l'acc\xe8s \xe0  cette cl\xe9."),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Nous avons d\xe9fini une fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"countOnline")," qui accepte un argument (un objet utilisateurs). Utilisez une instruction ",Object(o.mdx)("em",{parentName:"p"},"for...in")," dans cette fonction pour parcourir l'objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"users")," pass\xe9 dans la  fonction et renvoyer le nombre d'utilisateurs dont la propri\xe9t\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"online")," est d\xe9finie sur ",Object(o.mdx)("inlineCode",{parentName:"p"},"true"),". Un exemple d'objet utilisateurs qui pourrait \xeatre pass\xe9 \xe0 ",Object(o.mdx)("inlineCode",{parentName:"p"},"countOnline")," est illustr\xe9 ci-dessous. Chaque utilisateur aura  une propri\xe9t\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"online")," avec une valeur ",Object(o.mdx)("inlineCode",{parentName:"p"},"true")," ou ",Object(o.mdx)("inlineCode",{parentName:"p"},"false"),"."),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"{\n  Alan: {\n    online: false\n  },\n  Jeff: {\n    online: true\n  },\n  Sarah: {\n    online: false\n  }\n}\n")),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"La fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"countOnline")," doit utiliser une instruction ",Object(o.mdx)("inlineCode",{parentName:"p"},"for in")," pour parcourir les cl\xe9s d'objet de l'objet qui lui est pass\xe9.\nLa fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"countOnline")," doit renvoyer ",Object(o.mdx)("inlineCode",{parentName:"p"},"1")," lorsque l'objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"{Alan: {online:  false}, Jeff: {online: true}, Sarah: {online: false}}")," lui est pass\xe9\nLa fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"countOnline")," doit renvoyer ",Object(o.mdx)("inlineCode",{parentName:"p"},"2")," lorsque l'objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"{Alan: {online:  true}, Jeff: {online: false}, Sarah: {online: true}}")," lui est pass\xe9\nLa fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"countOnline")," doit renvoyer ",Object(o.mdx)("inlineCode",{parentName:"p"},"0")," lorsque l'objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"{Alan: {online:  false}, Jeff: {online: false}, Sarah: {online: false}}")," lui est transmis")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function countOnline(usersObj) {\n  // Changer uniquement le code en dessous de cette ligne\n  // Changer uniquement le code au-dessus de cette ligne\n}\n")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function countOnline(usersObj) {\n  let result = 0;\n  for (let user in usersObj) {\n    if (usersObj[user].online === true) {\n      result++;\n    }\n  }\n  return result;\n}\nconsole.log(countOnline({Alan: {online:  false}, Jeff: {online: true}, Sarah: {online: false}})); // 1\nconsole.log(countOnline({Alan: {online:  true}, Jeff: {online: false}, Sarah: {online: true}})); // 2\nconsole.log(countOnline({Alan: {online:  false}, Jeff: {online: false}, Sarah: {online: false}})); // 0\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"19-g\xe9n\xe9rer-un-tableau-de-toutes-les-cl\xe9s-dobjet-avec-objectkeys"},"19. G\xe9n\xe9rer un tableau de toutes les cl\xe9s d'objet avec ",Object(o.mdx)("inlineCode",{parentName:"h2"},"Object.keys()")),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/generate-an-array-of-all-object-keys-with-object-keys"}),"Learn Basic Data Structures: Generate an Array of All Object Keys with Object.keys() | freeCodeCamp.org")),Object(o.mdx)("p",null,"Nous pouvons \xe9galement g\xe9n\xe9rer un tableau contenant toutes les cl\xe9s stock\xe9es dans un objet en utilisant la m\xe9thode ",Object(o.mdx)("inlineCode",{parentName:"p"},"Object.keys()")," et en passant un objet comme argument. Cela renverra un tableau avec des  cha\xeenes repr\xe9sentant chaque propri\xe9t\xe9 de l'objet. Encore une fois, il  n'y aura pas d'ordre sp\xe9cifique pour les entr\xe9es du tableau."),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Terminez d'\xe9crire la fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"getArrayOfUsers")," afin qu'elle renvoie un tableau  contenant toutes les propri\xe9t\xe9s de l'objet qu'il re\xe7oit en argument."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"L'objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"users")," ne doit contenir que les cl\xe9s ",Object(o.mdx)("inlineCode",{parentName:"p"},"Alan"),", ",Object(o.mdx)("inlineCode",{parentName:"p"},"Jeff"),", ",Object(o.mdx)("inlineCode",{parentName:"p"},"Sarah")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"Ryan"),"\nLa fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"getArrayOfUsers")," doit renvoyer un tableau contenant toutes les cl\xe9s de l'objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"users"))),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let users = {\n  Alan: {\n    age: 27,\n    online: false\n  },\n  Jeff: {\n    age: 32,\n    online: true\n  },\n  Sarah: {\n    age: 48,\n    online: false\n  },\n  Ryan: {\n    age: 19,\n    online: true\n  }\n};\nfunction getArrayOfUsers(obj) {\n  // Changer uniquement le code en dessous de cette ligne\n  // Changer uniquement le code au-dessus de cette ligne\n}\nconsole.log(getArrayOfUsers(users)); // undefined\n")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function getArrayOfUsers(obj) {\n  return Object.keys(obj);\n}\nconsole.log(getArrayOfUsers(users)); // [ 'Alan', 'Jeff', 'Sarah', 'Ryan' ]\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"20-modifier-un-tableau-stock\xe9-dans-un-objet"},"20. Modifier un tableau stock\xe9 dans un objet"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-data-structures/modify-an-array-stored-in-an-object"}),"Learn Basic Data Structures: Modify an Array Stored in an Object | freeCodeCamp.org")),Object(o.mdx)("p",null,"Vous avez maintenant vu toutes les op\xe9rations de base pour les objets  JavaScript. Vous pouvez ajouter, modifier et supprimer des paires cl\xe9-valeur, v\xe9rifier si des cl\xe9s existent et parcourir toutes les cl\xe9s  d'un objet. En continuant \xe0 apprendre JavaScript, vous verrez des  applications d'objets encore plus polyvalentes. De plus, les le\xe7ons sur  les structures de donn\xe9es situ\xe9es dans la section Pr\xe9paration \xe0 l'entrevue de codage du programme couvrent \xe9galement les objets ES6 ",Object(o.mdx)("em",{parentName:"p"},"Map"),"  et ",Object(o.mdx)("em",{parentName:"p"},"Set"),", qui sont tous deux similaires aux objets ordinaires mais  fournissent des fonctionnalit\xe9s suppl\xe9mentaires. Maintenant que vous  avez appris les bases des tableaux et des objets, vous \xeates pr\xeat \xe0  commencer \xe0 vous attaquer \xe0 des probl\xe8mes plus complexes \xe0 l'aide de  JavaScript !"),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Jetez un \u0153il \xe0 l'objet que nous avons fourni dans  l'\xe9diteur de code. L'objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"user")," contient trois cl\xe9s. La cl\xe9 ",Object(o.mdx)("inlineCode",{parentName:"p"},"data")," contient cinq cl\xe9s, dont l'une contient un tableau ",Object(o.mdx)("inlineCode",{parentName:"p"},"friends"),". \xc0  partir de l\xe0, vous pouvez voir \xe0 quel point les objets sont flexibles en tant que structures de donn\xe9es. Nous avons commenc\xe9 \xe0 \xe9crire une  fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"addFriend"),". Terminez de l'\xe9crire pour qu'il prenne un objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"user")," et ajoute le nom de l'argument ",Object(o.mdx)("inlineCode",{parentName:"p"},"friend")," au tableau stock\xe9 dans ",Object(o.mdx)("inlineCode",{parentName:"p"},"user.data.friends")," et renvoie ce tableau."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"L'objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"user")," doit avoir les cl\xe9s ",Object(o.mdx)("inlineCode",{parentName:"p"},"name"),", ",Object(o.mdx)("inlineCode",{parentName:"p"},"age"),", and ",Object(o.mdx)("inlineCode",{parentName:"p"},"data"),".\nLa fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"addFriend")," doit accepter un objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"user")," et une cha\xeene ",Object(o.mdx)("inlineCode",{parentName:"p"},"friend")," comme arguments et ajouter l'ami au tableau ",Object(o.mdx)("inlineCode",{parentName:"p"},"friends")," dans l'objet ",Object(o.mdx)("inlineCode",{parentName:"p"},"user"),".\n",Object(o.mdx)("inlineCode",{parentName:"p"},'addFriend(user, "Pete")')," doit renvoyer ",Object(o.mdx)("inlineCode",{parentName:"p"},'["Sam", "Kira", "Tomo", "Pete"]'),".")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let user = {\n  name: 'Kenneth',\n  age: 28,\n  data: {\n    username: 'kennethCodesAllDay',\n    joinDate: 'March 26, 2016',\n    organization: 'freeCodeCamp',\n    friends: [\n      'Sam',\n      'Kira',\n      'Tomo'\n    ],\n    location: {\n      city: 'San Francisco',\n      state: 'CA',\n      country: 'USA'\n    }\n  }\n};\nfunction addFriend(userObj, friend) {\n  // Changer uniquement le code en dessous de cette ligne\n  // Changer uniquement le code au-dessus de cette ligne\n}\nconsole.log(addFriend(user, 'Pete')); // undefined\n")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function addFriend(userObj, friend) {\n  userObj.data.friends.push(friend);\n  return user.data.friends;\n}\nconsole.log(addFriend(user, 'Pete')); // [ 'Sam', 'Kira', 'Tomo', 'Pete' ]\n")))}u.isMDXComponent=!0},212:function(e,n,t){"use strict";t.r(n),t.d(n,"MDXContext",(function(){return u})),t.d(n,"MDXProvider",(function(){return m})),t.d(n,"mdx",(function(){return x})),t.d(n,"useMDXComponents",(function(){return p})),t.d(n,"withMDXComponents",(function(){return c}));var a=t(0),r=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(){return(i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=r.a.createContext({}),c=function(e){return function(n){var t=p(n.components);return r.a.createElement(e,i({},n,{components:t}))}},p=function(e){var n=r.a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},m=function(e){var n=p(e.components);return r.a.createElement(u.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},j=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,l=d(e,["components","mdxType","originalType","parentName"]),u=p(t),c=a,m=u["".concat(i,".").concat(c)]||u[c]||b[c]||o;return t?r.a.createElement(m,s(s({ref:n},l),{},{components:t})):r.a.createElement(m,s({ref:n},l))}));function x(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=j;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var d=2;d<o;d++)i[d]=t[d];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}j.displayName="MDXCreateElement"}}]);
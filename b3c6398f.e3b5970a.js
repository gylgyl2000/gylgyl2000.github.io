(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{172:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return s}));var a=n(3),o=n(7),i=(n(0),n(212)),r={id:"Codecademy-Learn_JavaScript-03-Functions",title:"Functions"},c={unversionedId:"Codecademy/Codecademy-Learn_JavaScript-03-Functions",id:"Codecademy/Codecademy-Learn_JavaScript-03-Functions",isDocsHomePage:!1,title:"Functions",description:"Learn how to write JavaScript functions, code designed to perform a particular task.",source:"@site/docs/Codecademy/Codecademy-Learn_JavaScript-03-Functions.md",slug:"/Codecademy/Codecademy-Learn_JavaScript-03-Functions",permalink:"/docs/Codecademy/Codecademy-Learn_JavaScript-03-Functions",editUrl:"https://github.com/gylgyl2000/laloutre.github.io/edit/main/docs/Codecademy/Codecademy-Learn_JavaScript-03-Functions.md",version:"current"},l=[{value:"01. What are Functions ?",id:"01-what-are-functions-",children:[]},{value:"02. Function Declarations",id:"02-function-declarations",children:[]},{value:"03. Calling a Function",id:"03-calling-a-function",children:[]},{value:"04. Parameters and Arguments",id:"04-parameters-and-arguments",children:[]},{value:"05. Default Parameters",id:"05-default-parameters",children:[]},{value:"06. Return",id:"06-return",children:[]},{value:"07. Helper Functions",id:"07-helper-functions",children:[]},{value:"08. Function Expressions",id:"08-function-expressions",children:[]},{value:"09. Arrow Functions",id:"09-arrow-functions",children:[]},{value:"10. Concise Body Arrow Functions",id:"10-concise-body-arrow-functions",children:[]},{value:"11. Review Functions",id:"11-review-functions",children:[]}],d={rightToc:l};function s(e){var t=e.components,r=Object(o.a)(e,["components"]);return Object(i.mdx)("wrapper",Object(a.a)({},d,r,{components:t,mdxType:"MDXLayout"}),Object(i.mdx)("p",null,"Learn how to write JavaScript functions, code designed to perform a particular task."),Object(i.mdx)("h2",{id:"01-what-are-functions-"},"01. What are Functions ?"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/functions/exercises/intro-to-functions"}),"Learn JavaScript | Codecademy")),Object(i.mdx)("p",null,"When first learning how to calculate the area of a rectangle, there\u2019s a sequence of steps to calculate the correct answer :"),Object(i.mdx)("ol",null,Object(i.mdx)("li",{parentName:"ol"},"Measure the width of the rectangle."),Object(i.mdx)("li",{parentName:"ol"},"Measure the height of the rectangle."),Object(i.mdx)("li",{parentName:"ol"},"Multiply the width and height of the rectangle.")),Object(i.mdx)("p",null,"With practice, you can calculate the area of the rectangle without being instructed with these three steps every time. "),Object(i.mdx)("p",null,"We can calculate the area of one rectangle with the following code :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const width = 10;\nconst height = 6;\nconst area =  width * height;\nconsole.log(area); // Output: 60\n")),Object(i.mdx)("p",null,"Imagine being asked to calculate the area of three different rectangles : "),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// Area of the first rectangle\nconst width1 = 10;\nconst height1 = 6;\nconst area1 =  width1 * height1;\n\n// Area of the second rectangle\nconst width2 = 4;\nconst height2 = 9;\nconst area2 =  width2 * height2;\n\n// Area of the third rectangle\nconst width3 = 10;\nconst height3 = 10;\nconst area3 =  width3 * height3;\n")),Object(i.mdx)("p",null,"In programming, we often use code to perform a specific task multiple times. Instead of rewriting the same code, we can group a block of code together and associate it with one task, then we can reuse that block of code whenever we need to perform the task again. We achieve this by creating a ",Object(i.mdx)("em",{parentName:"p"},"function"),". A function is a reusable block of code that groups together a sequence of statements to perform a specific task. "),Object(i.mdx)("p",null,"In this lesson, you will learn how to create and use functions, and how they can be used to create clearer and more concise code."),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"Instructions")),Object(i.mdx)("p",null,"Take a look at the provided GIF. It shows a function, named ",Object(i.mdx)("inlineCode",{parentName:"p"},"addOneSide"),", adding an additional side to different shape inputs. Notice how there is only one function, represented by the box, that is used to transform individual shapes (inputs) into new shapes (outputs). "),Object(i.mdx)("p",null,Object(i.mdx)("img",{alt:"functions_2",src:n(450).default})),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"02-function-declarations"},"02. Function Declarations"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/functions/exercises/function-declaration"}),"Learn JavaScript | Codecademy")),Object(i.mdx)("p",null,"In JavaScript, there are many ways to create a function. One way to create a function is by using a ",Object(i.mdx)("em",{parentName:"p"},"function declaration"),". Just like how a variable declaration binds a value to a variable name, a function declaration binds a function to a name, or an ",Object(i.mdx)("em",{parentName:"p"},"identifier"),". Take a look at the anatomy of a function declaration below:"),Object(i.mdx)("p",null,Object(i.mdx)("img",{alt:"Diagram showing the syntax of a function declaration",src:n(310).default})),Object(i.mdx)("p",null,"A function declaration consists of : "),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},"The ",Object(i.mdx)("inlineCode",{parentName:"li"},"function")," keyword."),Object(i.mdx)("li",{parentName:"ul"},"The name of the function, or its identifier, followed by parentheses."),Object(i.mdx)("li",{parentName:"ul"},"A function body, or the block of statements required to perform a specific task, enclosed in the function\u2019s curly brackets, ",Object(i.mdx)("inlineCode",{parentName:"li"},"{ }"),".")),Object(i.mdx)("p",null,"A function declaration is a function that is bound to an identifier, or name. In the next exercise we\u2019ll go over how to run the code inside the function body. "),Object(i.mdx)("p",null,"We should also be aware of the ",Object(i.mdx)("em",{parentName:"p"},"hoisting")," feature in JavaScript which allows access to function declarations before they\u2019re defined. "),Object(i.mdx)("p",null,"Take a look at example of hoisting :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"console.log(greetWorld()); // Output: Hello, World!\n\nfunction greetWorld() {\n  console.log('Hello, World!');\n}\n")),Object(i.mdx)("p",null,"Notice how hoisting allowed ",Object(i.mdx)("inlineCode",{parentName:"p"},"greetWorld()")," to be called before the ",Object(i.mdx)("inlineCode",{parentName:"p"},"greetWorld()")," function was defined! Since hoisting isn\u2019t considered good practice, we simply want you to be aware of this feature."),Object(i.mdx)("p",null,"If you want to read more about hoisting, check out ",Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Glossary/Hoisting"}),"MDN documentation on hoisting"),". "),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"Instructions")),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"1.")," Let\u2019s create a function that prints a reminder to the console. Using a function declaration, create a function called ",Object(i.mdx)("inlineCode",{parentName:"p"},"getReminder()"),". "),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"2.")," In the function body of ",Object(i.mdx)("inlineCode",{parentName:"p"},"getReminder()"),",  log the following reminder to the console: ",Object(i.mdx)("inlineCode",{parentName:"p"},"'Water the plants.'")),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"3.")," Let\u2019s create another function that prints a useful Spanish travel phrase to the console.\nUsing a function declaration, create a function called ",Object(i.mdx)("inlineCode",{parentName:"p"},"greetInSpanish()"),". "),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"4.")," Add code to the function body of ",Object(i.mdx)("inlineCode",{parentName:"p"},"greetInSpanish()")," : "),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},"In the function body ",Object(i.mdx)("inlineCode",{parentName:"li"},"console.log()")," the following Spanish phrase to the console: ",Object(i.mdx)("inlineCode",{parentName:"li"},"'Buenas Tardes.'"))),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function getReminder() {\n  console.log('Water the plants.');\n}\nfunction greetInSpanish() {\n  console.log('Buenas Tardes.')\n}\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"03-calling-a-function"},"03. Calling a Function"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/functions/exercises/functions"}),"Learn JavaScript | Codecademy")),Object(i.mdx)("p",null,"As we saw in previous exercises, a function declaration binds a function to an identifier. "),Object(i.mdx)("p",null,"However, a function declaration does not ask the code inside the function body to run, it just declares the existence of the function. The code inside a function body runs, or ",Object(i.mdx)("em",{parentName:"p"},"executes"),", only when the function is ",Object(i.mdx)("em",{parentName:"p"},"called"),". "),Object(i.mdx)("p",null,"To call a function in your code, you type the function name followed by parentheses."),Object(i.mdx)("p",null,Object(i.mdx)("img",{alt:"Diagram showing the syntax of invoking a function",src:n(311).default})),Object(i.mdx)("p",null,"This ",Object(i.mdx)("em",{parentName:"p"},"function call")," executes the function body, or all of the statements between the curly braces in the function declaration."),Object(i.mdx)("p",null,Object(i.mdx)("img",{alt:"Function execution diagram",src:n(451).default})),Object(i.mdx)("p",null,"We can call the same function as many times as needed."),Object(i.mdx)("p",null,"Let\u2019s practice calling functions in our code. "),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"Instructions")),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"1.")," Imagine that you manage an online store. When a customer places an order, you send them a thank you note. Let\u2019s create a function to complete this task :"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},"Define a function called ",Object(i.mdx)("inlineCode",{parentName:"li"},"sayThanks()")," as a function declaration."),Object(i.mdx)("li",{parentName:"ul"},"In the function body of ",Object(i.mdx)("inlineCode",{parentName:"li"},"sayThanks()"),", add code such that the function writes the following thank you message to the console when called: ",Object(i.mdx)("inlineCode",{parentName:"li"},"'Thank you for your purchase! We appreciate your business.'"))),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"2.")," Call ",Object(i.mdx)("inlineCode",{parentName:"p"},"sayThanks()"),"  to view the thank you message in the console. "),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"3.")," Functions can be called as many times as you need them.\nImagine that three customers placed an order and you wanted to send each of them a thank you message. Update your code to call ",Object(i.mdx)("inlineCode",{parentName:"p"},"sayThanks()")," three times."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function sayThanks() {\n  console.log('Thank you for your purchase! We appreciate your business.')\n}\nsayThanks();\nsayThanks();\nsayThanks();\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"04-parameters-and-arguments"},"04. Parameters and Arguments"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/functions/exercises/parameters"}),"Learn JavaScript | Codecademy")),Object(i.mdx)("p",null,"So far, the functions we\u2019ve created execute a task without an input. However, some functions can take inputs and use the inputs to perform a task. When declaring a function, we can specify its ",Object(i.mdx)("em",{parentName:"p"},"parameters"),". Parameters allow functions to accept input(s) and perform a task using the input(s). We use parameters as placeholders for information that will be passed to the function when it is called. "),Object(i.mdx)("p",null,"Let\u2019s observe how to specify parameters in our function declaration :"),Object(i.mdx)("p",null,Object(i.mdx)("img",{alt:"JavaScript syntax for declaring a function with parameters",src:n(312).default})),Object(i.mdx)("p",null,"In the diagram above, ",Object(i.mdx)("inlineCode",{parentName:"p"},"calculateArea()"),", computes the area of a rectangle, based on two inputs, ",Object(i.mdx)("inlineCode",{parentName:"p"},"width")," and ",Object(i.mdx)("inlineCode",{parentName:"p"},"height"),". The parameters are specified between the parenthesis as ",Object(i.mdx)("inlineCode",{parentName:"p"},"width")," and ",Object(i.mdx)("inlineCode",{parentName:"p"},"height"),", and inside the function body, they act just like regular variables. ",Object(i.mdx)("inlineCode",{parentName:"p"},"width")," and ",Object(i.mdx)("inlineCode",{parentName:"p"},"height")," act as placeholders for values that will be multiplied together. "),Object(i.mdx)("p",null,"When calling a function that has parameters, we specify the values in the parentheses that follow the function name. The values that are passed to the function when it is called are called ",Object(i.mdx)("em",{parentName:"p"},"arguments"),". Arguments can be passed to the function as values or variables. "),Object(i.mdx)("p",null,Object(i.mdx)("img",{alt:"JavaScript syntax for invoking a function with arguments as values",src:n(452).default})),Object(i.mdx)("p",null,"In the function call above, the number ",Object(i.mdx)("inlineCode",{parentName:"p"},"10")," is passed as the ",Object(i.mdx)("inlineCode",{parentName:"p"},"width")," and ",Object(i.mdx)("inlineCode",{parentName:"p"},"6")," is passed as ",Object(i.mdx)("inlineCode",{parentName:"p"},"height"),". Notice that the order in which arguments are passed and assigned follows the order that the parameters are declared.  "),Object(i.mdx)("p",null,Object(i.mdx)("img",{alt:"JavaScript syntax for invoking a function with arguments as variables",src:n(453).default})),Object(i.mdx)("p",null,"The variables ",Object(i.mdx)("inlineCode",{parentName:"p"},"rectWidth")," and ",Object(i.mdx)("inlineCode",{parentName:"p"},"rectHeight")," are initialized with the values for the height and width of a rectangle before being used in the function call. "),Object(i.mdx)("p",null,"By using parameters, ",Object(i.mdx)("inlineCode",{parentName:"p"},"calculateArea()")," can be reused to compute the area of any rectangle! Functions are a powerful tool in computer programming so let\u2019s practice creating and calling functions with parameters."),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"Instructions")),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"1.")," The ",Object(i.mdx)("inlineCode",{parentName:"p"},"sayThanks()")," function works well, but let\u2019s add the customer\u2019s name in the message.\nAdd a parameter called ",Object(i.mdx)("inlineCode",{parentName:"p"},"name")," to the function declaration for ",Object(i.mdx)("inlineCode",{parentName:"p"},"sayThanks()"),". "),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"2.")," With ",Object(i.mdx)("inlineCode",{parentName:"p"},"name")," as a parameter, it can be used as a variable in the function body of ",Object(i.mdx)("inlineCode",{parentName:"p"},"sayThanks()"),".\nUsing ",Object(i.mdx)("inlineCode",{parentName:"p"},"name")," and string concatenation, change the thank you message into the following :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"'Thank you for your purchase '+ name + '! We appreciate your business.'\n")),Object(i.mdx)("p",null,"Copy and paste the above message into your code."),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"3.")," A customer named Cole just purchased something from your online store. Call ",Object(i.mdx)("inlineCode",{parentName:"p"},"sayThanks()")," and pass ",Object(i.mdx)("inlineCode",{parentName:"p"},"'Cole'")," as an argument to send Cole a personalized thank you message."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function sayThanks(name) {\n  console.log('Thank you for your purchase '+ name + '! We appreciate your business.');\n}\nsayThanks('Cole'); // Thank you for your purchase Cole! We appreciate your business.\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"05-default-parameters"},"05. Default Parameters"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/functions/exercises/default-parameters"}),"Learn JavaScript | Codecademy")),Object(i.mdx)("p",null,"One of the features added in ES6 is the ability to use ",Object(i.mdx)("em",{parentName:"p"},"default parameters"),". Default parameters allow parameters to have a predetermined value in case there is no argument passed into the function or if the argument is ",Object(i.mdx)("inlineCode",{parentName:"p"},"undefined")," when called."),Object(i.mdx)("p",null,"Take a look at the code snippet below that uses a default parameter :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function greeting (name = 'stranger') {\n  console.log(`Hello, ${name}!`)\n}\n\ngreeting('Nick') // Output: Hello, Nick!\ngreeting() // Output: Hello, stranger!\n")),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},"In the example above, we used the ",Object(i.mdx)("inlineCode",{parentName:"li"},"=")," operator to assign the parameter ",Object(i.mdx)("inlineCode",{parentName:"li"},"name")," a default value of ",Object(i.mdx)("inlineCode",{parentName:"li"},"'stranger'"),". This is useful to have in case we ever want to include a non-personalized default greeting!"),Object(i.mdx)("li",{parentName:"ul"},"When the code calls ",Object(i.mdx)("inlineCode",{parentName:"li"},"greeting('Nick')")," the value of the argument is passed in and, ",Object(i.mdx)("inlineCode",{parentName:"li"},"'Nick'"),", will override the default parameter of ",Object(i.mdx)("inlineCode",{parentName:"li"},"'stranger'")," to log ",Object(i.mdx)("inlineCode",{parentName:"li"},"'Hello, Nick!'")," to the console."),Object(i.mdx)("li",{parentName:"ul"},"When there isn\u2019t an argument passed into ",Object(i.mdx)("inlineCode",{parentName:"li"},"greeting()"),", the default value of ",Object(i.mdx)("inlineCode",{parentName:"li"},"'stranger'")," is used, and ",Object(i.mdx)("inlineCode",{parentName:"li"},"'Hello, stranger!'")," is logged to the console.")),Object(i.mdx)("p",null,"By using a default parameter, we account for situations when an argument isn\u2019t passed into a function that is expecting an argument. "),Object(i.mdx)("p",null,"Let\u2019s practice creating functions that use default parameters."),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"Instructions")),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"1.")," The function ",Object(i.mdx)("inlineCode",{parentName:"p"},"makeShoppingList()")," creates a shopping list based on the items that are passed to the function as arguments. "),Object(i.mdx)("p",null,"Imagine that you always purchase milk, bread, and eggs every time you go shopping for groceries. To make creating a grocery list easier, let\u2019s assign default values to the parameters in ",Object(i.mdx)("inlineCode",{parentName:"p"},"makeShoppingList()"),"."),Object(i.mdx)("p",null,"Change the parameters of ",Object(i.mdx)("inlineCode",{parentName:"p"},"makeShoppingList()")," into default parameters :"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},"Assign \u2018milk\u2019 as the default value of ",Object(i.mdx)("inlineCode",{parentName:"li"},"item1"),"."),Object(i.mdx)("li",{parentName:"ul"},"Assign \u2018bread\u2019 as the default value of ",Object(i.mdx)("inlineCode",{parentName:"li"},"item2"),"."),Object(i.mdx)("li",{parentName:"ul"},"Assign \u2018eggs\u2019 as the default value of ",Object(i.mdx)("inlineCode",{parentName:"li"},"item3"),".")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function makeShoppingList(item1 = 'milk', item2 = 'bread', item3 = 'eggs'){\n  console.log(`Remember to buy ${item1}`);\n  console.log(`Remember to buy ${item2}`);\n  console.log(`Remember to buy ${item3}`);\n}\nmakeShoppingList();\n\n// Remember to buy milk\n// Remember to buy bread\n// Remember to buy eggs\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"06-return"},"06. Return"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/functions/exercises/return"}),"Learn JavaScript | Codecademy")),Object(i.mdx)("p",null,"When a function is called, the computer will run through the function\u2019s code and evaluate the result of calling the function. By default that resulting value is ",Object(i.mdx)("inlineCode",{parentName:"p"},"undefined"),"."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function rectangleArea(width, height) {\n  let area = width * height;\n}\nconsole.log(rectangleArea(5, 7)) // Prints undefined\n")),Object(i.mdx)("p",null,"In the code example, we defined our function to calculate the ",Object(i.mdx)("inlineCode",{parentName:"p"},"area")," of a ",Object(i.mdx)("inlineCode",{parentName:"p"},"width")," and ",Object(i.mdx)("inlineCode",{parentName:"p"},"height")," parameter. Then ",Object(i.mdx)("inlineCode",{parentName:"p"},"rectangleArea()")," is invoked with the arguments ",Object(i.mdx)("inlineCode",{parentName:"p"},"5")," and ",Object(i.mdx)("inlineCode",{parentName:"p"},"7"),". But when we went to print the results we got ",Object(i.mdx)("inlineCode",{parentName:"p"},"undefined"),". Did we write our function wrong? No! In fact, the function worked fine, and the computer did calculate the area as ",Object(i.mdx)("inlineCode",{parentName:"p"},"35"),", but we didn\u2019t capture it. So how can we do that? With the keyword ",Object(i.mdx)("inlineCode",{parentName:"p"},"return"),"!"),Object(i.mdx)("p",null,Object(i.mdx)("img",{alt:"using return keyword in a function",src:n(454).default})),Object(i.mdx)("p",null,"To pass back information from the function call, we use a return statement. To create a return statement, we use the ",Object(i.mdx)("inlineCode",{parentName:"p"},"return")," keyword followed by the value that we wish to return. Like we saw above, if the value is omitted, ",Object(i.mdx)("inlineCode",{parentName:"p"},"undefined")," is returned instead."),Object(i.mdx)("p",null,"When a ",Object(i.mdx)("inlineCode",{parentName:"p"},"return")," statement is used in a function body, the execution of the function is stopped and the code that follows it will not be executed. Look at the example below:   "),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function rectangleArea(width, height) {\n  if (width < 0 || height < 0) {\n    return 'You need positive integers to calculate area!';\n  }\n  return width * height;\n}\n")),Object(i.mdx)("p",null,"If an argument for ",Object(i.mdx)("inlineCode",{parentName:"p"},"width")," or ",Object(i.mdx)("inlineCode",{parentName:"p"},"height")," is less than ",Object(i.mdx)("inlineCode",{parentName:"p"},"0"),", then ",Object(i.mdx)("inlineCode",{parentName:"p"},"rectangleArea()")," will return ",Object(i.mdx)("inlineCode",{parentName:"p"},"'You need positive integers to calculate area!'"),". The second return statement ",Object(i.mdx)("inlineCode",{parentName:"p"},"width * height")," will not run. "),Object(i.mdx)("p",null,"The ",Object(i.mdx)("inlineCode",{parentName:"p"},"return")," keyword is powerful because it allows functions to produce an output. We can then save the output to a variable for later use. "),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"Instructions")),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"1.")," Imagine if we needed to order monitors for everyone in an office and this office is conveniently arranged in a grid shape. We could use a function to help us calculate the number of monitors needed !\nDeclare a function ",Object(i.mdx)("inlineCode",{parentName:"p"},"monitorCount()")," that has two parameters. The first parameter is ",Object(i.mdx)("inlineCode",{parentName:"p"},"rows")," and the second parameter is ",Object(i.mdx)("inlineCode",{parentName:"p"},"columns"),". "),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"2.")," Let\u2019s compute the number of monitors by multiplying ",Object(i.mdx)("inlineCode",{parentName:"p"},"rows")," and ",Object(i.mdx)("inlineCode",{parentName:"p"},"columns")," and then returning the value.\nIn the function body of the function you just wrote, use the ",Object(i.mdx)("inlineCode",{parentName:"p"},"return")," keyword to return ",Object(i.mdx)("inlineCode",{parentName:"p"},"rows * columns"),"."),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"3.")," Now that the function is defined, we can compute the number of monitors needed. Let\u2019s say that the office has 5 rows and 4 columns.\nDeclare a variable named ",Object(i.mdx)("inlineCode",{parentName:"p"},"numOfMonitors")," using the ",Object(i.mdx)("inlineCode",{parentName:"p"},"const")," keyword and assign ",Object(i.mdx)("inlineCode",{parentName:"p"},"numOfMonitors")," the value of invoking ",Object(i.mdx)("inlineCode",{parentName:"p"},"monitorCount()")," with the arguments ",Object(i.mdx)("inlineCode",{parentName:"p"},"5")," and ",Object(i.mdx)("inlineCode",{parentName:"p"},"4"),"."),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"4.")," To check that the function worked properly, log ",Object(i.mdx)("inlineCode",{parentName:"p"},"numOfMonitors")," to the console."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function monitorCount(rows, columns) {\n  return rows * columns;\n}\nconst numOfMonitors = monitorCount(5, 4);\nconsole.log(numOfMonitors); // 20\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"07-helper-functions"},"07. Helper Functions"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/functions/exercises/return-ii"}),"Learn JavaScript | Codecademy")),Object(i.mdx)("p",null,"We can also use the return value of a function inside another function. These functions being called within another function are often referred to as ",Object(i.mdx)("em",{parentName:"p"},"helper functions"),". Since each function is carrying out a specific task, it makes our code easier to read and debug if necessary. "),Object(i.mdx)("p",null,"If we wanted to define a function that converts the temperature from Celsius to Fahrenheit, we could write two functions like : "),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function multiplyByNineFifths(number) {\n  return number * (9/5);\n};\n\nfunction getFahrenheit(celsius) {\n  return multiplyByNineFifths(celsius) + 32;\n};\n\ngetFahrenheit(15); // Returns 59\n")),Object(i.mdx)("p",null,"In the example above :"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"getFahrenheit()")," is called and ",Object(i.mdx)("inlineCode",{parentName:"li"},"15")," is passed as an argument."),Object(i.mdx)("li",{parentName:"ul"},"The code block inside of ",Object(i.mdx)("inlineCode",{parentName:"li"},"getFahrenheit()")," calls ",Object(i.mdx)("inlineCode",{parentName:"li"},"multiplyByNineFifths()")," and  passes ",Object(i.mdx)("inlineCode",{parentName:"li"},"15")," as an argument. "),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"multiplyByNineFifths()")," takes the argument of ",Object(i.mdx)("inlineCode",{parentName:"li"},"15")," for the ",Object(i.mdx)("inlineCode",{parentName:"li"},"number")," parameter."),Object(i.mdx)("li",{parentName:"ul"},"The code block inside of ",Object(i.mdx)("inlineCode",{parentName:"li"},"multiplyByNineFifths()")," function multiplies ",Object(i.mdx)("inlineCode",{parentName:"li"},"15")," by ",Object(i.mdx)("inlineCode",{parentName:"li"},"(9/5)"),", which evaluates to ",Object(i.mdx)("inlineCode",{parentName:"li"},"27"),". "),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"27")," is returned back to the function call in  ",Object(i.mdx)("inlineCode",{parentName:"li"},"getFahrenheit()"),"."),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"getFahrenheit()")," continues to execute. It adds ",Object(i.mdx)("inlineCode",{parentName:"li"},"32")," to ",Object(i.mdx)("inlineCode",{parentName:"li"},"27"),", which evaluates to ",Object(i.mdx)("inlineCode",{parentName:"li"},"59"),". "),Object(i.mdx)("li",{parentName:"ul"},"Finally, ",Object(i.mdx)("inlineCode",{parentName:"li"},"59")," is returned back to the function call ",Object(i.mdx)("inlineCode",{parentName:"li"},"getFahrenheit(15)"),".")),Object(i.mdx)("p",null,"We can use functions to section off small bits of logic or tasks, then use them when we need to. Writing helper functions can help take large and difficult tasks and break them into smaller and more manageable tasks."),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"Instructions")),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"1.")," In the previous exercise, we created a function to find the number of monitors to order for an office. Now let\u2019s write another function that uses the ",Object(i.mdx)("inlineCode",{parentName:"p"},"monitorCount")," function to figure out the price.\nBelow ",Object(i.mdx)("inlineCode",{parentName:"p"},"monitorCount")," Create a function declaration named ",Object(i.mdx)("inlineCode",{parentName:"p"},"costOfMonitors")," that has two parameters, the first parameter is ",Object(i.mdx)("inlineCode",{parentName:"p"},"rows")," and the second parameter is ",Object(i.mdx)("inlineCode",{parentName:"p"},"columns"),". Leave the function body empty for now."),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"2.")," Time to add some code to the function body of ",Object(i.mdx)("inlineCode",{parentName:"p"},"costOfMonitors")," to calculate the total cost.\nAdd a ",Object(i.mdx)("inlineCode",{parentName:"p"},"return")," statement that returns the value of calling ",Object(i.mdx)("inlineCode",{parentName:"p"},"monitorCount(rows, columns)")," multiplied by ",Object(i.mdx)("inlineCode",{parentName:"p"},"200"),"."),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"3.")," We should save the cost to a variable.\nDeclare a variable named ",Object(i.mdx)("inlineCode",{parentName:"p"},"totalCost")," using the ",Object(i.mdx)("inlineCode",{parentName:"p"},"const")," keyword. Assign to ",Object(i.mdx)("inlineCode",{parentName:"p"},"totalCost")," the value of calling ",Object(i.mdx)("inlineCode",{parentName:"p"},"costOfMonitors()")," with the arguments ",Object(i.mdx)("inlineCode",{parentName:"p"},"5")," and ",Object(i.mdx)("inlineCode",{parentName:"p"},"4")," respectively. "),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"4.")," To check that the function worked properly, log ",Object(i.mdx)("inlineCode",{parentName:"p"},"totalCost")," to the console."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function monitorCount(rows, columns) {\n  return rows * columns;\n};\nfunction costOfMonitors(rows, columns) {\n  return monitorCount(rows, columns) * 200;\n};\nconst totalCost = costOfMonitors(5, 4);\nconsole.log(totalCost); // 4000\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"08-function-expressions"},"08. Function Expressions"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/functions/exercises/function-expressions"}),"Learn JavaScript | Codecademy")),Object(i.mdx)("p",null,"Another way to define a function is to use a ",Object(i.mdx)("em",{parentName:"p"},"function expression"),". To define a function inside an expression, we can use the ",Object(i.mdx)("inlineCode",{parentName:"p"},"function")," keyword. In a function expression, the function name is usually omitted. A function with no name is called an ",Object(i.mdx)("em",{parentName:"p"},"anonymous function"),". A function expression is often stored in a variable in order to refer to it."),Object(i.mdx)("p",null,"Consider the following function expression:"),Object(i.mdx)("p",null,Object(i.mdx)("img",{alt:"defining a function expression",src:n(313).default})),Object(i.mdx)("p",null,"To declare a function expression :"),Object(i.mdx)("ol",null,Object(i.mdx)("li",{parentName:"ol"},"Declare a variable to make the variable\u2019s name be the name, or identifier, of your function. Since the release of ES6, it is common practice to use ",Object(i.mdx)("inlineCode",{parentName:"li"},"const")," as the keyword to declare the variable. "),Object(i.mdx)("li",{parentName:"ol"},"Assign as that variable\u2019s value an anonymous function created by using the ",Object(i.mdx)("inlineCode",{parentName:"li"},"function")," keyword followed by a set of parentheses with possible parameters. Then a set of curly braces that contain the function body.")),Object(i.mdx)("p",null,"To invoke a function expression, write the name of the variable in which the function is stored followed by parentheses enclosing any arguments being passed into the function."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"variableName(argument1, argument2)\n")),Object(i.mdx)("p",null,"Unlike function declarations, function expressions are not hoisted so they cannot be called before they are defined. "),Object(i.mdx)("p",null,"Let\u2019s define a new function using a function expression. "),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"Instructions")),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"1.")," Let\u2019s say we have a plant that we need to water once a week on Wednesdays. We could define a function expression to help us check the day of the week and the plant needs to be watered :"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},"Create a variable named ",Object(i.mdx)("inlineCode",{parentName:"li"},"plantNeedsWater")," using the ",Object(i.mdx)("inlineCode",{parentName:"li"},"const")," variable keyword. "),Object(i.mdx)("li",{parentName:"ul"},"Assign an anonymous function that takes in a parameter of ",Object(i.mdx)("inlineCode",{parentName:"li"},"day")," to ",Object(i.mdx)("inlineCode",{parentName:"li"},"plantNeedsWater"),".")),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"2.")," Now we need to add some code to the function body of ",Object(i.mdx)("inlineCode",{parentName:"p"},"plantNeedsWater()")," : "),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},"In the function body add an ",Object(i.mdx)("inlineCode",{parentName:"li"},"if")," conditional that checks ",Object(i.mdx)("inlineCode",{parentName:"li"},"day === 'Wednesday'"),". "),Object(i.mdx)("li",{parentName:"ul"},"If the conditional is truthy, inside the ",Object(i.mdx)("inlineCode",{parentName:"li"},"if")," code block, use the ",Object(i.mdx)("inlineCode",{parentName:"li"},"return")," keyword to return ",Object(i.mdx)("inlineCode",{parentName:"li"},"true"),". ")),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"3.")," On days that aren\u2019t ",Object(i.mdx)("inlineCode",{parentName:"p"},"'Wednesday'"),", ",Object(i.mdx)("inlineCode",{parentName:"p"},"plantNeedsWater()")," should return ",Object(i.mdx)("inlineCode",{parentName:"p"},"false")," :"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},"Add an ",Object(i.mdx)("inlineCode",{parentName:"li"},"else")," statement after the ",Object(i.mdx)("inlineCode",{parentName:"li"},"if")," statement."),Object(i.mdx)("li",{parentName:"ul"},"Inside the ",Object(i.mdx)("inlineCode",{parentName:"li"},"else")," statement use the ",Object(i.mdx)("inlineCode",{parentName:"li"},"return")," keyword to return ",Object(i.mdx)("inlineCode",{parentName:"li"},"false"),".")),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"4.")," Call the ",Object(i.mdx)("inlineCode",{parentName:"p"},"plantNeedsWater()")," and pass in ",Object(i.mdx)("inlineCode",{parentName:"p"},"'Tuesday'")," as an argument."),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"5.")," Let\u2019s check that ",Object(i.mdx)("inlineCode",{parentName:"p"},"plantNeedsWater()")," returned the expected value.\nLog ",Object(i.mdx)("inlineCode",{parentName:"p"},"plantNeedsWater('Tuesday')")," to the console. If it worked correctly, you should see ",Object(i.mdx)("inlineCode",{parentName:"p"},"false")," logged to the console."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const plantNeedsWater = function(day) {\n  if (day === 'Wednesday') {\n    return true;\n  } else {\n    return false;\n  }\n};\nplantNeedsWater('Tuesday');\nconsole.log(plantNeedsWater('Tuesday')); // false\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"09-arrow-functions"},"09. Arrow Functions"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/functions/exercises/arrow-functions"}),"Learn JavaScript | Codecademy")),Object(i.mdx)("p",null,"ES6 introduced ",Object(i.mdx)("em",{parentName:"p"},"arrow function syntax"),", a  shorter way to write functions by using the special \u201cfat arrow\u201d ",Object(i.mdx)("inlineCode",{parentName:"p"},"() =>")," notation. "),Object(i.mdx)("p",null,"Arrow functions remove the need to type out the keyword ",Object(i.mdx)("inlineCode",{parentName:"p"},"function")," every time you need to create a function.  Instead, you first include the parameters inside the ",Object(i.mdx)("inlineCode",{parentName:"p"},"( )")," and then add an arrow ",Object(i.mdx)("inlineCode",{parentName:"p"},"=>")," that points to the function body surrounded in ",Object(i.mdx)("inlineCode",{parentName:"p"},"{  }")," like this :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const rectangleArea = (width, height) => {\n  let area = width * height;\n  return area;\n};\n")),Object(i.mdx)("p",null,"It\u2019s important to be familiar with the multiple ways of writing functions because you will come across each of these when reading other JavaScript code. "),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"Instructions")),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"1.")," Change ",Object(i.mdx)("inlineCode",{parentName:"p"},"plantNeedsWater()")," to use arrow function syntax. "),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const plantNeedsWater = function(day) {\n  if (day === 'Wednesday') {\n    return true;\n  } else {\n    return false;\n  }\n};\n")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const plantNeedsWater = (day) => {\n  if (day === 'Wednesday') {\n    return true;\n  } else {\n    return false;\n  }\n};\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"10-concise-body-arrow-functions"},"10. Concise Body Arrow Functions"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/functions/exercises/concise-body-arrow"}),"Learn JavaScript | Codecademy")),Object(i.mdx)("p",null,"JavaScript also provides several ways to refactor arrow function syntax. The most condensed form of the function is known as ",Object(i.mdx)("em",{parentName:"p"},"concise body"),". We\u2019ll explore a few of these techniques below :"),Object(i.mdx)("ol",null,Object(i.mdx)("li",{parentName:"ol"},Object(i.mdx)("p",{parentName:"li"},"Functions that take only a single parameter do not need that parameter to be enclosed in parentheses. However, if a function takes zero or multiple parameters, parentheses are required."),Object(i.mdx)("p",{parentName:"li"},Object(i.mdx)("img",{alt:"parameters",src:n(455).default})))),Object(i.mdx)("ol",{start:2},Object(i.mdx)("li",{parentName:"ol"},"A function body composed of a single-line block does not need curly braces. Without the curly braces, whatever that line evaluates will be automatically returned. The contents of the block should immediately follow the arrow ",Object(i.mdx)("inlineCode",{parentName:"li"},"=>")," and the ",Object(i.mdx)("inlineCode",{parentName:"li"},"return")," keyword can be removed. This is referred to as ",Object(i.mdx)("em",{parentName:"li"},"implicit return"),".")),Object(i.mdx)("p",null,Object(i.mdx)("img",{alt:"comparing single line and multiline arrow functions",src:n(314).default})),Object(i.mdx)("p",null,"So if we have a function :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const squareNum = (num) => {\n  return num * num;\n};\n")),Object(i.mdx)("p",null,"We can refactor the function to :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const squareNum = num => num * num;\n")),Object(i.mdx)("p",null,"Notice the following changes :"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},"The parentheses around ",Object(i.mdx)("inlineCode",{parentName:"li"},"num"),"  have been removed, since it has a single parameter."),Object(i.mdx)("li",{parentName:"ul"},"The curly braces ",Object(i.mdx)("inlineCode",{parentName:"li"},"{  }")," have been removed since the function consists of a single-line block."),Object(i.mdx)("li",{parentName:"ul"},"The ",Object(i.mdx)("inlineCode",{parentName:"li"},"return")," keyword has been removed since the function consists of a single-line block.")),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"Instructions")),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"1.")," Let\u2019s refactor ",Object(i.mdx)("inlineCode",{parentName:"p"},"plantNeedsWater()")," to be a concise body. Notice that we\u2019ve already converted the ",Object(i.mdx)("inlineCode",{parentName:"p"},"if"),"/",Object(i.mdx)("inlineCode",{parentName:"p"},"else")," statement to a ternary operator to make the code fit on one line."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const plantNeedsWater = (day) => {\n  return day === 'Wednesday' ? true : false;\n};\n")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const plantNeedsWater = day => day === 'Wednesday' ? true : false;\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"11-review-functions"},"11. Review Functions"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/functions/exercises/review-functions"}),"Learn JavaScript | Codecademy")),Object(i.mdx)("p",null,"Give yourself a pat on the back, you just navigated through functions ! "),Object(i.mdx)("p",null,"In this lesson, we covered some important concepts about functions : "),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("p",{parentName:"li"},"A ",Object(i.mdx)("em",{parentName:"p"},"function")," is a reusable block of code that groups together a sequence of statements to perform a specific task.")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("p",{parentName:"li"},"A ",Object(i.mdx)("em",{parentName:"p"},"function declaration")," :"),Object(i.mdx)("p",{parentName:"li"},Object(i.mdx)("img",{alt:"expression",src:n(310).default}))),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("p",{parentName:"li"},"A parameter is a named variable inside a function\u2019s block which will be assigned the value of the argument passed in when the function is invoked :"),Object(i.mdx)("p",{parentName:"li"},Object(i.mdx)("img",{alt:"function_parameters",src:n(312).default}))),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("p",{parentName:"li"},"To ",Object(i.mdx)("em",{parentName:"p"},"call")," a function in your code :"),Object(i.mdx)("p",{parentName:"li"},Object(i.mdx)("img",{alt:"name",src:n(311).default}))),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("p",{parentName:"li"},"ES6 introduces new ways of handling arbitrary parameters through ",Object(i.mdx)("em",{parentName:"p"},"default parameters")," which allow us to assign a default value to a parameter in case no argument is passed into the function.")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("p",{parentName:"li"},"To return a value from a function, we use a ",Object(i.mdx)("em",{parentName:"p"},"return statement"),". ")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("p",{parentName:"li"},"To define a function using ",Object(i.mdx)("em",{parentName:"p"},"function expressions")," :"),Object(i.mdx)("p",{parentName:"li"},Object(i.mdx)("img",{alt:"expression",src:n(313).default}))),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("p",{parentName:"li"},"To define a function using ",Object(i.mdx)("em",{parentName:"p"},"arrow function notation")," :"),Object(i.mdx)("p",{parentName:"li"},Object(i.mdx)("img",{alt:"arrow_notation",src:n(456).default}))),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("p",{parentName:"li"},"Function definition can be made concise using concise arrow notation :"),Object(i.mdx)("p",{parentName:"li"},Object(i.mdx)("img",{alt:"return",src:n(314).default})))),Object(i.mdx)("p",null,"It\u2019s good to be aware of the differences between function expressions, arrow functions, and function declarations. As you program more in JavaScript, you\u2019ll see a wide variety of how these function types are used. "))}s.isMDXComponent=!0},212:function(e,t,n){"use strict";n.r(t),n.d(t,"MDXContext",(function(){return s})),n.d(t,"MDXProvider",(function(){return p})),n.d(t,"mdx",(function(){return f})),n.d(t,"useMDXComponents",(function(){return u})),n.d(t,"withMDXComponents",(function(){return m}));var a=n(0),o=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=o.a.createContext({}),m=function(e){return function(t){var n=u(t.components);return o.a.createElement(e,r({},t,{components:n}))}},u=function(e){var t=o.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return o.a.createElement(s.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},h=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,r=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),s=u(n),m=a,p=s["".concat(r,".").concat(m)]||s[m]||b[m]||i;return n?o.a.createElement(p,l(l({ref:t},c),{},{components:n})):o.a.createElement(p,l({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=h;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,r[1]=c;for(var d=2;d<i;d++)r[d]=n[d];return o.a.createElement.apply(null,r)}return o.a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},310:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/declaration-8482f4bb6654fddc194b19e742552804.svg"},311:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/name-61fafb75f0f8c930dba339bbc1697f4f.svg"},312:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/function_parameters-7abba484cce7c83cc959635b2b862629.svg"},313:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/expression-8b1c75f4e783c63a4c2e367e7febaa0a.svg"},314:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/return-97dd11d6b5df89b6c0192b3f8961b9d8.svg"},450:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/functions_2-db8c269097208ae65b32bf99b0f1babf.gif"},451:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/function+execution-b44cffc6d86a64912d12bdbc09b18601.svg"},452:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/by_value-7a97e06d91ff9f1591db37d3e3046a70.svg"},453:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/by_variable-3507c7ad8490c187bedb214e57d6a23e.svg"},454:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/function+return-58fae5c356c0e8132111d68609a078d5.svg"},455:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/parameters-ff6220ca9d9fea62a64bd83c48a48b10.svg"},456:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/arrow_notation-bb3ca929fbadc557e5cbe5da2cbe5d4d.svg"}}]);
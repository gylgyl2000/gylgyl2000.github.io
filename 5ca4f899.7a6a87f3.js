(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{119:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return l}));var a=n(3),o=n(7),r=(n(0),n(212)),i={id:"Codecademy-Learn_JavaScript-07a",title:"Higher-Order Functions"},c={unversionedId:"Codecademy/Codecademy-Learn_JavaScript-07a",id:"Codecademy/Codecademy-Learn_JavaScript-07a",isDocsHomePage:!1,title:"Higher-Order Functions",description:"Learn about higher-order functions in JavaScript.",source:"@site/docs/Codecademy/Codecademy-Learn_JavaScript-07a.md",slug:"/Codecademy/Codecademy-Learn_JavaScript-07a",permalink:"/docs/Codecademy/Codecademy-Learn_JavaScript-07a",editUrl:"https://github.com/gylgyl2000/laloutre.github.io/edit/main/docs/Codecademy/Codecademy-Learn_JavaScript-07a.md",version:"current"},s=[{value:"01. Introduction",id:"01-introduction",children:[]},{value:"02. Functions as Data",id:"02-functions-as-data",children:[]},{value:"03. Functions as Parameters",id:"03-functions-as-parameters",children:[]},{value:"04. Review",id:"04-review",children:[]}],u={rightToc:s};function l(e){var t=e.components,i=Object(o.a)(e,["components"]);return Object(r.mdx)("wrapper",Object(a.a)({},u,i,{components:t,mdxType:"MDXLayout"}),Object(r.mdx)("p",null,"Learn about higher-order functions in JavaScript."),Object(r.mdx)("h2",{id:"01-introduction"},"01. Introduction"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/higher-order-functions/exercises/introduction"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,"We are often unaware of the number of assumptions we make when we communicate with other people in our native languages. If we told you to \u201ccount to three,\u201d we would expect you to say or think the numbers one, two and three. We assumed you would know to start with \u201cone\u201d and end with \u201cthree\u201d. With programming, we\u2019re faced with needing to be more explicit with our directions to the computer. Here\u2019s how we might tell the computer to \u201ccount to three\u201d :"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"for (let i = 1; i<=3; i++) {\n  console.log(i)\n}\n")),Object(r.mdx)("p",null,"When we speak to other humans, we share a vocabulary that gives us quick ways to communicate complicated concepts. When we say \u201cbake\u201d, it calls to mind a familiar subroutine\u2014 preheating an oven, putting something into an oven for a set amount of time, and finally removing it. This allows us to ",Object(r.mdx)("em",{parentName:"p"},"abstract")," away a lot of the details and communicate key concepts more concisely. Instead of listing all those details, we can say, \u201cWe baked a cake,\u201d and still impart all that meaning to you. "),Object(r.mdx)("p",null,"In programming, we can accomplish \u201cabstraction\u201d by writing functions. In addition to allowing us to reuse our code, functions help to make clear, readable programs. If you encountered ",Object(r.mdx)("inlineCode",{parentName:"p"},"countToThree()")," in a program, you might be able to quickly guess what the function did without having to stop and read the function\u2019s body. "),Object(r.mdx)("p",null,"We\u2019re also going to learn about another way to add a level of abstraction to our programming: ",Object(r.mdx)("em",{parentName:"p"},"higher-order functions"),".  ",Object(r.mdx)("em",{parentName:"p"},"Higher-order functions")," are functions that accept other functions as arguments and/or return functions as output. This enables us to build abstractions on other abstractions, just like \u201cWe hosted a birthday party\u201d is an abstraction that may build on the abstraction \u201cWe made a cake.\u201d"),Object(r.mdx)("p",null,"In summary, using more abstraction in our code allows us to write more modular code which is easier to read and debug. "),Object(r.mdx)("p",null,Object(r.mdx)("img",{alt:"birthday",src:n(422).default})),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"02-functions-as-data"},"02. Functions as Data"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/higher-order-functions/exercises/functions-as-data"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,"JavaScript functions behave like any other data type in the language; we can assign functions to variables, and we can reassign them to new variables.\nBelow, we have an annoyingly long function name that hurts the readability of any code in which it\u2019s used. Let\u2019s pretend this function does important work and needs to be called repeatedly !"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const announceThatIAmDoingImportantWork = () => {\n    console.log("I\u2019m doing very important work!");\n};\n')),Object(r.mdx)("p",null,"What if we wanted to rename this function without sacrificing the source code? We can re-assign the function to a variable with a suitably short name :"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const busy = announceThatIAmDoingImportantWork;\n\nbusy(); // This function call barely takes any space!\n")),Object(r.mdx)("p",null,Object(r.mdx)("inlineCode",{parentName:"p"},"busy")," is a variable that holds a ",Object(r.mdx)("em",{parentName:"p"},"reference")," to our original function. If we could look up the address in memory of ",Object(r.mdx)("inlineCode",{parentName:"p"},"busy")," and the address in memory of ",Object(r.mdx)("inlineCode",{parentName:"p"},"announceThatIAmDoingImportantWork")," they would point to the same place. Our new ",Object(r.mdx)("inlineCode",{parentName:"p"},"busy()")," function can be invoked with parentheses as if that was the name we originally gave our function. "),Object(r.mdx)("p",null,"Notice how we assign ",Object(r.mdx)("inlineCode",{parentName:"p"},"announceThatIAmDoingImportantWork")," without parentheses as the value to the ",Object(r.mdx)("inlineCode",{parentName:"p"},"busy")," variable. We want to assign the value of the function itself, not the value it returns when invoked. "),Object(r.mdx)("p",null,"In JavaScript, functions are ",Object(r.mdx)("em",{parentName:"p"},"first class objects"),". This means that, like other objects you\u2019ve encountered, JavaScript functions can have properties and methods. "),Object(r.mdx)("p",null,"Since functions are a type of object, they have properties such as ",Object(r.mdx)("inlineCode",{parentName:"p"},".length")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},".name")," and methods such as ",Object(r.mdx)("inlineCode",{parentName:"p"},".toString()"),". You can see more about the methods and properties of functions  ",Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function"}),"in the documentation"),"."),Object(r.mdx)("p",null,"Functions are special because we can invoke them, but we can still treat them like any other type of data. Let\u2019s get some practice doing that !"),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Instructions")),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const checkThatTwoPlusTwoEqualsFourAMillionTimes = () => {\n  for(let i = 1; i <= 1000000; i++) {\n    if ( (2 + 2) != 4) {\n      console.log('Something has gone very wrong :( ');\n    }\n  }\n}\n")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"1.")," We\u2019ve defined a function with a very long name: ",Object(r.mdx)("inlineCode",{parentName:"p"},"checkThatTwoPlusTwoEqualsFourAMillionTimes"),". This function takes a long time to execute. It checks whether 2 + 2 = 4, but it does it a million times (just to be really sure)! Create a shorter-named variable, ",Object(r.mdx)("inlineCode",{parentName:"p"},"is2p2")," that will be easier to work with, and assign ",Object(r.mdx)("inlineCode",{parentName:"p"},"checkThatTwoPlusTwoEqualsFourAMillionTimes")," as its value."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"2.")," Invoke your ",Object(r.mdx)("inlineCode",{parentName:"p"},"is2p2()")," function"),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"3.")," Hmmm, if we forgot the original name of our function, is there a way we could figure it out ? Use ",Object(r.mdx)("inlineCode",{parentName:"p"},"is2p2")," to ",Object(r.mdx)("inlineCode",{parentName:"p"},"console.log()")," the ",Object(r.mdx)("inlineCode",{parentName:"p"},"name")," property of the function we assigned to ",Object(r.mdx)("inlineCode",{parentName:"p"},"is2p2"),". Check out ",Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function"}),"the documentation")," if you need a hint."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const is2p2 = checkThatTwoPlusTwoEqualsFourAMillionTimes;\nis2p2();\nconsole.log(is2p2.name);\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"03-functions-as-parameters"},"03. Functions as Parameters"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/higher-order-functions/exercises/functions-as-parameters"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,"Since functions can behave like any other type of data in JavaScript, it might not surprise you to learn that we can also pass functions (into other functions) as parameters. A ",Object(r.mdx)("em",{parentName:"p"},"higher-order function")," is a function that either accepts functions as parameters, returns a function, or both! We call the functions that get passed in as parameters and invoked ",Object(r.mdx)("em",{parentName:"p"},"callback functions")," because they get called during the execution of the higher-order function."),Object(r.mdx)("p",null,"When we pass a function in as an argument to another function, we don\u2019t invoke it. Invoking the function would evaluate to the return value of that function call. With callbacks, we pass in the function itself by typing the function name ",Object(r.mdx)("em",{parentName:"p"},"without")," the parentheses (that would evaluate to the result of calling the function):"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const timeFuncRuntime = funcParameter => {\n   let t1 = Date.now();\n   funcParameter();\n   let t2 = Date.now();\n   return t2 - t1;\n}\n\nconst addOneToOne = () => 1 + 1;\n\ntimeFuncRuntime(addOneToOne);\n")),Object(r.mdx)("p",null,"We wrote a higher-order function, ",Object(r.mdx)("inlineCode",{parentName:"p"},"timeFuncRuntime()"),". It takes in a function as an argument, saves a starting time, invokes the callback function, records the time after the function was called, and returns the time the function took to run by subtracting the starting time from the ending time. "),Object(r.mdx)("p",null,"This higher-order function could be used with any callback function which makes it a potentially powerful piece of code. "),Object(r.mdx)("p",null,"We then invoked ",Object(r.mdx)("inlineCode",{parentName:"p"},"timeFuncRuntime()")," first with the ",Object(r.mdx)("inlineCode",{parentName:"p"},"addOneToOne()")," function - note how we passed in ",Object(r.mdx)("inlineCode",{parentName:"p"},"addOneToOne")," and did not invoke it. "),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"timeFuncRuntime(() => {\n  for (let i = 10; i>0; i--){\n    console.log(i);\n  }\n});\n")),Object(r.mdx)("p",null,"In this example, we invoked ",Object(r.mdx)("inlineCode",{parentName:"p"},"timeFuncRuntime()")," with an anonymous function that counts backwards from 10. Anonymous functions can be arguments too !"),Object(r.mdx)("p",null,"Let\u2019s get some practice using functions and writing higher-order functions."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Instructions")),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const checkThatTwoPlusTwoEqualsFourAMillionTimes = () => {\n  for(let i = 1; i <= 1000000; i++) {\n    if ( (2 + 2) != 4) {\n      console.log('Something has gone very wrong :( ');\n    }\n  }\n};\n\nconst addTwo = num => num + 2;\n\nconst timeFuncRuntime = funcParameter => {\n  let t1 = Date.now();\n  funcParameter();\n  let t2 = Date.now();\n  return t2 - t1;\n};\n")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"1.")," Save a variable, ",Object(r.mdx)("inlineCode",{parentName:"p"},"time2p2"),". Assign as its value the result of invoking the ",Object(r.mdx)("inlineCode",{parentName:"p"},"timeFuncRuntime()")," function with the ",Object(r.mdx)("inlineCode",{parentName:"p"},"checkThatTwoPlusTwoEqualsFourAMillionTimes()")," function. "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"2.")," Write a higher-order function, ",Object(r.mdx)("inlineCode",{parentName:"p"},"checkConsistentOutput()"),". This function should have two parameters: a function and a value. It should call the argument function with the value two times. If the callback function produces the same result twice, it should return the result of the function call, otherwise, it should return the string ",Object(r.mdx)("inlineCode",{parentName:"p"},"'This function returned inconsistent results'")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"3.")," Invoke your ",Object(r.mdx)("inlineCode",{parentName:"p"},"checkConsistentOutput()")," with the ",Object(r.mdx)("inlineCode",{parentName:"p"},"addTwo()")," function we wrote and a number as arguments. "),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const time2p2 = timeFuncRuntime(addTwo);\n\nconst checkConsistentOutput = (func, val) => {\n  let firstTry = func(val);\n    let secondTry = func(val);\n    if (firstTry === secondTry) {\n        return firstTry;\n    } else {\n        return 'This function returned inconsistent results';\n    }\n};\n\ncheckConsistentOutput(addTwo, 5);\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"04-review"},"04. Review"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/higher-order-functions/exercises/review"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,"Great job ! By thinking about functions as data and learning about higher-order functions, you\u2019ve taken important steps in being able to write clean, modular code and take advantage of JavaScript\u2019s flexibility. "),Object(r.mdx)("p",null,"Let\u2019s review what we learned in this lesson :"),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},"Abstraction allows us to write complicated code in a way that\u2019s easy to reuse, debug, and understand for human readers"),Object(r.mdx)("li",{parentName:"ul"},"We can work with functions the same way we would any other type of data including reassigning them to new variables"),Object(r.mdx)("li",{parentName:"ul"},"JavaScript functions are first-class objects, so they have properties and methods like any object"),Object(r.mdx)("li",{parentName:"ul"},"Functions can be passed into other functions as parameters "),Object(r.mdx)("li",{parentName:"ul"},"A higher-order function is a function that either accepts functions as parameters, returns a function, or both")))}l.isMDXComponent=!0},212:function(e,t,n){"use strict";n.r(t),n.d(t,"MDXContext",(function(){return l})),n.d(t,"MDXProvider",(function(){return p})),n.d(t,"mdx",(function(){return f})),n.d(t,"useMDXComponents",(function(){return m})),n.d(t,"withMDXComponents",(function(){return d}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=o.a.createContext({}),d=function(e){return function(t){var n=m(t.components);return o.a.createElement(e,i({},t,{components:n}))}},m=function(e){var t=o.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=m(e.components);return o.a.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),l=m(n),d=a,p=l["".concat(i,".").concat(d)]||l[d]||h[d]||r;return n?o.a.createElement(p,s(s({ref:t},c),{},{components:n})):o.a.createElement(p,s({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=b;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var u=2;u<r;u++)i[u]=n[u];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},422:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/birthday-7d7a39f401259faaf96fee101393eea9.svg"}}]);
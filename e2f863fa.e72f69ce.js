(window.webpackJsonp=window.webpackJsonp||[]).push([[128],{198:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return o})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return s}));var a=t(3),r=t(7),i=(t(0),t(214)),l={id:"Codecademy-Cheatsheets-Learn_JavaScript-01-Introduction-_-Variables",title:"Introduction - Variables"},o={unversionedId:"Codecademy/Codecademy-Cheatsheets-Learn_JavaScript-01-Introduction-_-Variables",id:"Codecademy/Codecademy-Cheatsheets-Learn_JavaScript-01-Introduction-_-Variables",isDocsHomePage:!1,title:"Introduction - Variables",description:"Introduction",source:"@site/docs/Codecademy/Codecademy-Cheatsheets-Learn_JavaScript-01-Introduction-_-Variables.md",slug:"/Codecademy/Codecademy-Cheatsheets-Learn_JavaScript-01-Introduction-_-Variables",permalink:"/docs/Codecademy/Codecademy-Cheatsheets-Learn_JavaScript-01-Introduction-_-Variables",editUrl:"https://github.com/gylgyl2000/laloutre.github.io/edit/main/docs/Codecademy/Codecademy-Cheatsheets-Learn_JavaScript-01-Introduction-_-Variables.md",version:"current"},c=[{value:"Introduction",id:"introduction",children:[{value:"JavaScript",id:"javascript",children:[]},{value:"Methods",id:"methods",children:[]},{value:"Libraries",id:"libraries",children:[]},{value:"<code>console.log()</code>",id:"consolelog",children:[]},{value:"Numbers",id:"numbers",children:[]},{value:"String <code>.length</code>",id:"string-length",children:[]},{value:"Data Instances",id:"data-instances",children:[]},{value:"Booleans",id:"booleans",children:[]},{value:"<code>Math.random()</code>",id:"mathrandom",children:[]},{value:"<code>Math.floor()</code>",id:"mathfloor",children:[]},{value:"Single Line Comments",id:"single-line-comments",children:[]},{value:"Null",id:"null",children:[]},{value:"Strings",id:"strings",children:[]},{value:"Arithmetic Operators",id:"arithmetic-operators",children:[]},{value:"Multi-line Comments",id:"multi-line-comments",children:[]},{value:"Remainder / Modulo Operator",id:"remainder--modulo-operator",children:[]},{value:"Assignment Operators",id:"assignment-operators",children:[]},{value:"String Interpolation",id:"string-interpolation",children:[]},{value:"Variables",id:"variables",children:[]},{value:"Undefined",id:"undefined",children:[]}]},{value:"Learn Javascript: Variables",id:"learn-javascript-variables",children:[{value:"Declaring Variables",id:"declaring-variables",children:[]},{value:"Template Literals",id:"template-literals",children:[]},{value:"<code>let</code> Keyword",id:"let-keyword",children:[]},{value:"<code>const</code> Keyword",id:"const-keyword",children:[]},{value:"String Concatenation",id:"string-concatenation",children:[]}]}],d={rightToc:c};function s(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.mdx)("wrapper",Object(a.a)({},d,t,{components:n,mdxType:"MDXLayout"}),Object(i.mdx)("h2",{id:"introduction"},"Introduction"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/learn/introduction-to-javascript/modules/learn-javascript-introduction/cheatsheet"}),"Learn JavaScript: Introduction Cheatsheet | Codecademy")),Object(i.mdx)("h3",{id:"javascript"},"JavaScript"),Object(i.mdx)("p",null,"JavaScript is a programming language that powers the dynamic behavior on most websites. Alongside HTML and CSS, it is a core technology that makes the web run."),Object(i.mdx)("h3",{id:"methods"},"Methods"),Object(i.mdx)("p",null,"Methods return information about an object, and are called by appending an instance with a period ",Object(i.mdx)("inlineCode",{parentName:"p"},"."),", the method name, and parentheses."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// Returns a number between 0 and 1\nMath.random();\n")),Object(i.mdx)("h3",{id:"libraries"},"Libraries"),Object(i.mdx)("p",null,"Libraries contain methods that can be called by appending the library name with a period ",Object(i.mdx)("inlineCode",{parentName:"p"},"."),", the method name, and a set of parentheses."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"Math.random();\n// \u261d\ufe0f Math is the library\n")),Object(i.mdx)("h3",{id:"consolelog"},Object(i.mdx)("inlineCode",{parentName:"h3"},"console.log()")),Object(i.mdx)("p",null,"The ",Object(i.mdx)("inlineCode",{parentName:"p"},"console.log()")," method is used to log or print messages to the console. It can also be used to print objects and other info."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"console.log('Hi there!');\n// Prints: Hi there!\n")),Object(i.mdx)("h3",{id:"numbers"},"Numbers"),Object(i.mdx)("p",null,"Numbers are a primitive data type. They include the set of all integers and floating point numbers."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let amount = 6;\nlet price = 4.99;\n")),Object(i.mdx)("h3",{id:"string-length"},"String ",Object(i.mdx)("inlineCode",{parentName:"h3"},".length")),Object(i.mdx)("p",null,"The ",Object(i.mdx)("inlineCode",{parentName:"p"},".length")," property of a string returns the number of characters that make up the string."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let message = 'good nite';\nconsole.log(message.length);\n// Prints: 9\n\nconsole.log('howdy'.length);\n// Prints: 5\n")),Object(i.mdx)("h3",{id:"data-instances"},"Data Instances"),Object(i.mdx)("p",null,"When a new piece of data is introduced into a JavaScript program, the program keeps track of it in an instance of that data type. An instance is an individual case of a data type."),Object(i.mdx)("h3",{id:"booleans"},"Booleans"),Object(i.mdx)("p",null,"Booleans are a primitive data type. They can be either ",Object(i.mdx)("inlineCode",{parentName:"p"},"true")," or ",Object(i.mdx)("inlineCode",{parentName:"p"},"false"),"."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let lateToWork = true;\n")),Object(i.mdx)("h3",{id:"mathrandom"},Object(i.mdx)("inlineCode",{parentName:"h3"},"Math.random()")),Object(i.mdx)("p",null,"The ",Object(i.mdx)("inlineCode",{parentName:"p"},"Math.random()")," function returns a floating-point, random number in the range from 0 (inclusive) up to but not including 1."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"console.log(Math.random());\n// Prints: 0 - 0.9\n")),Object(i.mdx)("h3",{id:"mathfloor"},Object(i.mdx)("inlineCode",{parentName:"h3"},"Math.floor()")),Object(i.mdx)("p",null,"The ",Object(i.mdx)("inlineCode",{parentName:"p"},"Math.floor()")," function returns the largest integer less than or equal to the given number."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"console.log(Math.floor(5.95));\n// Prints: 5\n")),Object(i.mdx)("h3",{id:"single-line-comments"},"Single Line Comments"),Object(i.mdx)("p",null,"In JavaScript, single-line comments are created with two consecutive forward slashes ",Object(i.mdx)("inlineCode",{parentName:"p"},"//"),"."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// This line will denote a comment\n")),Object(i.mdx)("h3",{id:"null"},"Null"),Object(i.mdx)("p",null,"Null is a primitive data type. It represents the intentional absence of value. In code, it is represented as ",Object(i.mdx)("inlineCode",{parentName:"p"},"null"),"."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let x = null;\n")),Object(i.mdx)("h3",{id:"strings"},"Strings"),Object(i.mdx)("p",null,"Strings are a primitive data type. They are any grouping of characters (letters, spaces, numbers, or symbols) surrounded by single quotes ",Object(i.mdx)("inlineCode",{parentName:"p"},"'")," or double quotes ",Object(i.mdx)("inlineCode",{parentName:"p"},'"'),"."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let single = 'Wheres my bandit hat?';\nlet double = \"Wheres my bandit hat?\";\n")),Object(i.mdx)("h3",{id:"arithmetic-operators"},"Arithmetic Operators"),Object(i.mdx)("p",null,"JavaScript supports arithmetic operators for:"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"+")," addition"),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"-")," subtraction"),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"*")," multiplication"),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"/")," division"),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"%")," modulo")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// Addition\n5 + 5\n// Subtraction\n10 - 5\n// Multiplication\n5 * 10\n// Division\n10 / 5\n// Modulo\n10 % 5\n")),Object(i.mdx)("h3",{id:"multi-line-comments"},"Multi-line Comments"),Object(i.mdx)("p",null,"In JavaScript, multi-line comments are created by surrounding the lines with ",Object(i.mdx)("inlineCode",{parentName:"p"},"/*")," at the beginning and ",Object(i.mdx)("inlineCode",{parentName:"p"},"*/")," at the end. Comments are good ways for a variety of reasons like explaining a code block or indicating some hints, etc."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"/*\nThe below configuration must be\nchanged before deployment.\n*/\n\nlet baseUrl = 'localhost/taxwebapp/country';\n")),Object(i.mdx)("h3",{id:"remainder--modulo-operator"},"Remainder / Modulo Operator"),Object(i.mdx)("p",null,"The remainder operator, sometimes called modulo, returns the number that remains after the right-hand number divides into the left-hand number as many times as it evenly can."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'const weeksInYear = Math.floor(365/7) // calculates # of weeks in a year, rounds down to nearest integer\nconst daysLeftOver = 367 % 7 // calcuates the number of days left over after 365 is divded by 7\n\nconsole.log("A year has " + weeksInYear + "weeks " and "daysLeftOver " + days)\n')),Object(i.mdx)("h3",{id:"assignment-operators"},"Assignment Operators"),Object(i.mdx)("p",null,"An assignment operator assigns a value to its left operand based on the value of its right operand. Here are some of them:"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"+=")," addition assignment"),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"-=")," subtraction assignment"),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"*=")," multiplication assignment"),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"/=")," division assignment")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let number = 100;\n// Both statements will add 10\nnumber = number + 10;\nnumber += 10;\n\nconsole.log(number);\n// Prints: 120\n")),Object(i.mdx)("h3",{id:"string-interpolation"},"String Interpolation"),Object(i.mdx)("p",null,"String interpolation is the process of evaluating string literals containing one or more placeholders (expressions, variables, etc)."),Object(i.mdx)("p",null,"It can be performed using template literals: ",Object(i.mdx)("inlineCode",{parentName:"p"},"text ${expression} text"),"."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let age = 7;\n// String concatenation\n'Tommy is ' + age + ' years old.';\n\n// String interpolation\n`Tommy is ${age} years old.`;\n")),Object(i.mdx)("h3",{id:"variables"},"Variables"),Object(i.mdx)("p",null,"Variables are used whenever there\u2019s a need to store a piece of data. A variable contains data that can be used in the program elsewhere. Using variables also ensures code re-usability since it can be used to replace the same value in multiple places."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const currency = '$';\nlet userIncome = 85000;\n\nconsole.log(currency + userIncome + ' is more than the average income.');\n// Prints: $85000 is more than the average income.\n")),Object(i.mdx)("h3",{id:"undefined"},"Undefined"),Object(i.mdx)("p",null,Object(i.mdx)("inlineCode",{parentName:"p"},"undefined")," is a primitive JavaScript value that represents lack of defined value. Variables that are declared but not initialized to a value will have the value ",Object(i.mdx)("inlineCode",{parentName:"p"},"undefined"),"."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"var a;\n\nconsole.log(a);\n// Prints: undefined\n")),Object(i.mdx)("h2",{id:"learn-javascript-variables"},"Learn Javascript: Variables"),Object(i.mdx)("p",null,"A variable is a container for data that is stored in computer memory. It is referenced by a descriptive name that a programmer can call to assign a specific value and retrieve it."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'// examples of variables\nlet name = "Tammy";\nconst found = false;\nvar age = 3;\nconsole.log(name, found, age);\n// Tammy, false, 3\n')),Object(i.mdx)("h3",{id:"declaring-variables"},"Declaring Variables"),Object(i.mdx)("p",null,"To declare a variable in JavaScript, any of these three keywords can be used along with a variable name:"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"var")," is used in pre-ES6 versions of JavaScript."),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"let")," is the preferred way to declare a variable when it can be reassigned."),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"const")," is the preferred way to declare a variable with a constant value.")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"var age;\nlet weight;\nconst numberOfFingers = 20;\n")),Object(i.mdx)("h3",{id:"template-literals"},"Template Literals"),Object(i.mdx)("p",null,"Template literals are strings that allow embedded expressions, ",Object(i.mdx)("inlineCode",{parentName:"p"},"${expression}"),". While regular strings use single ",Object(i.mdx)("inlineCode",{parentName:"p"},"'")," or double ",Object(i.mdx)("inlineCode",{parentName:"p"},'"')," quotes, template literals use backticks instead."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'let name = "Codecademy";\nconsole.log(`Hello, ${name}`);\n// Prints: Hello, Codecademy\n\nconsole.log(`Billy is ${6+8} years old.`)\n// Prints: Billy is 14 years old.\n')),Object(i.mdx)("h3",{id:"let-keyword"},Object(i.mdx)("inlineCode",{parentName:"h3"},"let")," Keyword"),Object(i.mdx)("p",null,Object(i.mdx)("inlineCode",{parentName:"p"},"let")," creates a local variable in JavaScript & can be re-assigned. Initialization during the declaration of a ",Object(i.mdx)("inlineCode",{parentName:"p"},"let")," variable is optional. A ",Object(i.mdx)("inlineCode",{parentName:"p"},"let")," variable will contain ",Object(i.mdx)("inlineCode",{parentName:"p"},"undefined")," if nothing is assigned to it."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let count;\nconsole.log(count); // Prints: undefined\ncount = 10;\nconsole.log(count); // Prints: 10\n")),Object(i.mdx)("h3",{id:"const-keyword"},Object(i.mdx)("inlineCode",{parentName:"h3"},"const")," Keyword"),Object(i.mdx)("p",null,"A constant variable can be declared using the keyword ",Object(i.mdx)("inlineCode",{parentName:"p"},"const"),". It must have an assignment. Any attempt of re-assigning a ",Object(i.mdx)("inlineCode",{parentName:"p"},"const")," variable will result in JavaScript runtime error."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const numberOfColumns = 4;\nnumberOfColumns = 8;\n// TypeError: Assignment to constant variable.\n")),Object(i.mdx)("h3",{id:"string-concatenation"},"String Concatenation"),Object(i.mdx)("p",null,"In JavaScript, multiple strings can be concatenated together using the ",Object(i.mdx)("inlineCode",{parentName:"p"},"+")," operator. In the example, multiple strings and variables containing string values have been concatenated. After execution of the code block, the ",Object(i.mdx)("inlineCode",{parentName:"p"},"displayText")," variable will contain the concatenated string."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let service = 'credit card';\nlet month = 'May 30th';\nlet displayText = 'Your ' + service  + ' bill is due on ' +  month + '.';\nconsole.log(displayText);\n// Prints: Your credit card bill is due on May 30th.\n")))}s.isMDXComponent=!0},214:function(e,n,t){"use strict";t.r(n),t.d(n,"MDXContext",(function(){return s})),t.d(n,"MDXProvider",(function(){return u})),t.d(n,"mdx",(function(){return j})),t.d(n,"useMDXComponents",(function(){return p})),t.d(n,"withMDXComponents",(function(){return m}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(){return(l=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=r.a.createContext({}),m=function(e){return function(n){var t=p(n.components);return r.a.createElement(e,l({},n,{components:t}))}},p=function(e){var n=r.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},u=function(e){var n=p(e.components);return r.a.createElement(s.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},h=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,o=d(e,["components","mdxType","originalType","parentName"]),s=p(t),m=a,u=s["".concat(l,".").concat(m)]||s[m]||b[m]||i;return t?r.a.createElement(u,c(c({ref:n},o),{},{components:t})):r.a.createElement(u,c({ref:n},o))}));function j(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=h;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var d=2;d<i;d++)l[d]=t[d];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,t)}h.displayName="MDXCreateElement"}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{164:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return d})),a.d(t,"metadata",(function(){return l})),a.d(t,"rightToc",(function(){return o})),a.d(t,"default",(function(){return c}));var r=a(3),n=a(7),i=(a(0),a(214)),d={id:"guide_JS-06",title:"Expressions et op\xe9rateurs"},l={unversionedId:"MDN-web-docs/guide_JS-06",id:"MDN-web-docs/guide_JS-06",isDocsHomePage:!1,title:"Expressions et op\xe9rateurs",description:"Ce chapitre d\xe9crit les expressions et les op\xe9rateurs en JavaScript, il inclut des notions sur les op\xe9rateurs d'affectation, de comparaison, les op\xe9rateurs arithm\xe9tiques, binaires, logiques, ceux qui s'appliquent sur les cha\xeenes de caract\xe8res ainsi que les op\xe9rateurs sp\xe9ciaux.",source:"@site/docs/MDN-web-docs/guide_JS-06.md",slug:"/MDN-web-docs/guide_JS-06",permalink:"/docs/MDN-web-docs/guide_JS-06",editUrl:"https://github.com/gylgyl2000/laloutre.github.io/edit/main/docs/MDN-web-docs/guide_JS-06.md",version:"current",sidebar:"docs",previous:{title:"Fonctions",permalink:"/docs/MDN-web-docs/guide_JS-05"},next:{title:"Kata Codewars",permalink:"/docs/Codewars/codewars-kata-fr.mdx"}},o=[{value:"Op\xe9rateurs",id:"op\xe9rateurs",children:[{value:"Op\xe9rateurs d&#39;affectation",id:"op\xe9rateurs-daffectation",children:[]},{value:"Op\xe9rateurs de comparaison",id:"op\xe9rateurs-de-comparaison",children:[]},{value:"Op\xe9rateurs arithm\xe9tiques",id:"op\xe9rateurs-arithm\xe9tiques",children:[]},{value:"Op\xe9rateurs binaires",id:"op\xe9rateurs-binaires",children:[]},{value:"Op\xe9rateurs logiques",id:"op\xe9rateurs-logiques",children:[]},{value:"Op\xe9rateurs de cha\xeenes de caract\xe8res",id:"op\xe9rateurs-de-cha\xeenes-de-caract\xe8res",children:[]},{value:"Op\xe9rateur conditionnel ternaire",id:"op\xe9rateur-conditionnel-ternaire",children:[]},{value:"La virgule comme op\xe9rateur",id:"la-virgule-comme-op\xe9rateur",children:[]},{value:"Op\xe9rateurs unaires",id:"op\xe9rateurs-unaires",children:[]},{value:"Op\xe9rateurs relationnels",id:"op\xe9rateurs-relationnels",children:[]},{value:"Pr\xe9c\xe9dence des op\xe9rateurs",id:"pr\xe9c\xe9dence-des-op\xe9rateurs",children:[]}]},{value:"Expressions",id:"expressions",children:[{value:"Expressions primaires",id:"expressions-primaires",children:[]},{value:"Expressions vers la gauche",id:"expressions-vers-la-gauche",children:[]}]}],p={rightToc:o};function c(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(i.mdx)("wrapper",Object(r.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(i.mdx)("p",null,"Ce chapitre d\xe9crit les expressions et les op\xe9rateurs en JavaScript, il inclut des notions sur les op\xe9rateurs d'affectation, de comparaison, les op\xe9rateurs arithm\xe9tiques, binaires, logiques, ceux qui s'appliquent sur les cha\xeenes de caract\xe8res ainsi que les op\xe9rateurs sp\xe9ciaux."),Object(i.mdx)("p",null,"Une liste compl\xe8te et d\xe9taill\xe9e des op\xe9rateurs JavaScript est disponible dans ",Object(i.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs"}),"la r\xe9f\xe9rence JavaScript"),"."),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"op\xe9rateurs"},"Op\xe9rateurs"),Object(i.mdx)("p",null,"JavaScript poss\xe8de diff\xe9rents types d'op\xe9rateurs. Cette section d\xe9crit les op\xe9rateurs et certaines informations sur les priorit\xe9s entre op\xe9rateurs."),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("a",Object(r.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Expressions_et_Op%C3%A9rateurs#Op%C3%A9rateurs_d'affectation"}),"Les op\xe9rateurs d'affectation")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("a",Object(r.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Expressions_et_Op%C3%A9rateurs#Op%C3%A9rateurs_de_comparaison"}),"Les op\xe9rateurs de comparaison")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("a",Object(r.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Expressions_et_Op%C3%A9rateurs#Op%C3%A9rateurs_arithm%C3%A9tiques"}),"Les op\xe9rateurs arithm\xe9tiques")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("a",Object(r.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Expressions_et_Op%C3%A9rateurs#Op%C3%A9rateurs_binaires"}),"Les op\xe9rateurs binaires")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("a",Object(r.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Expressions_et_Op%C3%A9rateurs#Op%C3%A9rateurs_logiques"}),"Les op\xe9rateurs logiques")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("a",Object(r.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Expressions_et_Op%C3%A9rateurs#Op%C3%A9rateurs_de_cha%C3%AEnes_de_caract%C3%A8res"}),"Les op\xe9rateurs de cha\xeenes")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("a",Object(r.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Expressions_et_Op%C3%A9rateurs#Op%C3%A9rateur_conditionnel_ternaire"}),"L'op\xe9rateur (ternaire) conditionnel")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("a",Object(r.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Expressions_et_Op%C3%A9rateurs#La_virgule_comme_op%C3%A9rateur"}),"L'op\xe9rateur virgule")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("a",Object(r.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Expressions_et_Op%C3%A9rateurs#Op%C3%A9rateurs_unaires"}),"Les op\xe9rateurs unaires")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("a",Object(r.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Expressions_et_Op%C3%A9rateurs#Op%C3%A9rateurs_relationnels"}),"Les op\xe9rateurs relationnels"))),Object(i.mdx)("p",null,"JavaScript utilise des op\xe9rateurs ",Object(i.mdx)("em",{parentName:"p"},"binaires")," et ",Object(i.mdx)("em",{parentName:"p"},"unaires"),", ainsi qu'un op\xe9rateur ternaire sp\xe9cial (l'op\xe9rateur conditionnel). Un op\xe9rateur binaire utilise deux op\xe9randes, un pr\xe9c\xe9dant l'op\xe9rateur et un lui succ\xe9dant :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"op\xe9rande1 op\xe9rateur op\xe9rande2\n")),Object(i.mdx)("p",null,"Par exemple : \xab ",Object(i.mdx)("inlineCode",{parentName:"p"},"3+4")," \xbb ou \xab ",Object(i.mdx)("inlineCode",{parentName:"p"},"x*y")," \xbb."),Object(i.mdx)("p",null,"Un op\xe9rateur unaire ne n\xe9cessite qu'un op\xe9rande, avant ou apr\xe8s l'op\xe9rateur :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{}),"op\xe9rateur op\xe9rande\n")),Object(i.mdx)("p",null,"ou"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{}),"op\xe9rande op\xe9rateur\n")),Object(i.mdx)("p",null,"Comme \xab ",Object(i.mdx)("inlineCode",{parentName:"p"},"x++")," \xbb ou \xab ",Object(i.mdx)("inlineCode",{parentName:"p"},"++x")," \xbb."),Object(i.mdx)("h3",{id:"op\xe9rateurs-daffectation"},"Op\xe9rateurs d'affectation"),Object(i.mdx)("p",null,"Un ",Object(i.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_d_affectation"}),"op\xe9rateur d'affectation")," assigne une valeur \xe0 son op\xe9rande gauche, valeur bas\xe9e sur celle de l'op\xe9rande droit. L'op\xe9rateur d'affectation simple est le signe \xe9gal (=), il assigne la valeur de l'op\xe9rande droit \xe0 l'op\xe9rande gauche. Autrement dit, avec \xab x = y \xbb on affecte la valeur y \xe0 x."),Object(i.mdx)("p",null,"D'autres op\xe9rateurs d'affectation sont des raccourcis correspondant \xe0 certaines op\xe9rations compos\xe9es, ils sont \xe9num\xe9r\xe9s dans le tableau qui suit :"),Object(i.mdx)("table",null,Object(i.mdx)("thead",{parentName:"table"},Object(i.mdx)("tr",{parentName:"thead"},Object(i.mdx)("th",Object(r.a)({parentName:"tr"},{align:null}),"Nom"),Object(i.mdx)("th",Object(r.a)({parentName:"tr"},{align:null}),"Op\xe9rateur compos\xe9"),Object(i.mdx)("th",Object(r.a)({parentName:"tr"},{align:null}),"Signification"))),Object(i.mdx)("tbody",{parentName:"table"},Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_d_affectation#Affectation"}),"Affectation")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"x = y")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"x = y"))),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_d_affectation#Affectation_apr%C3%A8s_addition"}),"Affectation apr\xe8s addition")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"x += y")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"x = x + y"))),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_d_affectation#Affectation_apr%C3%A8s_soustraction"}),"Affectation apr\xe8s soustraction")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"x -= y")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"x = x - y"))),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_d_affectation#Affectation_apr%C3%A8s_multiplication"}),"Affectation apr\xe8s multiplication")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"x *= y")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"x = x * y"))),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_d_affectation#Affectation_apr%C3%A8s_division"}),"Affectation apr\xe8s division")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"x /= y")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"x = x / y"))),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_d_affectation#Affectation_du_reste"}),"Affectation du reste")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"x %= y")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"x = x % y"))),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_d_affectation#Affectation_apr%C3%A8s_exponentiation"}),"Affectation apr\xe8s exponentiation")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"x **=y")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"x = x ** y"))),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_d_affectation#Affectation_apr%C3%A8s_d%C3%A9calage_%C3%A0_gauche"}),"Affectation apr\xe8s d\xe9calage \xe0 gauche")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"x <<= y")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"x = x << y"))),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_d_affectation#Affectation_apr%C3%A8s_d%C3%A9calage_%C3%A0_droite"}),"Affectation apr\xe8s d\xe9calage \xe0 droite")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"x >>= y")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"x = x >> y"))),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_d_affectation#Affectation_apr%C3%A8s_d%C3%A9calage_%C3%A0_droite_non-sign%C3%A9"}),"Affectation apr\xe8s d\xe9calage \xe0 droite non sign\xe9")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"x >>>= y")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"x = x >>> y"))),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_d_affectation#Affectation_apr%C3%A8s_ET_binaire"}),"Affectation apr\xe8s ET binaire")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"x &= y")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"x = x & y"))),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_d_affectation#Affectation_apr%C3%A8s_OU_exclusif_(XOR)_binaire"}),"Affectation apr\xe8s OU exclusif binaire")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"x ^= y")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"x = x ^ y"))),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_d_affectation#Affectation_apr%C3%A8s_OU_binaire"}),"Affectation apr\xe8s OU binaire")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"`x"),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"= y`")))),Object(i.mdx)("h4",{id:"d\xe9composition"},"D\xe9composition"),Object(i.mdx)("p",null,"Lors d'affectations plus complexes, on peut utiliser ",Object(i.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Affecter_par_d%C3%A9composition"}),"l'affectation par d\xe9composition"),". C'est une expression qui permet d'extraire des donn\xe9es depuis des tableaux ou des objets avec une syntaxe sym\xe9trique de litt\xe9raux de tableaux ou d'objets pour affecter des variables."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'var toto = ["un", "deux", "trois"];\n\n// sans d\xe9composition\nvar un = toto[0];\nvar deux = toto[1];\nvar trois = toto[2];\n\n// avec la d\xe9composition\nvar [un, deux, trois] = toto;\n')),Object(i.mdx)("h3",{id:"op\xe9rateurs-de-comparaison"},"Op\xe9rateurs de comparaison"),Object(i.mdx)("p",null,"Un ",Object(i.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_de_comparaison"}),"op\xe9rateur de comparaison")," compare ses deux op\xe9randes et renvoie un valeur bool\xe9enne correspondant au r\xe9sultat de la comparaison (vraie ou fausse). Les op\xe9randes peuvent \xeatre des nombres, des cha\xeenes de caract\xe8res, des bool\xe9ens ou des objets. Les cha\xeenes de caract\xe8res sont compar\xe9es selon l'ordre lexicographique usuel en utilisant les valeurs Unicode. Dans la plupart des cas, si les deux op\xe9randes ne sont pas du m\xeame type, JavaScript tentera de les convertir vers un type appropri\xe9. Cette m\xe9thode aboutira souvent \xe0 une comparaison num\xe9rique. Les seules exceptions \xe0 cette conversion implicite sont les op\xe9rateurs ",Object(i.mdx)("inlineCode",{parentName:"p"},"===")," et ",Object(i.mdx)("inlineCode",{parentName:"p"},"!==")," , qui testent des \xe9galit\xe9s et in\xe9galit\xe9s strictes. Ces op\xe9rateurs n'effectuent pas de conversion de type. Le tableau qui suit d\xe9crit les op\xe9rateurs de comparaisons relativement \xe0 ce fragment de code :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"var var1 = 3;\nvar var2 = 4;\n")),Object(i.mdx)("table",null,Object(i.mdx)("thead",{parentName:"table"},Object(i.mdx)("tr",{parentName:"thead"},Object(i.mdx)("th",Object(r.a)({parentName:"tr"},{align:null}),"Op\xe9rateur"),Object(i.mdx)("th",Object(r.a)({parentName:"tr"},{align:null}),"Description"),Object(i.mdx)("th",Object(r.a)({parentName:"tr"},{align:null}),"Exemples qui renvoient ",Object(i.mdx)("inlineCode",{parentName:"th"},"true")))),Object(i.mdx)("tbody",{parentName:"table"},Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_de_comparaison#.C3.89galit.C3.A9_simple_(.3D.3D)"}),"\xc9galit\xe9")," (",Object(i.mdx)("inlineCode",{parentName:"td"},"=="),")"),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"Renvoie ",Object(i.mdx)("inlineCode",{parentName:"td"},"true")," si les op\xe9randes sont \xe9gaux apr\xe8s conversion en valeurs de m\xeames types."),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"3 == var1"),"    ",Object(i.mdx)("inlineCode",{parentName:"td"},'"3" == var1'),"    ",Object(i.mdx)("inlineCode",{parentName:"td"},"3 == '3'"))),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_de_comparaison#In.C3.A9galit.C3.A9_simple_(!.3D)"}),"In\xe9galit\xe9")," (",Object(i.mdx)("inlineCode",{parentName:"td"},"!="),")"),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"Renvoie ",Object(i.mdx)("inlineCode",{parentName:"td"},"true")," si les op\xe9randes sont diff\xe9rents."),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},'var1 != 4    var2 != "3"'))),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_de_comparaison#.C3.89galit.C3.A9_stricte_(.3D.3D.3D)"}),"\xc9galit\xe9 stricte "),"(",Object(i.mdx)("inlineCode",{parentName:"td"},"==="),")"),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"Renvoie ",Object(i.mdx)("inlineCode",{parentName:"td"},"true")," si les op\xe9randes sont \xe9gaux et de m\xeame type. Voir ",Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Object/is"}),Object(i.mdx)("inlineCode",{parentName:"a"},"Object.is()"))," et ",Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/JavaScript/Guide/%C3%89galit%C3%A9_en_JavaScript"}),"\xe9galit\xe9 de type en JavaScript"),"."),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"3 === var1"))),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_de_comparaison#In.C3.A9galit.C3.A9_stricte_(!.3D.3D)"}),"In\xe9galit\xe9 stricte")," (",Object(i.mdx)("inlineCode",{parentName:"td"},"!=="),")"),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"Renvoie ",Object(i.mdx)("inlineCode",{parentName:"td"},"true")," si les op\xe9randes ne sont pas \xe9gaux ou s'ils ne sont pas de m\xeame type."),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"var1 !== \"3\"    3 !== '3'"))),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_de_comparaison#Sup.C3.A9rieur_strict_(%3E)"}),"Sup\xe9riorit\xe9 stricte")," (",Object(i.mdx)("inlineCode",{parentName:"td"},">"),")"),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"Renvoie ",Object(i.mdx)("inlineCode",{parentName:"td"},"true")," si l'op\xe9rande gauche est sup\xe9rieur (strictement) \xe0 l'op\xe9rande droit."),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},'var2 > var1    "12" > 2'))),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_de_comparaison#Sup.C3.A9rieur_ou_.C3.A9gal_(%3E.3D)"}),"Sup\xe9riorit\xe9 ou \xe9galit\xe9")," (",Object(i.mdx)("inlineCode",{parentName:"td"},">="),")"),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"Renvoie ",Object(i.mdx)("inlineCode",{parentName:"td"},"true")," si l'op\xe9rande gauche est sup\xe9rieur ou \xe9gal \xe0 l'op\xe9rande droit."),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"var2 >= var1    var1 >= 3"))),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_de_comparaison#Inf.C3.A9rieur_strict_(%3C)"}),"Inf\xe9riorit\xe9 stricte")," (",Object(i.mdx)("inlineCode",{parentName:"td"},"<"),")"),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"Renvoie ",Object(i.mdx)("inlineCode",{parentName:"td"},"true")," si l'op\xe9rande gauche est inf\xe9rieur (strictement) \xe0 l'op\xe9rande droit."),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},'var1 < var2    "2" < "12"'))),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_de_comparaison#Inf.C3.A9rieur_ou_.C3.A9gal_(%3C.3D)"}),"Inf\xe9riorit\xe9 ou \xe9galit\xe9")," (",Object(i.mdx)("inlineCode",{parentName:"td"},"<="),")"),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"Renvoie ",Object(i.mdx)("inlineCode",{parentName:"td"},"true")," si l'op\xe9rande gauche est inf\xe9rieur ou \xe9gal \xe0 l'op\xe9rande droit."),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"var1 <= var2    var2 <= 5"))))),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"Note :")," ",Object(i.mdx)("inlineCode",{parentName:"p"},"=>")," n'est pas un op\xe9rateur. Il s'agit de la notation utilis\xe9e pour ",Object(i.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Fonctions/Fonctions_fl%C3%A9ch%C3%A9es"}),"les fonctions fl\xe9ch\xe9es"),"."),Object(i.mdx)("h3",{id:"op\xe9rateurs-arithm\xe9tiques"},"Op\xe9rateurs arithm\xe9tiques"),Object(i.mdx)("p",null,"Les ",Object(i.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_arithm%C3%A9tiques"}),"op\xe9rateurs arithm\xe9tiques")," ont pour op\xe9randes des valeurs num\xe9riques (des litt\xe9raux ou des variables) et renvoient une valeur num\xe9rique. Les op\xe9rateurs arithm\xe9tiques standards sont l'addition (+), la soustraction (-), la multiplication (*), et la division (/). Ces op\xe9rateurs fonctionnent comme pour la plupart des langages de programmation lorsqu'ils sont utilis\xe9s avec des nombres d\xe9cimaux (on notera que la division par z\xe9ro a pour r\xe9sultat ",Object(i.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Infinity"}),Object(i.mdx)("inlineCode",{parentName:"a"},"Infinity")),"). Ainsi :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"1 / 2; // 0.5\n1 / 2 == 1.0 / 2.0; // true\n")),Object(i.mdx)("p",null,"En plus des op\xe9rations arithm\xe9tiques standards (+,-,*,/), JavaScript fournit \xe9galement d'autres op\xe9rateurs arithm\xe9tiques, list\xe9s dans le tableau qui suit :"),Object(i.mdx)("table",null,Object(i.mdx)("thead",{parentName:"table"},Object(i.mdx)("tr",{parentName:"thead"},Object(i.mdx)("th",Object(r.a)({parentName:"tr"},{align:null}),"Op\xe9rateur"),Object(i.mdx)("th",Object(r.a)({parentName:"tr"},{align:null}),"Description"),Object(i.mdx)("th",Object(r.a)({parentName:"tr"},{align:null}),"Exemple"))),Object(i.mdx)("tbody",{parentName:"table"},Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_arithm%C3%A9tiques#Reste_(.25)"}),"Reste")," (",Object(i.mdx)("inlineCode",{parentName:"td"},"%"),")"),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"Op\xe9rateur binaire. Renvoie le reste entier de la division entre les deux op\xe9randes."),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"12 % 5 renvoie 2.")),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_arithm%C3%A9tiques#Incr.C3.A9ment_(.2B.2B)"}),"Incr\xe9ment")," (",Object(i.mdx)("inlineCode",{parentName:"td"},"++"),")"),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"Op\xe9rateur unaire. Ajoute un \xe0 son op\xe9rande. S'il est utilis\xe9 en pr\xe9fixe (",Object(i.mdx)("inlineCode",{parentName:"td"},"++x"),"), il renvoie la valeur de l'op\xe9rande apr\xe8s avoir ajout\xe9 un, s'il est utilis\xe9 comme op\xe9rateur de suffixe (",Object(i.mdx)("inlineCode",{parentName:"td"},"x++"),"), il renvoie la valeur de l'op\xe9rande avant d'ajouter un."),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"Si ",Object(i.mdx)("inlineCode",{parentName:"td"},"x")," vaut 3, ",Object(i.mdx)("inlineCode",{parentName:"td"},"++x")," incr\xe9mente ",Object(i.mdx)("inlineCode",{parentName:"td"},"x")," \xe0 4 et renvoie 4, ",Object(i.mdx)("inlineCode",{parentName:"td"},"x++")," renvoie 3 et seulement ensuite ajoute un \xe0 ",Object(i.mdx)("inlineCode",{parentName:"td"},"x"),".")),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_arithm%C3%A9tiques#D.C3.A9cr.C3.A9ment_(--)"}),"D\xe9cr\xe9ment")," (",Object(i.mdx)("inlineCode",{parentName:"td"},"--"),")"),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"Op\xe9rateur unaire. Il soustrait un \xe0 son op\xe9rande. Il fonctionne de mani\xe8re analogue \xe0 l'op\xe9rateur d'incr\xe9ment."),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"Si ",Object(i.mdx)("inlineCode",{parentName:"td"},"x")," vaut 3, ",Object(i.mdx)("inlineCode",{parentName:"td"},"--x")," d\xe9cr\xe9mente ",Object(i.mdx)("inlineCode",{parentName:"td"},"x")," \xe0 2 puis renvoie2, ",Object(i.mdx)("inlineCode",{parentName:"td"},"x--")," renvoie 3 puis d\xe9cr\xe9mente la valeur de ",Object(i.mdx)("inlineCode",{parentName:"td"},"x"),".")),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_arithm%C3%A9tiques#N.C3.A9gation_unaire_(-)"}),"N\xe9gation unaire")," (",Object(i.mdx)("inlineCode",{parentName:"td"},"-"),")"),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"Op\xe9rateur unaire. Renvoie la valeur oppos\xe9e de l'op\xe9rande."),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"Si ",Object(i.mdx)("inlineCode",{parentName:"td"},"x")," vaut 3, alors ",Object(i.mdx)("inlineCode",{parentName:"td"},"-x")," renvoie -3.")),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_arithm%C3%A9tiques#Plus_unaire_(.2B)"}),"Plus unaire "),"(",Object(i.mdx)("inlineCode",{parentName:"td"},"+"),")"),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"Op\xe9rateur unaire. Si l'op\xe9rande n'est pas un nombre, il tente de le convertir en une valeur num\xe9rique."),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},'+"3"')," renvoie ",Object(i.mdx)("inlineCode",{parentName:"td"},"3"),".     ",Object(i.mdx)("inlineCode",{parentName:"td"},"+true")," renvoie ",Object(i.mdx)("inlineCode",{parentName:"td"},"1"),".")),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_arithm%C3%A9tiques#Exponentiation"}),"Op\xe9rateur d'exponentiation")," (**) (puissance)"),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"Calcule un nombre (base) \xe9lev\xe9 \xe0 une puissance donn\xe9e (soit ",Object(i.mdx)("inlineCode",{parentName:"td"},"basepuissance"),")"),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"2 ** 3")," renvoie ",Object(i.mdx)("inlineCode",{parentName:"td"},"8"),"     ",Object(i.mdx)("inlineCode",{parentName:"td"},"10 ** -1")," renvoie ",Object(i.mdx)("inlineCode",{parentName:"td"},"0.1"))))),Object(i.mdx)("h3",{id:"op\xe9rateurs-binaires"},"Op\xe9rateurs binaires"),Object(i.mdx)("p",null,"Les ",Object(i.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_binaires"}),"op\xe9rateurs binaires")," voient leurs op\xe9randes comme des ensembles de 32 bits (des z\xe9ros et des uns), et non pas comme des nombres d\xe9cimaux, octaux ou hexad\xe9cimaux. Ainsi, le nombre d\xe9cimal neuf aura une repr\xe9sentation binaire de 1001. Les op\xe9rateurs binaires effectuent des op\xe9rations sur des repr\xe9sentations binaires mais renvoies des valeurs num\xe9riques JavaScript standards."),Object(i.mdx)("p",null,"Le tableau qui suit r\xe9sume les op\xe9rateurs binaires JavaScript :"),Object(i.mdx)("table",null,Object(i.mdx)("thead",{parentName:"table"},Object(i.mdx)("tr",{parentName:"thead"},Object(i.mdx)("th",Object(r.a)({parentName:"tr"},{align:null}),"Op\xe9rateur"),Object(i.mdx)("th",Object(r.a)({parentName:"tr"},{align:null}),"Utilisation"),Object(i.mdx)("th",Object(r.a)({parentName:"tr"},{align:null}),"Description"))),Object(i.mdx)("tbody",{parentName:"table"},Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_binaires#&_.28ET_binaire.29"}),"AND (ET) binaire")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"a & b")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"Renvoie un 1 \xe0 chaque position binaire pour laquelle les bits des deux op\xe9randes sont \xe0 1.")),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_binaires#%7C_.28OU_binaire.29"}),"OR (OU) binaire")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"`a"),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"b`")),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_binaires#.5E_.28XOR_binaire.29"}),"XOR (OU exclusif) binaire")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"a ^ b")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"Renvoie un z\xe9ro \xe0 chaque position binaire pour laquelle les bits sont les m\xeames (et un 1 pour chacun des bits qui est diff\xe9rent).")),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_binaires#.7E_.28NON_binaire.29"}),"NOT (NON) binaire")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"~ a")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"Inverse les bits de l'op\xe9rande.")),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_binaires#.3C.3C_.28d.C3.A9calage_.C3.A0_gauche.29"}),"D\xe9calage binaire \xe0 gauche")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"a << b")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"D\xe9cale la repr\xe9sentation binaire de ",Object(i.mdx)("inlineCode",{parentName:"td"},"b")," bits sur la gauche et compl\xe8te avec des z\xe9ros \xe0 droite.")),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_binaires#.3E.3E_.28d.C3.A9calage_.C3.A0_droite_avec_propagation_du_signe.29"}),"D\xe9calage binaire \xe0 droite")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"a >> b")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"D\xe9cale la repr\xe9sentation binaire de ",Object(i.mdx)("inlineCode",{parentName:"td"},"b")," bits sur la droite en ignorant les bits perdus.")),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_binaires#.3E.3E.3E_.28d.C3.A9calage_.C3.A0_droite_avec_insertion_de_z.C3.A9ros.29"}),"D\xe9calage binaire \xe0 droite en compl\xe9tant avec des z\xe9ros")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"a >>> b")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"D\xe9cale la repr\xe9sentation binaire de ",Object(i.mdx)("inlineCode",{parentName:"td"},"b")," bits sur la droite en ignorant les bits perdus et ajoute des z\xe9ros sur la gauche.")))),Object(i.mdx)("h4",{id:"op\xe9rateurs-binaires-logiques"},"Op\xe9rateurs binaires logiques"),Object(i.mdx)("p",null,"Les op\xe9rateurs binaires logiques fonctionnent de cette fa\xe7on :"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("p",{parentName:"li"},"Les op\xe9randes sont convertis en entiers sur 32 bits et exprim\xe9s comme une s\xe9rie de bits (des 1 et des 0). Les nombres sur plus de 32 bits voient leurs bits suppl\xe9mentaires supprim\xe9s :  "),Object(i.mdx)("pre",{parentName:"li"},Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"Avant : 11100110111110100000000000000110000000000001\nApr\xe8s :             10100000000000000110000000000001\n"))),Object(i.mdx)("li",{parentName:"ul"}),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("p",{parentName:"li"},"Chaque bit du premier op\xe9rande est associ\xe9 avec le bit correspondant du second op\xe9rande (le premier bit du premier op\xe9rande avec le premier bit du second op\xe9rande, le second avec le second et ainsi de suite)")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("p",{parentName:"li"},"L'op\xe9rateur est appliqu\xe9 pour chaque paire de bits ainsi constitu\xe9e et le r\xe9sultat est reconstruit sous forme binaire."))),Object(i.mdx)("p",null,"Le chiffre neuf est par exemple repr\xe9sent\xe9 comme 1001, et le nombre quinze comme 1111. Ainsi, quand les op\xe9rateurs binaires sont appliqu\xe9s sur ces valeurs, on a les r\xe9sultats qui suivent :"),Object(i.mdx)("table",null,Object(i.mdx)("thead",{parentName:"table"},Object(i.mdx)("tr",{parentName:"thead"},Object(i.mdx)("th",Object(r.a)({parentName:"tr"},{align:null}),"Expression"),Object(i.mdx)("th",Object(r.a)({parentName:"tr"},{align:null}),"R\xe9sultat"),Object(i.mdx)("th",Object(r.a)({parentName:"tr"},{align:null}),"Description binaire"))),Object(i.mdx)("tbody",{parentName:"table"},Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"15 & 9")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"9")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"1111 & 1001 = 1001"))),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"`15"),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"9`"),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"15"))),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"15 ^ 9")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"6")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"1111 ^ 1001 = 0110"))),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"~15")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"-16")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"~``00000000...``00001111 = ``1111``1111``...``11110000"))),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"~9")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"-10")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"~``00000000``...``0000``1001 = ``1111``1111``...``1111``0110"))))),Object(i.mdx)("p",null,"Il faut remarquer que tous les bits sont \xe9chang\xe9s lorsque l'op\xe9rateur binaire NOT est utilis\xe9. Il est donc utile de savoir que les valeurs dont le bit le plus fort (le plus \xe0 gauche) vaut 1 sont des nombres n\xe9gatifs (repr\xe9sentation en compl\xe9ment \xe0 deux). L'\xe9valuation de ",Object(i.mdx)("inlineCode",{parentName:"p"},"~x")," aura le m\xeame r\xe9sultat que l'\xe9valuation de ",Object(i.mdx)("inlineCode",{parentName:"p"},"-x - 1"),"."),Object(i.mdx)("h4",{id:"op\xe9rateurs-binaires-de-d\xe9calage"},"Op\xe9rateurs binaires de d\xe9calage"),Object(i.mdx)("p",null,"Les op\xe9rateurs binaires de d\xe9calage utilisent deux op\xe9randes : le premier indiquant la quantit\xe9 \xe0 d\xe9caler et le second indiquant de combien de bits on d\xe9cale le premier op\xe9rande. La direction du d\xe9calage est sp\xe9cifi\xe9e gr\xe2ce \xe0 l'op\xe9rateur."),Object(i.mdx)("p",null,"Les op\xe9rateurs binaires de d\xe9calage convertissent leurs op\xe9randes en entiers sur 32 bits et renvoient un r\xe9sultat dont le type est le m\xeame que l'op\xe9rande gauche."),Object(i.mdx)("p",null,"Les op\xe9rateurs de d\xe9calage sont \xe9num\xe9r\xe9s dans le tableau qui suit."),Object(i.mdx)("table",null,Object(i.mdx)("thead",{parentName:"table"},Object(i.mdx)("tr",{parentName:"thead"},Object(i.mdx)("th",Object(r.a)({parentName:"tr"},{align:null}),"Op\xe9rateur"),Object(i.mdx)("th",Object(r.a)({parentName:"tr"},{align:null}),"Description"),Object(i.mdx)("th",Object(r.a)({parentName:"tr"},{align:null}),"Exemple"))),Object(i.mdx)("tbody",{parentName:"table"},Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_binaires#%3C%3C_(d%C3%A9calage_%C3%A0_gauche)"}),"D\xe9calage \xe0 gauche (",Object(i.mdx)("inlineCode",{parentName:"a"},"<<"),")")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"Cet op\xe9rateur d\xe9cale le premier op\xe9rande d'un nombre de bits donn\xe9 sur la gauche. Les bits en trop sont ignor\xe9s et des bits \xe0 z\xe9ro sont introduits \xe0 droite."),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"9<<2")," renvoie 36, car 1001, d\xe9cal\xe9 de 2 bits \xe0 gauche, devient 100100, dont la repr\xe9sentation en base 10 est 36.")),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_binaires#%3E%3E_(d%C3%A9calage_%C3%A0_droite_avec_propagation_du_signe)"}),"D\xe9calage \xe0 droite avec propagation du signe (",Object(i.mdx)("inlineCode",{parentName:"a"},">>"),")")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"Cet op\xe9rateur d\xe9cale le premier op\xe9rande d'un nombre de bits donn\xe9 sur la droite. Les bits en trop sont ignor\xe9s et des bits correspondants au bit de signe sont introduits \xe0 gauche."),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"9>>2")," renvoie 2, car 1001, d\xe9cal\xe9 de 2 bits \xe0 droite, devient 10 repr\xe9sentant 2. De m\xeame ",Object(i.mdx)("inlineCode",{parentName:"td"},"-9>>2")," renvoie -3, car le signe est pr\xe9serv\xe9.")),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_binaires#%3E%3E%3E_(d%C3%A9calage_%C3%A0_droite_avec_insertion_de_z%C3%A9ros)"}),"D\xe9calage \xe0 droite avec z\xe9ros (",Object(i.mdx)("inlineCode",{parentName:"a"},">>>"),")")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"Cet op\xe9rateur d\xe9cale le premier op\xe9rande d'un nombre de bits donn\xe9 sur la droite. Les bits en trop sont ignor\xe9s et des bits \xe0 0 sont introduits \xe0 gauche."),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"19>>>2")," renvoie 4, car 10011, d\xe9cal\xe9 de 2 bits, devient 100 qui repr\xe9sente 4. Pour les nombres positifs, cet op\xe9rateur et l'op\xe9rateur pr\xe9c\xe9dent renvoient les m\xeames r\xe9sultats.")))),Object(i.mdx)("h3",{id:"op\xe9rateurs-logiques"},"Op\xe9rateurs logiques"),Object(i.mdx)("p",null,"Les ",Object(i.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_logiques"}),"op\xe9rateurs logiques")," sont g\xe9n\xe9ralement utilis\xe9s avec des valeurs bool\xe9ennes. Dans ce cas, il renvoient une valeur bool\xe9enne. Les op\xe9rateurs ",Object(i.mdx)("inlineCode",{parentName:"p"},"&&")," et ",Object(i.mdx)("inlineCode",{parentName:"p"},"||")," renvoient en fait une valeurs d'un des op\xe9randes et si ces op\xe9rateurs sont utilis\xe9s avec des valeurs non-bool\xe9enn\xe9es, ils pourront renvoyer une valeur non-bool\xe9enne. Les op\xe9rateurs logiques sont d\xe9crits dans le tableau qui suit."),Object(i.mdx)("table",null,Object(i.mdx)("thead",{parentName:"table"},Object(i.mdx)("tr",{parentName:"thead"},Object(i.mdx)("th",Object(r.a)({parentName:"tr"},{align:null}),"Op\xe9rateur"),Object(i.mdx)("th",Object(r.a)({parentName:"tr"},{align:null}),"Usage"),Object(i.mdx)("th",Object(r.a)({parentName:"tr"},{align:null}),"Description"))),Object(i.mdx)("tbody",{parentName:"table"},Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_logiques#Logical_AND_.28&&.29"}),"ET logique")," (",Object(i.mdx)("inlineCode",{parentName:"td"},"&&"),")"),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"expr1 && expr2")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"Renvoie ",Object(i.mdx)("inlineCode",{parentName:"td"},"expr1")," s'il peut \xeatre converti \xe0 false, sinon renvoie ",Object(i.mdx)("inlineCode",{parentName:"td"},"expr2"),". Dans le cas o\xf9 on utilise des op\xe9randes bool\xe9ens, ",Object(i.mdx)("inlineCode",{parentName:"td"},"&&")," renvoie ",Object(i.mdx)("inlineCode",{parentName:"td"},"true")," si les deux op\xe9randes valent ",Object(i.mdx)("inlineCode",{parentName:"td"},"true"),", ",Object(i.mdx)("inlineCode",{parentName:"td"},"false")," sinon.")),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_logiques#OU_logique_(.7C.7C)"}),"OU logique")," (`"),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null})),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"`)")),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("a",Object(r.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateurs_logiques#Logical_NOT_.28.21.29"}),"NON logique "),"(",Object(i.mdx)("inlineCode",{parentName:"td"},"!"),")"),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"!expr")),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"Renvoie ",Object(i.mdx)("inlineCode",{parentName:"td"},"false")," si son unique op\xe9rande peut \xeatre converti en ",Object(i.mdx)("inlineCode",{parentName:"td"},"true"),", sinon il renvoie ",Object(i.mdx)("inlineCode",{parentName:"td"},"true"),".")))),Object(i.mdx)("p",null,"Les exemples d'expressions qui peuvent \xeatre converties \xe0 ",Object(i.mdx)("inlineCode",{parentName:"p"},"false")," sont celles qui sont \xe9valu\xe9es \xe0 ",Object(i.mdx)("inlineCode",{parentName:"p"},"null"),", 0, ",Object(i.mdx)("inlineCode",{parentName:"p"},"NaN"),', la cha\xeene de caract\xe8res vide (""), ou ',Object(i.mdx)("inlineCode",{parentName:"p"},"undefined"),"."),Object(i.mdx)("p",null,"Le code qui suit montre des exemples de l'utilisation de l'op\xe9rateur logique ET (&&)."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'var a1 =   true && true;     // t && t renvoie true\nvar a2 =   true && false;    // t && f renvoie false\nvar a3 =  false && true;     // f && t renvoie false\nvar a4 =  false && (3 == 4); // f && f renvoie false\nvar a5 = "Chat" && "Chien";  // t && t renvoie Chien\nvar a6 =  false && "Chat";   // f && t renvoie false\nvar a7 = "Chat" && false;    // t && f renvoie false\n')),Object(i.mdx)("p",null,"Les exemples suivants montrent l'utilisation de l'op\xe9rateur logique OU (||)."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'var o1 =   true || true;     // t || t renvoie true\nvar o2 =  false || true;     // f || t renvoie true\nvar o3 =   true || false;    // t || f renvoie true\nvar o4 =  false || (3 == 4); // f || f renvoie false\nvar o5 = "Chat" || "Chien";  // t || t renvoie Chat\nvar o6 =  false || "Chat";   // f || t renvoie Chat\nvar o7 = "Chat" || false;    // t || f renvoie Chat\n')),Object(i.mdx)("p",null,"Les exemples suivants montrent l'utilisation de l'op\xe9rateur logique NON (!)."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'var n1 = !true;   // !t renvoie false\nvar n2 = !false;  // !f renvoie true\nvar n3 = !"Chat"; // !t renvoie false\n')),Object(i.mdx)("h4",{id:"evaluation-rapide"},"Evaluation rapide"),Object(i.mdx)("p",null,"Les expressions logiques sont \xe9valu\xe9es de gauche \xe0 droite. Cette \xe9valuation utilise des tests pour savoir s'il est possible d'utiliser des \xab raccourcis \xbb correspondant aux r\xe8gles suivantes :"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"false")," && ",Object(i.mdx)("em",{parentName:"li"},"n'importe quoi")," sera \xe9valu\xe9 \xe0 ",Object(i.mdx)("inlineCode",{parentName:"li"},"false"),"."),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("inlineCode",{parentName:"li"},"true")," || ",Object(i.mdx)("em",{parentName:"li"},"n'importe quoi")," sera \xe9valu\xe9 \xe0 ",Object(i.mdx)("inlineCode",{parentName:"li"},"true"),".")),Object(i.mdx)("p",null,"Les r\xe8gles logiques garantissent la validit\xe9 de ces \xe9valuations, il faut noter que le second op\xe9rande n'est pas du tout \xe9valu\xe9, emp\xeachant ainsi les effets de bords cach\xe9s, li\xe9s \xe0 cette \xe9valuation."),Object(i.mdx)("h3",{id:"op\xe9rateurs-de-cha\xeenes-de-caract\xe8res"},"Op\xe9rateurs de cha\xeenes de caract\xe8res"),Object(i.mdx)("p",null,"En plus des op\xe9rateurs de comparaisons qui peuvent \xeatre utilis\xe9s sur des cha\xeenes de caract\xe8res, il existe l'op\xe9rateur de concat\xe9nation (+) permettant de concat\xe9ner deux cha\xeenes de caract\xe8res. Le r\xe9sultat de cette op\xe9ration est la fusion des deux op\xe9randes en une m\xeame cha\xeene de caract\xe8res. Ainsi :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'console.log("ma " + "cha\xeene"); // affichera "ma cha\xeene" dans la console\n')),Object(i.mdx)("p",null,"L'op\xe9rateur court += peut \xe9galement \xeatre utilis\xe9 pour concat\xe9ner des cha\xeenes. Par exemple :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'var maCha\xeene = "alpha";\nmaCha\xeene += "bet"; // l\'expression sera \xe9valu\xe9e en "alphabet"\n                   // et cette valeur sera affect\xe9e \xe0 maCha\xeene\n')),Object(i.mdx)("h3",{id:"op\xe9rateur-conditionnel-ternaire"},"Op\xe9rateur conditionnel ternaire"),Object(i.mdx)("p",null,"L'",Object(i.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/L_op%C3%A9rateur_conditionnel"}),"op\xe9rateur conditionnel")," est le seul op\xe9rateur JavaScript qui utilise trois op\xe9randes. L'expression utilisant l'op\xe9rateur peut prendre une valeur parmi deux selon une condition donn\xe9e. Cet op\xe9rateur s'utilise avec la syntaxe suivante :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{}),"condition ? val1 : val2\n")),Object(i.mdx)("p",null,"Si ",Object(i.mdx)("inlineCode",{parentName:"p"},"condition")," vaut ",Object(i.mdx)("inlineCode",{parentName:"p"},"true"),", l'op\xe9rateur vaudra ",Object(i.mdx)("inlineCode",{parentName:"p"},"val1"),". Sinon il vaudra ",Object(i.mdx)("inlineCode",{parentName:"p"},"val2"),". Il est possible d'utiliser l'op\xe9rateur conditionnel aux m\xeames endroits qu'un op\xe9rateur standard."),Object(i.mdx)("p",null,"On peut par exemple avoir :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'var statut = (\xe2ge >= 18) ? "adulte" : "mineur";\n')),Object(i.mdx)("p",null,'Cette instruction assigne la valeur "adulte" \xe0 la variable ',Object(i.mdx)("inlineCode",{parentName:"p"},"status")," si la variable ",Object(i.mdx)("inlineCode",{parentName:"p"},"\xe2ge"),' est sup\xe9rieure ou \xe9gale \xe0 18. Sinon, on lui affecte la valeur "mineur".'),Object(i.mdx)("h3",{id:"la-virgule-comme-op\xe9rateur"},"La virgule comme op\xe9rateur"),Object(i.mdx)("p",null,"L'",Object(i.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/L_op%C3%A9rateur_virgule"}),"op\xe9rateur virgule")," (",Object(i.mdx)("inlineCode",{parentName:"p"},","),") \xe9value ses deux op\xe9randes et renvoie la valeur du second op\xe9rande. Cet op\xe9rateur est principalement utilis\xe9 dans les boucles for pour permettre \xe0 plusieurs variables d'\xeatre modifi\xe9es \xe0 chaque it\xe9ration de la boucle."),Object(i.mdx)("p",null,"Ainsi, si on a un tableau \xe0 2 dimensions avec 10 lignes et colonnes, on peut utiliser la virgule comme op\xe9rateur pour incr\xe9menter deux variables \xe0 la fois. Le code qui suit imprime les valeurs contenues sur la diagonale du tableau :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'var x = [0,1,2,3,4,5,6,7,8,9]\nvar a = [x, x, x, x, x];\n\nfor (var i = 0, j = 9; i <= j; i++, j--)\n  console.log("a[" + i + "][" + j + "]= " + a[i][j]);\n')),Object(i.mdx)("h3",{id:"op\xe9rateurs-unaires"},"Op\xe9rateurs unaires"),Object(i.mdx)("h4",{id:"delete"},Object(i.mdx)("inlineCode",{parentName:"h4"},"delete")),Object(i.mdx)("p",null,"L'op\xe9rateur ",Object(i.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/L_op%C3%A9rateur_delete"}),"delete")," supprime un objet, une propri\xe9t\xe9 d'un objet ou un \xe9l\xe9ment d'un tableau \xe0 partir de sa position dans le tableau. La syntaxe de cet op\xe9rateur est la suivante :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"delete monObjet;\ndelete monObjet.propri\xe9t\xe9;\ndelete monObjet[index];\ndelete propri\xe9t\xe9; // uniquement valide au sein d'une instruction with\n")),Object(i.mdx)("p",null,"o\xf9 on a ",Object(i.mdx)("inlineCode",{parentName:"p"},"monObjet")," qui est le nom de l'objet, ",Object(i.mdx)("inlineCode",{parentName:"p"},"propri\xe9t\xe9")," qui est une propri\xe9t\xe9 existante et ",Object(i.mdx)("inlineCode",{parentName:"p"},"index")," un entier indiquant la position d'un \xe9l\xe9ment dans un tableau."),Object(i.mdx)("p",null,"La quatri\xe8me instruction n'est valide qu'au sein d'une instruction ",Object(i.mdx)("inlineCode",{parentName:"p"},"with")," et permet de supprimer une propri\xe9t\xe9 d'un objet."),Object(i.mdx)("p",null,"Il est possible d'utiliser l'op\xe9rateur ",Object(i.mdx)("inlineCode",{parentName:"p"},"delete")," pour supprimer les variables d\xe9clar\xe9es implicitement mais pas celles d\xe9clar\xe9es avec ",Object(i.mdx)("inlineCode",{parentName:"p"},"var"),". Si l'op\xe9rateur fonctionne correctement, il change la propri\xe9t\xe9 ou l'\xe9l\xe9ment vers la valeur ",Object(i.mdx)("inlineCode",{parentName:"p"},"undefined"),". L'op\xe9rateur ",Object(i.mdx)("inlineCode",{parentName:"p"},"delete")," renvoie ",Object(i.mdx)("inlineCode",{parentName:"p"},"true")," si l'op\xe9ration de suppression est possible, ",Object(i.mdx)("inlineCode",{parentName:"p"},"false")," sinon."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"x = 42;\nvar y = 43;\nmonobj = new Number();\nmonobj.h = 4;    // cr\xe9ation de la propri\xe9t\xe9 h\ndelete x;        // renvoie true (suppression possible si d\xe9claration implicite)\ndelete y;        // renvoie false (suppression impossible si d\xe9claration avec var si la variable n'est pas une propri\xe9t\xe9)\ndelete Math.PI;  // renvoie false (suppression impossible pour les propri\xe9t\xe9s pr\xe9-d\xe9finies)\ndelete monobj.h; // renvoie true (suppression possible des propri\xe9t\xe9s d\xe9finies par l'utilisateur)\ndelete monobj;   // renvoie true (suppression possible si d\xe9claration implicite)\n")),Object(i.mdx)("h5",{id:"suppression-d\xe9l\xe9ments-dun-tableau"},"Suppression d'\xe9l\xe9ments d'un tableau"),Object(i.mdx)("p",null,"Lorsqu'on supprime un \xe9l\xe9ment d'un tableau, la longueur du tableau n'est pas modifi\xe9e. Ainsi, si on supprime ",Object(i.mdx)("inlineCode",{parentName:"p"},"a[3]"),", ",Object(i.mdx)("inlineCode",{parentName:"p"},"a[4]")," restera ",Object(i.mdx)("inlineCode",{parentName:"p"},"a[4]")," (m\xeame position et valeur) alors que ",Object(i.mdx)("inlineCode",{parentName:"p"},"a[3]")," sera ",Object(i.mdx)("inlineCode",{parentName:"p"},"undefined"),"."),Object(i.mdx)("p",null,"Lorsque l'op\xe9rateur ",Object(i.mdx)("inlineCode",{parentName:"p"},"delete")," supprime un \xe9l\xe9ment d'un tableau, cet \xe9l\xe9ment n'appartient plus au tableau. Dans l'exemple qui suit, ",Object(i.mdx)("inlineCode",{parentName:"p"},"arbres[3]")," est supprim\xe9 mais il est toujours accessible et renvoie ",Object(i.mdx)("inlineCode",{parentName:"p"},"undefined"),"."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'var arbres = new Array("sequoia", "laurier", "c\xe8dre", "ch\xeane", "\xe9rable");\ndelete arbres[3];\nif (3 in arbres) {\n  // Ceci ne sera pas ex\xe9cut\xe9\n}\n')),Object(i.mdx)("p",null,"Pour qu'un \xe9l\xe9ment continue \xe0 exister mais qu'il vaille ",Object(i.mdx)("inlineCode",{parentName:"p"},"undefined"),", on utilisera le mot-cl\xe9",Object(i.mdx)("inlineCode",{parentName:"p"}," undefined")," plut\xf4t que l'op\xe9rateur ",Object(i.mdx)("inlineCode",{parentName:"p"},"delete"),". Dans l'exemple qui suit, arbres",Object(i.mdx)("inlineCode",{parentName:"p"},"[3]")," est modifi\xe9 pour valoir ",Object(i.mdx)("inlineCode",{parentName:"p"},"undefined")," et l'\xe9l\xe9ment du tableau continue \xe0 exister :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'var arbres = new Array("sequoia", "laurier", "c\xe8dre", "ch\xeane", "\xe9rable");\narbres[3] = undefined;\nif (3 in arbres) {\n  // Ceci sera ex\xe9cut\xe9\n}\n')),Object(i.mdx)("h4",{id:"typeof"},Object(i.mdx)("inlineCode",{parentName:"h4"},"typeof")),Object(i.mdx)("p",null,"L'",Object(i.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/L_op%C3%A9rateur_typeof"}),"op\xe9rateur ",Object(i.mdx)("inlineCode",{parentName:"a"},"typeof"))," peut \xeatre utilis\xe9 de deux fa\xe7ons distinctes :"),Object(i.mdx)("ol",null,Object(i.mdx)("li",{parentName:"ol"},Object(i.mdx)("pre",{parentName:"li"},Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{}),"typeof op\xe9rande\n"))),Object(i.mdx)("li",{parentName:"ol"},Object(i.mdx)("pre",{parentName:"li"},Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{}),"typeof (op\xe9rande)\n")))),Object(i.mdx)("p",null,"L'op\xe9rateur ",Object(i.mdx)("inlineCode",{parentName:"p"},"typeof")," renvoie une cha\xeene de caract\xe8res indiquant le type de l'op\xe9rande (qui n'est pas \xe9valu\xe9). ",Object(i.mdx)("inlineCode",{parentName:"p"},"op\xe9rande")," correspond \xe0 la cha\xeene de caract\xe8re, la variable, le mot-cl\xe9 ou l'objet dont on souhaite renvoyer le type. L'utilisation des parenth\xe8ses est facultative."),Object(i.mdx)("p",null,"Soient les d\xe9finitions de variables suivantes :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'var maFonction = new Function("5 + 2");\nvar forme = "round";\nvar taille = 1;\nvar toto = ["Pomme", "Poire", "Orange"];\nvar jour = new Date();\n')),Object(i.mdx)("p",null,"L'op\xe9rateur ",Object(i.mdx)("inlineCode",{parentName:"p"},"typeof")," renverra les r\xe9sultats suivants :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'typeof maFonction; // renvoie "function"\ntypeof forme;      // renvoie "string"\ntypeof taille;     // renvoie "number"\ntypeof toto;       // renvoie "object"\ntypeof jour;       // renvoie "object"\ntypeof inexistant; // renvoie "undefined"\n')),Object(i.mdx)("p",null,"En ce qui concerne les mots-cl\xe9s ",Object(i.mdx)("inlineCode",{parentName:"p"},"true")," et ",Object(i.mdx)("inlineCode",{parentName:"p"},"null"),", l'op\xe9rateur ",Object(i.mdx)("inlineCode",{parentName:"p"},"typeof")," renvoie les r\xe9sultats suivants :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'typeof true; // renvoie "boolean"\ntypeof null; // renvoie "object"\n')),Object(i.mdx)("p",null,"Pour une cha\xeene de caract\xe8res ou un nombre, ",Object(i.mdx)("inlineCode",{parentName:"p"},"typeof")," renvoie les r\xe9sultats suivants :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'typeof 62;            // renvoie "number"\ntypeof \'Hello world\'; // renvoie "string"\n')),Object(i.mdx)("p",null,"L'op\xe9rateur ",Object(i.mdx)("inlineCode",{parentName:"p"},"typeof"),", lorsqu'il est utilis\xe9 avec des propri\xe9t\xe9s, renvoie le type de valeur contenue dans la propri\xe9t\xe9 :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'typeof document.lastModified; // renvoie "string"\ntypeof window.length;         // renvoie "number"\ntypeof Math.LN2;              // renvoie "number"\n')),Object(i.mdx)("p",null,"Pour les m\xe9thodes et les fonctions, l'op\xe9rateur ",Object(i.mdx)("inlineCode",{parentName:"p"},"typeof")," renvoie les r\xe9sultats suivants :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'typeof blur;        // renvoie "function"\ntypeof eval;        // renvoie "function"\ntypeof parseInt;    // renvoie "function"\ntypeof shape.split; // renvoie "function"\n')),Object(i.mdx)("p",null,"Pour les objets pr\xe9-d\xe9finis, l'op\xe9rateur ",Object(i.mdx)("inlineCode",{parentName:"p"},"typeof")," fonctionne ainsi :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'typeof Date;     // renvoie "function"\ntypeof Function; // renvoie "function"\ntypeof Math;     // renvoie "object"\ntypeof Option;   // renvoie "function"\ntypeof String;   // renvoie "function"\n')),Object(i.mdx)("h4",{id:"void"},Object(i.mdx)("inlineCode",{parentName:"h4"},"void")),Object(i.mdx)("p",null,"L'",Object(i.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/L_op%C3%A9rateur_void"}),"op\xe9rateur ",Object(i.mdx)("inlineCode",{parentName:"a"},"void"))," peut \xeatre utilis\xe9 de deux fa\xe7ons :"),Object(i.mdx)("ol",null,Object(i.mdx)("li",{parentName:"ol"},Object(i.mdx)("pre",{parentName:"li"},Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{}),"void (expression)\n"))),Object(i.mdx)("li",{parentName:"ol"},Object(i.mdx)("pre",{parentName:"li"},Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{}),"void expression\n")))),Object(i.mdx)("p",null,"L'op\xe9rateur ",Object(i.mdx)("inlineCode",{parentName:"p"},"void")," indique qu'une expression doit \xeatre \xe9valu\xe9e sans retourner de valeur. ",Object(i.mdx)("inlineCode",{parentName:"p"},"expression")," \xe9tant une expression JavaScript \xe0 \xe9valuer. Les parenth\xe8ses sont facultatives mais les utiliser permet d'avoir une meilleur lisibilit\xe9 du code."),Object(i.mdx)("p",null,"L'op\xe9rateur ",Object(i.mdx)("inlineCode",{parentName:"p"},"void")," peut \xeatre utilis\xe9 pour sp\xe9cifier une expression comme un lien hypertexte, l'expression est \xe9valu\xe9e mais n'est pas charg\xe9e \xe0 la place du document actuel."),Object(i.mdx)("p",null,"Le fragment de code qui suit cr\xe9e un lien hypertexte qui ne fait rien lorsque l'utilisateur clique dessus. Lorsqu'on clique sur le lien, ",Object(i.mdx)("inlineCode",{parentName:"p"},"void(0)")," est \xe9valu\xe9 \xe0 ",Object(i.mdx)("inlineCode",{parentName:"p"},"undefined"),", n'ayant aucun effet."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-html"}),'<A HREF="javascript:void(0)">Cliquer ici pour ne rien faire</A>\n')),Object(i.mdx)("p",null,"Le code suivant cr\xe9e un lien hypertexte qui envoie un formulaire lorsque l'utilisateur clique dessus."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-html"}),'<A HREF="javascript:void(document.form.submit())">\nCliquer ici pour envoyer</A>\n')),Object(i.mdx)("h3",{id:"op\xe9rateurs-relationnels"},"Op\xe9rateurs relationnels"),Object(i.mdx)("p",null,"Un op\xe9rateur relationnel compare ses op\xe9randes et renvoie une valeur bool\xe9enne selon que le r\xe9sultat de la comparaison est vrai ou faux."),Object(i.mdx)("h4",{id:"in"},Object(i.mdx)("inlineCode",{parentName:"h4"},"in")),Object(i.mdx)("p",null,"L'",Object(i.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/L_op%C3%A9rateur_in"}),"op\xe9rateur ",Object(i.mdx)("inlineCode",{parentName:"a"},"in"))," renvoie ",Object(i.mdx)("inlineCode",{parentName:"p"},"true")," si la propri\xe9t\xe9 indiqu\xe9e fait partie de l'objet donn\xe9. Cet op\xe9rateur s'utilise avec la syntaxe suivante :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{}),"nomOuNumeroPropriete in monObjet\n")),Object(i.mdx)("p",null,"avec ",Object(i.mdx)("inlineCode",{parentName:"p"},"nomOuNumeroPropriete")," qui est une cha\xeene de caract\xe8res, une expression num\xe9rique ou un symbole correspondant au nom d'une propri\xe9t\xe9 ou un indice de tableau, ",Object(i.mdx)("inlineCode",{parentName:"p"},"monObjet")," est le nom d'un objet."),Object(i.mdx)("p",null,"Les exemples qui suivent utilisent cet op\xe9rateur ",Object(i.mdx)("inlineCode",{parentName:"p"},"in"),"."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'// Tableaux\nvar arbres = new Array("sequoia", "laurier", "c\xe8dre", "ch\xeane", "\xe9rable");\n0 in arbres;         // renvoie true\n3 in arbres;         // renvoie true\n6 in arbres;         // renvoie false\n"laurier" in arbres; // renvoie false (l\'op\xe9rateur se base sur l\'indice et pas\n                     // sur la valeur)\n"length" in arbres;  // renvoie true (length est une propri\xe9t\xe9 d\'un objet Array)\n\n// Objets pr\xe9-d\xe9finis\n"PI" in Math;         // renvoie true\nvar myString = new String("coral");\n"length" in myString; // renvoie true\n\n// Objets d\xe9finis par l\'utilisateur\nvar maVoiture = {fabricant: "Honda", mod\xe8le: "Accord", year: 1998};\n"fabricant" in maVoiture; // renvoie true\n"mod\xe8le" in maVoiture;    // renvoie true\n')),Object(i.mdx)("h4",{id:"instanceof"},Object(i.mdx)("inlineCode",{parentName:"h4"},"instanceof")),Object(i.mdx)("p",null,"L'",Object(i.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/instanceof"}),"op\xe9rateur instanceof")," renvoie ",Object(i.mdx)("inlineCode",{parentName:"p"},"true")," si l'objet donn\xe9 est du type sp\xe9cifi\xe9. Cet op\xe9rateur s'utilise avec la syntaxe suivante :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{}),"nomObjet instanceof typeObjet\n")),Object(i.mdx)("p",null,"avec ",Object(i.mdx)("inlineCode",{parentName:"p"},"nomObjet")," qui est le nom de l'objet dont on souhaite comparer le type \xe0 ",Object(i.mdx)("inlineCode",{parentName:"p"},"typeObjet"),", ",Object(i.mdx)("inlineCode",{parentName:"p"},"typeObjet")," \xe9tant un type d'objet tel que ",Object(i.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Date"}),Object(i.mdx)("inlineCode",{parentName:"a"},"Date"))," ou ",Object(i.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Array"}),Object(i.mdx)("inlineCode",{parentName:"a"},"Array")),"."),Object(i.mdx)("p",null,Object(i.mdx)("inlineCode",{parentName:"p"},"instanceof")," peut \xeatre utilis\xe9 pour confirmer le type d'un objet pendant l'ex\xe9cution. Ainsi, on peut g\xe9rer les exceptions en pr\xe9voyant diff\xe9rents cas pour diff\xe9rents types d'exception \xe9ventuellement lev\xe9es."),Object(i.mdx)("p",null,"Dans l'exemple qui suit, le code utilise l'op\xe9rateur ",Object(i.mdx)("inlineCode",{parentName:"p"},"instanceof")," afin de d\xe9terminer si ",Object(i.mdx)("inlineCode",{parentName:"p"},"jour")," est un objet ",Object(i.mdx)("inlineCode",{parentName:"p"},"Date"),". C'est le cas, les instructions contenues dans le bloc apr\xe8s l'instruction ",Object(i.mdx)("inlineCode",{parentName:"p"},"if")," sont donc ex\xe9cut\xe9es."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"var jour = new Date(2007, 01, 22);\nif (jour instanceof Date) {\n  // instructions \xe0 ex\xe9cuter\n}\n")),Object(i.mdx)("h3",{id:"pr\xe9c\xe9dence-des-op\xe9rateurs"},"Pr\xe9c\xe9dence des op\xe9rateurs"),Object(i.mdx)("p",null,"La ",Object(i.mdx)("em",{parentName:"p"},"pr\xe9c\xe9dence")," des op\xe9rateurs indique l'ordre dans lequel ils sont appliqu\xe9s lors de l'\xe9valuation d'une expression. L'utilisation de parenth\xe8ses permet de surcharger la relation de pr\xe9c\xe9dence."),Object(i.mdx)("p",null,"Le tableau qui suit d\xe9crit les pr\xe9c\xe9dences des op\xe9rateurs, dans l'ordre d\xe9croissant."),Object(i.mdx)("table",null,Object(i.mdx)("thead",{parentName:"table"},Object(i.mdx)("tr",{parentName:"thead"},Object(i.mdx)("th",Object(r.a)({parentName:"tr"},{align:null}),"Type d'op\xe9rateur"),Object(i.mdx)("th",Object(r.a)({parentName:"tr"},{align:null}),"Op\xe9rateurs individuels"))),Object(i.mdx)("tbody",{parentName:"table"},Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"membre"),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},". []"))),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"appel/cr\xe9ation d'instance"),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"() new"))),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"n\xe9gation/incr\xe9mentation"),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"! ~ - + ++ -- typeof void delete"))),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"multiplication/division"),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"* / %"))),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"addition/soustraction"),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"+ -"))),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"d\xe9calage binaire"),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"<< >> >>>"))),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"relationnel"),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"< <= > >= in instanceof"))),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"\xe9galit\xe9"),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"== != === !=="))),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"ET binaire"),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"&"))),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"OU exclusif binaire"),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"^"))),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"OU binaire"),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"`")),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"ET logique"),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"&&"))),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"OU logique"),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"`")),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"conditionnel"),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},"?:"))),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"assignation"),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"`= += -= *= /= %= <<= >>= >>>= &= ^=")),Object(i.mdx)("tr",{parentName:"tbody"},Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),"virgule"),Object(i.mdx)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(i.mdx)("inlineCode",{parentName:"td"},","))))),Object(i.mdx)("p",null,"Une version plus d\xe9taill\xe9e de cette table peut \xeatre trouv\xe9e dans la ",Object(i.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Pr%C3%A9c%C3%A9dence_des_op%C3%A9rateurs#Table"}),"r\xe9f\xe9rence JavaScript"),"."),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"expressions"},"Expressions"),Object(i.mdx)("p",null,"Un expression correspond \xe0 une unit\xe9 de code valide qui est r\xe9solue en une valeur."),Object(i.mdx)("p",null,"D'un point de vue syntaxique, toute expression valide se r\xe9sout en une valeur. D'un point de vue conceptuel cependant, il y a deux types d'expressions : celles avec des effets de bord (qui, par exemple, affectent une valeur \xe0 une variable) et celles qui, d'une certaine fa\xe7on, sont \xe9valu\xe9es et sont r\xe9solues en une valeur."),Object(i.mdx)("p",null,"L'expression ",Object(i.mdx)("inlineCode",{parentName:"p"},"x = 7")," affecte une valeur (premier type). Dans celle-ci, on utilise l'op\xe9rateur ",Object(i.mdx)("inlineCode",{parentName:"p"},"=")," pour affecter la valeur 7 \xe0 la variable ",Object(i.mdx)("inlineCode",{parentName:"p"},"x"),". L'expression elle-m\xeame est \xe9valu\xe9e \xe0 7."),Object(i.mdx)("p",null,"Le code ",Object(i.mdx)("inlineCode",{parentName:"p"},"3 + 4")," correspond au second type d'expression. On utilise ici l'op\xe9rateur ",Object(i.mdx)("inlineCode",{parentName:"p"},"+")," pour ajouter trois \xe0 quatre sans affecter le r\xe9sultat (7) \xe0 une variable."),Object(i.mdx)("p",null,"Les expressions JavaScript peuvent \xeatre rang\xe9es selon diff\xe9rentes cat\xe9gories :"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},"Arithm\xe9tiques : l'expression est \xe9valu\xe9e en un nombre (par exemple 3.14159)"),Object(i.mdx)("li",{parentName:"ul"},"Textuelles : l'expression est \xe9valu\xe9e en une cha\xeene de caract\xe8res"),Object(i.mdx)("li",{parentName:"ul"},"Logiques : l'expression est \xe9valu\xe9e en ",Object(i.mdx)("inlineCode",{parentName:"li"},"true")," ou ",Object(i.mdx)("inlineCode",{parentName:"li"},"false")),Object(i.mdx)("li",{parentName:"ul"},"Primaires : Les mots-cl\xe9s basiques et les expressions g\xe9n\xe9rales en JavaScript"),Object(i.mdx)("li",{parentName:"ul"},"Expressions vers la gauche : Les valeurs \xe0 gauche sont la cible d'une affectation")),Object(i.mdx)("h3",{id:"expressions-primaires"},"Expressions primaires"),Object(i.mdx)("p",null,"Ces expressions correspondent aux mots-cl\xe9s et aux expressions g\xe9n\xe9rales en JavaScript."),Object(i.mdx)("h4",{id:"this"},Object(i.mdx)("inlineCode",{parentName:"h4"},"this")),Object(i.mdx)("p",null,"Le ",Object(i.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/L_op%C3%A9rateur_this"}),"mot-cl\xe9 ",Object(i.mdx)("inlineCode",{parentName:"a"},"this"))," permet de faire r\xe9f\xe9rence \xe0 l'objet courant. En g\xe9n\xe9ral, on l'utilise au sein d'une m\xe9thode pour faire r\xe9f\xe9rence \xe0 l'objet qui a utilis\xe9 la m\xe9thode. Il s'utilise de cette fa\xe7on :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{}),'this["nomPropri\xe9t\xe9"]\nthis.nomPropri\xe9t\xe9\n')),Object(i.mdx)("p",null,"Soit une fonction qui valide un objet si sa propri\xe9t\xe9 ",Object(i.mdx)("inlineCode",{parentName:"p"},"value")," est comprise entre deux valeurs :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'function valide(obj, valMin, valMax){\n  if ((obj.value < valMin) || (obj.value > valMax))\n    console.log("Valeur incorrecte !");\n}\n')),Object(i.mdx)("p",null,"Il est possible d'appeler ",Object(i.mdx)("inlineCode",{parentName:"p"},"valide")," pour chaque gestionnaire d'\xe9v\xe9nement ",Object(i.mdx)("inlineCode",{parentName:"p"},"onChange")," des \xe9l\xe9ments du formulaire, et d'utiliser le mot-cl\xe9 ",Object(i.mdx)("inlineCode",{parentName:"p"},"this")," pour passer l'\xe9l\xe9ment m\xeame en argument :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-html"}),'<p>Entrez un nombre entre 18 et 99 :</p>\n<input type="text" nom="age" size=3 onChange="valide(this, 18, 99);">\n')),Object(i.mdx)("h4",{id:"op\xe9rateur-de-groupement"},"Op\xe9rateur de groupement"),Object(i.mdx)("p",null,"L'op\xe9rateur de groupement ",Object(i.mdx)("inlineCode",{parentName:"p"},"( )")," permet de contr\xf4ler la pr\xe9c\xe9dence de l'\xe9valuation dans les expressions. On peut ainsi forcer l'\xe9valuation d'une addition avant l'\xe9valuation d'une multiplication ou d'une division."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"var a = 1;\nvar b = 2;\nvar c = 3;\n\n// pr\xe9c\xe9dence par d\xe9faut\na + b * c;   // 7\n// ce qui correspond \xe0 :\na + (b * c); // 7\n\n// on peut utiliser l'op\xe9rateur\n// pour effectuer l'addition en premier\n(a + b) * c;   // 9\n\n// ce qui \xe9quivaut \xe0 :\na * c + b * c; // 9\n")),Object(i.mdx)("h3",{id:"expressions-vers-la-gauche"},"Expressions vers la gauche"),Object(i.mdx)("p",null,"Les valeurs \xe0 gauches de ces expressions sont la cible d'une affectation."),Object(i.mdx)("h4",{id:"new"},Object(i.mdx)("inlineCode",{parentName:"h4"},"new")),Object(i.mdx)("p",null,"L'",Object(i.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/L_op%C3%A9rateur_new"}),"op\xe9rateur ",Object(i.mdx)("inlineCode",{parentName:"a"},"new"))," permet de cr\xe9er une instance d'un objet d\xe9fini par l'utilisateur ou d'un objet dont le type est un des types d'objets natifs. Cet op\xe9rateur utilise la syntaxe suivante :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"var nomObjet = new typeObjet([param1, param2, ..., paramN]);\n")),Object(i.mdx)("h4",{id:"super"},Object(i.mdx)("inlineCode",{parentName:"h4"},"super")),Object(i.mdx)("p",null,"Le ",Object(i.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/super"}),"mot-cl\xe9 ",Object(i.mdx)("inlineCode",{parentName:"a"},"super"))," est utilis\xe9 afin d'appeler des fonctions disponibles sur un objet parent. Il peut notamment \xeatre utilis\xe9 avec les ",Object(i.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Classes"}),"classes")," pour appeler le constructeur parent."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"super([arguments]); // invoque le constructeur parent\nsuper.functionParent([arguments]);\n")),Object(i.mdx)("h4",{id:"op\xe9rateur-de-d\xe9composition"},"Op\xe9rateur de d\xe9composition"),Object(i.mdx)("p",null,"L'",Object(i.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Op%C3%A9rateur_de_d%C3%A9composition"}),"op\xe9rateur de d\xe9composition")," permet de d\xe9velopper une expression l\xe0 o\xf9 plusieurs argument (pour les appels de fonction) ou plusieurs \xe9l\xe9ments (pour les litt\xe9raux de tableaux) sont attendus."),Object(i.mdx)("p",null,"Par exemple, si on a tableau et qu'on souhaite cr\xe9er un nouveau tableau qui contient l'ancien, on peut soit utiliser une combinaison des m\xe9thodes ",Object(i.mdx)("inlineCode",{parentName:"p"},"push"),", ",Object(i.mdx)("inlineCode",{parentName:"p"},"splice"),", ",Object(i.mdx)("inlineCode",{parentName:"p"},"concat"),", soit utiliser la syntaxe de d\xe9composition qui s'av\xe8re plus concise :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"var parts = ['shoulders', 'knees'];\nvar lyrics = ['head', ...parts, 'and', 'toes'];\n")),Object(i.mdx)("p",null,"L'op\xe9rateur de d\xe9composition fonctionne de fa\xe7on semblable avec les appels de fonction :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"function f(x, y, z) { }\nvar args = [0, 1, 2];\nf(...args);\n")))}c.isMDXComponent=!0},214:function(e,t,a){"use strict";a.r(t),a.d(t,"MDXContext",(function(){return c})),a.d(t,"MDXProvider",(function(){return u})),a.d(t,"mdx",(function(){return j})),a.d(t,"useMDXComponents",(function(){return m})),a.d(t,"withMDXComponents",(function(){return s}));var r=a(0),n=a.n(r);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function d(){return(d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var r in a)Object.prototype.hasOwnProperty.call(a,r)&&(e[r]=a[r])}return e}).apply(this,arguments)}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var c=n.a.createContext({}),s=function(e){return function(t){var a=m(t.components);return n.a.createElement(e,d({},t,{components:a}))}},m=function(e){var t=n.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=m(e.components);return n.a.createElement(c.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},O=n.a.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),c=m(a),s=r,u=c["".concat(d,".").concat(s)]||c[s]||b[s]||i;return a?n.a.createElement(u,o(o({ref:t},l),{},{components:a})):n.a.createElement(u,o({ref:t},l))}));function j(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,d=new Array(i);d[0]=O;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:r,d[1]=l;for(var p=2;p<i;p++)d[p]=a[p];return n.a.createElement.apply(null,d)}return n.a.createElement.apply(null,a)}O.displayName="MDXCreateElement"}}]);
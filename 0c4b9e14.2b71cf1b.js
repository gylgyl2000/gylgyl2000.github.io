(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{214:function(e,n,t){"use strict";t.r(n),t.d(n,"MDXContext",(function(){return p})),t.d(n,"MDXProvider",(function(){return s})),t.d(n,"mdx",(function(){return O})),t.d(n,"useMDXComponents",(function(){return u})),t.d(n,"withMDXComponents",(function(){return m}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(){return(o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=r.a.createContext({}),m=function(e){return function(n){var t=u(n.components);return r.a.createElement(e,o({},n,{components:t}))}},u=function(e){var n=r.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},s=function(e){var n=u(e.components);return r.a.createElement(p.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},j=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,l=d(e,["components","mdxType","originalType","parentName"]),p=u(t),m=a,s=p["".concat(o,".").concat(m)]||p[m]||b[m]||i;return t?r.a.createElement(s,c(c({ref:n},l),{},{components:t})):r.a.createElement(s,c({ref:n},l))}));function O(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=j;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var d=2;d<i;d++)o[d]=t[d];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}j.displayName="MDXCreateElement"},73:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return l})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return p}));var a=t(3),r=t(7),i=(t(0),t(214)),o={id:"freeCodeCamp-Basic_JavaScript-fr",title:"JavaScript de base"},l={unversionedId:"freeCodeCamp/freeCodeCamp-Basic_JavaScript-fr",id:"freeCodeCamp/freeCodeCamp-Basic_JavaScript-fr",isDocsHomePage:!1,title:"JavaScript de base",description:"Introduction \xe0 JavaScript",source:"@site/docs/freeCodeCamp/freeCodeCamp-Basic_JavaScript-fr.md",slug:"/freeCodeCamp/freeCodeCamp-Basic_JavaScript-fr",permalink:"/docs/freeCodeCamp/freeCodeCamp-Basic_JavaScript-fr",editUrl:"https://github.com/gylgyl2000/laloutre.github.io/edit/main/docs/freeCodeCamp/freeCodeCamp-Basic_JavaScript-fr.md",version:"current",sidebar:"docs",previous:{title:"Projets de conception Web adaptative",permalink:"/docs/freeCodeCamp/freeCodeCamp-Responsive_Web_Design_Projects-fr"},next:{title:"ES6",permalink:"/docs/freeCodeCamp/freeCodeCamp-ES6-fr"}},c=[{value:"Introduction \xe0 JavaScript",id:"introduction-\xe0-javascript",children:[]},{value:"...",id:"",children:[]},{value:"4. Affectation de la valeur d&#39;une variable \xe0 une autre",id:"4-affectation-de-la-valeur-dune-variable-\xe0-une-autre",children:[]},{value:"...",id:"-1",children:[]},{value:"83. Acc\xe8s aux propri\xe9t\xe9s d&#39;objet avec des variables",id:"83-acc\xe8s-aux-propri\xe9t\xe9s-dobjet-avec-des-variables",children:[]},{value:"...",id:"-2",children:[]},{value:"88. Test d&#39;objets pour les propri\xe9t\xe9s",id:"88-test-dobjets-pour-les-propri\xe9t\xe9s",children:[]},{value:"89. Manipuler des objets complexes",id:"89-manipuler-des-objets-complexes",children:[]},{value:"90. Acc\xe8s aux objets imbriqu\xe9s",id:"90-acc\xe8s-aux-objets-imbriqu\xe9s",children:[]},{value:"91. Acc\xe8s aux tableaux imbriqu\xe9s",id:"91-acc\xe8s-aux-tableaux-imbriqu\xe9s",children:[]},{value:"92. Collection de disques",id:"92-collection-de-disques",children:[]},{value:"93. It\xe9rer avec les boucles JavaScript <code>while</code>",id:"93-it\xe9rer-avec-les-boucles-javascript-while",children:[]},{value:"94. It\xe9rer avec les boucles JavaScript <code>for</code>",id:"94-it\xe9rer-avec-les-boucles-javascript-for",children:[]},{value:"95. It\xe9rer des nombres impairs avec une boucle <code>for</code>",id:"95-it\xe9rer-des-nombres-impairs-avec-une-boucle-for",children:[]},{value:"96. Compter \xe0 rebours avec une boucle <code>for</code>",id:"96-compter-\xe0-rebours-avec-une-boucle-for",children:[]},{value:"97. It\xe9rer \xe0 travers un tableau avec une boucle For",id:"97-it\xe9rer-\xe0-travers-un-tableau-avec-une-boucle-for",children:[]},{value:"98. Imbrication de boucles <code>for</code>",id:"98-imbrication-de-boucles-for",children:[]},{value:"99. It\xe9rer avec les boucles JavaScript <code>do...while</code>",id:"99-it\xe9rer-avec-les-boucles-javascript-dowhile",children:[]},{value:"100. Remplacer les boucles \xe0 l&#39;aide de la r\xe9cursivit\xe9",id:"100-remplacer-les-boucles-\xe0-laide-de-la-r\xe9cursivit\xe9",children:[]},{value:"101. Recherche de profil",id:"101-recherche-de-profil",children:[]},{value:"102. G\xe9n\xe9rer des fractions al\xe9atoires avec JavaScript",id:"102-g\xe9n\xe9rer-des-fractions-al\xe9atoires-avec-javascript",children:[]},{value:"103. G\xe9n\xe9rer des nombres entiers al\xe9atoires avec JavaScript",id:"103-g\xe9n\xe9rer-des-nombres-entiers-al\xe9atoires-avec-javascript",children:[]},{value:"104. G\xe9n\xe9rer des nombres entiers al\xe9atoires dans une plage",id:"104-g\xe9n\xe9rer-des-nombres-entiers-al\xe9atoires-dans-une-plage",children:[]},{value:"105. Utilisez la fonction parseInt()",id:"105-utilisez-la-fonction-parseint",children:[]},{value:"106. Utiliser la fonction parseInt() avec une base",id:"106-utiliser-la-fonction-parseint-avec-une-base",children:[]},{value:"107. Utiliser l&#39;op\xe9rateur conditionnel (ternaire)",id:"107-utiliser-lop\xe9rateur-conditionnel-ternaire",children:[]},{value:"108. Utiliser plusieurs op\xe9rateurs conditionnels (ternaires)",id:"108-utiliser-plusieurs-op\xe9rateurs-conditionnels-ternaires",children:[]},{value:"109. Utilisez la r\xe9cursivit\xe9 pour cr\xe9er un compte \xe0 rebours",id:"109-utilisez-la-r\xe9cursivit\xe9-pour-cr\xe9er-un-compte-\xe0-rebours",children:[]},{value:"110. Utiliser la r\xe9cursivit\xe9 pour cr\xe9er une plage de nombres",id:"110-utiliser-la-r\xe9cursivit\xe9-pour-cr\xe9er-une-plage-de-nombres",children:[]}],d={rightToc:c};function p(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.mdx)("wrapper",Object(a.a)({},d,t,{components:n,mdxType:"MDXLayout"}),Object(i.mdx)("h2",{id:"introduction-\xe0-javascript"},"Introduction \xe0 JavaScript"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/"}),"Basic JavaScript | freeCodeCamp.org")),Object(i.mdx)("p",null,"JavaScript est un langage de programmation de haut niveau pris en charge par tous les navigateurs Web modernes. C'est \xe9galement l'une des  technologies de base du Web, avec le HTML et le CSS que vous avez  peut-\xeatre appris auparavant. Cette section couvrira les concepts de base de la programmation JavaScript, qui vont des variables et de  l'arithm\xe9tique aux objets et aux boucles."),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:""},"[...]"),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"4-affectation-de-la-valeur-dune-variable-\xe0-une-autre"},"4. Affectation de la valeur d'une variable \xe0 une autre"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/assigning-the-value-of-one-variable-to-another"}),"Learn Basic JavaScript: Assigning the Value of One Variable to Another | freeCodeCamp.org")),Object(i.mdx)("p",null,"Une fois qu'une valeur est affect\xe9e \xe0 une variable \xe0 l'aide de l'op\xe9rateur ",Object(i.mdx)("em",{parentName:"p"},"d'affectation"),", vous pouvez affecter la valeur de cette variable \xe0 une autre variable \xe0 l'aide de l'op\xe9rateur ",Object(i.mdx)("em",{parentName:"p"},"d'affectation"),"."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"var myVar;\nmyVar = 5;\nvar myNum;\nmyNum = maVar;\n")),Object(i.mdx)("p",null,"Ce qui pr\xe9c\xe8de d\xe9clare une variable ",Object(i.mdx)("inlineCode",{parentName:"p"},"myVar")," sans valeur, puis lui attribue la valeur ",Object(i.mdx)("inlineCode",{parentName:"p"},"5"),". Ensuite, une variable nomm\xe9e ",Object(i.mdx)("inlineCode",{parentName:"p"},"myNum")," est d\xe9clar\xe9e sans valeur. Ensuite, le contenu de ",Object(i.mdx)("inlineCode",{parentName:"p"},"myVar")," (qui vaut ",Object(i.mdx)("inlineCode",{parentName:"p"},"5"),") est affect\xe9 \xe0 la  variable ",Object(i.mdx)("inlineCode",{parentName:"p"},"myNum"),". D\xe9sormais, ",Object(i.mdx)("inlineCode",{parentName:"p"},"myNum")," a \xe9galement la valeur ",Object(i.mdx)("inlineCode",{parentName:"p"},"5"),"."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"Affectez le contenu de ",Object(i.mdx)("inlineCode",{parentName:"p"},"a")," \xe0 la variable ",Object(i.mdx)("inlineCode",{parentName:"p"},"b"),"."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"Vous ne devez pas modifier le code au-dessus du commentaire sp\xe9cifi\xe9.\n",Object(i.mdx)("inlineCode",{parentName:"p"},"b")," doit avoir une valeur de 7.\n",Object(i.mdx)("inlineCode",{parentName:"p"},"a")," doit \xeatre affect\xe9 \xe0 ",Object(i.mdx)("inlineCode",{parentName:"p"},"b")," avec ",Object(i.mdx)("inlineCode",{parentName:"p"},"="),".")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// Setup\nvar a;\na = 7;\nvar b;\n// Changer uniquement le code en dessous de cette ligne\nb = a;\nconsole.log(b); // 7\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"-1"},"[...]"),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"83-acc\xe8s-aux-propri\xe9t\xe9s-dobjet-avec-des-variables"},"83. Acc\xe8s aux propri\xe9t\xe9s d'objet avec des variables"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/accessing-object-properties-with-variables"}),"Learn Basic JavaScript: Accessing Object Properties with Variables | freeCodeCamp.org")),Object(i.mdx)("p",null,"Une autre utilisation de la notation entre crochets sur les objets  consiste \xe0 acc\xe9der \xe0 une propri\xe9t\xe9 qui est stock\xe9e en tant que valeur  d'une variable. Cela peut \xeatre tr\xe8s utile pour parcourir les propri\xe9t\xe9s  d'un objet ou pour acc\xe9der \xe0 une table de recherche.\nVoici un exemple d'utilisation d'une variable pour acc\xe9der \xe0 une propri\xe9t\xe9 :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'var dogs = {\n  Fido: "Mutt",  Hunter: "Doberman",  Snoopie: "Beagle"\n};\nvar myDog = "Hunter";\nvar myBreed = dogs[myDog];\nconsole.log(myBreed); // "Doberman"\n')),Object(i.mdx)("p",null,"Vous pouvez \xe9galement utiliser ce concept lorsque le nom de la propri\xe9t\xe9 est collect\xe9 dynamiquement pendant l'ex\xe9cution du programme, comme  suit :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'var someObj = {\n  propName: "John"\n};\nfunction propPrefix(str) {\n  var s = "prop";\n  return s + str;\n}\nvar someProp = propPrefix("Name"); // someProp now holds the value \'propName\'\nconsole.log(someObj[someProp]); // "John"\n')),Object(i.mdx)("p",null,"Notez que nous n'utilisons pas de guillemets autour du nom de la  variable lors de son utilisation pour acc\xe9der \xe0 la propri\xe9t\xe9, car nous  utilisons la ",Object(i.mdx)("em",{parentName:"p"},"valeur")," de la variable, pas le ",Object(i.mdx)("em",{parentName:"p"},"nom"),"."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"Utilisez la variable ",Object(i.mdx)("inlineCode",{parentName:"p"},"playerNumber")," pour rechercher le joueur ",Object(i.mdx)("inlineCode",{parentName:"p"},"16")," dans  ",Object(i.mdx)("inlineCode",{parentName:"p"},"testObj")," en utilisant la notation entre crochets. Attribuez ensuite ce nom \xe0 la variable ",Object(i.mdx)("inlineCode",{parentName:"p"},"player"),"."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},Object(i.mdx)("inlineCode",{parentName:"p"},"playerNumber")," doit \xeatre un nombre\nLa variable ",Object(i.mdx)("inlineCode",{parentName:"p"},"player")," doit \xeatre une cha\xeene\nLa valeur de ",Object(i.mdx)("inlineCode",{parentName:"p"},"player"),' doit \xeatre "Montana"\nVous devez utiliser la notation entre crochets pour acc\xe9der \xe0 ',Object(i.mdx)("inlineCode",{parentName:"p"},"testObj"),"\nVous ne devez pas attribuer la valeur ",Object(i.mdx)("inlineCode",{parentName:"p"},"Montana")," directement \xe0 la variable ",Object(i.mdx)("inlineCode",{parentName:"p"},"player"),".\nVous devriez utiliser la variable ",Object(i.mdx)("inlineCode",{parentName:"p"},"playerNumber")," dans votre notation entre crochets")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'// Setup\nvar testObj = {\n  12: "Namath",\n  16: "Montana",\n  19: "Unitas"\n};\n// Only change code below this line\nvar playerNumber;       // Change this line\nvar player = testObj;   // Change this line\n')),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"var playerNumber = 16;\nvar player = testObj[playerNumber];\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"-2"},"[...]"),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"88-test-dobjets-pour-les-propri\xe9t\xe9s"},"88. Test d'objets pour les propri\xe9t\xe9s"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/testing-objects-for-properties"}),"Learn Basic JavaScript: Testing Objects for Properties | freeCodeCamp.org")),Object(i.mdx)("p",null,"Parfois, il est utile de v\xe9rifier si la propri\xe9t\xe9 d'un objet donn\xe9  existe ou non. Nous pouvons utiliser la m\xe9thode des objets  ",Object(i.mdx)("inlineCode",{parentName:"p"},".hasOwnProperty(propname)")," pour d\xe9terminer si cet objet a le nom de  propri\xe9t\xe9 donn\xe9. ",Object(i.mdx)("inlineCode",{parentName:"p"},".hasOwnProperty()")," renvoie ",Object(i.mdx)("inlineCode",{parentName:"p"},"true")," ou ",Object(i.mdx)("inlineCode",{parentName:"p"},"false")," si la propri\xe9t\xe9 est trouv\xe9e ou non."),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"Exemple")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'var myObj = {\n  top: "hat",\n  bottom: "pants"\n};\nmyObj.hasOwnProperty("top");    // true\nmyObj.hasOwnProperty("middle"); // false\n')),Object(i.mdx)("p",null,"Modifiez la fonction ",Object(i.mdx)("inlineCode",{parentName:"p"},"checkObj")," pour tester si un objet pass\xe9 \xe0 la  fonction (",Object(i.mdx)("inlineCode",{parentName:"p"},"obj"),") contient une propri\xe9t\xe9 sp\xe9cifique (",Object(i.mdx)("inlineCode",{parentName:"p"},"checkProp"),"). Si la  propri\xe9t\xe9 est trouv\xe9e, renvoyez la valeur de cette propri\xe9t\xe9. Sinon,  renvoyez ",Object(i.mdx)("inlineCode",{parentName:"p"},'"Not Found"'),"."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},Object(i.mdx)("inlineCode",{parentName:"p"},'checkObj({gift: "pony", pet: "kitten", bed: "sleigh"}, "gift")')," devrait retourner ",Object(i.mdx)("inlineCode",{parentName:"p"},'"pony"'),".\n",Object(i.mdx)("inlineCode",{parentName:"p"},'checkObj({gift: "pony", pet: "kitten", bed: "sleigh"}, "pet")')," devrait retourner ",Object(i.mdx)("inlineCode",{parentName:"p"},'"kitten"'),".\n",Object(i.mdx)("inlineCode",{parentName:"p"},'checkObj({gift: "pony", pet: "kitten", bed: "sleigh"}, "house")')," devrait retourner ",Object(i.mdx)("inlineCode",{parentName:"p"},'"Not Found"'),".\n",Object(i.mdx)("inlineCode",{parentName:"p"},'checkObj({city: "Seattle"}, "city")')," devrait retourner ",Object(i.mdx)("inlineCode",{parentName:"p"},'"Seattle"'),".\n",Object(i.mdx)("inlineCode",{parentName:"p"},'checkObj({city: "Seattle"}, "district")')," devrait retourner ",Object(i.mdx)("inlineCode",{parentName:"p"},'"Not Found"'),".")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'function checkObj(obj, checkProp) {\n  // Changez uniquement le code en dessous de cette ligne\n  return "Change Me!";\n  // Changez uniquement le code au-dessus de cette ligne\n}\n')),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'function checkObj(obj, checkProp) {\n  if (obj.hasOwnProperty(checkProp)) {\n    return obj[checkProp];\n  } else {\n    return "Not Found";\n  };\n}\n')),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"89-manipuler-des-objets-complexes"},"89. Manipuler des objets complexes"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/manipulating-complex-objects"}),"Learn Basic JavaScript: Manipulating Complex Objects | freeCodeCamp.org")),Object(i.mdx)("p",null,"Parfois, vous souhaiterez  peut-\xeatre stocker des donn\xe9es dans une ",Object(i.mdx)("em",{parentName:"p"},"structure de donn\xe9es")," flexible. Un objet JavaScript est un moyen de g\xe9rer des donn\xe9es flexibles. Ils  permettent des combinaisons arbitraires ",Object(i.mdx)("em",{parentName:"p"},"de cha\xeenes, de nombres, de  bool\xe9ens, de tableaux, de fonctions et d'objets"),".\nVoici un exemple de structure de donn\xe9es complexe :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'var ourMusic = [\n  {\n    "artist": "Daft Punk",\n    "title": "Homework",\n    "release_year": 1997,\n    "formats": [ \n      "CD", \n      "Cassette", \n      "LP"\n    ],\n    "gold": true\n  }\n];\n')),Object(i.mdx)("p",null,"C'est un tableau qui contient un objet \xe0 l'int\xe9rieur. L'objet a divers  morceaux de ",Object(i.mdx)("em",{parentName:"p"},"m\xe9tadonn\xe9es")," sur un album. Il poss\xe8de \xe9galement un tableau ",Object(i.mdx)("inlineCode",{parentName:"p"},'"formats"')," imbriqu\xe9. Si vous souhaitez ajouter d'autres enregistrements  d'album, vous pouvez le faire en ajoutant des enregistrements au tableau de niveau sup\xe9rieur. Les objets contiennent des donn\xe9es dans une  propri\xe9t\xe9, qui a un format cl\xe9-valeur. Dans l'exemple ci-dessus,  ",Object(i.mdx)("inlineCode",{parentName:"p"},'"artist": "Daft Punk"')," est une propri\xe9t\xe9 qui a une cl\xe9 ",Object(i.mdx)("inlineCode",{parentName:"p"},'"artist"')," et une  valeur ",Object(i.mdx)("inlineCode",{parentName:"p"},'"Daft Punk"'),". La notation d'objet JavaScript (",Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"http://www.json.org/"}),"JavaScript Object Notation"),") ou ",Object(i.mdx)("inlineCode",{parentName:"p"},"JSON")," est un format d'\xe9change de donn\xe9es associ\xe9 utilis\xe9 pour stocker des donn\xe9es."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'{\n  "artist": "Daft Punk",\n  "title": "Homework",\n  "release_year": 1997,\n  "formats": [ \n    "CD",\n    "Cassette",\n    "LP"\n  ],\n  "gold": true\n}\n')),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"Remarque"),"\nVous devrez placer une virgule apr\xe8s chaque objet du tableau, sauf s'il s'agit du dernier objet du tableau."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"Ajoutez un nouvel album au tableau ",Object(i.mdx)("inlineCode",{parentName:"p"},"myMusic"),". Ajoutez des cha\xeenes ",Object(i.mdx)("inlineCode",{parentName:"p"},"artist")," et ",Object(i.mdx)("inlineCode",{parentName:"p"},"title"),", le num\xe9ro ",Object(i.mdx)("inlineCode",{parentName:"p"},"release_year")," et un tableau de cha\xeenes ",Object(i.mdx)("inlineCode",{parentName:"p"},"formats"),"."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},Object(i.mdx)("inlineCode",{parentName:"p"},"myMusic")," doit \xeatre un tableau\n",Object(i.mdx)("inlineCode",{parentName:"p"},"myMusic")," doit avoir au moins deux \xe9l\xe9ments\n",Object(i.mdx)("inlineCode",{parentName:"p"},"myMusic[1]")," doit \xeatre un objet\n",Object(i.mdx)("inlineCode",{parentName:"p"},"myMusic[1]")," doit avoir au moins 4 propri\xe9t\xe9s\n",Object(i.mdx)("inlineCode",{parentName:"p"},"myMusic[1]")," doit contenir une propri\xe9t\xe9 ",Object(i.mdx)("inlineCode",{parentName:"p"},"artist")," qui est une cha\xeene\n",Object(i.mdx)("inlineCode",{parentName:"p"},"myMusic[1]")," doit contenir une propri\xe9t\xe9 ",Object(i.mdx)("inlineCode",{parentName:"p"},"title")," qui est une cha\xeene\n",Object(i.mdx)("inlineCode",{parentName:"p"},"myMusic[1]")," doit contenir une propri\xe9t\xe9 ",Object(i.mdx)("inlineCode",{parentName:"p"},"release_year")," qui est un nombre\n",Object(i.mdx)("inlineCode",{parentName:"p"},"myMusic[1]")," doit contenir une propri\xe9t\xe9 ",Object(i.mdx)("inlineCode",{parentName:"p"},"formats")," qui est un tableau\n",Object(i.mdx)("inlineCode",{parentName:"p"},"formats")," doit \xeatre un tableau de cha\xeenes avec au moins deux \xe9l\xe9ments")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'var myMusic = [\n  {\n    "artist": "Billy Joel",\n    "title": "Piano Man",\n    "release_year": 1973,\n    "formats": [\n      "CD",\n      "8T",\n      "LP"\n    ],\n    "gold": true\n  },\n  // Add a record here\n  {\n    "artist": "David Bowie",\n    "title": "Aladdin Sane",\n    "release_year": 1973,\n    "formats": [\n      "CD",\n      "LP"\n    ],\n    "gold": true\n  }\n];\n')),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"90-acc\xe8s-aux-objets-imbriqu\xe9s"},"90. Acc\xe8s aux objets imbriqu\xe9s"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/accessing-nested-objects"}),"Learn Basic JavaScript: Accessing Nested Objects | freeCodeCamp.org")),Object(i.mdx)("p",null,"Les sous-propri\xe9t\xe9s des objets sont accessibles en encha\xeenant la notation par points ou crochets.\nVoici un objet imbriqu\xe9 :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'var ourStorage = {\n  "desk": {\n    "drawer": "stapler"\n  },\n  "cabinet": {\n    "top drawer": { \n      "folder1": "a file",\n      "folder2": "secrets"\n    },\n    "bottom drawer": "soda"\n  }\n};\nourStorage.cabinet["top drawer"].folder2;  // "secrets"\nourStorage.desk.drawer; // "stapler"\n\n')),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"Acc\xe9dez \xe0 l'objet ",Object(i.mdx)("inlineCode",{parentName:"p"},"myStorage")," et affectez le contenu de la propri\xe9t\xe9 de ",Object(i.mdx)("inlineCode",{parentName:"p"},"glove box")," (bo\xeete \xe0 gants) \xe0 la variable ",Object(i.mdx)("inlineCode",{parentName:"p"},"gloveBoxContents"),". Utilisez la notation par points pour toutes les propri\xe9t\xe9s si possible, sinon utilisez la  notation entre crochets."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},Object(i.mdx)("inlineCode",{parentName:"p"},"gloveBoxContents"),' doit \xeatre \xe9gal \xe0 "maps".\nVotre code doit utiliser la notation par points et crochets pour acc\xe9der \xe0 ',Object(i.mdx)("inlineCode",{parentName:"p"},"myStorage"),".")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'// Setup\nvar myStorage = {\n  "car": {\n    "inside": {\n      "glove box": "maps",\n      "passenger seat": "crumbs"\n     },\n    "outside": {\n      "trunk": "jack"\n    }\n  }\n};\n\n// var gloveBoxContents = undefined; // Change this line\nvar gloveBoxContents = myStorage.car.inside["glove box"];\n')),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"91-acc\xe8s-aux-tableaux-imbriqu\xe9s"},"91. Acc\xe8s aux tableaux imbriqu\xe9s"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/accessing-nested-arrays"}),"Learn Basic JavaScript: Accessing Nested Arrays | freeCodeCamp.org")),Object(i.mdx)("p",null,"Comme nous l'avons vu dans les exemples pr\xe9c\xe9dents, les objets peuvent  contenir \xe0 la fois des objets imbriqu\xe9s et des tableaux imbriqu\xe9s.  Semblable \xe0 l'acc\xe8s aux objets imbriqu\xe9s, la notation entre crochets de Array peut \xeatre cha\xeen\xe9e pour acc\xe9der aux tableaux imbriqu\xe9s.\nVoici un exemple d'acc\xe8s \xe0 un tableau imbriqu\xe9 :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'var ourPets = [\n  {\n    animalType: "cat",\n    names: [\n      "Meowzer",\n      "Fluffy",\n      "Kit-Cat"\n    ]\n  },\n  {\n    animalType: "dog",\n    names: [\n      "Spot",\n      "Bowser",\n      "Frankie"\n    ]\n  }\n];\nourPets[0].names[1]; // "Fluffy"\nourPets[1].names[0]; // "Spot"\n')),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"R\xe9cup\xe9rez le deuxi\xe8me arbre de la variable ",Object(i.mdx)("inlineCode",{parentName:"p"},"myPlants")," en utilisant la notation de point et de crochet d'objet."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},Object(i.mdx)("inlineCode",{parentName:"p"},"secondTree"),' doit \xeatre \xe9gal \xe0 "pine".\nVotre code doit utiliser la notation par points et crochets pour acc\xe9der \xe0 ',Object(i.mdx)("inlineCode",{parentName:"p"},"myPlants"),".")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'// Setup\nvar myPlants = [\n  {\n    type: "flowers",\n    list: [\n      "rose",\n      "tulip",\n      "dandelion"\n    ]\n  },\n  {\n    type: "trees",\n    list: [\n      "fir",\n      "pine",\n      "birch"\n    ]\n  }\n];\n\nvar secondTree = myPlants[1].list[1];\n')),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"92-collection-de-disques"},"92. Collection de disques"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/record-collection"}),"Learn Basic JavaScript: Record Collection | freeCodeCamp.org")),Object(i.mdx)("p",null,"Vous recevez un objet JSON repr\xe9sentant une partie de votre collection  d'albums musicaux. Chaque album a plusieurs propri\xe9t\xe9s et un num\xe9ro  d'identification unique comme cl\xe9. Tous les albums ne contiennent pas  d'informations compl\xe8tes.\nEcrivez une fonction qui prend  l'identifiant d'un album ",Object(i.mdx)("inlineCode",{parentName:"p"},"id")," (comme ",Object(i.mdx)("inlineCode",{parentName:"p"},"2548"),"), une propri\xe9t\xe9 ",Object(i.mdx)("inlineCode",{parentName:"p"},"prop")," ( ",Object(i.mdx)("inlineCode",{parentName:"p"},'"artist"')," or ",Object(i.mdx)("inlineCode",{parentName:"p"},'"tracks"'),") et une valeur ",Object(i.mdx)("inlineCode",{parentName:"p"},"value")," (comme ",Object(i.mdx)("inlineCode",{parentName:"p"},'"Addicted to Love"'),") pour  modifier les donn\xe9es de cette collection.\nSi ",Object(i.mdx)("inlineCode",{parentName:"p"},"prop")," n'est pas  ",Object(i.mdx)("inlineCode",{parentName:"p"},'"tracks"')," et que ",Object(i.mdx)("inlineCode",{parentName:"p"},"value")," n'est pas vide (",Object(i.mdx)("inlineCode",{parentName:"p"},'""'),"), mettez \xe0 jour ou  d\xe9finissez la ",Object(i.mdx)("inlineCode",{parentName:"p"},"value")," de la propri\xe9t\xe9 de cet album.\nVotre fonction doit toujours renvoyer l'objet de collection en entier."),Object(i.mdx)("p",null,"Il existe plusieurs r\xe8gles pour traiter les donn\xe9es incompl\xe8tes :\nSi ",Object(i.mdx)("inlineCode",{parentName:"p"},"prop")," est ",Object(i.mdx)("inlineCode",{parentName:"p"},'"tracks"')," mais que l'album n'a pas de propri\xe9t\xe9 ",Object(i.mdx)("inlineCode",{parentName:"p"},'"tracks"'),", cr\xe9ez un tableau vide avant d'ajouter la nouvelle valeur \xe0 la propri\xe9t\xe9  correspondante de l'album.\nSi ",Object(i.mdx)("inlineCode",{parentName:"p"},"prop")," est ",Object(i.mdx)("inlineCode",{parentName:"p"},'"tracks"')," et que la valeur n'est pas vide (",Object(i.mdx)("inlineCode",{parentName:"p"},'""'),"), poussez ",Object(i.mdx)("inlineCode",{parentName:"p"},"value")," \xe0 la fin du tableau des pistes ",Object(i.mdx)("inlineCode",{parentName:"p"},"tracks")," existantes de l'album.\nSi ",Object(i.mdx)("inlineCode",{parentName:"p"},"value")," est vide (",Object(i.mdx)("inlineCode",{parentName:"p"},'""'),"), supprimez la propri\xe9t\xe9 ",Object(i.mdx)("inlineCode",{parentName:"p"},"prop")," donn\xe9e de l'album."),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"Conseils"),"\nUtilisez la notation entre crochets (",Object(i.mdx)("inlineCode",{parentName:"p"},"bracket notation"),") lors de l'",Object(i.mdx)("u",null,Object(i.mdx)("strong",{parentName:"p"},"Acc\xe8s aux propri\xe9t\xe9s d'objet avec des variables (84)")),".\n",Object(i.mdx)("inlineCode",{parentName:"p"},"push")," est une m\xe9thode de tableau que vous pouvez consulter sur ",Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Array/push"}),"Mozilla Developer Network"),".\nVous pouvez vous r\xe9f\xe9rer \xe0 ",Object(i.mdx)("strong",{parentName:"p"},Object(i.mdx)("u",null,"Manipuler des objets complexes (90)"))," pr\xe9sentant la notation d'objets JavaScript (JSON) pour un rappel."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"Vous ne devez pas modifier l'initialisation de l'objet ",Object(i.mdx)("inlineCode",{parentName:"p"},"collection"),"\nApr\xe8s ",Object(i.mdx)("inlineCode",{parentName:"p"},'updateRecords(5439, "artist", "ABBA")'),", l'artiste doit \xeatre ",Object(i.mdx)("inlineCode",{parentName:"p"},'"ABBA"'),"\nApr\xe8s ",Object(i.mdx)("inlineCode",{parentName:"p"},'updateRecords(5439, "tracks", "Take a Chance on Me")'),", les morceaux  devraient avoir ",Object(i.mdx)("inlineCode",{parentName:"p"},'"Take a Chance on Me"')," comme dernier \xe9l\xe9ment.\nApr\xe8s ",Object(i.mdx)("inlineCode",{parentName:"p"},'updateRecords(2548, "artist", "")'),", ",Object(i.mdx)("inlineCode",{parentName:"p"},"artist")," ne doit pas \xeatre d\xe9fini\nApr\xe8s ",Object(i.mdx)("inlineCode",{parentName:"p"},'updateRecords(1245, "tracks", "Addicted to Love")'),", `",Object(i.mdx)("inlineCode",{parentName:"p"},"tracks")," devrait avoir ",Object(i.mdx)("inlineCode",{parentName:"p"},'"Addicted to Love"')," comme dernier \xe9l\xe9ment.\nApr\xe8s ",Object(i.mdx)("inlineCode",{parentName:"p"},'updateRecords(2468, "tracks", "Free")'),", ",Object(i.mdx)("inlineCode",{parentName:"p"},"tracks")," devrait avoir ",Object(i.mdx)("inlineCode",{parentName:"p"},'"1999"')," comme premier \xe9l\xe9ment.\nApr\xe8s ",Object(i.mdx)("inlineCode",{parentName:"p"},'updateRecords(2548, "tracks", "")'),", ",Object(i.mdx)("inlineCode",{parentName:"p"},"tracks")," ne doit pas \xeatre d\xe9fini\nApr\xe8s ",Object(i.mdx)("inlineCode",{parentName:"p"},'updateRecords(1245, "album", "Riptide")'),", ",Object(i.mdx)("inlineCode",{parentName:"p"},"album")," doit \xeatre ",Object(i.mdx)("inlineCode",{parentName:"p"},'"Riptide"'))),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'// Setup\nvar collection = {\n  2548: {\n    album: "Slippery When Wet",\n    artist: "Bon Jovi",\n    tracks: [\n      "Let It Rock",\n      "You Give Love a Bad Name"\n    ]\n  },\n  2468: {\n    album: "1999",\n    artist: "Prince",\n    tracks: [\n      "1999",\n      "Little Red Corvette"\n    ]\n  },\n  1245: {\n    artist: "Robert Palmer",\n    tracks: [ ]\n  },\n  5439: {\n    album: "ABBA Gold"\n  }\n};\n\n// Only change code below this line\nfunction updateRecords(id, prop, value) {\n    if (prop === "tracks" && value !=="") {\n        if (collection[id][prop]) {\n            collection[id][prop].push(value);\n        } else {\n            collection[id][prop] = [value];\n        }\n    } else if (value !== "") {\n        collection[id][prop] = value;\n    } else {\n        delete collection[id][prop];\n    }\n  return collection;\n}\n\nupdateRecords(5439, "artist", "ABBA");\n')),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"93-it\xe9rer-avec-les-boucles-javascript-while"},"93. It\xe9rer avec les boucles JavaScript ",Object(i.mdx)("inlineCode",{parentName:"h2"},"while")),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/iterate-with-javascript-while-loops"}),"Learn Basic JavaScript: Iterate with JavaScript While Loops | freeCodeCamp.org")),Object(i.mdx)("p",null,"Vous pouvez ex\xe9cuter le m\xeame code plusieurs fois en utilisant une boucle.\nLe premier type de boucle que nous allons apprendre est appel\xe9 une boucle ",Object(i.mdx)("inlineCode",{parentName:"p"},"while")," car elle s'ex\xe9cute \"tant que\" une condition sp\xe9cifi\xe9e est vraie et s'arr\xeate une fois que cette condition n'est plus vraie."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"var ourArray = [];\nvar i = 0;\nwhile(i < 5) {\n  ourArray.push(i);\n  i++;\n}\n")),Object(i.mdx)("p",null,"Dans l'exemple de code ci-dessus, la boucle ",Object(i.mdx)("inlineCode",{parentName:"p"},"while")," s'ex\xe9cutera 5 fois et ajoutera les nombres 0 \xe0 4 \xe0 ",Object(i.mdx)("inlineCode",{parentName:"p"},"ourArray"),".\nEssayons de faire fonctionner une boucle ",Object(i.mdx)("inlineCode",{parentName:"p"},"while")," en poussant des valeurs dans un tableau."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"Ajoutez les nombres 5 \xe0 0 (inclus) dans l'ordre d\xe9croissant \xe0 ",Object(i.mdx)("inlineCode",{parentName:"p"},"myArray")," en utilisant une boucle ",Object(i.mdx)("inlineCode",{parentName:"p"},"while"),"."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"Vous devriez utiliser une boucle ",Object(i.mdx)("inlineCode",{parentName:"p"},"while")," pour cela.\n",Object(i.mdx)("inlineCode",{parentName:"p"},"myArray")," doit \xeatre \xe9gal \xe0 ",Object(i.mdx)("inlineCode",{parentName:"p"},"[5,4,3,2,1,0]"),".")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// Setup\nvar myArray = [];\nvar i = 5;\nwhile (i >= 0) {\n  myArray.push(i);\n  i--;\n};\n// Only change code below this line\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"94-it\xe9rer-avec-les-boucles-javascript-for"},"94. It\xe9rer avec les boucles JavaScript ",Object(i.mdx)("inlineCode",{parentName:"h2"},"for")),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/iterate-with-javascript-for-loops"}),"Learn Basic JavaScript: Iterate with JavaScript For Loops | freeCodeCamp.org")),Object(i.mdx)("p",null,"Vous pouvez ex\xe9cuter le m\xeame code plusieurs fois en utilisant une boucle.\nLe type le plus courant de boucle JavaScript est appel\xe9 boucle ",Object(i.mdx)("inlineCode",{parentName:"p"},"for"),' car il s\'ex\xe9cute "pour" un certain nombre de fois.\nLes boucles ',Object(i.mdx)("inlineCode",{parentName:"p"},"for")," sont d\xe9clar\xe9es avec trois expressions facultatives s\xe9par\xe9es par des points-virgules :"),Object(i.mdx)("p",null,Object(i.mdx)("inlineCode",{parentName:"p"},"for ([initialisation]; [condition]; [expression-finale])")),Object(i.mdx)("p",null,"L'instruction ",Object(i.mdx)("inlineCode",{parentName:"p"},"initialisation")," est ex\xe9cut\xe9e une seule fois avant le d\xe9but de la boucle. Il est g\xe9n\xe9ralement utilis\xe9 pour d\xe9finir et configurer votre  variable de boucle."),Object(i.mdx)("p",null,"L'instruction ",Object(i.mdx)("inlineCode",{parentName:"p"},"condition")," est \xe9valu\xe9e au  d\xe9but de chaque it\xe9ration de boucle et continuera tant qu'elle sera \xe9valu\xe9e \xe0 ",Object(i.mdx)("inlineCode",{parentName:"p"},"true"),". Lorsque ",Object(i.mdx)("inlineCode",{parentName:"p"},"condition")," est ",Object(i.mdx)("inlineCode",{parentName:"p"},"false")," au d\xe9but de l'it\xe9ration, la boucle s'arr\xeatera de s'ex\xe9cuter. Cela signifie que si ",Object(i.mdx)("inlineCode",{parentName:"p"},"condition"),"  commence par ",Object(i.mdx)("inlineCode",{parentName:"p"},"false"),", votre boucle ne s'ex\xe9cutera jamais."),Object(i.mdx)("p",null,Object(i.mdx)("inlineCode",{parentName:"p"},"expression-finale")," est ex\xe9cut\xe9e \xe0 la fin de chaque it\xe9ration de boucle, avant le  prochain contr\xf4le de ",Object(i.mdx)("inlineCode",{parentName:"p"},"condition")," et est g\xe9n\xe9ralement utilis\xe9e pour  incr\xe9menter ou d\xe9cr\xe9menter votre compteur de boucle."),Object(i.mdx)("p",null,"Dans l'exemple suivant, nous initialisons avec ",Object(i.mdx)("inlineCode",{parentName:"p"},"i = 0")," et it\xe9rons tant que notre condition ",Object(i.mdx)("inlineCode",{parentName:"p"},"i < 5")," est vraie. Nous incr\xe9menterons ",Object(i.mdx)("inlineCode",{parentName:"p"},"i")," de ",Object(i.mdx)("inlineCode",{parentName:"p"},"1")," \xe0 chaque it\xe9ration de boucle avec ",Object(i.mdx)("inlineCode",{parentName:"p"},"i++")," comme ",Object(i.mdx)("inlineCode",{parentName:"p"},"expression-finale"),"."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"var ourArray = [];\nfor (var i = 0; i < 5; i++) {\n  ourArray.push(i);\n}\n")),Object(i.mdx)("p",null,Object(i.mdx)("inlineCode",{parentName:"p"},"ourArray")," contiendra maintenant ",Object(i.mdx)("inlineCode",{parentName:"p"},"[0,1,2,3,4]"),"."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"Utilisez une boucle ",Object(i.mdx)("inlineCode",{parentName:"p"},"for")," pour pousser les valeurs 1 \xe0 5 dans ",Object(i.mdx)("inlineCode",{parentName:"p"},"myArray"),"."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// Setup\nvar myArray = [];\nvar myArray = [];\nfor (var i = 1; i < 6; i++) {\n  myArray.push(i);\n}\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"95-it\xe9rer-des-nombres-impairs-avec-une-boucle-for"},"95. It\xe9rer des nombres impairs avec une boucle ",Object(i.mdx)("inlineCode",{parentName:"h2"},"for")),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/iterate-odd-numbers-with-a-for-loop"}),"Learn Basic JavaScript: Iterate Odd Numbers With a For Loop | freeCodeCamp.org")),Object(i.mdx)("p",null,"Les boucles ",Object(i.mdx)("inlineCode",{parentName:"p"},"for")," n'ont pas besoin d'it\xe9rer une \xe0 la fois. En changeant  notre ",Object(i.mdx)("inlineCode",{parentName:"p"},"expression-finale"),", nous pouvons compter par nombres pairs.\nNous allons commencer \xe0 ",Object(i.mdx)("inlineCode",{parentName:"p"},"i = 0")," et boucler tant que ",Object(i.mdx)("inlineCode",{parentName:"p"},"i < 10"),". Nous incr\xe9menterons ",Object(i.mdx)("inlineCode",{parentName:"p"},"i")," de 2 \xe0 chaque boucle avec ",Object(i.mdx)("inlineCode",{parentName:"p"},"i += 2"),"."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"var ourArray = [];\nfor (var i = 0; i < 10; i += 2) {\n  ourArray.push(i);\n}\n")),Object(i.mdx)("p",null,Object(i.mdx)("inlineCode",{parentName:"p"},"ourArray")," contiendra maintenant ",Object(i.mdx)("inlineCode",{parentName:"p"},"[0,2,4,6,8]"),". Modifions notre ",Object(i.mdx)("inlineCode",{parentName:"p"},"initialisation")," pour pouvoir compter par nombres impairs."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"Poussez les nombres impairs de 1 \xe0 9 vers ",Object(i.mdx)("inlineCode",{parentName:"p"},"myArray")," en utilisant une boucle ",Object(i.mdx)("inlineCode",{parentName:"p"},"for"),"."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"Vous devriez utiliser une boucle ",Object(i.mdx)("inlineCode",{parentName:"p"},"for")," pour cela.\n",Object(i.mdx)("inlineCode",{parentName:"p"},"myArray")," doit \xeatre \xe9gal \xe0 ",Object(i.mdx)("inlineCode",{parentName:"p"},"[1,3,5,7,9]"),".")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// Setup\nvar myArray = [];\nfor (var i = 1; i < 10; i += 2) {\n  myArray.push(i);\n}\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"96-compter-\xe0-rebours-avec-une-boucle-for"},"96. Compter \xe0 rebours avec une boucle ",Object(i.mdx)("inlineCode",{parentName:"h2"},"for")),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/count-backwards-with-a-for-loop"}),"Learn Basic JavaScript: Count Backwards With a For Loop | freeCodeCamp.org")),Object(i.mdx)("p",null,"Une boucle ",Object(i.mdx)("inlineCode",{parentName:"p"},"for")," peut \xe9galement compter \xe0 rebours, tant que nous pouvons d\xe9finir les bonnes conditions.\nAfin de compter \xe0 rebours par deux, nous devons changer notre ",Object(i.mdx)("inlineCode",{parentName:"p"},"initialisation"),", notre ",Object(i.mdx)("inlineCode",{parentName:"p"},"condition")," et notre ",Object(i.mdx)("inlineCode",{parentName:"p"},"expression-finale"),".\nNous allons commencer \xe0 ",Object(i.mdx)("inlineCode",{parentName:"p"},"i = 10")," et boucler tant que ",Object(i.mdx)("inlineCode",{parentName:"p"},"i > 0"),". Nous d\xe9cr\xe9menterons ",Object(i.mdx)("inlineCode",{parentName:"p"},"i")," de 2 chaque boucle avec ",Object(i.mdx)("inlineCode",{parentName:"p"},"i -= 2"),"."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"var ourArray = [];\nfor (var i = 10; i > 0; i -= 2) {\n  ourArray.push(i);\n}\n")),Object(i.mdx)("p",null,Object(i.mdx)("inlineCode",{parentName:"p"},"ourArray")," contiendra maintenant ",Object(i.mdx)("inlineCode",{parentName:"p"},"[10,8,6,4,2]"),". Modifions notre ",Object(i.mdx)("inlineCode",{parentName:"p"},"initialisation")," et notre ",Object(i.mdx)("inlineCode",{parentName:"p"},"expression-finale")," afin que nous puissions  compter en arri\xe8re par deux par des nombres impairs."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"Poussez les nombres impairs de 9 \xe0 1 vers ",Object(i.mdx)("inlineCode",{parentName:"p"},"myArray")," en utilisant une boucle ",Object(i.mdx)("inlineCode",{parentName:"p"},"for"),"."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"Vous devriez utiliser une boucle ",Object(i.mdx)("inlineCode",{parentName:"p"},"for")," pour cela.\nVous devriez utiliser la m\xe9thode de tableau ",Object(i.mdx)("inlineCode",{parentName:"p"},"push"),".\n",Object(i.mdx)("inlineCode",{parentName:"p"},"myArray")," doit \xeatre \xe9gal \xe0 ",Object(i.mdx)("inlineCode",{parentName:"p"},"[9,7,5,3,1]"),".")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// Setup\nvar myArray = [];\nfor (var i = 9; i > 0; i -= 2) {\n  myArray.push(i);\n}\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"97-it\xe9rer-\xe0-travers-un-tableau-avec-une-boucle-for"},"97. It\xe9rer \xe0 travers un tableau avec une boucle For"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/iterate-through-an-array-with-a-for-loop"}),"Learn Basic JavaScript: Iterate Through an Array with a For Loop | freeCodeCamp.org")),Object(i.mdx)("p",null,"Une t\xe2che courante en JavaScript consiste \xe0 parcourir le contenu d'un  tableau. Une fa\xe7on de faire est d'utiliser une boucle ",Object(i.mdx)("inlineCode",{parentName:"p"},"for"),". Ce code  affichera chaque \xe9l\xe9ment du tableau arr vers la console :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"var arr = [10, 9, 8, 7, 6];\nfor (var i = 0; i < arr.length; i++) {\n   console.log(arr[i]);\n}\n")),Object(i.mdx)("p",null,"Rappelez-vous que les tableaux ont une indexation de base z\xe9ro, ce qui  signifie que le dernier index du tableau est ",Object(i.mdx)("inlineCode",{parentName:"p"},"length - 1"),". Notre condition pour cette boucle est ",Object(i.mdx)("inlineCode",{parentName:"p"},"i < arr.length"),", qui arr\xeate la boucle lorsque ",Object(i.mdx)("inlineCode",{parentName:"p"},"i")," est  \xe9gal \xe0 ",Object(i.mdx)("inlineCode",{parentName:"p"},"length"),". Dans ce cas, la derni\xe8re it\xe9ration est ",Object(i.mdx)("inlineCode",{parentName:"p"},"i === 4")," c'est-\xe0-dire quand ",Object(i.mdx)("inlineCode",{parentName:"p"},"i")," devient \xe9gal \xe0 ",Object(i.mdx)("inlineCode",{parentName:"p"},"arr.length")," et envoie ",Object(i.mdx)("inlineCode",{parentName:"p"},"6")," \xe0 la console."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"D\xe9clarez et initialisez une variable ",Object(i.mdx)("inlineCode",{parentName:"p"},"total")," \xe0 ",Object(i.mdx)("inlineCode",{parentName:"p"},"0"),". Utilisez une boucle ",Object(i.mdx)("inlineCode",{parentName:"p"},"for")," pour  ajouter la valeur de chaque \xe9l\xe9ment du tableau ",Object(i.mdx)("inlineCode",{parentName:"p"},"myArr")," \xe0 ",Object(i.mdx)("inlineCode",{parentName:"p"},"total"),"."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},Object(i.mdx)("inlineCode",{parentName:"p"},"total")," doit \xeatre d\xe9clar\xe9 et initialis\xe9 \xe0 0.\n",Object(i.mdx)("inlineCode",{parentName:"p"},"total")," doit \xeatre \xe9gal \xe0 20.\nVous devez utiliser une boucle ",Object(i.mdx)("inlineCode",{parentName:"p"},"for")," pour parcourir ",Object(i.mdx)("inlineCode",{parentName:"p"},"myArr"),".\nVous ne devez pas essayer d'attribuer directement la valeur 20 \xe0 ",Object(i.mdx)("inlineCode",{parentName:"p"},"total"),".")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// Setup\nvar myArr = [ 2, 3, 4, 5, 6];\nvar total = 0;\nfor (var i = 0; i < myArr.length; i++) {\n   total = total + myArr[i]\n}\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"98-imbrication-de-boucles-for"},"98. Imbrication de boucles ",Object(i.mdx)("inlineCode",{parentName:"h2"},"for")),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/nesting-for-loops"}),"Learn Basic JavaScript: Nesting For Loops | freeCodeCamp.org")),Object(i.mdx)("p",null,"Si vous avez un tableau multidimensionnel, vous pouvez utiliser la m\xeame  logique que le point de passage pr\xe9c\xe9dent pour parcourir \xe0 la fois le tableau et tous les sous-tableaux. Voici un exemple :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"var arr = [\n  [1,2], [3,4], [5,6]\n];\nfor (var i=0; i < arr.length; i++) {\n  for (var j=0; j < arr[i].length; j++) {\n    console.log(arr[i][j]);\n  }\n}\n")),Object(i.mdx)("p",null,"Cela sort chaque sous-\xe9l\xe9ment dans ",Object(i.mdx)("inlineCode",{parentName:"p"},"arr")," un \xe0 la fois. Notez que pour la  boucle interne, nous v\xe9rifions la longueur (",Object(i.mdx)("inlineCode",{parentName:"p"},"length"),") de ",Object(i.mdx)("inlineCode",{parentName:"p"},"arr[i]"),", puisque ",Object(i.mdx)("inlineCode",{parentName:"p"},"arr[i]"),"  est lui-m\xeame un tableau."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"Modifiez la fonction ",Object(i.mdx)("inlineCode",{parentName:"p"},"multiplyAll")," pour qu'elle retourne le produit de tous les nombres dans les sous-tableaux de ",Object(i.mdx)("inlineCode",{parentName:"p"},"arr"),"."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},Object(i.mdx)("inlineCode",{parentName:"p"},"multiplyAll([[1],[2],[3]])")," doit renvoyer ",Object(i.mdx)("inlineCode",{parentName:"p"},"6"),"\n",Object(i.mdx)("inlineCode",{parentName:"p"},"multiplyAll([[1,2],[3,4],[5,6,7]])")," doit renvoyer ",Object(i.mdx)("inlineCode",{parentName:"p"},"5040"),"\n",Object(i.mdx)("inlineCode",{parentName:"p"},"multiplyAll([[5,1],[0.2, 4, 0.5], [3, 9]])")," doit renvoyer ",Object(i.mdx)("inlineCode",{parentName:"p"},"54"))),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function multiplyAll(arr) {\n  var product = 1;\n  for (var i=0; i < arr.length; i++) {\n    for (var j=0; j < arr[i].length; j++) {\n      product = product * arr[i][j];\n    }\n  }\n  return product;\n}\n\nmultiplyAll([[1,2],[3,4],[5,6,7]]);\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"99-it\xe9rer-avec-les-boucles-javascript-dowhile"},"99. It\xe9rer avec les boucles JavaScript ",Object(i.mdx)("inlineCode",{parentName:"h2"},"do...while")),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/iterate-with-javascript-do---while-loops"}),"Learn Basic JavaScript: Iterate with JavaScript Do...While Loops | freeCodeCamp.org")),Object(i.mdx)("p",null,"Le prochain type de boucle que vous apprendrez est appel\xe9 une boucle ",Object(i.mdx)("inlineCode",{parentName:"p"},"do...while"),". Elle est appel\xe9e une boucle ",Object(i.mdx)("inlineCode",{parentName:"p"},"do...while")," car elle effectuera  d'abord une passe du code \xe0 l'int\xe9rieur de la boucle, quoi qu'il arrive, puis continuera \xe0 ex\xe9cuter la boucle pendant (",Object(i.mdx)("inlineCode",{parentName:"p"},"while"),") que la condition sp\xe9cifi\xe9e est \xe9valu\xe9e \xe0 ",Object(i.mdx)("inlineCode",{parentName:"p"},"true"),"."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"var ourArray = [];\nvar i = 0;\ndo {\n  ourArray.push(i);\n  i++;\n} while (i < 5);\n")),Object(i.mdx)("p",null,"L'exemple ci-dessus se comporte de la m\xeame mani\xe8re que les autres types  de boucles, et le tableau r\xe9sultant ressemblera \xe0 ",Object(i.mdx)("inlineCode",{parentName:"p"},"[0, 1, 2, 3, 4]"),".  Cependant, ce qui rend le ",Object(i.mdx)("inlineCode",{parentName:"p"},"do...while")," diff\xe9rent des autres  boucles, c'est comment il se comporte lorsque la condition \xe9choue au  premier contr\xf4le. Voyons cela en action : Voici une boucle ",Object(i.mdx)("inlineCode",{parentName:"p"},"while")," r\xe9guli\xe8re qui ex\xe9cutera le code dans la boucle tant que ",Object(i.mdx)("inlineCode",{parentName:"p"},"i < 5")," :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"var ourArray = []; \nvar i = 5;\nwhile (i < 5) {\n  ourArray.push(i);\n  i++;\n}\n")),Object(i.mdx)("p",null,"Dans cet exemple, nous initialisons la valeur de ",Object(i.mdx)("inlineCode",{parentName:"p"},"ourArray")," \xe0 un tableau  vide et la valeur de ",Object(i.mdx)("inlineCode",{parentName:"p"},"i")," \xe0 5. Lorsque nous ex\xe9cutons la boucle ",Object(i.mdx)("inlineCode",{parentName:"p"},"while"),", la  condition est \xe9valu\xe9e \xe0 ",Object(i.mdx)("inlineCode",{parentName:"p"},"false")," car ",Object(i.mdx)("inlineCode",{parentName:"p"},"i")," n'est pas inf\xe9rieur \xe0 5, nous n'ex\xe9cutons donc pas le code \xe0 l'int\xe9rieur de la boucle. Le r\xe9sultat est  que ",Object(i.mdx)("inlineCode",{parentName:"p"},"ourArray")," se retrouvera sans aucune valeur ajout\xe9e, et il ressemblera toujours \xe0 ",Object(i.mdx)("inlineCode",{parentName:"p"},"[]")," lorsque tout le code de l'exemple ci-dessus sera termin\xe9. Maintenant, jetez un \u0153il \xe0 une boucle ",Object(i.mdx)("inlineCode",{parentName:"p"},"do...while")," :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"var ourArray = []; \nvar i = 5;\ndo {\n  ourArray.push(i);\n  i++;\n} while (i < 5);\n")),Object(i.mdx)("p",null,"Dans ce cas, nous initialisons la valeur de ",Object(i.mdx)("inlineCode",{parentName:"p"},"i")," \xe0 5, comme nous l'avons  fait avec la boucle ",Object(i.mdx)("inlineCode",{parentName:"p"},"while"),". Lorsque nous arrivons \xe0 la ligne suivante, il n'y a pas de condition \xe0 \xe9valuer, nous allons donc au code \xe0  l'int\xe9rieur des accolades et l'ex\xe9cutons. Nous allons ajouter un seul  \xe9l\xe9ment au tableau, puis incr\xe9menter ",Object(i.mdx)("inlineCode",{parentName:"p"},"i")," avant d'arriver \xe0 la v\xe9rification de la condition. Lorsque nous \xe9valuons enfin la condition ",Object(i.mdx)("inlineCode",{parentName:"p"},"i < 5")," sur la  derni\xe8re ligne, nous voyons que ",Object(i.mdx)("inlineCode",{parentName:"p"},"i")," vaut maintenant 6, ce qui \xe9choue \xe0 la  v\xe9rification conditionnelle, nous quittons donc la boucle et nous avons  termin\xe9. \xc0 la fin de l'exemple ci-dessus, la valeur de ",Object(i.mdx)("inlineCode",{parentName:"p"},"ourArray")," est ",Object(i.mdx)("inlineCode",{parentName:"p"},"[5]"),". Essentiellement, une boucle ",Object(i.mdx)("inlineCode",{parentName:"p"},"do...while")," garantit que le code \xe0  l'int\xe9rieur de la boucle s'ex\xe9cutera au moins une fois. Essayons de  faire fonctionner une boucle ",Object(i.mdx)("inlineCode",{parentName:"p"},"do...while")," en poussant des valeurs dans  un tableau."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"Remplacez la boucle ",Object(i.mdx)("inlineCode",{parentName:"p"},"while")," du code par une boucle ",Object(i.mdx)("inlineCode",{parentName:"p"},"do...while")," afin que la boucle ne pousse que le nombre ",Object(i.mdx)("inlineCode",{parentName:"p"},"10")," vers ",Object(i.mdx)("inlineCode",{parentName:"p"},"myArray"),", et ",Object(i.mdx)("inlineCode",{parentName:"p"},"i")," sera \xe9gal \xe0 ",Object(i.mdx)("inlineCode",{parentName:"p"},"11")," lorsque votre code sera termin\xe9."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"Vous devriez utiliser une boucle ",Object(i.mdx)("inlineCode",{parentName:"p"},"do...while")," pour cet exercice.\n",Object(i.mdx)("inlineCode",{parentName:"p"},"myArray")," doit \xeatre \xe9gal \xe0 ",Object(i.mdx)("inlineCode",{parentName:"p"},"[10]"),".\n",Object(i.mdx)("inlineCode",{parentName:"p"},"i")," devrais \xe9galer ",Object(i.mdx)("inlineCode",{parentName:"p"},"11"))),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// Setup\nvar myArray = [];\nvar i = 10;\n\n// Only change code below this line\nwhile (i < 5) {\n  myArray.push(i);\n  i++;\n}\n")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"var myArray = [];\nvar i = 10;\n\ndo {\n  myArray.push(i);\n  i++;\n} while (i < 5);\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"100-remplacer-les-boucles-\xe0-laide-de-la-r\xe9cursivit\xe9"},"100. Remplacer les boucles \xe0 l'aide de la r\xe9cursivit\xe9"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/replace-loops-using-recursion"}),"Learn Basic JavaScript: Replace Loops using Recursion | freeCodeCamp.org")),Object(i.mdx)("p",null,"La r\xe9cursivit\xe9 est le concept selon lequel une fonction peut \xeatre  exprim\xe9e en termes d'elle-m\xeame. Pour vous aider \xe0 comprendre cela,  commencez par penser \xe0 la t\xe2che suivante : multipliez les ",Object(i.mdx)("inlineCode",{parentName:"p"},"n")," premiers  \xe9l\xe9ments d'un tableau pour cr\xe9er le produit de ces \xe9l\xe9ments. En  utilisant une boucle ",Object(i.mdx)("inlineCode",{parentName:"p"},"for"),", vous pouvez faire ceci :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function multiply(arr, n) {\n   var product = 1;\n  for (var i = 0; i < n; i++) {\n      product *= arr[i];\n  }\n  return product;\n}\n")),Object(i.mdx)("p",null,"Cependant, notez que ",Object(i.mdx)("inlineCode",{parentName:"p"},"multiply(arr, n) == multiply(arr, n - 1) * arr[n - 1]"),". Cela signifie que vous pouvez r\xe9\xe9crire ",Object(i.mdx)("inlineCode",{parentName:"p"},"multiply")," en lui-m\xeame et ne jamais avoir besoin d'utiliser une boucle."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function multiply(arr, n) {\n  if (n <= 0) {\n    return 1;\n  } else {\n    return multiply(arr, n - 1) * arr[n - 1];\n  }\n}\n")),Object(i.mdx)("p",null,"La version r\xe9cursive de ",Object(i.mdx)("inlineCode",{parentName:"p"},"multiply")," se d\xe9compose comme ceci. Dans le cas de base, o\xf9 ",Object(i.mdx)("inlineCode",{parentName:"p"},"n <= 0"),", il renvoie ",Object(i.mdx)("inlineCode",{parentName:"p"},"1"),". Pour des valeurs plus grandes de ",Object(i.mdx)("inlineCode",{parentName:"p"},"n"),", il  s'appelle lui-m\xeame, mais avec ",Object(i.mdx)("inlineCode",{parentName:"p"},"n - 1"),". Cet appel de fonction est \xe9valu\xe9 de la m\xeame mani\xe8re, en appelant \xe0 nouveau multiplier jusqu'\xe0 ",Object(i.mdx)("inlineCode",{parentName:"p"},"n <= 0"),". \xc0 ce point, toutes les fonctions peuvent retourner et ",Object(i.mdx)("inlineCode",{parentName:"p"},"multiply")," d'origine renvoie la r\xe9ponse."),Object(i.mdx)("p",null,"Remarque : les fonctions r\xe9cursives  doivent avoir un cas de base lorsqu'elles retournent sans appeler \xe0  nouveau la fonction (dans cet exemple, lorsque ",Object(i.mdx)("inlineCode",{parentName:"p"},"n <= 0"),"), sinon elles ne  peuvent jamais terminer l'ex\xe9cution."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"\xc9crivez une fonction r\xe9cursive, ",Object(i.mdx)("inlineCode",{parentName:"p"},"sum(arr, n)"),", qui renvoie la somme des ",Object(i.mdx)("inlineCode",{parentName:"p"},"n")," premiers \xe9l\xe9ments d'un tableau ",Object(i.mdx)("inlineCode",{parentName:"p"},"arr"),"."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},Object(i.mdx)("inlineCode",{parentName:"p"},"sum([1], 0)")," doit \xeatre \xe9gal \xe0 0.\n",Object(i.mdx)("inlineCode",{parentName:"p"},"sum([2, 3, 4], 1)")," doit \xeatre \xe9gal \xe0 2.\n",Object(i.mdx)("inlineCode",{parentName:"p"},"sum([2, 3, 4, 5], 3)")," doit \xeatre \xe9gal \xe0 9.\nVotre code ne doit reposer sur aucun type de boucles (",Object(i.mdx)("inlineCode",{parentName:"p"},"for")," ou ",Object(i.mdx)("inlineCode",{parentName:"p"},"while")," ou des  fonctions d'ordre sup\xe9rieur telles que ",Object(i.mdx)("inlineCode",{parentName:"p"},"forEach"),", ",Object(i.mdx)("inlineCode",{parentName:"p"},"map"),", ",Object(i.mdx)("inlineCode",{parentName:"p"},"filter")," ou ",Object(i.mdx)("inlineCode",{parentName:"p"},"reduce"),").\nVous devez utiliser la r\xe9cursivit\xe9 pour r\xe9soudre ce probl\xe8me.")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function sum(arr, n) {\n  // Only change code below this line\n    if (n <= 0) {\n      return 0;\n    } else {\n      return sum(arr, n - 1) + arr[n - 1];\n    }\n  // Only change code above this line\n}\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"101-recherche-de-profil"},"101. Recherche de profil"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/profile-lookup"}),"Learn Basic JavaScript: Profile Lookup | freeCodeCamp.org")),Object(i.mdx)("p",null,"Nous avons un tableau d'objets repr\xe9sentant diff\xe9rentes personnes dans nos listes de contacts.\nUne fonction ",Object(i.mdx)("inlineCode",{parentName:"p"},"lookUpProfile")," qui prend ",Object(i.mdx)("inlineCode",{parentName:"p"},"name")," et une propri\xe9t\xe9 (",Object(i.mdx)("inlineCode",{parentName:"p"},"prop"),") comme arguments a \xe9t\xe9 pr\xe9-\xe9crite pour vous.\nLa fonction doit v\xe9rifier si ",Object(i.mdx)("inlineCode",{parentName:"p"},"name")," est le ",Object(i.mdx)("inlineCode",{parentName:"p"},"firstName")," d'un contact r\xe9el et si la propri\xe9t\xe9 donn\xe9e (",Object(i.mdx)("inlineCode",{parentName:"p"},"prop"),') est une propri\xe9t\xe9 de ce contact.\nSi les deux sont vrais, renvoyez la valeur ("value") de cette propri\xe9t\xe9.\nSi le nom (',Object(i.mdx)("inlineCode",{parentName:"p"},"name"),") ne correspond \xe0 aucun contact, renvoyez ",Object(i.mdx)("inlineCode",{parentName:"p"},'"No such contact"'),".\nSi ",Object(i.mdx)("inlineCode",{parentName:"p"},"prop")," ne correspond \xe0 aucune propri\xe9t\xe9 valide d'un contact trouv\xe9 pour correspondre \xe0 ",Object(i.mdx)("inlineCode",{parentName:"p"},"name"),", renvoyez ",Object(i.mdx)("inlineCode",{parentName:"p"},'"No such property"'),"."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},Object(i.mdx)("inlineCode",{parentName:"p"},'"Kristian", "lastName"')," doit renvoyer ",Object(i.mdx)("inlineCode",{parentName:"p"},'"Vos"'),"\n",Object(i.mdx)("inlineCode",{parentName:"p"},'"Sherlock", "likes"')," devraient renvoyer ",Object(i.mdx)("inlineCode",{parentName:"p"},'["Intriguing Cases", "Violin"]'),"\n",Object(i.mdx)("inlineCode",{parentName:"p"},'"Harry","likes"')," devraient renvoyer un tableau\n",Object(i.mdx)("inlineCode",{parentName:"p"},'"Bob", "number"'),' doit renvoyer \'"No such contact"\n',Object(i.mdx)("inlineCode",{parentName:"p"},'"Bob", "potato"'),' devrait renvoyer "No such contact"\n',Object(i.mdx)("inlineCode",{parentName:"p"},'"Akira", "address"'),' doit renvoyer "No such property"')),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'// Setup\nvar contacts = [\n    {\n        "firstName": "Akira",\n        "lastName": "Laine",\n        "number": "0543236543",\n        "likes": ["Pizza", "Coding", "Brownie Points"]\n    },\n    {\n        "firstName": "Harry",\n        "lastName": "Potter",\n        "number": "0994372684",\n        "likes": ["Hogwarts", "Magic", "Hagrid"]\n    },\n    {\n        "firstName": "Sherlock",\n        "lastName": "Holmes",\n        "number": "0487345643",\n        "likes": ["Intriguing Cases", "Violin"]\n    },\n    {\n        "firstName": "Kristian",\n        "lastName": "Vos",\n        "number": "unknown",\n        "likes": ["JavaScript", "Gaming", "Foxes"]\n    }\n];\n\nfunction lookUpProfile(name, prop){\nfor (var i = 0; i < contacts.length; i++){\n    if (contacts[i].firstName === name) {\n        if (contacts[i].hasOwnProperty(prop)) {\n            return contacts[i][prop];\n        } else {\n            return "No such property";\n        }\n    }\n}\nreturn "No such contact";\n}\n\nlookUpProfile("Akira", "likes");\n')),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"102-g\xe9n\xe9rer-des-fractions-al\xe9atoires-avec-javascript"},"102. G\xe9n\xe9rer des fractions al\xe9atoires avec JavaScript"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/generate-random-fractions-with-javascript"}),"Learn Basic JavaScript: Generate Random Fractions with JavaScript | freeCodeCamp.org")),Object(i.mdx)("p",null,"Les nombres al\xe9atoires sont utiles pour cr\xe9er un comportement al\xe9atoire.\nJavaScript a une fonction ",Object(i.mdx)("inlineCode",{parentName:"p"},"Math.random()")," qui g\xe9n\xe8re un nombre d\xe9cimal al\xe9atoire entre ",Object(i.mdx)("inlineCode",{parentName:"p"},"0")," (inclus) et pas tout \xe0 fait jusqu'\xe0 ",Object(i.mdx)("inlineCode",{parentName:"p"},"1")," (exclusif). Ainsi ",Object(i.mdx)("inlineCode",{parentName:"p"},"Math.random()")," peut renvoyer un ",Object(i.mdx)("inlineCode",{parentName:"p"},"0")," mais jamais tout \xe0 fait un ",Object(i.mdx)("inlineCode",{parentName:"p"},"1"),"."),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"Remarque"),"\nComme pour ",Object(i.mdx)("strong",{parentName:"p"},"3. Stocker des valeurs avec l'op\xe9rateur \xe9gal"),", tous les appels de  fonction seront r\xe9solus avant l'ex\xe9cution du ",Object(i.mdx)("inlineCode",{parentName:"p"},"return"),", nous pouvons donc ",Object(i.mdx)("inlineCode",{parentName:"p"},"return")," la valeur de la fonction ",Object(i.mdx)("inlineCode",{parentName:"p"},"Math.random()"),"."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"Modifiez ",Object(i.mdx)("inlineCode",{parentName:"p"},"randomFraction")," pour renvoyer un nombre al\xe9atoire au lieu de renvoyer ",Object(i.mdx)("inlineCode",{parentName:"p"},"0"),"."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},Object(i.mdx)("inlineCode",{parentName:"p"},"randomFraction")," doit renvoyer un nombre al\xe9atoire.\nLe nombre renvoy\xe9 par ",Object(i.mdx)("inlineCode",{parentName:"p"},"randomFraction")," doit \xeatre une d\xe9cimale.\nVous devriez utiliser ",Object(i.mdx)("inlineCode",{parentName:"p"},"Math.random")," pour g\xe9n\xe9rer le nombre d\xe9cimal al\xe9atoire.")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function randomFraction() {\n  return Math.random();\n}\nconsole.log(randomFraction())\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"103-g\xe9n\xe9rer-des-nombres-entiers-al\xe9atoires-avec-javascript"},"103. G\xe9n\xe9rer des nombres entiers al\xe9atoires avec JavaScript"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/generate-random-whole-numbers-with-javascript"}),"Learn Basic JavaScript: Generate Random Whole Numbers with JavaScript | freeCodeCamp.org")),Object(i.mdx)("p",null,"C'est formidable de pouvoir g\xe9n\xe9rer des nombres d\xe9cimaux al\xe9atoires,  mais c'est encore plus utile si nous l'utilisons pour g\xe9n\xe9rer des  nombres entiers al\xe9atoires."),Object(i.mdx)("ol",null,Object(i.mdx)("li",{parentName:"ol"},"Utilisez ",Object(i.mdx)("inlineCode",{parentName:"li"},"Math.random()")," pour g\xe9n\xe9rer une d\xe9cimale al\xe9atoire."),Object(i.mdx)("li",{parentName:"ol"},"Multipliez cette d\xe9cimale al\xe9atoire par ",Object(i.mdx)("inlineCode",{parentName:"li"},"20"),"."),Object(i.mdx)("li",{parentName:"ol"},"Utilisez une autre fonction, ",Object(i.mdx)("inlineCode",{parentName:"li"},"Math.floor()")," pour arrondir le nombre \xe0 son nombre entier le plus proche.")),Object(i.mdx)("p",null,"Rappelez-vous que ",Object(i.mdx)("inlineCode",{parentName:"p"},"Math.random()")," ne peut jamais tout \xe0 fait retourner un ",Object(i.mdx)("inlineCode",{parentName:"p"},"1")," et, parce que nous arrondissons vers le bas, il est impossible d'obtenir  r\xe9ellement ",Object(i.mdx)("inlineCode",{parentName:"p"},"20"),". Cette technique nous donnera un nombre entier compris  entre ",Object(i.mdx)("inlineCode",{parentName:"p"},"0")," et ",Object(i.mdx)("inlineCode",{parentName:"p"},"19"),".\nEn mettant tout ensemble, voici \xe0 quoi ressemble notre code :"),Object(i.mdx)("p",null,Object(i.mdx)("inlineCode",{parentName:"p"},"Math.floor(Math.random() * 20);")),Object(i.mdx)("p",null,"Nous appelons ",Object(i.mdx)("inlineCode",{parentName:"p"},"Math.random()"),", en multipliant le r\xe9sultat par 20, puis en  passant la valeur \xe0 la fonction ",Object(i.mdx)("inlineCode",{parentName:"p"},"Math.floor()")," pour arrondir la valeur au nombre entier le plus proche."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"Utilisez cette technique pour g\xe9n\xe9rer et renvoyer un nombre entier al\xe9atoire compris entre ",Object(i.mdx)("inlineCode",{parentName:"p"},"0")," et ",Object(i.mdx)("inlineCode",{parentName:"p"},"9"),"."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"Le r\xe9sultat de ",Object(i.mdx)("inlineCode",{parentName:"p"},"randomWholeNum")," doit \xeatre un nombre entier.\nVous devez utiliser ",Object(i.mdx)("inlineCode",{parentName:"p"},"Math.random")," pour g\xe9n\xe9rer un nombre al\xe9atoire.\nVous devriez avoir multipli\xe9 le r\xe9sultat de ",Object(i.mdx)("inlineCode",{parentName:"p"},"Math.random")," par 10 pour en faire un nombre compris entre z\xe9ro et neuf.\nVous devez utiliser ",Object(i.mdx)("inlineCode",{parentName:"p"},"Math.floor")," pour supprimer la partie d\xe9cimale du nombre.")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function randomWholeNum() {\n  return Math.floor(Math.random() * 10);\n}\nconsole.log(randomWholeNum());\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"104-g\xe9n\xe9rer-des-nombres-entiers-al\xe9atoires-dans-une-plage"},"104. G\xe9n\xe9rer des nombres entiers al\xe9atoires dans une plage"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/generate-random-whole-numbers-within-a-range"}),"Learn Basic JavaScript: Generate Random Whole Numbers within a Range | freeCodeCamp.org")),Object(i.mdx)("p",null,"Au lieu de g\xe9n\xe9rer un nombre entier al\xe9atoire entre z\xe9ro et un nombre  donn\xe9 comme nous le faisions auparavant, nous pouvons g\xe9n\xe9rer un nombre entier al\xe9atoire qui se situe dans une plage de deux nombres  sp\xe9cifiques.\nPour ce faire, nous d\xe9finirons un nombre minimum ",Object(i.mdx)("inlineCode",{parentName:"p"},"min")," et un nombre maximum ",Object(i.mdx)("inlineCode",{parentName:"p"},"max"),".\nVoici la formule que nous utiliserons. Prenez un moment pour le lire et essayez de comprendre ce que fait ce code :"),Object(i.mdx)("p",null,Object(i.mdx)("inlineCode",{parentName:"p"},"Math.floor(Math.random() * (max - min + 1)) + min")),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"Cr\xe9ez une fonction appel\xe9e ",Object(i.mdx)("inlineCode",{parentName:"p"},"randomRange")," qui prend une plage ",Object(i.mdx)("inlineCode",{parentName:"p"},"myMin")," et ",Object(i.mdx)("inlineCode",{parentName:"p"},"myMax")," et  retourne un nombre entier al\xe9atoire sup\xe9rieur ou \xe9gal \xe0 ",Object(i.mdx)("inlineCode",{parentName:"p"},"myMin")," et  inf\xe9rieur ou \xe9gal \xe0 ",Object(i.mdx)("inlineCode",{parentName:"p"},"myMax"),", inclus."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"Le nombre al\xe9atoire le plus bas pouvant \xeatre g\xe9n\xe9r\xe9 par ",Object(i.mdx)("inlineCode",{parentName:"p"},"randomRange")," doit \xeatre \xe9gal \xe0 votre nombre minimum, ",Object(i.mdx)("inlineCode",{parentName:"p"},"myMin"),".\nLe nombre al\xe9atoire le plus \xe9lev\xe9 pouvant \xeatre g\xe9n\xe9r\xe9 par ",Object(i.mdx)("inlineCode",{parentName:"p"},"randomRange")," doit \xeatre \xe9gal \xe0 votre nombre maximal, ",Object(i.mdx)("inlineCode",{parentName:"p"},"myMax"),".\nLe nombre al\xe9atoire g\xe9n\xe9r\xe9 par ",Object(i.mdx)("inlineCode",{parentName:"p"},"randomRange")," doit \xeatre un entier et non une d\xe9cimale.\n",Object(i.mdx)("inlineCode",{parentName:"p"},"randomRange")," doit utiliser \xe0 la fois ",Object(i.mdx)("inlineCode",{parentName:"p"},"myMax")," et ",Object(i.mdx)("inlineCode",{parentName:"p"},"myMin")," et renvoyer un nombre al\xe9atoire dans votre plage.")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function randomRange(myMin, myMax) {\n  return Math.floor(Math.random() * (myMax - myMin + 1)) + myMin;\n}\nconsole.log(randomRange(2, 856));\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"105-utilisez-la-fonction-parseint"},"105. Utilisez la fonction parseInt()"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/use-the-parseint-function"}),"Learn Basic JavaScript: Use the parseInt Function | freeCodeCamp.org")),Object(i.mdx)("p",null,"La fonction ",Object(i.mdx)("inlineCode",{parentName:"p"},"parseInt()")," analyse une cha\xeene et renvoie un entier. Voici un exemple :"),Object(i.mdx)("p",null,Object(i.mdx)("inlineCode",{parentName:"p"},'var a = parseInt("007");')),Object(i.mdx)("p",null,'La fonction ci-dessus convertit la cha\xeene "007" en un entier 7. Si le  premier caract\xe8re de la cha\xeene ne peut pas \xeatre converti en nombre, elle renvoie ',Object(i.mdx)("inlineCode",{parentName:"p"},"NaN"),"."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"Utilisez ",Object(i.mdx)("inlineCode",{parentName:"p"},"parseInt()")," dans la fonction ",Object(i.mdx)("inlineCode",{parentName:"p"},"convertToInteger")," pour qu'elle convertisse la cha\xeene d'entr\xe9e ",Object(i.mdx)("inlineCode",{parentName:"p"},"str")," en un  entier et la renvoie."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},Object(i.mdx)("inlineCode",{parentName:"p"},"convertToInteger")," doit utiliser la fonction parseInt ()\n",Object(i.mdx)("inlineCode",{parentName:"p"},'convertToInteger("56")')," doit renvoyer un nombre\n",Object(i.mdx)("inlineCode",{parentName:"p"},'convertToInteger("56")')," doit renvoyer 56\n",Object(i.mdx)("inlineCode",{parentName:"p"},'convertToInteger("77")')," doit renvoyer 77\n",Object(i.mdx)("inlineCode",{parentName:"p"},'convertToInteger("JamesBond")')," doit renvoyer NaN")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'function convertToInteger(str) {\n    return parseInt(str);\n}\nconvertToInteger("56");\n/////\nconsole.log(convertToInteger("56")); // 56\nconsole.log(convertToInteger("77")); // 77\nconsole.log(convertToInteger("JamesBond")); // Nan\n')),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"106-utiliser-la-fonction-parseint-avec-une-base"},"106. Utiliser la fonction parseInt() avec une base"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/use-the-parseint-function-with-a-radix"}),"Learn Basic JavaScript: Use the parseInt Function with a Radix | freeCodeCamp.org")),Object(i.mdx)("p",null,"La fonction ",Object(i.mdx)("inlineCode",{parentName:"p"},"parseInt()")," analyse une cha\xeene et renvoie un entier. Il  prend un deuxi\xe8me argument pour la base, qui sp\xe9cifie la base du nombre  dans la cha\xeene. La base peut \xeatre un entier compris entre 2 et 36.\nL'appel de fonction ressemble \xe0 ceci :"),Object(i.mdx)("p",null,Object(i.mdx)("inlineCode",{parentName:"p"},"parseInt(string, radix);")),Object(i.mdx)("p",null,"Et voici un exemple :"),Object(i.mdx)("p",null,Object(i.mdx)("inlineCode",{parentName:"p"},'var a = parseInt ("11", 2);')),Object(i.mdx)("p",null,'La variable de base indique que "11" est dans le syst\xe8me binaire, ou base  2. Cet exemple convertit la cha\xeene "11" en un entier 3.'),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"Utilisez ",Object(i.mdx)("inlineCode",{parentName:"p"},"parseInt()")," dans la fonction ",Object(i.mdx)("inlineCode",{parentName:"p"},"convertToInteger")," pour qu'il convertisse un nombre binaire en entier et le renvoie."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},Object(i.mdx)("inlineCode",{parentName:"p"},"convertToInteger")," doit utiliser la fonction ",Object(i.mdx)("inlineCode",{parentName:"p"},"parseInt()"),"\n",Object(i.mdx)("inlineCode",{parentName:"p"},'convertToInteger("10011")')," doit renvoyer un nombre\n",Object(i.mdx)("inlineCode",{parentName:"p"},'convertToInteger("10011")')," doit renvoyer 19\n",Object(i.mdx)("inlineCode",{parentName:"p"},'convertToInteger("111001")')," doit renvoyer 57\n",Object(i.mdx)("inlineCode",{parentName:"p"},'convertToInteger("JamesBond")')," doit renvoyer NaN")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'function convertToInteger(str) {\n  return parseInt(str, 2);\n}\nconvertToInteger("10011");\n/////\nconsole.log(convertToInteger("10011")); // 19\nconsole.log(convertToInteger("111001")); // 57\nconsole.log(convertToInteger("JamesBond")); // NaN\n')),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"107-utiliser-lop\xe9rateur-conditionnel-ternaire"},"107. Utiliser l'op\xe9rateur conditionnel (ternaire)"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/use-the-conditional-ternary-operator"}),"Learn Basic JavaScript: Use the Conditional (Ternary) Operator | freeCodeCamp.org")),Object(i.mdx)("p",null,"L'",Object(i.mdx)("em",{parentName:"p"},"op\xe9rateur conditionnel"),", \xe9galement appel\xe9 ",Object(i.mdx)("em",{parentName:"p"},"op\xe9rateur ternaire"),", peut \xeatre utilis\xe9 comme une expression ",Object(i.mdx)("inlineCode",{parentName:"p"},"if-else")," sur une ligne.\nLa syntaxe est :"),Object(i.mdx)("p",null,Object(i.mdx)("inlineCode",{parentName:"p"},"condition ? instruction-si-vrai : instruction-si-faux;")),Object(i.mdx)("p",null,"La fonction suivante utilise une instruction ",Object(i.mdx)("inlineCode",{parentName:"p"},"if-else")," pour v\xe9rifier une condition :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'function findGreater(a, b) {\n  if(a > b) {\n    return "a is greater";\n  }\n  else {\n    return "b is greater";\n  }\n}\n')),Object(i.mdx)("p",null,"Cela peut \xeatre r\xe9\xe9crit \xe0 l'aide de l'",Object(i.mdx)("inlineCode",{parentName:"p"},"op\xe9rateur conditionnel")," :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'function findGreater(a, b) {\n  return a > b ? "a is greater" : "b is greater";\n}\n')),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"Utilisez l'",Object(i.mdx)("inlineCode",{parentName:"p"},"op\xe9rateur conditionnel")," dans la fonction ",Object(i.mdx)("inlineCode",{parentName:"p"},"checkEqual"),' pour v\xe9rifier si deux nombres sont \xe9gaux ou non. La fonction doit renvoyer "Equal" ou "Not Equal".'),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},Object(i.mdx)("inlineCode",{parentName:"p"},"checkEqual")," doit utiliser l'",Object(i.mdx)("inlineCode",{parentName:"p"},"op\xe9rateur conditionnel"),"\n",Object(i.mdx)("inlineCode",{parentName:"p"},"checkEqual(1, 2)"),' doit renvoyer "Not Equal"\n',Object(i.mdx)("inlineCode",{parentName:"p"},"checkEqual(1, 1)"),' doit renvoyer "Equal"\n',Object(i.mdx)("inlineCode",{parentName:"p"},"checkEqual(1, -1)"),' doit renvoyer "Not Equal"')),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'function checkEqual(a, b) {\n  return a === b ? "Equal" : "Not Equal";\n}\ncheckEqual(1, 2);\n/////\nconsole.log(checkEqual(1, 2)); // Not Equal\nconsole.log(checkEqual(1, 1)); // Equal\nconsole.log(checkEqual(1, -1)); // Not Equal\n')),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"108-utiliser-plusieurs-op\xe9rateurs-conditionnels-ternaires"},"108. Utiliser plusieurs op\xe9rateurs conditionnels (ternaires)"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/use-multiple-conditional-ternary-operators"}),"Learn Basic JavaScript: Use Multiple Conditional (Ternary) Operators | freeCodeCamp.org")),Object(i.mdx)("p",null,"Dans le d\xe9fi pr\xe9c\xe9dent, vous avez utilis\xe9 un seul op\xe9rateur conditionnel. Vous pouvez \xe9galement les encha\xeener pour v\xe9rifier  plusieurs conditions.\nLa fonction suivante utilise les instructions if, else if et else pour v\xe9rifier plusieurs conditions :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'function findGreaterOrEqual(a, b) {\n  if (a === b) {\n    return "a and b are equal";\n  }\n  else if (a > b) {\n    return "a is greater";\n  }\n  else {\n    return "b is greater";\n  }\n}\n')),Object(i.mdx)("p",null,"La fonction ci-dessus peut \xeatre r\xe9\xe9crite \xe0 l'aide de plusieurs op\xe9rateurs conditionnels :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'function findGreaterOrEqual(a, b) {\n  return (a === b) ? "a and b are equal" \n    : (a > b) ? "a is greater" \n    : "b is greater";\n}\n')),Object(i.mdx)("p",null,"Il est recommand\xe9 de formater plusieurs op\xe9rateurs conditionnels de  telle sorte que chaque condition se trouve sur une ligne distincte,  comme indiqu\xe9 ci-dessus. L'utilisation de plusieurs op\xe9rateurs conditionnels sans indentation appropri\xe9e peut rendre votre code  difficile \xe0 lire. Par exemple :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'function findGreaterOrEqual(a, b) {\n  return (a === b) ? "a and b are equal" : (a > b) ? "a is greater" : "b is greater";\n}\n')),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"Dans la fonction ",Object(i.mdx)("inlineCode",{parentName:"p"},"checkSign"),", utilisez plusieurs op\xe9rateurs conditionnels - en suivant le format recommand\xe9 utilis\xe9 dans ",Object(i.mdx)("inlineCode",{parentName:"p"},"findGreaterOrEqual")," - pour  v\xe9rifier si un nombre est positif, n\xe9gatif ou z\xe9ro. La fonction doit renvoyer ",Object(i.mdx)("inlineCode",{parentName:"p"},'"positif"'),", ",Object(i.mdx)("inlineCode",{parentName:"p"},'"n\xe9gatif"')," ou ",Object(i.mdx)("inlineCode",{parentName:"p"},'"z\xe9ro"'),"."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},Object(i.mdx)("inlineCode",{parentName:"p"},"checkSign")," doit utiliser plusieurs op\xe9rateurs conditionnels\n",Object(i.mdx)("inlineCode",{parentName:"p"},"checkSign(10)")," doit retourner 'positif'. Notez que la capitalisation compte\n",Object(i.mdx)("inlineCode",{parentName:"p"},"checkSign(-12)")," doit renvoyer 'n\xe9gatif'. Notez que la capitalisation compte\n",Object(i.mdx)("inlineCode",{parentName:"p"},"checkSign(0)"),'  doit renvoyer "zero". Notez que la capitalisation compte')),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'function checkSign(num) {\n  return (num > 0) ? "positive"\n    : (num < 0) ? "negative"\n    : "zero";\n}\ncheckSign(10);\n/////\nconsole.log(checkSign(10)); // positive\nconsole.log(checkSign(-12)); // negative\nconsole.log(checkSign(0)); // zero\n')),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"109-utilisez-la-r\xe9cursivit\xe9-pour-cr\xe9er-un-compte-\xe0-rebours"},"109. Utilisez la r\xe9cursivit\xe9 pour cr\xe9er un compte \xe0 rebours"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/use-recursion-to-create-a-countdown"}),"Learn Basic JavaScript: Use Recursion to Create a Countdown | freeCodeCamp.org")),Object(i.mdx)("p",null,"Dans un d\xe9fi pr\xe9c\xe9dent (100), vous avez appris \xe0 utiliser la r\xe9cursivit\xe9 pour remplacer une boucle for. Examinons maintenant une fonction plus  complexe qui renvoie un tableau d'entiers cons\xe9cutifs commen\xe7ant par ",Object(i.mdx)("inlineCode",{parentName:"p"},"1"),"  jusqu'au nombre pass\xe9 \xe0 la fonction."),Object(i.mdx)("p",null,"Comme mentionn\xe9 dans le d\xe9fi pr\xe9c\xe9dent, il y aura un ",Object(i.mdx)("em",{parentName:"p"},"cas de base"),". Le cas de base indique \xe0 la  fonction r\xe9cursive quand elle n'a plus besoin de s'appeler. C'est un cas simple o\xf9 la valeur de retour est d\xe9j\xe0 connue. Il y aura \xe9galement un  appel r\xe9cursif qui ex\xe9cute la fonction d'origine avec diff\xe9rents  arguments. Si la fonction est \xe9crite correctement, le cas de base sera  finalement atteint."),Object(i.mdx)("p",null,"Par exemple, supposons que vous souhaitiez  \xe9crire une fonction r\xe9cursive qui renvoie un tableau contenant les nombres ",Object(i.mdx)("inlineCode",{parentName:"p"},"1")," \xe0 ",Object(i.mdx)("inlineCode",{parentName:"p"},"n"),". Cette fonction devra accepter un argument, ",Object(i.mdx)("inlineCode",{parentName:"p"},"n"),",  repr\xe9sentant le nombre final. Ensuite, il devra s'appeler avec des  valeurs de ",Object(i.mdx)("inlineCode",{parentName:"p"},"n")," progressivement plus petites jusqu'\xe0 ce qu'il atteigne ",Object(i.mdx)("inlineCode",{parentName:"p"},"1"),".  Vous pouvez \xe9crire la fonction comme suit :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function countup(n) {\n  if (n < 1) {\n    return [];\n  } else {\n    const countArray = countup(n - 1);\n    countArray.push(n);\n    return countArray;\n  }\n}\nconsole.log(countup(5)); // [ 1, 2, 3, 4, 5 ]\n")),Object(i.mdx)("p",null,"Au d\xe9but, cela semble contre-intuitif puisque la valeur de ",Object(i.mdx)("inlineCode",{parentName:"p"},"n")," diminue,  mais les valeurs du tableau final augmentent. Cela se produit parce que  le push se produit en dernier, apr\xe8s le retour de l'appel r\xe9cursif. Au  point o\xf9 ",Object(i.mdx)("inlineCode",{parentName:"p"},"n")," est pouss\xe9 dans le tableau, ",Object(i.mdx)("inlineCode",{parentName:"p"},"countup(n - 1)")," a d\xe9j\xe0 \xe9t\xe9 \xe9valu\xe9 et renvoy\xe9 ",Object(i.mdx)("inlineCode",{parentName:"p"},"[1, 2, ..., n - 1]"),"."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"Nous avons d\xe9fini une fonction  appel\xe9e ",Object(i.mdx)("inlineCode",{parentName:"p"},"countdown")," avec un param\xe8tre (",Object(i.mdx)("inlineCode",{parentName:"p"},"n"),"). La fonction doit  utiliser la r\xe9cursivit\xe9 pour renvoyer un tableau contenant les entiers ",Object(i.mdx)("inlineCode",{parentName:"p"},"n")," \xe0 ",Object(i.mdx)("inlineCode",{parentName:"p"},"1")," en fonction du param\xe8tre ",Object(i.mdx)("inlineCode",{parentName:"p"},"n"),". Si la fonction est appel\xe9e avec un  nombre inf\xe9rieur \xe0 1, la fonction doit renvoyer un tableau vide. Par  exemple, l'appel de cette fonction avec ",Object(i.mdx)("inlineCode",{parentName:"p"},"n = 5")," doit renvoyer le tableau  ",Object(i.mdx)("inlineCode",{parentName:"p"},"[5, 4, 3, 2, 1]"),". Votre fonction doit utiliser la r\xe9cursivit\xe9 en  s'appelant elle-m\xeame et ne doit utiliser aucune boucle d'aucune sorte."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},Object(i.mdx)("inlineCode",{parentName:"p"},"countdown(-1)")," doit renvoyer un tableau vide.\n",Object(i.mdx)("inlineCode",{parentName:"p"},"countdown(10)")," doit revenir ",Object(i.mdx)("inlineCode",{parentName:"p"},"[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"),"\n",Object(i.mdx)("inlineCode",{parentName:"p"},"countdown(5)")," doit renvoyer ",Object(i.mdx)("inlineCode",{parentName:"p"},"[5, 4, 3, 2, 1]"),"\nVotre code ne doit reposer sur aucun type de boucles (",Object(i.mdx)("inlineCode",{parentName:"p"},"for"),", ",Object(i.mdx)("inlineCode",{parentName:"p"},"while")," ou des  fonctions d'ordre sup\xe9rieur telles que f",Object(i.mdx)("inlineCode",{parentName:"p"},"forEach"),", ",Object(i.mdx)("inlineCode",{parentName:"p"},"map"),", ",Object(i.mdx)("inlineCode",{parentName:"p"},"filter"),", et  ",Object(i.mdx)("inlineCode",{parentName:"p"},"reduce"),").\nVous devez utiliser la r\xe9cursivit\xe9 pour r\xe9soudre ce probl\xe8me.")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function countdown(n){\n  if (n < 1) {\n    return [];\n  } else {\n    const countArray = countdown(n - 1);\n    countArray.unshift(n);\n    return countArray;\n  }\n};\n/////\nconsole.log(countdown(-1)); // []\nconsole.log(countdown(10)); // [ 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 ]\nconsole.log(countdown(5)); // [ 5, 4, 3, 2, 1 ]\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"110-utiliser-la-r\xe9cursivit\xe9-pour-cr\xe9er-une-plage-de-nombres"},"110. Utiliser la r\xe9cursivit\xe9 pour cr\xe9er une plage de nombres"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/use-recursion-to-create-a-range-of-numbers"}),"Learn Basic JavaScript: Use Recursion to Create a Range of Numbers | freeCodeCamp.org")),Object(i.mdx)("p",null,"Dans la continuit\xe9 du d\xe9fi pr\xe9c\xe9dent, nous vous offrons une autre opportunit\xe9 de cr\xe9er une fonction r\xe9cursive pour r\xe9soudre un probl\xe8me."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"Nous avons d\xe9fini une fonction nomm\xe9e ",Object(i.mdx)("inlineCode",{parentName:"p"},"rangeOfNumbers")," avec deux param\xe8tres. La fonction doit retourner un tableau d'entiers qui commence par un  nombre repr\xe9sent\xe9 par le param\xe8tre ",Object(i.mdx)("inlineCode",{parentName:"p"},"startNum")," et se termine par un nombre  repr\xe9sent\xe9 par le param\xe8tre ",Object(i.mdx)("inlineCode",{parentName:"p"},"endNum"),". Le num\xe9ro de d\xe9part sera toujours inf\xe9rieur ou \xe9gal au num\xe9ro de fin. Votre fonction doit utiliser la  r\xe9cursivit\xe9 en s'appelant elle-m\xeame et ne pas utiliser de boucles d'aucune sorte. Cela devrait \xe9galement fonctionner dans les cas o\xf9 ",Object(i.mdx)("inlineCode",{parentName:"p"},"startNum")," et ",Object(i.mdx)("inlineCode",{parentName:"p"},"endNum")," sont identiques."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"Votre fonction doit renvoyer un tableau.\nVotre code ne doit utiliser aucune syntaxe de boucle (",Object(i.mdx)("inlineCode",{parentName:"p"},"for")," ou ",Object(i.mdx)("inlineCode",{parentName:"p"},"while")," ou des fonctions d'ordre sup\xe9rieur telles que ",Object(i.mdx)("inlineCode",{parentName:"p"},"forEach"),", ",Object(i.mdx)("inlineCode",{parentName:"p"},"map"),", ",Object(i.mdx)("inlineCode",{parentName:"p"},"filter"),", ou ",Object(i.mdx)("inlineCode",{parentName:"p"},"reduce"),").\n",Object(i.mdx)("inlineCode",{parentName:"p"},"rangeOfNumbers")," devrait utiliser la r\xe9cursivit\xe9 (s'appeler lui-m\xeame) pour r\xe9soudre ce probl\xe8me.\n",Object(i.mdx)("inlineCode",{parentName:"p"},"rangeOfNumbers(1, 5)")," doit renvoyer ",Object(i.mdx)("inlineCode",{parentName:"p"},"[1, 2, 3, 4, 5]"),".\n",Object(i.mdx)("inlineCode",{parentName:"p"},"rangeOfNumbers(6, 9)")," doit renvoyer ",Object(i.mdx)("inlineCode",{parentName:"p"},"[6, 7, 8, 9]"),".\n",Object(i.mdx)("inlineCode",{parentName:"p"},"rangeOfNumbers(4, 4)")," doit renvoyer ",Object(i.mdx)("inlineCode",{parentName:"p"},"[4]"),".")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function rangeOfNumbers(startNum, endNum) {\n  if (endNum - startNum === 0) {\n    return [startNum];\n  } else {\n    var numbers = rangeOfNumbers(startNum, endNum - 1);\n    numbers.push(endNum);\n    return numbers;\n  }\n};\nconsole.log(rangeOfNumbers(1, 5)); // [ 1, 2, 3, 4, 5 ]\nconsole.log(rangeOfNumbers(6, 9)); // [ 6, 7, 8, 9 ]\nconsole.log(rangeOfNumbers(4, 4)); // [ 4 ]\n")))}p.isMDXComponent=!0}}]);
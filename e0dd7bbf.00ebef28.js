(window.webpackJsonp=window.webpackJsonp||[]).push([[124],{194:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return r})),n.d(t,"rightToc",(function(){return d})),n.d(t,"default",(function(){return c}));var a=n(3),o=n(7),l=(n(0),n(212)),i={id:"Codecademy-Learn_JavaScript-02-Conditional_Statements",title:"Conditional Statements"},r={unversionedId:"Codecademy/Codecademy-Learn_JavaScript-02-Conditional_Statements",id:"Codecademy/Codecademy-Learn_JavaScript-02-Conditional_Statements",isDocsHomePage:!1,title:"Conditional Statements",description:"Learn how to add logic to your code with JavaScript.",source:"@site/docs/Codecademy/Codecademy-Learn_JavaScript-02-Conditional_Statements.md",slug:"/Codecademy/Codecademy-Learn_JavaScript-02-Conditional_Statements",permalink:"/docs/Codecademy/Codecademy-Learn_JavaScript-02-Conditional_Statements",editUrl:"https://github.com/gylgyl2000/laloutre.github.io/edit/main/docs/Codecademy/Codecademy-Learn_JavaScript-02-Conditional_Statements.md",version:"current"},d=[{value:"01. What are Conditional Statements ?",id:"01-what-are-conditional-statements-",children:[]},{value:"02. If Statement",id:"02-if-statement",children:[]},{value:"03. If...Else Statements",id:"03-ifelse-statements",children:[]},{value:"04. Comparison Operators",id:"04-comparison-operators",children:[]},{value:"05. Logical Operators",id:"05-logical-operators",children:[]},{value:"06. Truthy and Falsy",id:"06-truthy-and-falsy",children:[]},{value:"07. Truthy and Falsy Assignment",id:"07-truthy-and-falsy-assignment",children:[]},{value:"08. Ternary Operator",id:"08-ternary-operator",children:[]},{value:"09. Else If Statements",id:"09-else-if-statements",children:[]},{value:"10. The switch keyword",id:"10-the-switch-keyword",children:[]},{value:"11. Review",id:"11-review",children:[]}],m={rightToc:d};function c(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(l.mdx)("wrapper",Object(a.a)({},m,n,{components:t,mdxType:"MDXLayout"}),Object(l.mdx)("p",null,"Learn how to add logic to your code with JavaScript."),Object(l.mdx)("h2",{id:"01-what-are-conditional-statements-"},"01. What are Conditional Statements ?"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/control-flow/exercises/control-flow-intro"}),"Learn JavaScript | Codecademy")),Object(l.mdx)("p",null,"In life, we make decisions based on circumstances. Think of an everyday decision as mundane as falling asleep \u2014 if we are tired, we go to bed, otherwise, we wake up and start our day."),Object(l.mdx)("p",null,"These if-else decisions can be modeled in code by creating ",Object(l.mdx)("em",{parentName:"p"},"conditional statements"),". A conditional statement checks a specific condition(s) and performs a task based on the condition(s)."),Object(l.mdx)("p",null,"In this lesson, we will explore how programs make decisions by evaluating conditions and introduce logic into our code ! "),Object(l.mdx)("p",null,"We\u2019ll be covering the following concepts:"),Object(l.mdx)("ul",null,Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("inlineCode",{parentName:"li"},"if"),", ",Object(l.mdx)("inlineCode",{parentName:"li"},"else if"),", and ",Object(l.mdx)("inlineCode",{parentName:"li"},"else")," statements"),Object(l.mdx)("li",{parentName:"ul"},"comparison operators"),Object(l.mdx)("li",{parentName:"ul"},"logical operators"),Object(l.mdx)("li",{parentName:"ul"},"truthy vs falsy values"),Object(l.mdx)("li",{parentName:"ul"},"ternary operators"),Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("inlineCode",{parentName:"li"},"switch")," statement")),Object(l.mdx)("p",null,"So ",Object(l.mdx)("em",{parentName:"p"},"if")," you\u2019re ready to learn these concepts go to the next lesson \u2014 ",Object(l.mdx)("em",{parentName:"p"},"else"),", read over the concepts, observe the diagram, and prepare yourself for this lesson !"),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"Instructions"),"\nCheck out the diagram to see how conditionals allow us to create decision-making technology."),Object(l.mdx)("p",null,"![Asset 5]","(assets/codecademy/Asset 5.svg)"),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"02-if-statement"},"02. If Statement"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/control-flow/exercises/if-statement"}),"Learn JavaScript | Codecademy")),Object(l.mdx)("p",null,"We often perform a task based on a condition. For example, if the weather is nice today, then we will go outside. If the alarm clock rings, then we\u2019ll shut it off. If we\u2019re tired, then we\u2019ll go to sleep."),Object(l.mdx)("p",null,"In programming, we can also perform a task based on a condition using an ",Object(l.mdx)("inlineCode",{parentName:"p"},"if")," statement:"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"if (true) {\n  console.log('This message will print!'); \n}\n// Prints: This message will print!\n")),Object(l.mdx)("p",null,"Notice in the example above, we have an ",Object(l.mdx)("inlineCode",{parentName:"p"},"if")," statement. The ",Object(l.mdx)("inlineCode",{parentName:"p"},"if")," statement is composed of:"),Object(l.mdx)("ul",null,Object(l.mdx)("li",{parentName:"ul"},"The ",Object(l.mdx)("inlineCode",{parentName:"li"},"if")," keyword followed by a set of parentheses ",Object(l.mdx)("inlineCode",{parentName:"li"},"()")," which is followed by a ",Object(l.mdx)("em",{parentName:"li"},"code block"),", or ",Object(l.mdx)("em",{parentName:"li"},"block statement"),", indicated by a set of curly braces ",Object(l.mdx)("inlineCode",{parentName:"li"},"{}"),"."),Object(l.mdx)("li",{parentName:"ul"},"Inside the parentheses ",Object(l.mdx)("inlineCode",{parentName:"li"},"()"),", a condition is provided that evaluates to ",Object(l.mdx)("inlineCode",{parentName:"li"},"true")," or ",Object(l.mdx)("inlineCode",{parentName:"li"},"false"),"."),Object(l.mdx)("li",{parentName:"ul"},"If the condition evaluates to ",Object(l.mdx)("inlineCode",{parentName:"li"},"true"),", the code inside the curly braces ",Object(l.mdx)("inlineCode",{parentName:"li"},"{}")," runs, or ",Object(l.mdx)("em",{parentName:"li"},"executes"),". "),Object(l.mdx)("li",{parentName:"ul"},"If the condition evaluates to ",Object(l.mdx)("inlineCode",{parentName:"li"},"false"),", the block won\u2019t execute.")),Object(l.mdx)("p",null,"Let\u2019s make an ",Object(l.mdx)("inlineCode",{parentName:"p"},"if")," statement."),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"Instructions")),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"1.")," Using the ",Object(l.mdx)("inlineCode",{parentName:"p"},"let")," keyword, declare a variable named ",Object(l.mdx)("inlineCode",{parentName:"p"},"sale"),". Assign the value ",Object(l.mdx)("inlineCode",{parentName:"p"},"true")," to it. "),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let sale = true;\n")),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"2.")," Now create an ",Object(l.mdx)("inlineCode",{parentName:"p"},"if")," statement. Provide the ",Object(l.mdx)("inlineCode",{parentName:"p"},"if")," statement a condition of ",Object(l.mdx)("inlineCode",{parentName:"p"},"sale"),".\nInside the code block of the ",Object(l.mdx)("inlineCode",{parentName:"p"},"if")," statement, ",Object(l.mdx)("inlineCode",{parentName:"p"},"console.log()")," the string ",Object(l.mdx)("inlineCode",{parentName:"p"},"'Time to buy!'"),". "),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"if (sale) {\n  console.log('Time to buy!');\n}\n")),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"3.")," Notice that the code inside the ",Object(l.mdx)("inlineCode",{parentName:"p"},"if")," statement ran, since ",Object(l.mdx)("inlineCode",{parentName:"p"},"'Time to buy!'")," was logged to the console.\nBelow the ",Object(l.mdx)("inlineCode",{parentName:"p"},"sale")," variable declaration, but before the ",Object(l.mdx)("inlineCode",{parentName:"p"},"if")," statement, reassign ",Object(l.mdx)("inlineCode",{parentName:"p"},"sale")," to ",Object(l.mdx)("inlineCode",{parentName:"p"},"false"),". Run your code and observe what happens, we\u2019ll be changing this behavior in the next exercise. "),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let sale = true;\nsale = false;\nif (sale) {\n  console.log('Time to buy!');\n}\n")),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"03-ifelse-statements"},"03. If...Else Statements"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/control-flow/exercises/if-else-statements"}),"Learn JavaScript | Codecademy")),Object(l.mdx)("p",null,"In the previous exercise, we used an ",Object(l.mdx)("inlineCode",{parentName:"p"},"if")," statement that checked a condition to decide whether or not to run a block of code. In many cases, we\u2019ll have code we want to run if our condition evaluates to ",Object(l.mdx)("inlineCode",{parentName:"p"},"false"),". "),Object(l.mdx)("p",null,"If we wanted to add some default behavior to the ",Object(l.mdx)("inlineCode",{parentName:"p"},"if")," statement, we can add an ",Object(l.mdx)("inlineCode",{parentName:"p"},"else")," statement to run a block of code when the condition evaluates to ",Object(l.mdx)("inlineCode",{parentName:"p"},"false"),". Take a look at the inclusion of an ",Object(l.mdx)("inlineCode",{parentName:"p"},"else")," statement: "),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"if (false) {\n  console.log('The code in this block will not run.');\n} else {\n  console.log('But the code in this block will!');\n}\n\n// Prints: But the code in this block will!\n")),Object(l.mdx)("p",null,"An ",Object(l.mdx)("inlineCode",{parentName:"p"},"else")," statement must be paired with an ",Object(l.mdx)("inlineCode",{parentName:"p"},"if")," statement, and together they are referred to as an ",Object(l.mdx)("inlineCode",{parentName:"p"},"if...else")," statement. "),Object(l.mdx)("p",null,"In the example above, the ",Object(l.mdx)("inlineCode",{parentName:"p"},"else")," statement :"),Object(l.mdx)("ul",null,Object(l.mdx)("li",{parentName:"ul"},"Uses the ",Object(l.mdx)("inlineCode",{parentName:"li"},"else")," keyword following the code block of an ",Object(l.mdx)("inlineCode",{parentName:"li"},"if")," statement."),Object(l.mdx)("li",{parentName:"ul"},"Has a code block that is wrapped by a set of curly braces ",Object(l.mdx)("inlineCode",{parentName:"li"},"{}"),"."),Object(l.mdx)("li",{parentName:"ul"},"The code inside the ",Object(l.mdx)("inlineCode",{parentName:"li"},"else")," statement code block will execute when the ",Object(l.mdx)("inlineCode",{parentName:"li"},"if")," statement\u2019s condition evaluates to ",Object(l.mdx)("inlineCode",{parentName:"li"},"false"),".")),Object(l.mdx)("p",null,Object(l.mdx)("inlineCode",{parentName:"p"},"if...else")," statements allow us to automate solutions to yes-or-no questions, also known as ",Object(l.mdx)("em",{parentName:"p"},"binary decisions"),"."),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"Instructions")),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"1.")," Add an ",Object(l.mdx)("inlineCode",{parentName:"p"},"else")," statement to the existing ",Object(l.mdx)("inlineCode",{parentName:"p"},"if")," statement. Inside the code block of the ",Object(l.mdx)("inlineCode",{parentName:"p"},"else")," statement, ",Object(l.mdx)("inlineCode",{parentName:"p"},"console.log()")," the string ",Object(l.mdx)("inlineCode",{parentName:"p"},"'Time to wait for a sale.'")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let sale = true;\nif(sale) {\n  console.log('Time to buy!');\n}\n")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let sale = true;\nsale = false;\nif(sale) {\n  console.log('Time to buy!');\n} else {\n  console.log('Time to wait for a sale.');\n}\n")),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"04-comparison-operators"},"04. Comparison Operators"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/control-flow/exercises/comparison-operators"}),"Learn JavaScript | Codecademy")),Object(l.mdx)("p",null,"When writing conditional statements, sometimes we need to use different types of operators to compare values. These operators are called ",Object(l.mdx)("em",{parentName:"p"},"comparison operators"),"."),Object(l.mdx)("p",null,"Here is a list of some handy comparison operators and their syntax :"),Object(l.mdx)("ul",null,Object(l.mdx)("li",{parentName:"ul"},"Less than : ",Object(l.mdx)("inlineCode",{parentName:"li"},"<")),Object(l.mdx)("li",{parentName:"ul"},"Greater than : ",Object(l.mdx)("inlineCode",{parentName:"li"},">")),Object(l.mdx)("li",{parentName:"ul"},"Less than or equal to : ",Object(l.mdx)("inlineCode",{parentName:"li"},"<=")),Object(l.mdx)("li",{parentName:"ul"},"Greater than or equal to : ",Object(l.mdx)("inlineCode",{parentName:"li"},">=")),Object(l.mdx)("li",{parentName:"ul"},"Is equal to : ",Object(l.mdx)("inlineCode",{parentName:"li"},"===")),Object(l.mdx)("li",{parentName:"ul"},"Is not equal to : ",Object(l.mdx)("inlineCode",{parentName:"li"},"!=="))),Object(l.mdx)("p",null,"Comparison operators compare the value on the left with the value on the right. For instance :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"10 < 12 // Evaluates to true\n")),Object(l.mdx)("p",null,"It can be helpful to think of comparison statements as questions. When the answer is \u201cyes\u201d, the statement evaluates to ",Object(l.mdx)("inlineCode",{parentName:"p"},"true"),", and when the answer is \u201cno\u201d, the statement evaluates to ",Object(l.mdx)("inlineCode",{parentName:"p"},"false"),". The code above would be asking: is 10 less than 12 ? Yes ! So ",Object(l.mdx)("inlineCode",{parentName:"p"},"10 < 12")," evaluates to ",Object(l.mdx)("inlineCode",{parentName:"p"},"true"),". "),Object(l.mdx)("p",null,"We can also use comparison operators on different data types like strings : "),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"'apples' === 'oranges' // false\n")),Object(l.mdx)("p",null,"In the example above, we\u2019re using the ",Object(l.mdx)("em",{parentName:"p"},"identity operator")," (",Object(l.mdx)("inlineCode",{parentName:"p"},"==="),") to check if the string ",Object(l.mdx)("inlineCode",{parentName:"p"},"'apples'")," is the same as the string ",Object(l.mdx)("inlineCode",{parentName:"p"},"'oranges'"),".  Since the two strings are not the same, the comparison statement evaluates to ",Object(l.mdx)("inlineCode",{parentName:"p"},"false"),". "),Object(l.mdx)("p",null,"All comparison statements evaluate to either ",Object(l.mdx)("inlineCode",{parentName:"p"},"true")," or ",Object(l.mdx)("inlineCode",{parentName:"p"},"false")," and are made up of :"),Object(l.mdx)("ul",null,Object(l.mdx)("li",{parentName:"ul"},"Two values that will be compared. "),Object(l.mdx)("li",{parentName:"ul"},"An operator that separates the values and compares them accordingly (",Object(l.mdx)("inlineCode",{parentName:"li"},">"),", ",Object(l.mdx)("inlineCode",{parentName:"li"},"<"),", ",Object(l.mdx)("inlineCode",{parentName:"li"},"<="),",",Object(l.mdx)("inlineCode",{parentName:"li"},">="),",",Object(l.mdx)("inlineCode",{parentName:"li"},"==="),",",Object(l.mdx)("inlineCode",{parentName:"li"},"!=="),").")),Object(l.mdx)("p",null,"Let\u2019s practice using these comparison operators !"),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"Instructions")),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"1.")," Using ",Object(l.mdx)("inlineCode",{parentName:"p"},"let"),", create a variable named ",Object(l.mdx)("inlineCode",{parentName:"p"},"hungerLevel")," and set it equal to ",Object(l.mdx)("inlineCode",{parentName:"p"},"7"),"."),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let hungerLevel = 7;\n")),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"2.")," Write an ",Object(l.mdx)("inlineCode",{parentName:"p"},"if...else")," statement using a comparison operator. The condition should check if ",Object(l.mdx)("inlineCode",{parentName:"p"},"hungerLevel")," is greater than ",Object(l.mdx)("inlineCode",{parentName:"p"},"7"),". If so, the conditional statement should log, ",Object(l.mdx)("inlineCode",{parentName:"p"},"'Time to eat!'"),". Otherwise, it should log ",Object(l.mdx)("inlineCode",{parentName:"p"},"'We can eat later!'"),".\nAfter you press run, play around with the condition by tweaking the comparison of ",Object(l.mdx)("inlineCode",{parentName:"p"},"hungerLevel")," by using different operators such as  ",Object(l.mdx)("inlineCode",{parentName:"p"},"<="),",",Object(l.mdx)("inlineCode",{parentName:"p"},">="),",",Object(l.mdx)("inlineCode",{parentName:"p"},">"),", and ",Object(l.mdx)("inlineCode",{parentName:"p"},"<"),"."),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"if (hungerLevel > 7) {\n  console.log('Time to eat!')\n} else {\n  console.log('We can eat later!')\n};\n")),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"05-logical-operators"},"05. Logical Operators"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/control-flow/exercises/logical-operators"}),"Learn JavaScript | Codecademy")),Object(l.mdx)("p",null,"Working with conditionals means that we will be using booleans, ",Object(l.mdx)("inlineCode",{parentName:"p"},"true")," or ",Object(l.mdx)("inlineCode",{parentName:"p"},"false")," values. In JavaScript, there are operators that work with boolean values known as ",Object(l.mdx)("em",{parentName:"p"},"logical operators"),". We can use logical operators to add more sophisticated logic to our conditionals. There are three logical operators :"),Object(l.mdx)("ul",null,Object(l.mdx)("li",{parentName:"ul"},"the  ",Object(l.mdx)("em",{parentName:"li"},"and")," operator (",Object(l.mdx)("inlineCode",{parentName:"li"},"&&"),")"),Object(l.mdx)("li",{parentName:"ul"},"the ",Object(l.mdx)("em",{parentName:"li"},"or")," operator (",Object(l.mdx)("inlineCode",{parentName:"li"},"||"),")"),Object(l.mdx)("li",{parentName:"ul"},"the ",Object(l.mdx)("em",{parentName:"li"},"not")," operator, otherwise known as the ",Object(l.mdx)("em",{parentName:"li"},"bang")," operator (",Object(l.mdx)("inlineCode",{parentName:"li"},"!"),")")),Object(l.mdx)("p",null,"When we use the ",Object(l.mdx)("inlineCode",{parentName:"p"},"&&")," operator, we are checking that two things are ",Object(l.mdx)("inlineCode",{parentName:"p"},"true"),": "),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"if (stopLight === 'green' && pedestrians === 0) {\n  console.log('Go!');\n} else {\n  console.log('Stop');\n}\n")),Object(l.mdx)("p",null,"When using the ",Object(l.mdx)("inlineCode",{parentName:"p"},"&&")," operator, both conditions ",Object(l.mdx)("em",{parentName:"p"},"must")," evaluate to ",Object(l.mdx)("inlineCode",{parentName:"p"},"true")," for the entire condition to evaluate to ",Object(l.mdx)("inlineCode",{parentName:"p"},"true")," and execute. Otherwise, if either condition is ",Object(l.mdx)("inlineCode",{parentName:"p"},"false"),", the ",Object(l.mdx)("inlineCode",{parentName:"p"},"&&")," condition will evaluate to ",Object(l.mdx)("inlineCode",{parentName:"p"},"false")," and the ",Object(l.mdx)("inlineCode",{parentName:"p"},"else")," block will execute. "),Object(l.mdx)("p",null,"If we only care about either condition being ",Object(l.mdx)("inlineCode",{parentName:"p"},"true"),", we can use the ",Object(l.mdx)("inlineCode",{parentName:"p"},"||")," operator :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"if (day === 'Saturday' || day === 'Sunday') {\n  console.log('Enjoy the weekend!');\n} else {\n  console.log('Do some work.');\n}\n")),Object(l.mdx)("p",null,"When using the ",Object(l.mdx)("inlineCode",{parentName:"p"},"||")," operator, only one of the conditions must evaluate to ",Object(l.mdx)("inlineCode",{parentName:"p"},"true")," for the overall statement to evaluate to ",Object(l.mdx)("inlineCode",{parentName:"p"},"true"),". In the code example above, if either ",Object(l.mdx)("inlineCode",{parentName:"p"},"day === 'Saturday'")," or ",Object(l.mdx)("inlineCode",{parentName:"p"},"day === 'Sunday'")," evaluates to ",Object(l.mdx)("inlineCode",{parentName:"p"},"true")," the ",Object(l.mdx)("inlineCode",{parentName:"p"},"if"),"\u2018s condition will evaluate to ",Object(l.mdx)("inlineCode",{parentName:"p"},"true")," and its code block will execute. If the first condition in an ",Object(l.mdx)("inlineCode",{parentName:"p"},"||")," statement evaluates to ",Object(l.mdx)("inlineCode",{parentName:"p"},"true"),", the second condition won\u2019t even be checked. Only if ",Object(l.mdx)("inlineCode",{parentName:"p"},"day === 'Saturday'")," evaluates to ",Object(l.mdx)("inlineCode",{parentName:"p"},"false")," will ",Object(l.mdx)("inlineCode",{parentName:"p"},"day === 'Sunday'")," be evaluated. The code in the ",Object(l.mdx)("inlineCode",{parentName:"p"},"else")," statement above will execute only if both comparisons evaluate to ",Object(l.mdx)("inlineCode",{parentName:"p"},"false"),"."),Object(l.mdx)("p",null,"The ",Object(l.mdx)("inlineCode",{parentName:"p"},"!")," ",Object(l.mdx)("em",{parentName:"p"},"not operator")," reverses, or ",Object(l.mdx)("em",{parentName:"p"},"negates"),", the value of a boolean :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let excited = true;\nconsole.log(!excited); // Prints false\n\nlet sleepy = false;\nconsole.log(!sleepy); // Prints true\n")),Object(l.mdx)("p",null,"Essentially, the ",Object(l.mdx)("inlineCode",{parentName:"p"},"!")," operator will either take a ",Object(l.mdx)("inlineCode",{parentName:"p"},"true")," value and pass back ",Object(l.mdx)("inlineCode",{parentName:"p"},"false"),", or it will take a ",Object(l.mdx)("inlineCode",{parentName:"p"},"false")," value and pass back ",Object(l.mdx)("inlineCode",{parentName:"p"},"true"),". "),Object(l.mdx)("p",null,"Logical operators are often used in conditional statements to add another layer of logic to our code. "),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"Instructions")),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"1.")," In ",Object(l.mdx)("strong",{parentName:"p"},"main.js")," there are two variables ",Object(l.mdx)("inlineCode",{parentName:"p"},"mood")," and ",Object(l.mdx)("inlineCode",{parentName:"p"},"tirednessLevel"),".\nLet\u2019s create an ",Object(l.mdx)("inlineCode",{parentName:"p"},"if...else")," statement that checks if ",Object(l.mdx)("inlineCode",{parentName:"p"},"mood")," is ",Object(l.mdx)("inlineCode",{parentName:"p"},"'sleepy'")," and ",Object(l.mdx)("inlineCode",{parentName:"p"},"tirednessLevel")," is greater than ",Object(l.mdx)("inlineCode",{parentName:"p"},"8"),".\nIf both conditions evaluate to ",Object(l.mdx)("inlineCode",{parentName:"p"},"true"),", then ",Object(l.mdx)("inlineCode",{parentName:"p"},"console.log()")," the string ",Object(l.mdx)("inlineCode",{parentName:"p"},"'time to sleep'"),". Otherwise, we should ",Object(l.mdx)("inlineCode",{parentName:"p"},"console.log()")," ",Object(l.mdx)("inlineCode",{parentName:"p"},"'not bed time yet'"),".\nAfter you press \u201cRun\u201d, play around with the ",Object(l.mdx)("inlineCode",{parentName:"p"},"||")," operator and the ",Object(l.mdx)("inlineCode",{parentName:"p"},"!")," operator! What happens if you negate the value of the entire statement with ",Object(l.mdx)("inlineCode",{parentName:"p"},"!")," and switch to ",Object(l.mdx)("inlineCode",{parentName:"p"},"||")," instead of ",Object(l.mdx)("inlineCode",{parentName:"p"},"&&"),"? "),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let mood = 'sleepy';\nlet tirednessLevel = 6;\nif (mood === 'sleepy' && tirednessLevel > 8) {\n  console.log('time to sleep')\n} else {\n  console.log('not bed time yet')\n}\n")),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"06-truthy-and-falsy"},"06. Truthy and Falsy"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/control-flow/exercises/true-false-values"}),"Learn JavaScript | Codecademy")),Object(l.mdx)("p",null,"Let\u2019s consider how non-boolean data types, like strings or numbers, are evaluated when checked inside a condition. "),Object(l.mdx)("p",null,"Sometimes, you\u2019ll want to check if a variable exists and you won\u2019t necessarily want it to equal a specific value \u2014 you\u2019ll only check to see if the variable has been assigned a value."),Object(l.mdx)("p",null,"Here\u2019s an example :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let myVariable = 'I Exist!';\n\nif (myVariable) {\n   console.log(myVariable)\n} else {\n   console.log('The variable does not exist.')\n}\n")),Object(l.mdx)("p",null,"The code block in the ",Object(l.mdx)("inlineCode",{parentName:"p"},"if")," statement will run because ",Object(l.mdx)("inlineCode",{parentName:"p"},"myVariable")," has a  ",Object(l.mdx)("em",{parentName:"p"},"truthy")," value; even though the value of ",Object(l.mdx)("inlineCode",{parentName:"p"},"myVariable")," is not explicitly the value ",Object(l.mdx)("inlineCode",{parentName:"p"},"true"),", when used in a boolean or conditional context, it evaluates to ",Object(l.mdx)("inlineCode",{parentName:"p"},"true")," because it has been assigned a non-falsy value."),Object(l.mdx)("p",null,"So which values are ",Object(l.mdx)("em",{parentName:"p"},"falsy")," \u2014 or evaluate to ",Object(l.mdx)("inlineCode",{parentName:"p"},"false")," when checked as a condition? The list of falsy values includes :"),Object(l.mdx)("ul",null,Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("inlineCode",{parentName:"li"},"0")),Object(l.mdx)("li",{parentName:"ul"},"Empty strings like ",Object(l.mdx)("inlineCode",{parentName:"li"},'""')," or ",Object(l.mdx)("inlineCode",{parentName:"li"},"''")),Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("inlineCode",{parentName:"li"},"null")," which represent when there is no value at all"),Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("inlineCode",{parentName:"li"},"undefined")," which represent when a declared variable lacks a value"),Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("inlineCode",{parentName:"li"},"NaN"),", or Not a Number")),Object(l.mdx)("p",null,"Here\u2019s an example with numbers :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let numberOfApples = 0;\n\nif (numberOfApples){\n   console.log('Let us eat apples!');\n} else {\n   console.log('No apples left!');\n}\n\n// Prints 'No apples left!'\n")),Object(l.mdx)("p",null,"The condition evaluates to ",Object(l.mdx)("inlineCode",{parentName:"p"},"false")," because the value of the ",Object(l.mdx)("inlineCode",{parentName:"p"},"numberOfApples")," is ",Object(l.mdx)("inlineCode",{parentName:"p"},"0"),". Since ",Object(l.mdx)("inlineCode",{parentName:"p"},"0")," is a falsy value, the code block in the ",Object(l.mdx)("inlineCode",{parentName:"p"},"else")," statement will run."),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"Instructions")),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"1.")," Change the value of ",Object(l.mdx)("inlineCode",{parentName:"p"},"wordCount")," so that it is truthy. This value should still be a number.\nAfter you make this change and run your code, ",Object(l.mdx)("inlineCode",{parentName:"p"},"'Great! You've started your work!'")," should log to the console."),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let wordCount = 10;\n\nif (wordCount) {\n  console.log(\"Great! You've started your work!\");\n} else {\n  console.log('Better get to work!');\n}\n")),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"2.")," Change the value of ",Object(l.mdx)("inlineCode",{parentName:"p"},"favoritePhrase")," so that it is still a string but falsy.\nAfter you make this change and run your code, ",Object(l.mdx)("inlineCode",{parentName:"p"},"'This string is definitely empty.'")," should log to the console. "),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let favoritePhrase = '';\n\nif (favoritePhrase) {\n  console.log(\"This string doesn't seem to be empty.\");\n} else {\n  console.log('This string is definitely empty.');\n}\n")),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"07-truthy-and-falsy-assignment"},"07. Truthy and Falsy Assignment"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/control-flow/exercises/truthy-falsy-operators"}),"Learn JavaScript | Codecademy")),Object(l.mdx)("p",null,"Truthy and falsy evaluations open a world of short-hand possibilities!  "),Object(l.mdx)("p",null,"Say you have a website and want to take a user\u2019s username to make a personalized greeting. Sometimes, the user does not have an account, making the ",Object(l.mdx)("inlineCode",{parentName:"p"},"username")," variable falsy.  The code below checks if ",Object(l.mdx)("inlineCode",{parentName:"p"},"username")," is defined and assigns a default string if it is not :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let defaultName;\nif (username) {\n  defaultName = username;\n} else {\n  defaultName = 'Stranger';\n}\n")),Object(l.mdx)("p",null,"If you combine your knowledge of logical operators you can use a short-hand for the code above. In a boolean condition, JavaScript assigns the truthy value to a variable if you use the ",Object(l.mdx)("inlineCode",{parentName:"p"},"||")," operator in your assignment :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let defaultName = username || 'Stranger';\n")),Object(l.mdx)("p",null,"Because ",Object(l.mdx)("inlineCode",{parentName:"p"},"||")," or statements check the left-hand condition first, the variable ",Object(l.mdx)("inlineCode",{parentName:"p"},"defaultName")," will be assigned the actual value of ",Object(l.mdx)("inlineCode",{parentName:"p"},"username")," if is truthy, and it will be assigned the value of ",Object(l.mdx)("inlineCode",{parentName:"p"},"'Stranger'")," if ",Object(l.mdx)("inlineCode",{parentName:"p"},"username")," is falsy. This concept is also referred to as ",Object(l.mdx)("em",{parentName:"p"},"short-circuit evaluation"),". "),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"Instructions")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let tool = 'marker';\n\n// Use short circuit evaluation to assign  writingUtensil variable below:\n")),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"1.")," Let\u2019s use short-circuit evaluation to assign a value to ",Object(l.mdx)("inlineCode",{parentName:"p"},"writingUtensil"),". Do not edit ",Object(l.mdx)("inlineCode",{parentName:"p"},"tool")," yet, we\u2019ll return to ",Object(l.mdx)("inlineCode",{parentName:"p"},"tool")," in the next step.\nAssign to ",Object(l.mdx)("inlineCode",{parentName:"p"},"writingUtensil")," the value of ",Object(l.mdx)("inlineCode",{parentName:"p"},"tool")," and if ",Object(l.mdx)("inlineCode",{parentName:"p"},"tool")," is falsy, assign a default value of ",Object(l.mdx)("inlineCode",{parentName:"p"},"'pen'"),". "),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let writingUtensil = tool || 'pen';\n")),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"2.")," Notice that text ",Object(l.mdx)("inlineCode",{parentName:"p"},"'The pen is mightier than the sword'")," logged to the console. Which means the value of ",Object(l.mdx)("inlineCode",{parentName:"p"},"writingUtensil")," is ",Object(l.mdx)("inlineCode",{parentName:"p"},"'pen'"),".\nWhat if we reassign the value of ",Object(l.mdx)("inlineCode",{parentName:"p"},"tool")," to ",Object(l.mdx)("inlineCode",{parentName:"p"},"'marker'"),". Let\u2019s see what happens to the value of ",Object(l.mdx)("inlineCode",{parentName:"p"},"writingUtensil"),". "),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"console.log(`The ${writingUtensil} is mightier than the sword.`);\n")),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"08-ternary-operator"},"08. Ternary Operator"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/control-flow/exercises/ternary-operator"}),"Learn JavaScript | Codecademy")),Object(l.mdx)("p",null,"In the spirit of using short-hand syntax, we can use a ",Object(l.mdx)("em",{parentName:"p"},"ternary operator")," to simplify an ",Object(l.mdx)("inlineCode",{parentName:"p"},"if...else")," statement. "),Object(l.mdx)("p",null,"Take a look at the ",Object(l.mdx)("inlineCode",{parentName:"p"},"if...else")," statement example :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let isNightTime = true;\n\nif (isNightTime) {\n  console.log('Turn on the lights!');\n} else {\n  console.log('Turn off the lights!');\n}\n")),Object(l.mdx)("p",null,"We can use a ",Object(l.mdx)("em",{parentName:"p"},"ternary operator")," to perform the same functionality : "),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"isNightTime ? console.log('Turn on the lights!') : console.log('Turn off the lights!');\n")),Object(l.mdx)("p",null,"In the example above :"),Object(l.mdx)("ul",null,Object(l.mdx)("li",{parentName:"ul"},"The condition, ",Object(l.mdx)("inlineCode",{parentName:"li"},"isNightTime"),", is provided before the ",Object(l.mdx)("inlineCode",{parentName:"li"},"?"),"."),Object(l.mdx)("li",{parentName:"ul"},"Two expressions follow the ",Object(l.mdx)("inlineCode",{parentName:"li"},"?")," and are separated by a colon ",Object(l.mdx)("inlineCode",{parentName:"li"},":"),"."),Object(l.mdx)("li",{parentName:"ul"},"If the condition evaluates to ",Object(l.mdx)("inlineCode",{parentName:"li"},"true"),", the first expression executes."),Object(l.mdx)("li",{parentName:"ul"},"If the condition evaluates to ",Object(l.mdx)("inlineCode",{parentName:"li"},"false"),", the second expression executes. ")),Object(l.mdx)("p",null,"Like ",Object(l.mdx)("inlineCode",{parentName:"p"},"if...else")," statements, ternary operators can be used for conditions which evaluate to ",Object(l.mdx)("inlineCode",{parentName:"p"},"true")," or ",Object(l.mdx)("inlineCode",{parentName:"p"},"false"),"."),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"Instructions")),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"1.")," Refactor, or edit, the first ",Object(l.mdx)("inlineCode",{parentName:"p"},"if...else")," block to use a ternary operator. "),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let isLocked = false;\n\nif (isLocked) {\n  console.log('You will need a key to open the door.');\n} else {\n  console.log('You will not need a key to open the door.');\n}\n")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"isLocked ? console.log('You will need a key to open the door.') : console.log('You will not need a key to open the door.');\n")),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"2.")," Refactor the second ",Object(l.mdx)("inlineCode",{parentName:"p"},"if...else")," block to use a ternary operator. "),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let isCorrect = true;\n\nif (isCorrect) {\n  console.log('Correct!');\n} else {\n  console.log('Incorrect!');\n}\n")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"isCorrect ? console.log('Correct!') : console.log('Incorrect!');\n")),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"3.")," Refactor the third ",Object(l.mdx)("inlineCode",{parentName:"p"},"if...else")," block to use a ternary operator. "),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let favoritePhrase = 'Love That!';\n\nif (favoritePhrase === 'Love That!') {\n  console.log('I love that!');\n} else {\n  console.log(\"I don't love that!\");\n}\n")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"favoritePhrase === 'Love That!' ? console.log('I love that!') : console.log(\"I don't love that!\");\n")),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"09-else-if-statements"},"09. Else If Statements"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/control-flow/exercises/else-if"}),"Learn JavaScript | Codecademy")),Object(l.mdx)("p",null,"We can add more conditions to our ",Object(l.mdx)("inlineCode",{parentName:"p"},"if...else")," with an ",Object(l.mdx)("inlineCode",{parentName:"p"},"else if")," statement. The ",Object(l.mdx)("inlineCode",{parentName:"p"},"else if")," statement allows for more than two possible outcomes. You can add as many ",Object(l.mdx)("inlineCode",{parentName:"p"},"else if")," statements as you\u2019d like, to make more complex conditionals !\nThe ",Object(l.mdx)("inlineCode",{parentName:"p"},"else if")," statement always comes after the ",Object(l.mdx)("inlineCode",{parentName:"p"},"if")," statement and before the ",Object(l.mdx)("inlineCode",{parentName:"p"},"else")," statement. The ",Object(l.mdx)("inlineCode",{parentName:"p"},"else if")," statement also takes a condition. Let\u2019s take a look at the syntax :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let stopLight = 'yellow';\n\nif (stopLight === 'red') {\n  console.log('Stop!');\n} else if (stopLight === 'yellow') {\n  console.log('Slow down.');\n} else if (stopLight === 'green') {\n  console.log('Go!');\n} else {\n  console.log('Caution, unknown!');\n}\n")),Object(l.mdx)("p",null,"The ",Object(l.mdx)("inlineCode",{parentName:"p"},"else if")," statements allow you to have multiple possible outcomes. ",Object(l.mdx)("inlineCode",{parentName:"p"},"if"),"/",Object(l.mdx)("inlineCode",{parentName:"p"},"else if"),"/",Object(l.mdx)("inlineCode",{parentName:"p"},"else")," statements are read from top to bottom, so the first condition that evaluates to ",Object(l.mdx)("inlineCode",{parentName:"p"},"true")," from the top to bottom is the block that gets executed. "),Object(l.mdx)("p",null,"In the example above, since ",Object(l.mdx)("inlineCode",{parentName:"p"},"stopLight === 'red'")," evaluates to ",Object(l.mdx)("inlineCode",{parentName:"p"},"false")," and ",Object(l.mdx)("inlineCode",{parentName:"p"},"stopLight === 'yellow'")," evaluates to ",Object(l.mdx)("inlineCode",{parentName:"p"},"true"),", the code inside the first ",Object(l.mdx)("inlineCode",{parentName:"p"},"else if")," statement is executed. The rest of the conditions are not evaluated. If none of the conditions evaluated to ",Object(l.mdx)("inlineCode",{parentName:"p"},"true"),", then the code in the ",Object(l.mdx)("inlineCode",{parentName:"p"},"else")," statement would have executed. "),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"Instructions")),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"1.")," Let\u2019s create a program that keeps track of the way the environment changes with the seasons. Write a conditional statement to make this happen !\nIn ",Object(l.mdx)("strong",{parentName:"p"},"main.js")," there is already an ",Object(l.mdx)("inlineCode",{parentName:"p"},"if...else")," statement in place. Let\u2019s add an ",Object(l.mdx)("inlineCode",{parentName:"p"},"else if")," statement that checks if ",Object(l.mdx)("inlineCode",{parentName:"p"},"season")," is equal to ",Object(l.mdx)("inlineCode",{parentName:"p"},"'winter'"),".\nInside the code block of the ",Object(l.mdx)("inlineCode",{parentName:"p"},"else if")," statement, add a ",Object(l.mdx)("inlineCode",{parentName:"p"},"console.log()")," that prints the string ",Object(l.mdx)("inlineCode",{parentName:"p"},"'It\\'s winter! Everything is covered in snow.'"),"."),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"2.")," Add another ",Object(l.mdx)("inlineCode",{parentName:"p"},"else if")," statement that checks if ",Object(l.mdx)("inlineCode",{parentName:"p"},"season")," is equal to ",Object(l.mdx)("inlineCode",{parentName:"p"},"'fall'"),".\nInside the code block of the ",Object(l.mdx)("inlineCode",{parentName:"p"},"else if")," statement you just created, add a ",Object(l.mdx)("inlineCode",{parentName:"p"},"console.log()")," that prints the string ",Object(l.mdx)("inlineCode",{parentName:"p"},"'It\\'s fall! Leaves are falling!'"),"."),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"3.")," Add a final ",Object(l.mdx)("inlineCode",{parentName:"p"},"else if")," statement that checks if ",Object(l.mdx)("inlineCode",{parentName:"p"},"season")," is equal to ",Object(l.mdx)("inlineCode",{parentName:"p"},"'summer'"),".\nInside the code block of the ",Object(l.mdx)("inlineCode",{parentName:"p"},"else if")," statement you just created, add a ",Object(l.mdx)("inlineCode",{parentName:"p"},"console.log()")," that prints the string ",Object(l.mdx)("inlineCode",{parentName:"p"},"'It\\'s sunny and warm because it\\'s summer!'"),"."),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let season = 'summer';\n\nif (season === 'spring') {\n  console.log('It\\'s spring! The trees are budding!');\n} else if (season === 'winter') {\n  console.log('It\\'s winter! Everything is covered in snow.');\n} else if (season === 'fall') {\n  console.log('It\\'s fall! Leaves are falling!');\n} else if (season === 'summer') {\n  console.log('It\\'s sunny and warm because it\\'s summer!');\n} else {\n  console.log('Invalid season.');\n}\n")),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"10-the-switch-keyword"},"10. The switch keyword"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/control-flow/exercises/switch"}),"Learn JavaScript | Codecademy")),Object(l.mdx)("p",null,Object(l.mdx)("inlineCode",{parentName:"p"},"else if")," statements are a great tool if we need to check multiple conditions. In programming, we often find ourselves needing to check multiple values and handling each of them differently. For example :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let groceryItem = 'papaya';\n\nif (groceryItem === 'tomato') {\n  console.log('Tomatoes are $0.49');\n} else if (groceryItem === 'papaya'){\n  console.log('Papayas are $1.29');\n} else {\n  console.log('Invalid item');\n}\n")),Object(l.mdx)("p",null,"In the code above, we have a series of conditions checking for a value that matches a  ",Object(l.mdx)("inlineCode",{parentName:"p"},"groceryItem")," variable. Our code works fine, but imagine if we needed to check 100 different values! Having to write that many ",Object(l.mdx)("inlineCode",{parentName:"p"},"else if")," statements sounds like a pain !\nA ",Object(l.mdx)("inlineCode",{parentName:"p"},"switch")," statement provides an alternative syntax that is easier to read and write. A ",Object(l.mdx)("inlineCode",{parentName:"p"},"switch")," statement looks like this :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let groceryItem = 'papaya';\n\nswitch (groceryItem) {\n  case 'tomato':\n    console.log('Tomatoes are $0.49');\n    break;\n  case 'lime':\n    console.log('Limes are $1.49');\n    break;\n  case 'papaya':\n    console.log('Papayas are $1.29');\n    break;\n  default:\n    console.log('Invalid item');\n    break;\n}\n\n// Prints 'Papayas are $1.29'\n")),Object(l.mdx)("ul",null,Object(l.mdx)("li",{parentName:"ul"},"The ",Object(l.mdx)("inlineCode",{parentName:"li"},"switch")," keyword initiates the statement and is followed by ",Object(l.mdx)("inlineCode",{parentName:"li"},"( ... )"),", which contains the value that each ",Object(l.mdx)("inlineCode",{parentName:"li"},"case")," will compare. In the example, the value or expression of the ",Object(l.mdx)("inlineCode",{parentName:"li"},"switch")," statement is ",Object(l.mdx)("inlineCode",{parentName:"li"},"groceryItem"),"."),Object(l.mdx)("li",{parentName:"ul"},"Inside the block, ",Object(l.mdx)("inlineCode",{parentName:"li"},"{ ... }"),", there are multiple ",Object(l.mdx)("inlineCode",{parentName:"li"},"case"),"s. The ",Object(l.mdx)("inlineCode",{parentName:"li"},"case")," keyword checks if the expression matches the specified value that comes after it. The value following the first ",Object(l.mdx)("inlineCode",{parentName:"li"},"case")," is ",Object(l.mdx)("inlineCode",{parentName:"li"},"'tomato'"),". If the value of ",Object(l.mdx)("inlineCode",{parentName:"li"},"groceryItem")," equalled ",Object(l.mdx)("inlineCode",{parentName:"li"},"'tomato'"),", that ",Object(l.mdx)("inlineCode",{parentName:"li"},"case"),"\u2018s ",Object(l.mdx)("inlineCode",{parentName:"li"},"console.log()")," would run."),Object(l.mdx)("li",{parentName:"ul"},"The value of ",Object(l.mdx)("inlineCode",{parentName:"li"},"groceryItem")," is ",Object(l.mdx)("inlineCode",{parentName:"li"},"'papaya'"),", so the third ",Object(l.mdx)("inlineCode",{parentName:"li"},"case")," runs\u2014 ",Object(l.mdx)("inlineCode",{parentName:"li"},"Papayas are $1.29")," is logged to the console."),Object(l.mdx)("li",{parentName:"ul"},"The ",Object(l.mdx)("inlineCode",{parentName:"li"},"break")," keyword tells the computer to exit the block and not execute any more code or check any other cases inside the code block. Note: Without ",Object(l.mdx)("inlineCode",{parentName:"li"},"break")," keywords, the first matching case will run, but so will every subsequent case regardless of whether or not it matches\u2014including the default. This behavior is different from ",Object(l.mdx)("inlineCode",{parentName:"li"},"if"),"/",Object(l.mdx)("inlineCode",{parentName:"li"},"else")," conditional statements that execute only one block of code. "),Object(l.mdx)("li",{parentName:"ul"},"At the end of each ",Object(l.mdx)("inlineCode",{parentName:"li"},"switch")," statement, there is a ",Object(l.mdx)("inlineCode",{parentName:"li"},"default")," statement. If none of the ",Object(l.mdx)("inlineCode",{parentName:"li"},"case"),"s are true, then the code in the ",Object(l.mdx)("inlineCode",{parentName:"li"},"default")," statement will run.")),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"Instructions")),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"1.")," Let\u2019s write a ",Object(l.mdx)("inlineCode",{parentName:"p"},"switch")," statement to decide what medal to award an athlete.\n",Object(l.mdx)("inlineCode",{parentName:"p"},"athleteFinalPosition")," is already defined at the top of ",Object(l.mdx)("strong",{parentName:"p"},"main.js"),". So start by writing a ",Object(l.mdx)("inlineCode",{parentName:"p"},"switch")," statement with ",Object(l.mdx)("inlineCode",{parentName:"p"},"athleteFinalPosition")," as its expression. "),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"2.")," Inside the ",Object(l.mdx)("inlineCode",{parentName:"p"},"switch")," statement, add three ",Object(l.mdx)("inlineCode",{parentName:"p"},"case"),"s :"),Object(l.mdx)("ul",null,Object(l.mdx)("li",{parentName:"ul"},"The first ",Object(l.mdx)("inlineCode",{parentName:"li"},"case")," checks for the value ",Object(l.mdx)("inlineCode",{parentName:"li"},"'first place'"),Object(l.mdx)("ul",{parentName:"li"},Object(l.mdx)("li",{parentName:"ul"},"If the expression\u2019s value matches the value of the ",Object(l.mdx)("inlineCode",{parentName:"li"},"case")," then ",Object(l.mdx)("inlineCode",{parentName:"li"},"console.log()")," the string ",Object(l.mdx)("inlineCode",{parentName:"li"},"'You get the gold medal!'")))),Object(l.mdx)("li",{parentName:"ul"},"The second ",Object(l.mdx)("inlineCode",{parentName:"li"},"case")," checks for the value ",Object(l.mdx)("inlineCode",{parentName:"li"},"'second place'"),Object(l.mdx)("ul",{parentName:"li"},Object(l.mdx)("li",{parentName:"ul"},"If the expression\u2019s  value matches the value of the ",Object(l.mdx)("inlineCode",{parentName:"li"},"case")," then ",Object(l.mdx)("inlineCode",{parentName:"li"},"console.log()")," the string ",Object(l.mdx)("inlineCode",{parentName:"li"},"'You get the silver medal!'")))),Object(l.mdx)("li",{parentName:"ul"},"The third ",Object(l.mdx)("inlineCode",{parentName:"li"},"case")," checks for the value ",Object(l.mdx)("inlineCode",{parentName:"li"},"'third place'"),Object(l.mdx)("ul",{parentName:"li"},Object(l.mdx)("li",{parentName:"ul"},"If the expression\u2019s  value matches the value of the ",Object(l.mdx)("inlineCode",{parentName:"li"},"case")," then ",Object(l.mdx)("inlineCode",{parentName:"li"},"console.log()")," the string ",Object(l.mdx)("inlineCode",{parentName:"li"},"'You get the bronze medal!'"))))),Object(l.mdx)("p",null,"Remember to add a ",Object(l.mdx)("inlineCode",{parentName:"p"},"break")," after each ",Object(l.mdx)("inlineCode",{parentName:"p"},"console.log()"),"."),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"3.")," Now, add a ",Object(l.mdx)("inlineCode",{parentName:"p"},"default")," statement at the end of the ",Object(l.mdx)("inlineCode",{parentName:"p"},"switch")," that uses ",Object(l.mdx)("inlineCode",{parentName:"p"},"console.log()")," to print ",Object(l.mdx)("inlineCode",{parentName:"p"},"'No medal awarded.'"),".\nIf ",Object(l.mdx)("inlineCode",{parentName:"p"},"athleteFinalPosition")," does not equal any value of our ",Object(l.mdx)("inlineCode",{parentName:"p"},"case"),"s, then the string ",Object(l.mdx)("inlineCode",{parentName:"p"},"'No medal awarded.'")," is logged to the console.\nRemember to add the ",Object(l.mdx)("inlineCode",{parentName:"p"},"break")," keyword at the end of the ",Object(l.mdx)("inlineCode",{parentName:"p"},"default")," case. "),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let athleteFinalPosition = 'first place';\n\nswitch (athleteFinalPosition) {\n  case 'first place':\n    console.log('You get the gold medal!');\n    break;\n  case 'second place':\n    console.log('You get the silver medal!');\n    break;\n  case 'third place':\n    console.log('You get the bronze medal!');\n    break;\n  default:\n    console.log('No medal awarded.');\n    break;\n}\n")),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"11-review"},"11. Review"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/control-flow/exercises/review-control-flow"}),"Learn JavaScript | Codecademy")),Object(l.mdx)("p",null,"Way to go ! Here are some of the major concepts for conditionals :"),Object(l.mdx)("ul",null,Object(l.mdx)("li",{parentName:"ul"},"An ",Object(l.mdx)("inlineCode",{parentName:"li"},"if")," statement checks a condition and will execute a task if that condition evaluates to ",Object(l.mdx)("inlineCode",{parentName:"li"},"true"),"."),Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("inlineCode",{parentName:"li"},"if...else")," statements make binary decisions and execute different code blocks based on a provided condition."),Object(l.mdx)("li",{parentName:"ul"},"We can add more conditions using ",Object(l.mdx)("inlineCode",{parentName:"li"},"else if")," statements."),Object(l.mdx)("li",{parentName:"ul"},"Comparison operators, including ",Object(l.mdx)("inlineCode",{parentName:"li"},"<"),", ",Object(l.mdx)("inlineCode",{parentName:"li"},">"),", ",Object(l.mdx)("inlineCode",{parentName:"li"},"<="),", ",Object(l.mdx)("inlineCode",{parentName:"li"},">="),", ",Object(l.mdx)("inlineCode",{parentName:"li"},"==="),", and ",Object(l.mdx)("inlineCode",{parentName:"li"},"!==")," can compare two values."),Object(l.mdx)("li",{parentName:"ul"},"The logical and operator, ",Object(l.mdx)("inlineCode",{parentName:"li"},"&&"),", or \u201cand\u201d, checks if both provided expressions are truthy."),Object(l.mdx)("li",{parentName:"ul"},"The logical operator ",Object(l.mdx)("inlineCode",{parentName:"li"},"||"),", or \u201cor\u201d, checks if either provided expression is truthy."),Object(l.mdx)("li",{parentName:"ul"},"The bang operator, ",Object(l.mdx)("inlineCode",{parentName:"li"},"!"),", switches the truthiness and falsiness of a value."),Object(l.mdx)("li",{parentName:"ul"},"The ternary operator is shorthand to simplify concise ",Object(l.mdx)("inlineCode",{parentName:"li"},"if...else")," statements. "),Object(l.mdx)("li",{parentName:"ul"},"A ",Object(l.mdx)("inlineCode",{parentName:"li"},"switch")," statement can be used to simplify the process of writing multiple ",Object(l.mdx)("inlineCode",{parentName:"li"},"else if")," statements. The ",Object(l.mdx)("inlineCode",{parentName:"li"},"break")," keyword stops the remaining ",Object(l.mdx)("inlineCode",{parentName:"li"},"case"),"s from being checked and executed in a ",Object(l.mdx)("inlineCode",{parentName:"li"},"switch")," statement.")),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"Instructions")),Object(l.mdx)("p",null,"In ",Object(l.mdx)("strong",{parentName:"p"},"main.js"),", practice the skills you learned in this lesson."))}c.isMDXComponent=!0},212:function(e,t,n){"use strict";n.r(t),n.d(t,"MDXContext",(function(){return c})),n.d(t,"MDXProvider",(function(){return b})),n.d(t,"mdx",(function(){return O})),n.d(t,"useMDXComponents",(function(){return p})),n.d(t,"withMDXComponents",(function(){return s}));var a=n(0),o=n.n(a);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=o.a.createContext({}),s=function(e){return function(t){var n=p(t.components);return o.a.createElement(e,i({},t,{components:n}))}},p=function(e){var t=o.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):d(d({},t),e)),n},b=function(e){var t=p(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},j=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,r=m(e,["components","mdxType","originalType","parentName"]),c=p(n),s=a,b=c["".concat(i,".").concat(s)]||c[s]||u[s]||l;return n?o.a.createElement(b,d(d({ref:t},r),{},{components:n})):o.a.createElement(b,d({ref:t},r))}));function O(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=j;var r={};for(var d in t)hasOwnProperty.call(t,d)&&(r[d]=t[d]);r.originalType=e,r.mdxType="string"==typeof e?e:a,i[1]=r;for(var m=2;m<l;m++)i[m]=n[m];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}j.displayName="MDXCreateElement"}}]);
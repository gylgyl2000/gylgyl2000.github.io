(window.webpackJsonp=window.webpackJsonp||[]).push([[132],{202:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return s})),a.d(t,"rightToc",(function(){return c})),a.d(t,"default",(function(){return d}));var n=a(3),r=a(7),l=(a(0),a(212)),i={id:"guide_JS-02",title:"Types et grammaire"},s={unversionedId:"MDN-web-docs/guide_JS-02",id:"MDN-web-docs/guide_JS-02",isDocsHomePage:!1,title:"Types et grammaire",description:"Ce chapitre d\xe9crit les bases de la grammaire et des types de donn\xe9es JavaScript.",source:"@site/docs/MDN-web-docs/guide_JS-02.md",slug:"/MDN-web-docs/guide_JS-02",permalink:"/docs/MDN-web-docs/guide_JS-02",editUrl:"https://github.com/gylgyl2000/laloutre.github.io/edit/main/docs/MDN-web-docs/guide_JS-02.md",version:"current",sidebar:"docs",previous:{title:"Introduction",permalink:"/docs/MDN-web-docs/guide_JS-01"},next:{title:"Contr\xf4le du flux d'instructions et gestion des erreurs",permalink:"/docs/MDN-web-docs/guide_JS-03"}},c=[{value:"Les bases du langage",id:"les-bases-du-langage",children:[]},{value:"Commentaires",id:"commentaires",children:[]},{value:"D\xe9clarations",id:"d\xe9clarations",children:[{value:"Variables",id:"variables",children:[]},{value:"D\xe9claration de variables",id:"d\xe9claration-de-variables",children:[]},{value:"\xc9valuation de variables",id:"\xe9valuation-de-variables",children:[]},{value:"Les port\xe9es de variables",id:"les-port\xe9es-de-variables",children:[]},{value:"Remont\xe9e de variables (<em>hoisting</em>)",id:"remont\xe9e-de-variables-hoisting",children:[]},{value:"Remont\xe9e de fonctions",id:"remont\xe9e-de-fonctions",children:[]},{value:"Les variables globales",id:"les-variables-globales",children:[]},{value:"Constantes",id:"constantes",children:[]}]},{value:"Structures de donn\xe9es et types",id:"structures-de-donn\xe9es-et-types",children:[{value:"Types de donn\xe9es",id:"types-de-donn\xe9es",children:[]},{value:"Conversion de types de donn\xe9es",id:"conversion-de-types-de-donn\xe9es",children:[]},{value:"Conversion de cha\xeenes de caract\xe8res en nombres",id:"conversion-de-cha\xeenes-de-caract\xe8res-en-nombres",children:[]}]},{value:"Litt\xe9raux",id:"litt\xe9raux",children:[{value:"Les litt\xe9raux de tableaux",id:"les-litt\xe9raux-de-tableaux",children:[]},{value:"Les litt\xe9raux bool\xe9ens",id:"les-litt\xe9raux-bool\xe9ens",children:[]},{value:"Les litt\xe9raux num\xe9riques",id:"les-litt\xe9raux-num\xe9riques",children:[]},{value:"Les litt\xe9raux de nombres d\xe9cimaux",id:"les-litt\xe9raux-de-nombres-d\xe9cimaux",children:[]},{value:"Les litt\xe9raux d&#39;objets",id:"les-litt\xe9raux-dobjets",children:[]},{value:"Les litt\xe9raux d&#39;expressions rationnelles",id:"les-litt\xe9raux-dexpressions-rationnelles",children:[]},{value:"Les litt\xe9raux de cha\xeenes de caract\xe8res",id:"les-litt\xe9raux-de-cha\xeenes-de-caract\xe8res",children:[]}]},{value:"En savoir plus",id:"en-savoir-plus",children:[]}],o={rightToc:c};function d(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(l.mdx)("wrapper",Object(n.a)({},o,a,{components:t,mdxType:"MDXLayout"}),Object(l.mdx)("p",null,"Ce chapitre d\xe9crit les bases de la grammaire et des types de donn\xe9es JavaScript."),Object(l.mdx)("h2",{id:"les-bases-du-langage"},"Les bases du langage"),Object(l.mdx)("p",null,"JavaScript emprunte la plupart des \xe9l\xe9ments de sa syntaxe \xe0 Java, C et C++ mais sa syntaxe est \xe9galement influenc\xe9e par Awk, Perl et Python."),Object(l.mdx)("p",null,"JavaScript est ",Object(l.mdx)("strong",{parentName:"p"},"sensible \xe0 la casse")," et utilise l'ensemble de caract\xe8res ",Object(l.mdx)("strong",{parentName:"p"},"Unicode"),". On pourrait donc tout \xe0 fait utiliser le mot fr\xfch comme nom de variable :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'var fr\xfch = "toto";\ntypeof Fr\xfch; // undefined car JavaScript est sensible \xe0 la casse\n')),Object(l.mdx)("p",null,"En JavaScript, les instructions sont appel\xe9es (",Object(l.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Glossaire/Statement"}),"statements"),") et sont s\xe9par\xe9es par des points-virgules."),Object(l.mdx)("p",null,"Il n'est pas n\xe9cessaire d'inclure un point-virgule si l'on \xe9crit une instruction sur une nouvelle ligne. Mais si vous voulez \xe9crire plus d'une d\xe9claration sur une seule ligne, alors elles doivent \xeatre s\xe9par\xe9es par un point-virgule. Ceci \xe9tant dit, la bonne pratique est d'inclure un point-virgule apr\xe8s chaque instruction. Les espaces, les tabulations et les caract\xe8res de nouvelles lignes sont consid\xe9r\xe9s comme des blancs. Il existe aussi un ensemble de r\xe8gles pour ajouter automatiquement des points-virgules \xe0 la fin des instructions (",Object(l.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Grammaire_lexicale#Insertion_automatique_de_points-virgules"}),"ASI")," pour ",Object(l.mdx)("em",{parentName:"p"},"Automatic Semicolon Insertion"),"). Cependant, il est conseill\xe9 de toujours ajouter des points-virgules \xe0 la fin des instructions afin d'\xe9viter des effets de bord n\xe9fastes."),Object(l.mdx)("p",null,"Le texte d'un code source JavaScript est analys\xe9 de gauche \xe0 droite et est converti en une s\xe9rie d'unit\xe9s lexicales, de caract\xe8res de contr\xf4le, de fins de lignes, de commentaires et de blancs. ECMAScript d\xe9finit \xe9galement certains mots-cl\xe9s et litt\xe9raux. Pour plus d'informations, voir la page sur ",Object(l.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Grammaire_lexicale"}),"la grammaire lexicale de JavaScript")," dans la r\xe9f\xe9rence JavaScript."),Object(l.mdx)("h2",{id:"commentaires"},"Commentaires"),Object(l.mdx)("p",null,"La syntaxe utilis\xe9e pour ",Object(l.mdx)("strong",{parentName:"p"},"les commentaires")," est la m\xeame que celle utilis\xe9e par le C++ et d'autres langages :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"// un commentaire sur une ligne\n\n/* un commentaire plus \n   long sur plusieurs lignes\n */ \n\n/* Par contre on ne peut pas /* imbriquer des commentaires */ SyntaxError */\n")),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"Note :")," Vous pourrez \xe9galement rencontrer une troisi\xe8me forme de commentaires au d\xe9but de certains fichiers JavaScript comme ",Object(l.mdx)("inlineCode",{parentName:"p"},"#!/usr/bin/env node"),". Ce type de commentaire indique le chemin d'un interpr\xe9teur JavaScript sp\xe9cifique pour ex\xe9cuter le script. Pour plus de d\xe9tails, voir la page sur ",Object(l.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Grammaire_lexicale#Commentaire_d'environnement_(hashbang)"}),"les commentaires d'environnement"),"."),Object(l.mdx)("h2",{id:"d\xe9clarations"},"D\xe9clarations"),Object(l.mdx)("p",null,"Il existe trois types de d\xe9clarations de variable en JavaScript."),Object(l.mdx)("ul",null,Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("p",{parentName:"li"},Object(l.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Instructions/var"}),Object(l.mdx)("inlineCode",{parentName:"a"},"var"))),Object(l.mdx)("p",{parentName:"li"},"On d\xe9clare une variable, \xe9ventuellement en initialisant sa valeur.")),Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("p",{parentName:"li"},Object(l.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Instructions/let"}),Object(l.mdx)("inlineCode",{parentName:"a"},"let"))),Object(l.mdx)("p",{parentName:"li"},"On d\xe9clare une variable dont la port\xe9e est celle du bloc courant, \xe9ventuellement en initialisant sa valeur.")),Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("p",{parentName:"li"},Object(l.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Instructions/const"}),Object(l.mdx)("inlineCode",{parentName:"a"},"const"))),Object(l.mdx)("p",{parentName:"li"},"On d\xe9clare une constante nomm\xe9e, dont la port\xe9e est celle du bloc courant, accessible en lecture seule."))),Object(l.mdx)("h3",{id:"variables"},"Variables"),Object(l.mdx)("p",null,"Les variables sont utilis\xe9es comme des noms symboliques d\xe9signant les valeurs utilis\xe9es dans l'application. Les noms des variables sont appel\xe9s ",Object(l.mdx)("em",{parentName:"p"},"identifiants"),". Ces identifiants doivent respecter certaines r\xe8gles."),Object(l.mdx)("p",null,"Un identifiant JavaScript doit commencer par une lettre, un tiret bas (_) ou un symbole dollar ($). Les caract\xe8res qui suivent peuvent \xeatre des chiffres (0 \xe0 9).\n\xc0 noter: puisque Javascript est sensible aux majuscules et minuscules: les lettres peuvent comprendre les caract\xe8res de \xab A \xbb \xe0 \xab Z \xbb (en majuscule) mais aussi les caract\xe8res de \xab a \xbb \xe0 \xab z \xbb (en minuscule)."),Object(l.mdx)("p",null,"On peut aussi utiliser la plupart lettres Unicode ou ISO 8859-1 (comme \xe5 et \xfc, pour plus de d\xe9tails, voir ",Object(l.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://mathiasbynens.be/notes/javascript-identifiers-es6"}),"ce billet de blog, en anglais"),") au sein des identifiants. Il est \xe9galement possible d'utiliser les \\uXXXX ","[s\xe9quences d'\xe9chappement Unicode]","(",Object(l.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Types_et_grammaire#litt%C3%A9raux"}),"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Types_et_grammaire#litt\xe9raux")," cha\xeenes) comme caract\xe8res dans les identifiants."),Object(l.mdx)("p",null,"Voici des exemples d'identifiants valides : ",Object(l.mdx)("inlineCode",{parentName:"p"},"Nombre_touches"),", ",Object(l.mdx)("inlineCode",{parentName:"p"},"temp99"),", ",Object(l.mdx)("inlineCode",{parentName:"p"},"$credit"),", et ",Object(l.mdx)("inlineCode",{parentName:"p"},"_nom"),"."),Object(l.mdx)("h3",{id:"d\xe9claration-de-variables"},"D\xe9claration de variables"),Object(l.mdx)("p",null,"Il est possible de d\xe9clarer des variables de plusieurs fa\xe7ons :"),Object(l.mdx)("ul",null,Object(l.mdx)("li",{parentName:"ul"},"En utilisant le mot-cl\xe9 ",Object(l.mdx)("a",Object(n.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Instructions/var"}),Object(l.mdx)("inlineCode",{parentName:"a"},"var")),", par exemple : ",Object(l.mdx)("inlineCode",{parentName:"li"},"var x = 42"),". Cette syntaxe peut \xeatre utilis\xe9e pour d\xe9clarer des variables ",Object(l.mdx)("a",Object(n.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Types_et_grammaire#Port%C3%A9es"}),"locales ou globales")," selon le contexte d'ex\xe9cution."),Object(l.mdx)("li",{parentName:"ul"},"En utilisant le mot-cl\xe9 ",Object(l.mdx)("a",Object(n.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Instructions/const"}),Object(l.mdx)("inlineCode",{parentName:"a"},"const"))," ou le mot-cl\xe9 ",Object(l.mdx)("a",Object(n.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Instructions/let"}),Object(l.mdx)("inlineCode",{parentName:"a"},"let")),", par exemple avec ",Object(l.mdx)("inlineCode",{parentName:"li"},"let y = 13"),". Cette syntaxe peut \xeatre utilis\xe9e pour d\xe9clarer une variable dont la port\xe9e sera celle du bloc. Voir le paragraphe sur ",Object(l.mdx)("a",Object(n.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Types_et_grammaire#Port%C3%A9es"}),"les port\xe9es des variables")," ci-apr\xe8s.")),Object(l.mdx)("p",null,"Il est \xe9galement possible d'affecter une valeur \xe0 une variable sans utiliser de mot-cl\xe9 (ex. ",Object(l.mdx)("inlineCode",{parentName:"p"},"x = 42"),"). Cela cr\xe9era une variable globale non-d\xe9clar\xe9e. Cette forme g\xe9n\xe8rera \xe9galement un avertissement avec ",Object(l.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Strict_mode"}),"le mode strict"),". Attention, les variables globales non-d\xe9clar\xe9es peuvent mener \xe0 des comportements inattendus et sont consid\xe9r\xe9es comme une mauvaise pratique."),Object(l.mdx)("h3",{id:"\xe9valuation-de-variables"},"\xc9valuation de variables"),Object(l.mdx)("p",null,"Une variable d\xe9clar\xe9e gr\xe2ce \xe0 l'instruction ",Object(l.mdx)("inlineCode",{parentName:"p"},"var")," ou ",Object(l.mdx)("inlineCode",{parentName:"p"},"let")," sans valeur initiale d\xe9finie vaudra ",Object(l.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/undefined"}),Object(l.mdx)("inlineCode",{parentName:"a"},"undefined")),"."),Object(l.mdx)("p",null,"Tenter d'acc\xe9der \xe0 une variable qui n'a pas \xe9t\xe9 d\xe9clar\xe9e ou tenter d'acc\xe9der \xe0 un identifiant d\xe9clar\xe9 avec ",Object(l.mdx)("inlineCode",{parentName:"p"},"let")," avant son initialisation provoquera l'envoi d'une exception ",Object(l.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/ReferenceError"}),Object(l.mdx)("inlineCode",{parentName:"a"},"ReferenceError")),"."),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'var a;\nconsole.log("La valeur de a est " + a); // La valeur de a est undefined\n\nconsole.log("La valeur de b est " + b); // La valeur de b est undefined \nvar b; // La d\xe9claration de la variable est "remont\xe9e" (voir la section ci-apr\xe8s)\n\nconsole.log("La valeur de x est " + x); // signale une exception ReferenceError\nlet x;\nlet y;\nconsole.log("La valeur de y est " + y); // La valeur de y est undefined\n')),Object(l.mdx)("p",null,"Il est possible d'utiliser ",Object(l.mdx)("inlineCode",{parentName:"p"},"undefined")," pour d\xe9terminer si une variable poss\xe8de une valeur. Dans l'exemple qui suit, la condition de l'instruction ",Object(l.mdx)("inlineCode",{parentName:"p"},"if")," sera valid\xe9e car la variable n'a pas \xe9t\xe9 initialis\xe9e (elle a simplement \xe9t\xe9 d\xe9clar\xe9e) :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"var input;\nif (input === undefined){\n  faireCeci();\n} else {\n  faireCela();\n}\n")),Object(l.mdx)("p",null,"La valeur ",Object(l.mdx)("inlineCode",{parentName:"p"},"undefined")," se comporte comme le bool\xe9en ",Object(l.mdx)("inlineCode",{parentName:"p"},"false")," lorsqu'elle est utilis\xe9e dans un contexte bool\xe9en. Ainsi, le fragment de code qui suit ex\xe9cutera la fonction ",Object(l.mdx)("inlineCode",{parentName:"p"},"maFonction")," puisque le premier \xe9l\xe9ment de ",Object(l.mdx)("inlineCode",{parentName:"p"},"monTableau")," n'est pas d\xe9fini :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"var monTableau = new Array();\nif (!monTableau[0]){\n  maFunction(); \n}\n")),Object(l.mdx)("p",null,"La valeur ",Object(l.mdx)("inlineCode",{parentName:"p"},"undefined")," est convertie en ",Object(l.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/NaN"}),Object(l.mdx)("inlineCode",{parentName:"a"},"NaN"))," (pour ",Object(l.mdx)("em",{parentName:"p"},"Not a Number")," : \xab n'est pas un nombre \xbb) lorsqu'elle est utilis\xe9e dans un contexte num\xe9rique."),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"var a;\na + 2; // NaN\n")),Object(l.mdx)("p",null,"Une variable valant ",Object(l.mdx)("inlineCode",{parentName:"p"},"null")," sera toujours consid\xe9r\xe9e comme 0 dans un contexte num\xe9rique et comme ",Object(l.mdx)("inlineCode",{parentName:"p"},"false")," dans un contexte bool\xe9en. Par exemple, on aura :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"var n = null;\nconsole.log(n * 32); // Le log affichera 0\n")),Object(l.mdx)("h3",{id:"les-port\xe9es-de-variables"},"Les port\xe9es de variables"),Object(l.mdx)("p",null,"Lorsqu'une variable est d\xe9clar\xe9e avec ",Object(l.mdx)("inlineCode",{parentName:"p"},"var")," en dehors des fonctions, elle est appel\xe9e variable ",Object(l.mdx)("em",{parentName:"p"},"global"),"e car elle est disponible pour tout le code contenu dans le document. Lorsqu'une variable est d\xe9clar\xe9e dans une fonction, elle est appel\xe9e variable ",Object(l.mdx)("em",{parentName:"p"},"locale")," car elle n'est disponible qu'au sein de cette fonction."),Object(l.mdx)("p",null,"Avant ECMAScript 2015 (ES6), JavaScript ne d\xe9finissait pas de port\xe9e pour une ",Object(l.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Instructions/bloc"}),"instruction de bloc")," ; les \xe9l\xe9ments du bloc seront locaux pour le code qui contient le bloc (que ce soit une fonction ou le contexte global). Ainsi, l'exemple qui suit affichera 5 car la port\xe9e de ",Object(l.mdx)("inlineCode",{parentName:"p"},"x")," est la fonction (ou le contexte global) dans lequel ",Object(l.mdx)("inlineCode",{parentName:"p"},"x")," est d\xe9clar\xe9, pas le bloc (correspondant \xe0 l'instruction ",Object(l.mdx)("inlineCode",{parentName:"p"},"if")," dans ce cas) :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"if (true) {\n  var x = 5;\n}\nconsole.log(x); // x vaut 5\n")),Object(l.mdx)("p",null,"La d\xe9claration ",Object(l.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Instructions/let"}),Object(l.mdx)("inlineCode",{parentName:"a"},"let")),", introduite avec ECMAScript 2015, ajoute un nouveau comportement :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"if (true) {\n  let y = 5;\n}\nconsole.log(y); // ReferenceError: y is not defined\n")),Object(l.mdx)("h3",{id:"remont\xe9e-de-variables-hoisting"},"Remont\xe9e de variables (",Object(l.mdx)("em",{parentName:"h3"},"hoisting"),")"),Object(l.mdx)("p",null,"Une autre chose peut para\xeetre \xe9trange en JavaScript : il est possible, sans recevoir d'exception, de faire r\xe9f\xe9rence \xe0 une variable qui est d\xe9clar\xe9e plus tard. Ce concept est appel\xe9 \xab remont\xe9e \xbb (",Object(l.mdx)("em",{parentName:"p"},"hoisting")," en anglais) car, d'une certaine fa\xe7on, les variables sont remont\xe9es en haut de la fonction ou de l'instruction. En revanche, les variables qui n'ont pas encore \xe9t\xe9 initialis\xe9es renverront la valeur ",Object(l.mdx)("inlineCode",{parentName:"p"},"undefined"),". Ainsi, m\xeame si on d\xe9clare une variable et qu'on l'initialise apr\xe8s l'avoir utilis\xe9e ou y avoir fait r\xe9f\xe9rence, la valeur utilis\xe9e \xab la plus haute \xbb sera toujours ",Object(l.mdx)("inlineCode",{parentName:"p"},"undefined"),"."),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'/**\n * Exemple 1\n */\nconsole.log(x === undefined); // donne "true"\nvar x = 3;\n\n/**\n * Exemple 2\n */\n// renverra undefined\nvar maVar = "ma valeur";\n \n(function () {\n  console.log(maVar); // undefined\n  var maVar = "valeur locale";\n})();\n')),Object(l.mdx)("p",null,"Les exemples pr\xe9c\xe9dents peuvent \xeatre reformul\xe9s plus explicitement ainsi :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'/**\n * Exemple 1\n */\nvar x;\nconsole.log(x === undefined); // donne "true"\nx = 3;\n \n/**\n * Exemple 2\n */\nvar maVar = "ma valeur";\n \n(function () {\n  var maVar;\n  console.log(maVar); // undefined\n  maVar = "valeur locale";\n})();\n')),Object(l.mdx)("p",null,"C'est pourquoi il est conseill\xe9 de placer les instructions ",Object(l.mdx)("inlineCode",{parentName:"p"},"var")," d\xe8s que possible dans le code. De plus, cette bonne pratique aide \xe0 rendre le code plus lisible."),Object(l.mdx)("p",null,"Avec ECMAScript 2015, ",Object(l.mdx)("inlineCode",{parentName:"p"},"let (const)")," ",Object(l.mdx)("strong",{parentName:"p"},"remontera la variable en haut du bloc mais ne l'initialisera pas"),". Aussi, si on fait r\xe9f\xe9rence \xe0 la variable dans le bloc avant la d\xe9claration, on obtient une ",Object(l.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/ReferenceError"}),Object(l.mdx)("inlineCode",{parentName:"a"},"ReferenceError"))," car la variable est dans une \xab zone morte temporelle \xbb. entre le d\xe9but du bloc et le traitement de la d\xe9claration"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"function faire_quelquechose() {\n  console.log(toto); // ReferenceError\n  let toto = 2;\n}\n")),Object(l.mdx)("h3",{id:"remont\xe9e-de-fonctions"},"Remont\xe9e de fonctions"),Object(l.mdx)("p",null,"En ce qui concerne les fonctions, seules les d\xe9clarations de fonctions sont remont\xe9es. Pour les expressions de fonctions, il n'y a pas de telle remont\xe9e car la variable associ\xe9e n'a pas encore \xe9t\xe9 affect\xe9e avec la valeur finale (comme vu avant) :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'/* D\xe9claration de fonction */\ntoto();  // "truc"\nfunction toto(){\n  console.log("truc");\n}\n\n/* Expression de fonction */\nmachin();      // erreur TypeError : machin n\'est pas une fonction\nvar machin = function() {\n  console.log("titi");\n}\n')),Object(l.mdx)("h3",{id:"les-variables-globales"},"Les variables globales"),Object(l.mdx)("p",null,"Les variables globales sont en r\xe9alit\xe9 des propri\xe9t\xe9s de l'",Object(l.mdx)("em",{parentName:"p"},"objet global"),". Dans les pages web, l'objet global est ",Object(l.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/API/Window"}),Object(l.mdx)("inlineCode",{parentName:"a"},"window")),", et on peut donc acc\xe9der ou modifier la valeur de variables globales en utilisant la syntaxe suivante : ",Object(l.mdx)("inlineCode",{parentName:"p"},"window.*variable*")," ."),Object(l.mdx)("p",null,"Ainsi, il est possible d'acc\xe9der \xe0 des variables d\xe9clar\xe9es dans une fen\xeatre ou dans un cadre depuis une autre fen\xeatre ou depuis un autre cadre (",Object(l.mdx)("em",{parentName:"p"},"frame"),") en sp\xe9cifiant son nom. Si, par exemple, une variable appel\xe9e ",Object(l.mdx)("inlineCode",{parentName:"p"},"numT\xe9l\xe9phone")," est d\xe9clar\xe9e dans un document ",Object(l.mdx)("inlineCode",{parentName:"p"},"FRAMESET"),", il est possible d'y faire r\xe9f\xe9rence, depuis un cadre fils, avec la syntaxe ",Object(l.mdx)("inlineCode",{parentName:"p"},"parent.numT\xe9l\xe9phone"),"."),Object(l.mdx)("h3",{id:"constantes"},"Constantes"),Object(l.mdx)("p",null,"Il est possible de cr\xe9er des constantes en lecture seule en utilisant le mot-cl\xe9 ",Object(l.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Instructions/const"}),Object(l.mdx)("inlineCode",{parentName:"a"},"const")),". La syntaxe d'un identifiant pour une constante est la m\xeame que pour les variables (elle doit d\xe9buter avec une lettre, un tiret du bas, un symbole dollar et peut contenir des caract\xe8res num\xe9riques, alphab\xe9tiques et des tirets bas voire des caract\xe8res Unicode)."),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const pr\xe9fixe = '212';\n")),Object(l.mdx)("p",null,"Une constante ne peut pas changer de valeur gr\xe2ce \xe0 une affectation ou \xeatre re-d\xe9clar\xe9e pendant l'ex\xe9cution du script."),Object(l.mdx)("p",null,"Les r\xe8gles de port\xe9e des constantes sont les m\xeames que pour les variables, \xe0 l'exception du mot-cl\xe9 ",Object(l.mdx)("inlineCode",{parentName:"p"},"const")," qui est obligatoire. S'il est oubli\xe9, l'identifiant sera consid\xe9r\xe9 comme celui d'une variable."),Object(l.mdx)("p",null,"Il est impossible de d\xe9clarer une constante avec le m\xeame nom qu'une autre variable ou fonction dans la m\xeame port\xe9e."),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"// Renverra une erreur\nfunction f() {};\nconst f = 5;\n\n// Renverra \xe9galement une erreur\nfunction f() {\n  const g = 5;\n  var g;\n\n  //instructions\n}\n")),Object(l.mdx)("p",null,"Cependant, les propri\xe9t\xe9s des objets qui sont affect\xe9s comme constantes ne sont pas prot\xe9g\xe9es, on pourra ainsi ex\xe9cuter sans probl\xe8me le code suivant :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const MON_OBJET = {"cl\xe9": "valeur"};\nMON_OBJET.cl\xe9 = "autreValeur";\n')),Object(l.mdx)("p",null,"De m\xeame, le contenu d'un tableau peut \xeatre modifi\xe9 sans alerte :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'const MON_TABLEAU = ["HTML", "CSS"];\nMON_TABLEAU.push("JavaScript");\nconsole.log(MON_TABLEAU); // ["HTML", "CSS", "JavaScript"]\n')),Object(l.mdx)("h2",{id:"structures-de-donn\xe9es-et-types"},"Structures de donn\xe9es et types"),Object(l.mdx)("h3",{id:"types-de-donn\xe9es"},"Types de donn\xe9es"),Object(l.mdx)("p",null,"La derni\xe8re version du standard ECMAScript d\xe9finit sept types de donn\xe9es :"),Object(l.mdx)("ul",null,Object(l.mdx)("li",{parentName:"ul"},"Six types de donn\xe9es primitifs :  ",Object(l.mdx)("ul",{parentName:"li"},Object(l.mdx)("li",{parentName:"ul"},"Type bool\xe9en : ",Object(l.mdx)("inlineCode",{parentName:"li"},"true")," et ",Object(l.mdx)("inlineCode",{parentName:"li"},"false"),"."),Object(l.mdx)("li",{parentName:"ul"},"Type nul (",Object(l.mdx)("inlineCode",{parentName:"li"},"null"),"), un mot-cl\xe9 sp\xe9cial pour indiquer une valeur nulle (au sens informatique). JavaScript \xe9tant sensible \xe0 la casse, ",Object(l.mdx)("inlineCode",{parentName:"li"},"null")," n'est pas ",Object(l.mdx)("inlineCode",{parentName:"li"},"Null"),", ",Object(l.mdx)("inlineCode",{parentName:"li"},"NULL"),", ou toute autre variante."),Object(l.mdx)("li",{parentName:"ul"},"Un type pour les valeurs ind\xe9finies (",Object(l.mdx)("inlineCode",{parentName:"li"},"undefined"),")."),Object(l.mdx)("li",{parentName:"ul"},"Un type pour les nombres entiers ou d\xe9cimaux. Par exemple : ",Object(l.mdx)("inlineCode",{parentName:"li"},"42")," ou ",Object(l.mdx)("inlineCode",{parentName:"li"},"3.14159"),"."),Object(l.mdx)("li",{parentName:"ul"},"Un type pour repr\xe9senter les grands nombres entiers ",Object(l.mdx)("inlineCode",{parentName:"li"},"BigInt"),", par exemple ",Object(l.mdx)("inlineCode",{parentName:"li"},"9007199254740992n"),"."),Object(l.mdx)("li",{parentName:"ul"},'Un type pour les cha\xeenes de caract\xe8res, une s\xe9quence de caract\xe8res qui repr\xe9sente une valeur textuelle. Par exemple : "Coucou"'),Object(l.mdx)("li",{parentName:"ul"},"Un type pour les symboles, apparus avec ECMAScript 2015 (ES6). Ce type est utilis\xe9 pour repr\xe9senter des donn\xe9es immuables et uniques."))),Object(l.mdx)("li",{parentName:"ul"},"et un type pour les objets (",Object(l.mdx)("em",{parentName:"li"},"Object"),")")),Object(l.mdx)("p",null,"Bien que cette description couvre peu de types de donn\xe9es, ceux-ci vous permettent d'impl\xe9menter une grande vari\xe9t\xe9 de fonctions au sein de vos applications. ",Object(l.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Object"}),"Les objets")," et ",Object(l.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Function"}),"les fonctions")," sont parmi les briques fondamentales du langage. On peut consid\xe9rer, \xe0 premi\xe8re vue, les objets comme des conteneurs de valeurs et de fonctions pour une application."),Object(l.mdx)("h3",{id:"conversion-de-types-de-donn\xe9es"},"Conversion de types de donn\xe9es"),Object(l.mdx)("p",null,"JavaScript est un langage \xe0 typage dynamique. Cela signifie qu'il n'est pas n\xe9cessaire de sp\xe9cifier le type de donn\xe9es d'une variable lors de sa d\xe9claration. Les types de donn\xe9es sont convertis automatiquement durant l'ex\xe9cution du script. Ainsi, il est possible de d\xe9finir une variable de cette fa\xe7on :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"var r\xe9ponse = 42;\n")),Object(l.mdx)("p",null,"Et plus tard, d'affecter une cha\xeene de caract\xe8res \xe0 cette m\xeame variable :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'r\xe9ponse = "Merci pour le d\xeener...";\n')),Object(l.mdx)("p",null,"JavaScript utilisant un typage dynamique, cette derni\xe8re instruction ne renverra pas d'erreur."),Object(l.mdx)("p",null,"Lorsque des expressions impliquent des cha\xeenes de caract\xe8res et des valeurs num\xe9riques ainsi que l'op\xe9rateur +, JavaScript convertit les nombres en cha\xeenes de caract\xe8res :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'x = "La r\xe9ponse est " + 42; // "La r\xe9ponse est 42"\ny = 42 + " est la r\xe9ponse"; // "42 est la r\xe9ponse"\n')),Object(l.mdx)("p",null,"Avec des instructions impliquant d'autres op\xe9rateurs, JavaScript ne convertit pas n\xe9cessairement les valeurs num\xe9riques en cha\xeenes de caract\xe8res. Ainsi, on aura :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'"37" - 7; // 30\n"37" + 7; // "377"\n')),Object(l.mdx)("h3",{id:"conversion-de-cha\xeenes-de-caract\xe8res-en-nombres"},"Conversion de cha\xeenes de caract\xe8res en nombres"),Object(l.mdx)("p",null,"Si un nombre est repr\xe9sent\xe9 en m\xe9moire par une cha\xeene de caract\xe8res, il y a des m\xe9thodes pour effectuer la bonne conversion :"),Object(l.mdx)("ul",null,Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("a",Object(n.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/parseInt"}),Object(l.mdx)("inlineCode",{parentName:"a"},"parseInt()"))),Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("a",Object(n.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/parseFloat"}),Object(l.mdx)("inlineCode",{parentName:"a"},"parseFloat()")))),Object(l.mdx)("p",null,Object(l.mdx)("inlineCode",{parentName:"p"},"parseInt")," renverra uniquement des nombres entiers, \xe9tant ainsi inappropri\xe9e pour la manipulation de nombre d\xe9cimaux. Une bonne pratique pour cette fonction est de toujours inclure l'argument qui indique dans quelle base num\xe9rique le r\xe9sultat doit \xeatre renvoy\xe9 (base 2, base 10...)."),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'parseInt("101", 2); // 5\n')),Object(l.mdx)("h4",{id:"lop\xe9rateur--unaire"},"L'op\xe9rateur + unaire"),Object(l.mdx)("p",null,"Une autre m\xe9thode pour r\xe9cup\xe9rer un nombre \xe0 partir d'une cha\xeene de caract\xe8res consiste \xe0 utiliser l'op\xe9rateur +."),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'"1.1" + "1.1" = "1.11.1"\n+"1.1" = 1.1 // fonctionne seulement avec le + unaire\n')),Object(l.mdx)("h2",{id:"litt\xe9raux"},"Litt\xe9raux"),Object(l.mdx)("p",null,"Les litt\xe9raux sont utilis\xe9s pour repr\xe9senter des valeurs en JavaScript. Ce sont des valeurs fixes, pas des variables, qui sont fournies ",Object(l.mdx)("em",{parentName:"p"},"litt\xe9ralement")," au script. Cette section d\xe9crit les diff\xe9rents types de litt\xe9raux :"),Object(l.mdx)("ul",null,Object(l.mdx)("li",{parentName:"ul"},"[Litt\xe9raux de tableaux]","(",Object(l.mdx)("a",Object(n.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Types_et_grammaire#litt%C3%A9raux"}),"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Types_et_grammaire#litt\xe9raux")," tableaux)"),Object(l.mdx)("li",{parentName:"ul"},"[Litt\xe9raux bool\xe9ens]","(",Object(l.mdx)("a",Object(n.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Types_et_grammaire#litt%C3%A9raux"}),"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Types_et_grammaire#litt\xe9raux")," bool\xe9ens)"),Object(l.mdx)("li",{parentName:"ul"},"[Litt\xe9raux de nombres flottants]","(",Object(l.mdx)("a",Object(n.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Types_et_grammaire#litt%C3%A9raux"}),"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Types_et_grammaire#litt\xe9raux")," d\xe9cimaux)"),Object(l.mdx)("li",{parentName:"ul"},"[Litt\xe9raux num\xe9riques]","(",Object(l.mdx)("a",Object(n.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Types_et_grammaire#litt%C3%A9raux"}),"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Types_et_grammaire#litt\xe9raux")," num\xe9riques)"),Object(l.mdx)("li",{parentName:"ul"},"[Litt\xe9raux d'objets]","(",Object(l.mdx)("a",Object(n.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Types_et_grammaire#litt%C3%A9raux"}),"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Types_et_grammaire#litt\xe9raux")," objets)"),Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("a",Object(n.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Types_et_grammaire#regexp"}),"Litt\xe9raux d'expressions rationnelles")),Object(l.mdx)("li",{parentName:"ul"},"[Litt\xe9raux de cha\xeenes de caract\xe8res]","(",Object(l.mdx)("a",Object(n.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Types_et_grammaire#litt%C3%A9raux"}),"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Types_et_grammaire#litt\xe9raux")," cha\xeenes)")),Object(l.mdx)("h3",{id:"les-litt\xe9raux-de-tableaux"},"Les litt\xe9raux de tableaux"),Object(l.mdx)("p",null,"Un litt\xe9ral de tableau est une liste de z\xe9ro ou plusieurs expressions, dont chacune repr\xe9sente l'\xe9l\xe9ment d'un tableau, encadr\xe9es par des crochets (",Object(l.mdx)("inlineCode",{parentName:"p"},"[]"),"). Lorsqu'un tableau est cr\xe9\xe9 \xe0 partir d'un litt\xe9ral, il est initialis\xe9 avec les valeurs sp\xe9cifi\xe9es qui sont ses \xe9l\xe9ments, sa longueur correspondant au nombre d'arguments donn\xe9s."),Object(l.mdx)("p",null,"L'exemple suivant cr\xe9e ainsi le tableau ",Object(l.mdx)("inlineCode",{parentName:"p"},"caf\xe9s")," avec trois \xe9l\xe9ments et une taille \xe9gale \xe0 3 :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'var caf\xe9s = ["Br\xe9silien", "Colombien", "Kona"];\n')),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"Note :")," Un litt\xe9ral de tableau est du type d'un initialisateur d'objets. Voir ",Object(l.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/Initialisateur_objet"}),"l'utilisation d'initialisateurs d'objets"),"."),Object(l.mdx)("p",null,"Si un tableau est cr\xe9\xe9 en utilisant un litt\xe9ral dans un script du plus haut niveau, JavaScript interpr\xe8te le tableau chaque fois qu'il \xe9value l'expression contenant le litt\xe9ral. De plus, un litt\xe9ral utilis\xe9 dans une fonction est cr\xe9\xe9 chaque fois que la fonction est appel\xe9e."),Object(l.mdx)("p",null,"Les litt\xe9raux de tableaux sont \xe9galement des objets ",Object(l.mdx)("inlineCode",{parentName:"p"},"Array"),". Voir la page sur l'objet ",Object(l.mdx)("inlineCode",{parentName:"p"},"Array")," pour plus de d\xe9tails."),Object(l.mdx)("h4",{id:"les-virgules-suppl\xe9mentaires"},"Les virgules suppl\xe9mentaires"),Object(l.mdx)("p",null,"Il n'est pas n\xe9cessaire de d\xe9finir tous les \xe9l\xe9ments dans un litt\xe9ral de tableau. Si vous utilisez deux virgules, l'une \xe0 la suite de l'autre, le tableau utilisera la valeur ",Object(l.mdx)("inlineCode",{parentName:"p"},"undefined")," pour les \xe9l\xe9ments non d\xe9finis. L'exemple qui suit utilise le tableau poisson :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'var poisson = ["Clown", , "Chat"];\n')),Object(l.mdx)("p",null,"Ce tableau poss\xe8de deux \xe9l\xe9ments ayant une valeur et un \xe9l\xe9ment vide (",Object(l.mdx)("inlineCode",{parentName:"p"},"poisson[0]"),' vaut "Clown", ',Object(l.mdx)("inlineCode",{parentName:"p"},"poisson[1]")," vaut ",Object(l.mdx)("inlineCode",{parentName:"p"},"undefined"),", et ",Object(l.mdx)("inlineCode",{parentName:"p"},"poisson[2]"),' vaut "Chat").'),Object(l.mdx)("p",null,"Si une virgule est ajout\xe9e \xe0 la fin de la liste des \xe9l\xe9ments, elle est ignor\xe9e. Dans le prochain exemple, la longueur du tableau est \xe9gale \xe0 3. Il n'y a pas d'\xe9l\xe9ment ",Object(l.mdx)("inlineCode",{parentName:"p"},"maListe[3]"),". Les autres virgules indiquent un nouvel \xe9l\xe9ment."),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"Note :")," Avec d'anciennes versions de navigateurs, les virgules de fin peuvent causer des erreurs, il est fortement conseill\xe9 de les retirer."),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"var maListe = ['maison', , '\xe9cole', ];\n")),Object(l.mdx)("p",null,"Dans l'exemple qui suit, la longueur du tableau est \xe9gale \xe0 4 et ",Object(l.mdx)("inlineCode",{parentName:"p"},"maListe[0]")," et ",Object(l.mdx)("inlineCode",{parentName:"p"},"maListe[2]")," sont manquants."),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"var maListe = [ , 'maison', , '\xe9cole'];\n")),Object(l.mdx)("p",null,"Dans l'exemple qui suit, la longueur du tableau est \xe9gale \xe0 4 et ",Object(l.mdx)("inlineCode",{parentName:"p"},"maListe[1]")," et ",Object(l.mdx)("inlineCode",{parentName:"p"},"maListe[3]")," sont manquants."),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"var maListe = ['maison', , '\xe9cole', , ];\n")),Object(l.mdx)("p",null,"Comprendre le fonctionnement des virgules suppl\xe9mentaires est important. Cependant, lorsque vous \xe9crivez du code, veillez, d\xe8s que c'est possible, \xe0 d\xe9clarer les \xe9l\xe9ments manquants avec ",Object(l.mdx)("inlineCode",{parentName:"p"},"undefined")," : cela am\xe9liorera la lisibilit\xe9 de votre code et il sera ainsi plus facile \xe0 maintenir."),Object(l.mdx)("h3",{id:"les-litt\xe9raux-bool\xe9ens"},"Les litt\xe9raux bool\xe9ens"),Object(l.mdx)("p",null,"Le type bool\xe9en poss\xe8de deux valeurs litt\xe9rales : ",Object(l.mdx)("inlineCode",{parentName:"p"},"true")," et ",Object(l.mdx)("inlineCode",{parentName:"p"},"false"),"."),Object(l.mdx)("p",null,"Il ne faut pas confondre les valeurs ",Object(l.mdx)("inlineCode",{parentName:"p"},"true")," et ",Object(l.mdx)("inlineCode",{parentName:"p"},"false")," du type primitif bool\xe9en et les valeurs true et false de l'objet ",Object(l.mdx)("inlineCode",{parentName:"p"},"Boolean"),". L'objet ",Object(l.mdx)("inlineCode",{parentName:"p"},"Boolean")," permet de cr\xe9er un objet autour du type de donn\xe9e bool\xe9en. Voir la page sur l'objet",Object(l.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/JavaScript/Reference/Objets_globaux/Boolean"})," ",Object(l.mdx)("inlineCode",{parentName:"a"},"Boolean"))," pour plus d'informations."),Object(l.mdx)("h3",{id:"les-litt\xe9raux-num\xe9riques"},"Les litt\xe9raux num\xe9riques"),Object(l.mdx)("p",null,"Les nombres ",Object(l.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Number"}),Object(l.mdx)("inlineCode",{parentName:"a"},"Number"))," et les grands entiers ",Object(l.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/BigInt"}),Object(l.mdx)("inlineCode",{parentName:"a"},"BigInt"))," peuvent \xeatre exprim\xe9s en notation d\xe9cimale (base 10), hexad\xe9cimale (base 16), octale (base 8) et binaire (base 2)."),Object(l.mdx)("ul",null,Object(l.mdx)("li",{parentName:"ul"},"Les litt\xe9raux repr\xe9sentant des entiers d\xe9cimaux sont une suite de chiffres qui ne commence pas par un 0 (z\xe9ro)"),Object(l.mdx)("li",{parentName:"ul"},"Un 0 (z\xe9ro) en pr\xe9fixe indique que le litt\xe9ral est en notation octale. Ces nombres ne peuvent \xeatre compos\xe9s que des chiffres de 0 (z\xe9ro) \xe0 7 (sept)."),Object(l.mdx)("li",{parentName:"ul"},"Un pr\xe9fixe 0x (ou 0X) indique une notation hexad\xe9cimale. Les nombres hexad\xe9cimaux peuvent \xeatre compos\xe9s de chiffres (0-9) et des lettres A \xe0 F (minuscules et majuscules) (la casse d'un caract\xe8re ne modifie pas sa valeur : ",Object(l.mdx)("inlineCode",{parentName:"li"},"0xa = 0xA = 10")," et ",Object(l.mdx)("inlineCode",{parentName:"li"},"0xf = 0xF = 15"),")."),Object(l.mdx)("li",{parentName:"ul"},"Un pr\xe9fixe 0b (ou 0B) indique une notation binaire. Les nombres binaires peuvent \xeatre compos\xe9s de 0 ou de 1 uniquement.")),Object(l.mdx)("p",null,"Voici des exemples pour ces litt\xe9raux :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-html"}),"0, 117, -345, 123456789123456789n (notation d\xe9cimale, base 10)\n015, 0001, -077, 0o7777777777777n (notation octale, base 8) \n0x1123, 0x00111, -0xF1A7, 0x123456789ABCDEFn (notation hexad\xe9cimale, base 16)\n0b11, 0B0011, -0b11, 0b11101001010101010101n (notation binaire, base 2)\n")),Object(l.mdx)("p",null,"Pour plus d'informations, voir ",Object(l.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Grammaire_lexicale#Litt%C3%A9raux_num%C3%A9riques"}),"les litt\xe9raux num\xe9riques dans la grammaire lexicale de JavaScript"),"."),Object(l.mdx)("h3",{id:"les-litt\xe9raux-de-nombres-d\xe9cimaux"},"Les litt\xe9raux de nombres d\xe9cimaux"),Object(l.mdx)("p",null,"Un litt\xe9ral de nombre d\xe9cimal peut \xeatre compos\xe9 de ces diff\xe9rentes parties :"),Object(l.mdx)("ul",null,Object(l.mdx)("li",{parentName:"ul"},"Un entier, pouvant \xeatre sign\xe9 (pr\xe9c\xe9d\xe9 d'un \xab + \xbb ou d'un \xab - \xbb),"),Object(l.mdx)("li",{parentName:"ul"},"Un point, s\xe9parateur d\xe9cimal (\xab . \xbb),"),Object(l.mdx)("li",{parentName:"ul"},"La partie d\xe9cimale (un autre nombre)"),Object(l.mdx)("li",{parentName:"ul"},"Un exposant.")),Object(l.mdx)("p",null,"L'exposant est la partie du nombre d\xe9cimal commen\xe7ant par un \xab e \xbb ou un \xab E \xbb, suivie d'un entier pouvant \xeatre sign\xe9 (pr\xe9c\xe9d\xe9 d'un \xab + \xbb ou d'un \xab - \xbb). Un litt\xe9ral de nombre d\xe9cimal doit comporter au moins un chiffre et soit un point (s\xe9parateur d\xe9cimal) soit un \xab e \xbb ou un \xab E \xbb."),Object(l.mdx)("p",null,"Des exemples sont : 3.1415, -3.1E12, .1e12, et 2E-12."),Object(l.mdx)("p",null,"On peut raccourcir cette syntaxe en :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-html"}),"[(+|-)][chiffres].[chiffres][(E|e)[(+|-)]chiffres]\n")),Object(l.mdx)("p",null,"Par exemple :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-html"}),"3.14\n2345.789\n.3333333333333333333\n")),Object(l.mdx)("h3",{id:"les-litt\xe9raux-dobjets"},"Les litt\xe9raux d'objets"),Object(l.mdx)("p",null,"Un litt\xe9ral d'objet - ou 'objet litt\xe9ral' - est une liste de z\xe9ro ou plusieurs propri\xe9t\xe9s d\xe9finies par des paires de noms/valeurs. Ces paires sont d\xe9limit\xe9es par des accolades (",Object(l.mdx)("inlineCode",{parentName:"p"},"{}"),"). N'utilisez pas un tel litt\xe9ral en d\xe9but d'instruction. En effet, l'accolade ouvrante sera mal interpr\xe9t\xe9e (d\xe9but de bloc) et causera une erreur ou un comportement incoh\xe9rent."),Object(l.mdx)("p",null,"L'exemple qui suit montre l'utilisation d'un litt\xe9ral d'objet. Le premier \xe9l\xe9ment de l'objet ",Object(l.mdx)("inlineCode",{parentName:"p"},"voiture")," d\xe9finit une propri\xe9t\xe9 ",Object(l.mdx)("inlineCode",{parentName:"p"},"maVoiture"),", le deuxi\xe8me \xe9l\xe9ment : la propri\xe9t\xe9 ",Object(l.mdx)("inlineCode",{parentName:"p"},"getVoiture")," invoque une fonction ",Object(l.mdx)("inlineCode",{parentName:"p"},'(carTypes("Honda")),')," le troisi\xe8me \xe9l\xe9ment, la propri\xe9t\xe9 ",Object(l.mdx)("inlineCode",{parentName:"p"},"special")," utilise une variable existante (",Object(l.mdx)("inlineCode",{parentName:"p"},"soldes"),")."),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'var soldes = "Toyota";\n\nfunction carTypes(nom) {\n  return (nom === "Honda") ?\n    nom :\n    "D\xe9sol\xe9, nous ne vendons pas de " + nom + "." ;\n}\n\nvar voiture = { maVoiture: "Saturn", getVoiture: carTypes("Honda"), sp\xe9cial: soldes };\n\nconsole.log(voiture.maVoiture);   // Saturn\nconsole.log(voiture.getVoiture);  // Honda\nconsole.log(voiture.sp\xe9cial); // Toyota \n')),Object(l.mdx)("p",null,"Il est \xe9galement possible d'utiliser un litt\xe9ral num\xe9rique ou un litt\xe9ral de cha\xeene de caract\xe8res pour d\xe9signer le nom d'une propri\xe9t\xe9 ou pour imbriquer un objet dans un autre. L'exemple qui suit illustre cette possibilit\xe9 :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'var voiture = { plusieursVoitures: {a: "Saab", b: "Jeep"}, 7: "Mazda" };\n\nconsole.log(voiture.plusieursVoitures.b); // Jeep\nconsole.log(voiture[7]); // Mazda\n')),Object(l.mdx)("p",null,"Les noms des propri\xe9t\xe9s d'objets peuvent \xeatre n'importe quelle cha\xeene de caract\xe8res, y compris la cha\xeene vide. Si le nom de la propri\xe9t\xe9 n'est pas un ",Object(l.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Types_et_grammaire#Variables"}),"identifiant")," valide, il faudra qu'il soit plac\xe9 entre guillemets. Les noms de propri\xe9t\xe9s qui ne sont pas des identifiants valides ne peuvent pas \xeatre utilis\xe9s pour acc\xe9der \xe0 la valeur en utilisant la notation point\xe9e (objet.propri\xe9t\xe9). En revanche, il est possible d'y acc\xe9der avec la notation utilisant les crochets (\"",Object(l.mdx)("inlineCode",{parentName:"p"},"[]"),'") comme pour les tableaux.'),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'var nomsBizarres = {\n  "": "Cha\xeene vide",\n  "!": "Bang !"\n}\nconsole.log(nomsBizarres."");   // SyntaxError: Unexpected string\nconsole.log(nomsBizarres[""]);  // Cha\xeene vide\nconsole.log(nomsBizarres.!);    // SyntaxError: Unexpected token !\nconsole.log(nomsBizarres["!"]); // Bang !\n')),Object(l.mdx)("h4",{id:"augmentation-des-litt\xe9raux-dobjets-avec-es2015es6"},"Augmentation des litt\xe9raux d'objets avec ES2015/ES6"),Object(l.mdx)("p",null,"Avec ES2015, les litt\xe9raux d'objets permettent de d\xe9finir le prototype lors de la construction de l'objet, permettent d'utiliser les affectations en notation raccourcie : ",Object(l.mdx)("inlineCode",{parentName:"p"},"toto: toto"),", de d\xe9finir des m\xe9thodes, d'appeler les m\xe9thodes de l'objet parent avec ",Object(l.mdx)("inlineCode",{parentName:"p"},"super")," et d'utiliser des noms de propri\xe9t\xe9s calcul\xe9es."),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"var obj = {\n    // __proto__\n    __proto__: lePrototypeDeLObjet,\n    // Notation raccourcie pour \u2018handler: handler\u2019\n    handler,\n    // M\xe9thodes\n    toString() {\n     // Appelle les m\xe9thodes de l'objet parent\n     return \"d \" + super.toString();\n    },\n    // Noms de propri\xe9t\xe9s calcul\xe9s dynamiquement\n    [ 'prop_' + (() => 42)() ]: 42\n};\n")),Object(l.mdx)("p",null,"Attention :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'var toto = {a: "alpha", 2: "deux"};\nconsole.log(toto.a);    // alpha\nconsole.log(toto[2]);   // deux\n//console.log(toto.2);  // Erreur: parenth\xe8se ) manquante apr\xe8s la liste d\'argument\n//console.log(toto[a]); // Erreur: a n\'est pas d\xe9fini\nconsole.log(toto["a"]); // alpha\nconsole.log(toto["2"]); // deux\n')),Object(l.mdx)("h3",{id:"les-litt\xe9raux-dexpressions-rationnelles"},"Les litt\xe9raux d'expressions rationnelles"),Object(l.mdx)("p",null,"Un litt\xe9ral d'",Object(l.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Expressions_r%C3%A9guli%C3%A8res"}),"expression rationnelle")," est un motif encadr\xe9 par deux barres obliques. Par exemple :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"var re = /ab+c/;\n")),Object(l.mdx)("h3",{id:"les-litt\xe9raux-de-cha\xeenes-de-caract\xe8res"},"Les litt\xe9raux de cha\xeenes de caract\xe8res"),Object(l.mdx)("p",null,"Un litt\xe9ral de cha\xeene de caract\xe8res consiste en z\xe9ro ou plusieurs caract\xe8res encadr\xe9s par des guillemets droits doubles (",Object(l.mdx)("inlineCode",{parentName:"p"},'"'),") ou des guillemets droits simples (",Object(l.mdx)("inlineCode",{parentName:"p"},"'"),"). Une cha\xeene de caract\xe8res doit \xeatre encadr\xe9e par des symboles du m\xeame type (guillemets droits doubles ou guillemets droits simples) :"),Object(l.mdx)("ul",null,Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("inlineCode",{parentName:"li"},'"toto"')),Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("inlineCode",{parentName:"li"},"'truc'")),Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("inlineCode",{parentName:"li"},'"1234"')),Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("inlineCode",{parentName:"li"},'"Une ligne \\n une autre ligne"')),Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("inlineCode",{parentName:"li"},"\"Aujourd'hui j'ai mang\xe9 une pomme\""))),Object(l.mdx)("p",null,"Il est possible d'utiliser les m\xe9thodes de ",Object(l.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/String"}),Object(l.mdx)("inlineCode",{parentName:"a"},"String"))," sur un tel litt\xe9ral. JavaScript convertira automatiquement le litt\xe9ral en un objet ",Object(l.mdx)("inlineCode",{parentName:"p"},"String"),", appellera la m\xe9thode puis d\xe9truira l'objet ",Object(l.mdx)("inlineCode",{parentName:"p"},"String"),". On peut \xe9galement utiliser la propri\xe9t\xe9 ",Object(l.mdx)("inlineCode",{parentName:"p"},"String.length")," sur un litt\xe9ral de cha\xeene de caract\xe8re :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'console.log("j\'ai mang\xe9 une pomme".length) \n// Affichera le nombre de caract\xe8res (y compris les blancs).\n// Dans ce cas, 20.\n')),Object(l.mdx)("p",null,"Il est pr\xe9f\xe9rable d'utiliser des litt\xe9raux de cha\xeenes de caract\xe8res s'il n'est pas sp\xe9cifiquement n\xe9cessaire d'utiliser un objet ",Object(l.mdx)("inlineCode",{parentName:"p"},"String"),". Voir la page sur l'objet ",Object(l.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/String"}),Object(l.mdx)("inlineCode",{parentName:"a"},"String"))," pour plus de d\xe9tails sur les objets ",Object(l.mdx)("inlineCode",{parentName:"p"},"String"),"."),Object(l.mdx)("p",null,"Avec ECMAScript 2015, on peut \xe9galement utiliser des litt\xe9raux sous forme de ",Object(l.mdx)("em",{parentName:"p"},"gabarits")," (",Object(l.mdx)("em",{parentName:"p"},"templates"),") en utilisant le caract\xe8re accent grave (`) comme s\xe9parateur. Les gabarits de cha\xeenes de caract\xe8res sont semblables aux fonctionnalit\xe9s d'interpolation existantes en Python, Perl, etc. Ces gabarits permettent d'utiliser des balises afin d'adapter la construction de cha\xeenes."),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'// Litt\xe9ral simple pour une cha\xeene\n`Un saut de ligne \'\\n\' en JavaScript.`\n\n// On peut \xe9crire une cha\xeene sur plusieurs\n// lignes\n`Dans les gabarits, on peut \xe9crire\n  sur plusieurs lignes. `\n\n// Interpolation de cha\xeene\nvar nom = "Robert", jour = "aujourd\'hui";\n`Bonjour ${nom}, comment allez-vous ${jour} ?`\n\n// On peut construire un pr\xe9fixe HTTP \n// afin de construire plus facilement\n// des requ\xeates via des substitutions\nPOST`http://toto.org/truc?a=${a}&b=${b}\n     Content-Type: application/json\n     X-Credentials: ${credentials}\n     { "toto": ${toto},\n       "truc": ${truc}}`(myOnReadyStateChangeHandler);\n')),Object(l.mdx)("h4",{id:"utilisation-des-caract\xe8res-sp\xe9ciaux"},"Utilisation des caract\xe8res sp\xe9ciaux"),Object(l.mdx)("p",null,"En plus des caract\xe8res \xab classiques \xbb, il est possible d'ins\xe9rer des caract\xe8res sp\xe9ciaux dans les cha\xeenes de caract\xe8res. Voici un exemple :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'"une ligne \\n une autre ligne"\n')),Object(l.mdx)("p",null,"Voici un tableau listant les caract\xe8res sp\xe9ciaux qu'il est possible d'utiliser dans les cha\xeenes de caract\xe8res JavaScript :"),Object(l.mdx)("table",null,Object(l.mdx)("thead",{parentName:"table"},Object(l.mdx)("tr",{parentName:"thead"},Object(l.mdx)("th",Object(n.a)({parentName:"tr"},{align:null}),"Caract\xe8re"),Object(l.mdx)("th",Object(n.a)({parentName:"tr"},{align:null}),"Signification"))),Object(l.mdx)("tbody",{parentName:"table"},Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"\\0")),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"Octet null")),Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"\\b")),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"Retour arri\xe8re")),Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"\\f")),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"Saut de page")),Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"\\n")),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"Nouvelle ligne")),Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"\\r")),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"Retour chariot")),Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"\\t")),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"Tabulation")),Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"\\v")),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"Tabulation verticale")),Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"\\'")),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"Apostrophe ou guillemet droit simple")),Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},'\\"')),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"Guillemet droit double")),Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"\\\\")),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"Barre oblique invers\xe9e")),Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"\\*XXX*")),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"Le caract\xe8re dont l'encodage Latin-1 est sp\xe9cifi\xe9 gr\xe2ce \xe0, au plus, 3 chiffres octaux ",Object(l.mdx)("em",{parentName:"td"},"XXX")," entre 0 et 377. \\251, par exemple repr\xe9sente le caract\xe8re copyright.")),Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"\\x*XX*")),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"Le caract\xe8re dont l'encodage Latin-1 est sp\xe9cifi\xe9 par deux chiffres hexad\xe9cimaux entre 00 et FF. Ainsi, \\xA9 correspond \xe0 la s\xe9quence hexad\xe9cimale pour le caract\xe8re copyright.")),Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null})),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"\\u*XXXX*")),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"Le caract\xe8re Unicode sp\xe9cifi\xe9 par quatre chiffres hexad\xe9cimaux ",Object(l.mdx)("em",{parentName:"td"},"XXXX"),". Ainsi, \\u00A9 correspondra \xe0 la s\xe9quence Unicode du symbole copyright. Voir ",Object(l.mdx)("a",Object(n.a)({parentName:"td"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Types_et_grammaire#Unicode_escape_sequences"}),"Unicode escape sequences"),".")),Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"\\u{*XXXXX}*")),Object(l.mdx)("td",Object(n.a)({parentName:"tr"},{align:null}),"\xc9chappement de codes Unicode. Par exemple, \\u{2F804} est \xe9quivalent \xe0 la combinaison d'\xe9chappements \xab simples \xbb \\uD87E\\uDC04.")))),Object(l.mdx)("h4",{id:"les-caract\xe8res-d\xe9chappement"},"Les caract\xe8res d'\xe9chappement"),Object(l.mdx)("p",null,"Pour les caract\xe8res qui ne font pas partie du tableau pr\xe9c\xe9dent, les barres obliques invers\xe9es (",Object(l.mdx)("em",{parentName:"p"},"backslash"),") les pr\xe9c\xe9dant sont ignor\xe9es. Cependant, cet usage est obsol\xe8te et devrait \xeatre \xe9vit\xe9."),Object(l.mdx)("p",null,"En pr\xe9c\xe9dant d'une barre oblique invers\xe9e les guillemets droits doubles, on ",Object(l.mdx)("em",{parentName:"p"},"\xe9chappe")," ces caract\xe8res. Voici un exemple :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'var citation = "Il lit \\"Bug Jargal\\" de V. Hugo.";\nconsole.log(citation);\n')),Object(l.mdx)("p",null,"Le r\xe9sultat serait alors"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-html"}),'Il lit "Bug Jargal" de V. Hugo.\n')),Object(l.mdx)("p",null,"Pour inclure une barre oblique invers\xe9e dans une cha\xeene de caract\xe8res, il faut aussi l'\xe9chapper. Par exemple, pour stocker le chemin ",Object(l.mdx)("inlineCode",{parentName:"p"},"c:\\temp")," dans une cha\xeene de caract\xe8res, on utilisera le code suivant :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'var chemin = "c:\\\\temp";\n')),Object(l.mdx)("p",null,"Il est \xe9galement possible d'\xe9chapper des sauts de lignes de la m\xeame fa\xe7on. La barre oblique invers\xe9e et le saut de ligne seront alors ignor\xe9s dans la valeur de la cha\xeene de caract\xe8res."),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'var str = "cette cha\xeene \\\nest cass\xe9e \\\nsur plusieurs \\\nlignes."\nconsole.log(str);   // cette cha\xeene est cass\xe9e sur plusieurs lignes.\n')),Object(l.mdx)("p",null,"Avant ECMAScript 2015 (ES6), JavaScript ne disposait pas d'une syntaxe permettant de traiter les cha\xeenes de caract\xe8res comme des contenus de fichier, il est possible d'ajouter un caract\xe8re de saut de ligne \xe9chapp\xe9 et un saut de ligne en fin de ligne en utilisant cette fa\xe7on :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'var po\xe8me = \n"Les roses sont rouges,\\n\\\nLes violettes sont bleues.\\n\\\nLe miel est sucr\xe9,\\n\\\nEt moi je suis."\n')),Object(l.mdx)("p",null,"Gr\xe2ce \xe0 ES6, on peut utiliser des ",Object(l.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://tech.mozfr.org/post/2015/05/27/ES6-en-details-%3A-les-gabarits-de-chaines-de-caracteres"}),"litt\xe9raux de gabarits qui offrent de nouvelles fonctionnalit\xe9s")," dont une qui permet d'avoir des cha\xeenes de caract\xe8res \xe9crites sur plusieurs lignes :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"var po\xe8me = \n`Les roses sont rouges,\nLes violettes sont bleues,\nLe miel est sucr\xe9,\nEt moi je suis.`\n")),Object(l.mdx)("h2",{id:"en-savoir-plus"},"En savoir plus"),Object(l.mdx)("p",null,"Ce chapitre est centr\xe9 sur les bases de la syntaxe, les d\xe9clarations et les types utilis\xe9s en JavaScript. Pour en savoir plus sur les diff\xe9rents composants du langage, voir les chapitres suivants du guide:"),Object(l.mdx)("ul",null,Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("a",Object(n.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Contr%C3%B4le_du_flux_Gestion_des_erreurs"}),"Contr\xf4le du flux et gestion des erreurs")),Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("a",Object(n.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Boucles_et_it%C3%A9ration"}),"Boucles et it\xe9ration")),Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("a",Object(n.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Fonctions"}),"Fonctions")),Object(l.mdx)("li",{parentName:"ul"},Object(l.mdx)("a",Object(n.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Expressions_et_Op%C3%A9rateurs"}),"Expressions et op\xe9rateurs"))),Object(l.mdx)("p",null,"Dans le chapitre suivant, on abordera les structures conditionnelles, permettant de diriger le flux d'instructions et la gestion des erreurs."))}d.isMDXComponent=!0},212:function(e,t,a){"use strict";a.r(t),a.d(t,"MDXContext",(function(){return d})),a.d(t,"MDXProvider",(function(){return p})),a.d(t,"mdx",(function(){return j})),a.d(t,"useMDXComponents",(function(){return m})),a.d(t,"withMDXComponents",(function(){return u}));var n=a(0),r=a.n(n);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=r.a.createContext({}),u=function(e){return function(t){var a=m(t.components);return r.a.createElement(e,i({},t,{components:a}))}},m=function(e){var t=r.a.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},p=function(e){var t=m(e.components);return r.a.createElement(d.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},x=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,i=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),d=m(a),u=n,p=d["".concat(i,".").concat(u)]||d[u]||b[u]||l;return a?r.a.createElement(p,c(c({ref:t},s),{},{components:a})):r.a.createElement(p,c({ref:t},s))}));function j(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,i=new Array(l);i[0]=x;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var o=2;o<l;o++)i[o]=a[o];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,a)}x.displayName="MDXCreateElement"}}]);
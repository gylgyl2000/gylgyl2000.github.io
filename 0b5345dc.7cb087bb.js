(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{212:function(e,t,n){"use strict";n.r(t),n.d(t,"MDXContext",(function(){return p})),n.d(t,"MDXProvider",(function(){return u})),n.d(t,"mdx",(function(){return j})),n.d(t,"useMDXComponents",(function(){return c})),n.d(t,"withMDXComponents",(function(){return s}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function m(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=i.a.createContext({}),s=function(e){return function(t){var n=c(t.components);return i.a.createElement(e,o({},t,{components:n}))}},c=function(e){var t=i.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):m(m({},t),e)),n},u=function(e){var t=c(e.components);return i.a.createElement(p.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},x=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,l=d(e,["components","mdxType","originalType","parentName"]),p=c(n),s=a,u=p["".concat(o,".").concat(s)]||p[s]||b[s]||r;return n?i.a.createElement(u,m(m({ref:t},l),{},{components:n})):i.a.createElement(u,m({ref:t},l))}));function j(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=x;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var d=2;d<r;d++)o[d]=n[d];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}x.displayName="MDXCreateElement"},72:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return m})),n.d(t,"default",(function(){return p}));var a=n(3),i=n(7),r=(n(0),n(212)),o={id:"Codecademy-Learn_JavaScript-11",title:"Intermediate JavaScript Modules"},l={unversionedId:"Codecademy/Codecademy-Learn_JavaScript-11",id:"Codecademy/Codecademy-Learn_JavaScript-11",isDocsHomePage:!1,title:"Intermediate JavaScript Modules",description:"Learn how to use JavaScript modules, a way to create reusable logic in your programs.",source:"@site/docs/Codecademy/Codecademy-Learn_JavaScript-11.md",slug:"/Codecademy/Codecademy-Learn_JavaScript-11",permalink:"/docs/Codecademy/Codecademy-Learn_JavaScript-11",editUrl:"https://github.com/gylgyl2000/laloutre.github.io/edit/main/docs/Codecademy/Codecademy-Learn_JavaScript-11.md",version:"current"},m=[{value:"01. Hello Modules",id:"01-hello-modules",children:[]},{value:"02. module.exports",id:"02-moduleexports",children:[]},{value:"03. require()",id:"03-require",children:[]},{value:"04. module.exports II",id:"04-moduleexports-ii",children:[]},{value:"05. export default",id:"05-export-default",children:[]},{value:"06. import",id:"06-import",children:[]},{value:"07. Named Exports",id:"07-named-exports",children:[]},{value:"08. Named Imports",id:"08-named-imports",children:[]},{value:"09. Export Named Exports",id:"09-export-named-exports",children:[]},{value:"10. Import Named Imports",id:"10-import-named-imports",children:[]},{value:"11. Export as",id:"11-export-as",children:[]},{value:"12. Import as",id:"12-import-as",children:[]},{value:"13. Combining Export Statements",id:"13-combining-export-statements",children:[]},{value:"14. Combining Import Statements",id:"14-combining-import-statements",children:[]},{value:"15. Review",id:"15-review",children:[]},{value:"Cheatsheet",id:"cheatsheet",children:[{value:"Import Javascript modules with the require function",id:"import-javascript-modules-with-the-require-function",children:[]},{value:"Intermediate Javascript : Export Module",id:"intermediate-javascript--export-module",children:[]},{value:"Javascript export default",id:"javascript-export-default",children:[]},{value:"Using the import keyword in Javascript",id:"using-the-import-keyword-in-javascript",children:[]}]}],d={rightToc:m};function p(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.mdx)("wrapper",Object(a.a)({},d,n,{components:t,mdxType:"MDXLayout"}),Object(r.mdx)("p",null,"Learn how to use JavaScript modules, a way to create reusable logic in your programs."),Object(r.mdx)("h2",{id:"01-hello-modules"},"01. Hello Modules"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/modules/exercises/hello-modules"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,"JavaScript ",Object(r.mdx)("em",{parentName:"p"},"modules")," are reusable pieces of code that can be exported from one program and imported for use in another program.\nModules are particularly useful for a number of reasons. By separating code with similar logic into files called modules, we can :"),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},"find, fix, and debug code more easily ; "),Object(r.mdx)("li",{parentName:"ul"},"reuse and recycle defined logic in different parts of our application ; "),Object(r.mdx)("li",{parentName:"ul"},"keep information private and protected from other modules ;  "),Object(r.mdx)("li",{parentName:"ul"},"and, importantly, prevent pollution of the global namespace and potential naming collisions, by cautiously selecting variables and behavior we load into a program.")),Object(r.mdx)("p",null,"In this lesson, we\u2019ll cover two ways to implement modules in JavaScript : ",Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://nodejs.org/en/about/"}),"Node.js\u2019s")," ",Object(r.mdx)("inlineCode",{parentName:"p"},"module.exports")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"require()")," syntax, as well as the ES6 ",Object(r.mdx)("inlineCode",{parentName:"p"},"import"),"/",Object(r.mdx)("inlineCode",{parentName:"p"},"export")," syntax."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Instructions")),Object(r.mdx)("p",null,"Once you feel like you have a high-level understanding of modules, proceed to the next exercise. "),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"02-moduleexports"},"02. module.exports"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/modules/exercises/module-exports"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,"We can get started with modules by defining a module in one file and making the module available for use in another file with Node.js ",Object(r.mdx)("inlineCode",{parentName:"p"},"module.exports")," syntax. Every JavaScript file run in Node has a local ",Object(r.mdx)("inlineCode",{parentName:"p"},"module")," object with an ",Object(r.mdx)("inlineCode",{parentName:"p"},"exports")," property used to define what should be exported from the file.\nBelow is an example of how to define a module and how to export it using the statement ",Object(r.mdx)("inlineCode",{parentName:"p"},"module.exports"),".\nIn ",Object(r.mdx)("strong",{parentName:"p"},"menu.js")," we write :"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'let Menu = {};\nMenu.specialty = "Roasted Beet Burger with Mint Sauce";\n\nmodule.exports = Menu; \n')),Object(r.mdx)("p",null,"Let\u2019s consider what this code means. "),Object(r.mdx)("ol",null,Object(r.mdx)("li",{parentName:"ol"},Object(r.mdx)("inlineCode",{parentName:"li"},"let Menu = {};")," creates the object that represents the module ",Object(r.mdx)("inlineCode",{parentName:"li"},"Menu"),". The statement contains an uppercase variable named ",Object(r.mdx)("inlineCode",{parentName:"li"},"Menu")," which is set equal to an empty object. "),Object(r.mdx)("li",{parentName:"ol"},Object(r.mdx)("inlineCode",{parentName:"li"},"Menu.specialty")," is defined as a property of the ",Object(r.mdx)("inlineCode",{parentName:"li"},"Menu")," module. We add data to the ",Object(r.mdx)("inlineCode",{parentName:"li"},"Menu")," object by setting properties on that object and giving the properties a value."),Object(r.mdx)("li",{parentName:"ol"},Object(r.mdx)("inlineCode",{parentName:"li"},'"Roasted Beet Burger with Mint Sauce";')," is the value stored in the ",Object(r.mdx)("inlineCode",{parentName:"li"},"Menu.specialty")," property. "),Object(r.mdx)("li",{parentName:"ol"},Object(r.mdx)("inlineCode",{parentName:"li"},"module.exports = Menu;")," exports the ",Object(r.mdx)("inlineCode",{parentName:"li"},"Menu")," object as a module. ",Object(r.mdx)("inlineCode",{parentName:"li"},"module")," is a variable that represents the module, and ",Object(r.mdx)("inlineCode",{parentName:"li"},"exports")," exposes the module as an object.")),Object(r.mdx)("p",null,"The pattern we use to export modules is thus : "),Object(r.mdx)("ol",null,Object(r.mdx)("li",{parentName:"ol"},"Create an object to represent the module. "),Object(r.mdx)("li",{parentName:"ol"},"Add properties or methods to the module object."),Object(r.mdx)("li",{parentName:"ol"},"Export the module with ",Object(r.mdx)("inlineCode",{parentName:"li"},"module.exports"),".")),Object(r.mdx)("p",null,"Let\u2019s create our first module."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Instructions")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"1.")," Let\u2019s begin by implementing the pattern above in an example. In ",Object(r.mdx)("strong",{parentName:"p"},"1-airplane.js")," create an object named ",Object(r.mdx)("inlineCode",{parentName:"p"},"Airplane"),". "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"2.")," Within the same file, add a property to the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Airplane")," object named ",Object(r.mdx)("inlineCode",{parentName:"p"},"myAirplane")," and set it equal to ",Object(r.mdx)("inlineCode",{parentName:"p"},'"StarJet"'),". "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"3.")," Export the module."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'// 1-airplane.js\nlet Airplane = {};\nAirplane.myAirplane = "StarJet";\nmodule.exports = Airplane;\n')),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"03-require"},"03. require()"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/modules/exercises/require"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,"To make use of the exported module and the behavior we define within it, we import the module into another file. In Node.js, use the ",Object(r.mdx)("inlineCode",{parentName:"p"},"require()")," function to import modules.\nFor instance, say we want the module to control the menu\u2019s data and behavior, and we want a separate file to handle placing an order. We would create a separate file ",Object(r.mdx)("strong",{parentName:"p"},"order.js")," and import the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Menu")," module from ",Object(r.mdx)("strong",{parentName:"p"},"menu.js")," to ",Object(r.mdx)("strong",{parentName:"p"},"order.js")," using ",Object(r.mdx)("inlineCode",{parentName:"p"},"require()"),". ",Object(r.mdx)("inlineCode",{parentName:"p"},"require()")," takes a file path argument pointing to the original module file.\nIn ",Object(r.mdx)("strong",{parentName:"p"},"order.js")," we would write :"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const Menu = require('./menu.js');\n\nfunction placeOrder() {\n  console.log('My order is: ' + Menu.specialty);\n}\n\nplaceOrder();\n")),Object(r.mdx)("p",null,"We now have the entire behavior of ",Object(r.mdx)("inlineCode",{parentName:"p"},"Menu")," available in ",Object(r.mdx)("strong",{parentName:"p"},"order.js"),". Here, we notice :"),Object(r.mdx)("ol",null,Object(r.mdx)("li",{parentName:"ol"},"In ",Object(r.mdx)("strong",{parentName:"li"},"order.js")," we import the module by creating a ",Object(r.mdx)("inlineCode",{parentName:"li"},"const")," variable called ",Object(r.mdx)("inlineCode",{parentName:"li"},"Menu")," and setting it equal to the value of the ",Object(r.mdx)("inlineCode",{parentName:"li"},"require()")," function. We can set the name of this variable to anything we like, such as ",Object(r.mdx)("inlineCode",{parentName:"li"},"menuItems"),".  "),Object(r.mdx)("li",{parentName:"ol"},Object(r.mdx)("inlineCode",{parentName:"li"},"require()")," is a JavaScript function that loads a module. It\u2019s argument is the file path of the module : ",Object(r.mdx)("inlineCode",{parentName:"li"},"./menu.js"),". With ",Object(r.mdx)("inlineCode",{parentName:"li"},"require()"),", the ",Object(r.mdx)("inlineCode",{parentName:"li"},".js")," extension is optional and will be assumed if it is not included."),Object(r.mdx)("li",{parentName:"ol"},"The ",Object(r.mdx)("inlineCode",{parentName:"li"},"placeOrder()")," function then uses the ",Object(r.mdx)("inlineCode",{parentName:"li"},"Menu")," module. By calling ",Object(r.mdx)("inlineCode",{parentName:"li"},"Menu.specialty"),", we access the property ",Object(r.mdx)("inlineCode",{parentName:"li"},"specialty")," defined in the ",Object(r.mdx)("inlineCode",{parentName:"li"},"Menu")," module. ")),Object(r.mdx)("p",null,"Taking a closer look, the pattern to import a module is :"),Object(r.mdx)("ol",null,Object(r.mdx)("li",{parentName:"ol"},"Import the module with ",Object(r.mdx)("inlineCode",{parentName:"li"},"require()")," and assign it to a local variable."),Object(r.mdx)("li",{parentName:"ol"},"Use the module and its properties within a program. ")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Instructions")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"1.")," In ",Object(r.mdx)("strong",{parentName:"p"},"1-missionControl.js")," use the ",Object(r.mdx)("inlineCode",{parentName:"p"},"require()")," function to import the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Airplane")," module from ",Object(r.mdx)("strong",{parentName:"p"},"1-airplane.js"),".\nRecall that you will need to use the precise name of the file that contains the module. "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"2.")," In ",Object(r.mdx)("strong",{parentName:"p"},"1-missionControl.js"),", define a function ",Object(r.mdx)("inlineCode",{parentName:"p"},"displayAirplane()"),". In the function, log the value of the module and its property to the console. "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"3.")," Call the ",Object(r.mdx)("inlineCode",{parentName:"p"},"displayAirplane()")," function. In the console, you should see the name of the airplane you defined in the module. "),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const Airplane = require('./1-airplane.js');\n\nfunction displayAirplane() {\n  console.log(Airplane.myAirplane);\n};\n\ndisplayAirplane(); // StarJet\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"04-moduleexports-ii"},"04. module.exports II"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/modules/exercises/module-exports-ii"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,"We can also wrap any collection of data and functions in an object, and export the object using ",Object(r.mdx)("inlineCode",{parentName:"p"},"module.exports"),". In ",Object(r.mdx)("strong",{parentName:"p"},"menu.js"),", we could write :"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'module.exports = {\n  specialty: "Roasted Beet Burger with Mint Sauce",\n  getSpecialty: function() {\n    return this.specialty;\n  } \n}; \n')),Object(r.mdx)("p",null,"In the above code, notice :"),Object(r.mdx)("ol",null,Object(r.mdx)("li",{parentName:"ol"},Object(r.mdx)("inlineCode",{parentName:"li"},"module.exports")," exposes the current module as an object. "),Object(r.mdx)("li",{parentName:"ol"},Object(r.mdx)("inlineCode",{parentName:"li"},"specialty")," and ",Object(r.mdx)("inlineCode",{parentName:"li"},"getSpecialty")," are properties on the object.")),Object(r.mdx)("p",null,"Then in ",Object(r.mdx)("strong",{parentName:"p"},"order.js"),", we write :"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const Menu = require('./menu.js');\n\nconsole.log(Menu.getSpecialty());\n")),Object(r.mdx)("p",null,"Here we can still access the behavior in the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Menu")," module. "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Instructions")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"1.")," In ",Object(r.mdx)("strong",{parentName:"p"},"2-airplane.js"),", set ",Object(r.mdx)("inlineCode",{parentName:"p"},"module.exports")," equal to an empty object. "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"2.")," Within the object, create a key called ",Object(r.mdx)("inlineCode",{parentName:"p"},"myAirplane")," and set it to a value ",Object(r.mdx)("inlineCode",{parentName:"p"},'"CloudJet"'),"."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"3.")," Again, within ",Object(r.mdx)("inlineCode",{parentName:"p"},"module.exports"),", create another key ",Object(r.mdx)("inlineCode",{parentName:"p"},"displayAirplane")," and set it to an anonymous function. The function should use the ",Object(r.mdx)("inlineCode",{parentName:"p"},"this")," statement to return ",Object(r.mdx)("inlineCode",{parentName:"p"},"myAirplane"),". "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"4.")," In ",Object(r.mdx)("strong",{parentName:"p"},"2-missionControl.js")," use the ",Object(r.mdx)("inlineCode",{parentName:"p"},"require()")," function to import the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Airplane")," module. "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"5.")," In ",Object(r.mdx)("strong",{parentName:"p"},"2-missionControl.js")," log the result of calling ",Object(r.mdx)("inlineCode",{parentName:"p"},".displayAirplane()")," to the console, noting that it is a method of the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Airplane")," object."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'// 2-plane.js\nmodule.exports = {\n  myAirplane: "CloudJet",\n  displayAirplane: function() {\n    return this.myAirplane;\n  }\n};\n')),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// 2-missionControl.js\nconst Airplane = require('./2-airplane.js');\nconsole.log(Airplane.displayAirplane()); // CloudJet\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"05-export-default"},"05. export default"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/modules/exercises/export-default"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,"Node.js supports ",Object(r.mdx)("inlineCode",{parentName:"p"},"require()"),"/",Object(r.mdx)("inlineCode",{parentName:"p"},"module.exports"),", but as of ES6, JavaScript supports a new more readable and flexible syntax for exporting modules. These are usually broken down into one of two techniques, ",Object(r.mdx)("em",{parentName:"p"},"default export")," and ",Object(r.mdx)("em",{parentName:"p"},"named exports"),".\nWe\u2019ll begin with the first syntax, default export. The default export syntax works similarly to the ",Object(r.mdx)("inlineCode",{parentName:"p"},"module.exports")," syntax, allowing us to export one module per file.\nLet\u2019s look at an example in ",Object(r.mdx)("strong",{parentName:"p"},"menu.js"),". "),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let Menu = {};\n\nexport default Menu;\n")),Object(r.mdx)("ol",null,Object(r.mdx)("li",{parentName:"ol"},Object(r.mdx)("inlineCode",{parentName:"li"},"export default")," uses the JavaScript ",Object(r.mdx)("inlineCode",{parentName:"li"},"export")," statement to export JavaScript objects, functions, and primitive data types. "),Object(r.mdx)("li",{parentName:"ol"},Object(r.mdx)("inlineCode",{parentName:"li"},"Menu")," refers to the name of the ",Object(r.mdx)("inlineCode",{parentName:"li"},"Menu")," object, the object that we are setting the properties on within our modules.")),Object(r.mdx)("p",null,"When using ES6 syntax, we use ",Object(r.mdx)("inlineCode",{parentName:"p"},"export default")," in place of ",Object(r.mdx)("inlineCode",{parentName:"p"},"module.exports"),". Node.js doesn\u2019t support ",Object(r.mdx)("inlineCode",{parentName:"p"},"export default")," by default, so ",Object(r.mdx)("inlineCode",{parentName:"p"},"module.exports")," is usually used for Node.js development and ES6 syntax is used for front-end development. As with most ES6 features, it is common to transpile code since ES6 is ",Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://caniuse.com/#feat=es6"}),"not supported by all browsers"),"."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Instructions")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"1.")," In ",Object(r.mdx)("strong",{parentName:"p"},"airplane.js"),", let\u2019s again create an ",Object(r.mdx)("inlineCode",{parentName:"p"},"Airplane")," module from scratch, this time exporting the module with ",Object(r.mdx)("inlineCode",{parentName:"p"},"export default"),". Create an object to represent the module called ",Object(r.mdx)("inlineCode",{parentName:"p"},"Airplane"),". "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"2.")," Now that we have an object ",Object(r.mdx)("inlineCode",{parentName:"p"},"Airplane"),", we can continue by adding data in the form of properties and values to the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Airplane")," module.\nCreate an ",Object(r.mdx)("inlineCode",{parentName:"p"},"availableAirplanes")," variable and set it equal to an empty array. Be sure that ",Object(r.mdx)("inlineCode",{parentName:"p"},"availableAirplanes")," is a property of the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Airplane")," object.  "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"3.")," In the ",Object(r.mdx)("inlineCode",{parentName:"p"},"availableAirplanes")," array, add two array elements that are both of type object.\nThe first object should contain a property ",Object(r.mdx)("inlineCode",{parentName:"p"},"name")," with a value ",Object(r.mdx)("inlineCode",{parentName:"p"},"'AeroJet'")," and a property ",Object(r.mdx)("inlineCode",{parentName:"p"},"fuelCapacity")," with a value of ",Object(r.mdx)("inlineCode",{parentName:"p"},"800"),".\nThe second object should have a property ",Object(r.mdx)("inlineCode",{parentName:"p"},"name")," with a value of ",Object(r.mdx)("inlineCode",{parentName:"p"},"'SkyJet'")," and a property ",Object(r.mdx)("inlineCode",{parentName:"p"},"fuelCapacity")," with a value of ",Object(r.mdx)("inlineCode",{parentName:"p"},"500"),". "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"4.")," Use ",Object(r.mdx)("inlineCode",{parentName:"p"},"export default")," to export the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Airplane module"),".\nNice work ! We added a property that lists the ",Object(r.mdx)("inlineCode",{parentName:"p"},"availableAirplanes")," to the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Airplane")," module."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// airplane.js\nlet Airplane = {\n  availableAirplanes: [\n    {\n      name: 'AeroJet',\n      fuelCapacity: 800\n    },\n    {\n      name: 'SkyJet',\n      fuelCapacity: 500\n    }\n  ]\n};\nexport default Airplane;\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"06-import"},"06. import"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/modules/exercises/import"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,"ES6 module syntax also introduces the ",Object(r.mdx)("inlineCode",{parentName:"p"},"import")," keyword for importing objects. In our ",Object(r.mdx)("strong",{parentName:"p"},"order.js")," example, we import an object like this:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import Menu from './menu';\n")),Object(r.mdx)("ol",null,Object(r.mdx)("li",{parentName:"ol"},"The ",Object(r.mdx)("inlineCode",{parentName:"li"},"import")," keyword begins the statement."),Object(r.mdx)("li",{parentName:"ol"},"The keyword ",Object(r.mdx)("inlineCode",{parentName:"li"},"Menu")," here specifies the name of the variable to store the default export in."),Object(r.mdx)("li",{parentName:"ol"},Object(r.mdx)("inlineCode",{parentName:"li"},"from")," specifies where to load the module from. "),Object(r.mdx)("li",{parentName:"ol"},Object(r.mdx)("inlineCode",{parentName:"li"},"'./menu'")," is the name of the module to load. When dealing with local files, it specifically refers to the name of the file without the extension of the file.")),Object(r.mdx)("p",null,"We can then continue using the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Menu")," module in the ",Object(r.mdx)("strong",{parentName:"p"},"order.js")," file. "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Instructions")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"1.")," In ",Object(r.mdx)("strong",{parentName:"p"},"missionControl.js")," we\u2019ll use the module ",Object(r.mdx)("inlineCode",{parentName:"p"},"Airplane")," to display the fuel capacity of both our airplanes.\nUse the ",Object(r.mdx)("inlineCode",{parentName:"p"},"import")," keyword to import the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Airplane")," module."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"2.")," Define a function ",Object(r.mdx)("inlineCode",{parentName:"p"},"displayFuelCapacity()"),"."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"3.")," Within the body of the ",Object(r.mdx)("inlineCode",{parentName:"p"},"displayFuelCapacity")," function, use ",Object(r.mdx)("inlineCode",{parentName:"p"},"forEach()")," to iterate over the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Airplane.availableAirplanes")," array.\nThe ",Object(r.mdx)("inlineCode",{parentName:"p"},"forEach()")," should take an anonymous function as a parameter. We\u2019ll add more in the next step. "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"4.")," Pass the anonymous function you created in the last step a parameter of ",Object(r.mdx)("inlineCode",{parentName:"p"},"element"),". "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"5.")," Within the ",Object(r.mdx)("inlineCode",{parentName:"p"},"displayFuelCapacity")," function, use ",Object(r.mdx)("inlineCode",{parentName:"p"},"console.log()")," to output the element\u2019s name and its fuel capacity. The output should look like this :"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"'Fuel Capacity of + (element name) : + (element fuelCapacity)'\n")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"6.")," Call the ",Object(r.mdx)("inlineCode",{parentName:"p"},"displayFuelCapacity")," function. "),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// missionControl.js\nimport Airplane from './airplane';\nfunction displayFuelCapacity() {\n  Airplane.availableAirplanes.forEach((element) => {\n    console.log('Fuel Capacity of ' + element.name + ' : ' + element.fuelCapacity)\n  });\n};\ndisplayFuelCapacity();\n// Fuel Capacity of AeroJet : 800\n// Fuel Capacity of SkyJet : 500\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"07-named-exports"},"07. Named Exports"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/modules/exercises/named-exports"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,"ES6 introduced a second common approach to export modules. In addition to ",Object(r.mdx)("inlineCode",{parentName:"p"},"export default"),", ",Object(r.mdx)("em",{parentName:"p"},"named exports")," allow us to export data through the use of variables.\nLet\u2019s see how this works. In ",Object(r.mdx)("strong",{parentName:"p"},"menu.js")," we would be sure to give each piece of data a distinct variable name :"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let specialty = '';\nfunction isVegetarian() {\n}; \nfunction isLowSodium() {\n}; \n\nexport { specialty, isVegetarian };\n")),Object(r.mdx)("ol",null,Object(r.mdx)("li",{parentName:"ol"},"Notice that, when we use named exports, we are not setting the properties on an object. Each export is stored in its own variable."),Object(r.mdx)("li",{parentName:"ol"},Object(r.mdx)("inlineCode",{parentName:"li"},"specialty")," is a string object, while ",Object(r.mdx)("inlineCode",{parentName:"li"},"isVegetarian")," and ",Object(r.mdx)("inlineCode",{parentName:"li"},"isLowSodium")," are objects in the form of functions. Recall that in JavaScript, every function is in fact a function object. "),Object(r.mdx)("li",{parentName:"ol"},Object(r.mdx)("inlineCode",{parentName:"li"},"export { specialty, isVegetarian };")," exports objects by their variable names. Notice the keyword ",Object(r.mdx)("inlineCode",{parentName:"li"},"export")," is the prefix. "),Object(r.mdx)("li",{parentName:"ol"},Object(r.mdx)("inlineCode",{parentName:"li"},"specialty")," and ",Object(r.mdx)("inlineCode",{parentName:"li"},"isVegetarian")," are exported, while ",Object(r.mdx)("inlineCode",{parentName:"li"},"isLowSodium")," is not exported, since it is not specified in the export syntax. ")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Instructions")),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let Airplane = {\n  availableAirplanes: [\n    {\n      name: 'AeroJet',\n      fuelCapacity: 800\n    },\n    {\n      name: 'SkyJet',\n      fuelCapacity: 500\n    }\n  ]\n};\nexport default Airplane;\n")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"1.")," Remove the statement that sets ",Object(r.mdx)("inlineCode",{parentName:"p"},"Airplane")," to an empty object, and remove the entire ",Object(r.mdx)("inlineCode",{parentName:"p"},"export default")," line.\nYou will see an error in the console, but we\u2019ll fix this in the next step. "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"2.")," Modify the ",Object(r.mdx)("inlineCode",{parentName:"p"},"availableAirplanes")," array such that it is a variable defined with ",Object(r.mdx)("inlineCode",{parentName:"p"},"let")," and no longer a property on the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Airplane")," object. "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"3.")," Let\u2019s add some more data to the ",Object(r.mdx)("inlineCode",{parentName:"p"},"availableAirplanes")," array.\nIn the first object, ",Object(r.mdx)("inlineCode",{parentName:"p"},"AeroJet"),", add a property ",Object(r.mdx)("inlineCode",{parentName:"p"},"availableStaff"),", and set it equal to an array with the elements ",Object(r.mdx)("inlineCode",{parentName:"p"},"'pilots'"),", ",Object(r.mdx)("inlineCode",{parentName:"p"},"'flightAttendants'"),", ",Object(r.mdx)("inlineCode",{parentName:"p"},"'engineers'"),", ",Object(r.mdx)("inlineCode",{parentName:"p"},"'medicalAssistance'")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"'sensorOperators'"),".\nIn the second object, ",Object(r.mdx)("inlineCode",{parentName:"p"},"SkyJet"),", add a property ",Object(r.mdx)("inlineCode",{parentName:"p"},"availableStaff"),", and set it equal to an array with the elements ",Object(r.mdx)("inlineCode",{parentName:"p"},"'pilots'")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"'flightAttendants'"),"."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"4.")," Define a new variable with ",Object(r.mdx)("inlineCode",{parentName:"p"},"let")," named ",Object(r.mdx)("inlineCode",{parentName:"p"},"flightRequirements"),", and set it equal to an empty object. "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"5.")," Within the ",Object(r.mdx)("inlineCode",{parentName:"p"},"flightRequirements")," object, add a property ",Object(r.mdx)("inlineCode",{parentName:"p"},"requiredStaff"),", and set this equal to ",Object(r.mdx)("inlineCode",{parentName:"p"},"4"),". "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"6.")," Define a function with the name ",Object(r.mdx)("inlineCode",{parentName:"p"},"meetsStaffRequirements()")," that takes ",Object(r.mdx)("inlineCode",{parentName:"p"},"availableStaff")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"requiredStaff")," as parameters."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"7.")," In the body of the ",Object(r.mdx)("inlineCode",{parentName:"p"},"meetsStaffRequirements()")," function, write logic to check if the length of the ",Object(r.mdx)("inlineCode",{parentName:"p"},"availableStaff")," array is greater than or equal to  ",Object(r.mdx)("inlineCode",{parentName:"p"},"requiredStaff"),".\nThe function should contain this logic :"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"if length of availableStaff is greater than or equal to requiredStaff\n  return true\nelse \n  return false \n")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"8.")," Using the ",Object(r.mdx)("inlineCode",{parentName:"p"},"export")," keyword, export the variables ",Object(r.mdx)("inlineCode",{parentName:"p"},"availableAirplanes"),", ",Object(r.mdx)("inlineCode",{parentName:"p"},"flightRequirements"),"  and  ",Object(r.mdx)("inlineCode",{parentName:"p"},"meetsStaffRequirements"),". "),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let Airplane = {};\nlet availableAirplanes = [\n  {\n    name: 'AeroJet',\n    fuelCapacity: 800,\n    availableStaff: [\n      'pilots',\n      'flightAttendants',\n      'engineers',\n      'medicalAssistance',\n      'sensorOperators'\n    ]\n  }, \n  {\n    name: 'SkyJet',\n    fuelCapacity: 500,\n    availableStaff: [\n      'pilots',\n      'flightAttendants'\n    ]\n  }\n];\nlet flightRequirements = {\n  requiredStaff: 4\n};\nfunction meetsStaffRequirements(availableStaff, requiredStaff) {\n  if (availableStaff.length >= requiredStaff) {\n    return true\n  } else {\n    return false\n  }\n};\nexport { availableAirplanes, flightRequirements, meetsStaffRequirements };\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"08-named-imports"},"08. Named Imports"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/modules/exercises/named-imports"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,"To import objects stored in a variable, we use the ",Object(r.mdx)("inlineCode",{parentName:"p"},"import")," keyword and include the variables in a set of ",Object(r.mdx)("inlineCode",{parentName:"p"},"{}"),".\nIn the ",Object(r.mdx)("strong",{parentName:"p"},"order.js")," file, for example, we would write :"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { specialty, isVegetarian } from './menu';\n\nconsole.log(specialty);\n")),Object(r.mdx)("ol",null,Object(r.mdx)("li",{parentName:"ol"},"Here ",Object(r.mdx)("inlineCode",{parentName:"li"},"specialty")," and ",Object(r.mdx)("inlineCode",{parentName:"li"},"isVegetarian")," are imported."),Object(r.mdx)("li",{parentName:"ol"},"If we did not want to import either of these variables, we could omit them from the ",Object(r.mdx)("inlineCode",{parentName:"li"},"import")," statement."),Object(r.mdx)("li",{parentName:"ol"},"We can then use these objects as in within our code. For example, we would use ",Object(r.mdx)("inlineCode",{parentName:"li"},"specialty")," instead of ",Object(r.mdx)("inlineCode",{parentName:"li"},"Menu.specialty"),". ")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Instructions")),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// missionControl.js\nimport Airplane from './airplane';\n\nfunction displayFuelCapacity() {\n  Airplane.availableAirplanes.forEach(function(element) {\n    console.log('Fuel Capacity of ' + element.name + ': ' + element.fuelCapacity);\n  });\n}\n\ndisplayFuelCapacity();\n")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"1.")," Let\u2019s remove any reference to ",Object(r.mdx)("inlineCode",{parentName:"p"},"Airplane")," in our code since we are no longer exporting this module.\nFor example, ",Object(r.mdx)("inlineCode",{parentName:"p"},"Airplane.availableAirplanes")," should be modified to ",Object(r.mdx)("inlineCode",{parentName:"p"},"availableAirplanes"),".\nAgain, you will see a ",Object(r.mdx)("inlineCode",{parentName:"p"},"ReferenceError")," in the console for now, but we will fix that in our next step. "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"2.")," Change the ",Object(r.mdx)("inlineCode",{parentName:"p"},"import")," statement such that it imports the ",Object(r.mdx)("inlineCode",{parentName:"p"},"availableAirplanes"),", ",Object(r.mdx)("inlineCode",{parentName:"p"},"flightRequirements"),", and ",Object(r.mdx)("inlineCode",{parentName:"p"},"meetsStaffRequirements")," variables.\nNow, modify any instance of the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Airplane.availableAirplanes")," variable, so that you only use ",Object(r.mdx)("inlineCode",{parentName:"p"},"availableAirplanes"),"."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"3.")," Define a function ",Object(r.mdx)("inlineCode",{parentName:"p"},"displayStaffStatus()"),"."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"4.")," Within the body of the ",Object(r.mdx)("inlineCode",{parentName:"p"},"displayStaffStatus()")," function, use the ",Object(r.mdx)("inlineCode",{parentName:"p"},"forEach")," to iterate over the ",Object(r.mdx)("inlineCode",{parentName:"p"},"availableAirplanes")," array.\nSpecifically, the ",Object(r.mdx)("inlineCode",{parentName:"p"},"forEach()")," should take a function as a parameter.  The function should in turn take ",Object(r.mdx)("inlineCode",{parentName:"p"},"element")," as a parameter. "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"5.")," Within the ",Object(r.mdx)("inlineCode",{parentName:"p"},"displayStaffStatus()")," function, use ",Object(r.mdx)("inlineCode",{parentName:"p"},"console.log()")," to output the element\u2019s name. We\u2019ll add more in the next step."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"6.")," Continuing within the ",Object(r.mdx)("inlineCode",{parentName:"p"},"displayStaffStatus()")," function, modify the ",Object(r.mdx)("inlineCode",{parentName:"p"},"console.log()")," statement to output"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"(element name) + ' meets staff requirements: ' + (true/false)\n")),Object(r.mdx)("p",null,"To do this, we can call the ",Object(r.mdx)("inlineCode",{parentName:"p"},"meetsStaffRequirements")," method, passing in two parameters ",Object(r.mdx)("inlineCode",{parentName:"p"},"element.availableStaff")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"flightRequirements.requiredStaff"),". "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"7.")," Call the ",Object(r.mdx)("inlineCode",{parentName:"p"},"displayStaffStatus()")," function. "),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// missionControl.js\nimport { availableAirplanes, flightRequirements, meetsStaffRequirements } from './airplane';\n\nfunction displayFuelCapacity() {\n  availableAirplanes.forEach(function(element) {\n    console.log('Fuel Capacity of ' + element.name + ': ' + element.fuelCapacity);\n  });\n}\nfunction displayStaffStatus() {\n  availableAirplanes.forEach(function(element) {\n    console.log(element.name + ' meets staff requirements: ' + meetsStaffRequirements(element.availableStaff, flightRequirements.requiredStaff));\n  });\n};\ndisplayFuelCapacity();\ndisplayStaffStatus();\n")),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"Fuel Capacity of AeroJet: 800\nFuel Capacity of SkyJet: 500\nAeroJet meets staff requirements: true\nSkyJet meets staff requirements: false\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"09-export-named-exports"},"09. Export Named Exports"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/modules/exercises/export-named-exports"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,"Named exports are also distinct in that they can be exported as soon as they are declared, by placing the keyword ",Object(r.mdx)("inlineCode",{parentName:"p"},"export")," in front of variable declarations.\nIn ",Object(r.mdx)("strong",{parentName:"p"},"menu.js")),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"export let specialty = '';\nexport function isVegetarian() {\n}; \nfunction isLowSodium() {\n}; \n")),Object(r.mdx)("ol",null,Object(r.mdx)("li",{parentName:"ol"},"The ",Object(r.mdx)("inlineCode",{parentName:"li"},"export")," keyword allows us to export objects upon declaration, as shown in ",Object(r.mdx)("inlineCode",{parentName:"li"},"export let specialty")," and ",Object(r.mdx)("inlineCode",{parentName:"li"},"export function isVegetarian() {}"),".  "),Object(r.mdx)("li",{parentName:"ol"},"We no longer need an ",Object(r.mdx)("inlineCode",{parentName:"li"},"export")," statement at the bottom of our file, since this behavior is handled above. ")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Instructions")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"1.")," Let\u2019s add some additional data to our ",Object(r.mdx)("strong",{parentName:"p"},"airplane.js")," file.\nContinue by adding more data to objects within the ",Object(r.mdx)("inlineCode",{parentName:"p"},"availableAirplanes")," variable.\nTo the first object AeroJet, add a property ",Object(r.mdx)("inlineCode",{parentName:"p"},"maxSpeed")," with a value of ",Object(r.mdx)("inlineCode",{parentName:"p"},"1200")," and a property ",Object(r.mdx)("inlineCode",{parentName:"p"},"minSpeed")," with a value of ",Object(r.mdx)("inlineCode",{parentName:"p"},"300"),".\nTo the second object SkyJet, add a property ",Object(r.mdx)("inlineCode",{parentName:"p"},"maxSpeed")," with a value of ",Object(r.mdx)("inlineCode",{parentName:"p"},"800")," and a property ",Object(r.mdx)("inlineCode",{parentName:"p"},"minSpeed")," with a value of ",Object(r.mdx)("inlineCode",{parentName:"p"},"200"),". "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"2.")," Within the ",Object(r.mdx)("inlineCode",{parentName:"p"},"flightRequirements")," object, add a property ",Object(r.mdx)("inlineCode",{parentName:"p"},"requiredSpeedRange")," and set this equal to ",Object(r.mdx)("inlineCode",{parentName:"p"},"700"),"."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"3.")," Continuing with the same file, add a new function ",Object(r.mdx)("inlineCode",{parentName:"p"},"meetsSpeedRangeRequirements()")," that takes three arguments ",Object(r.mdx)("inlineCode",{parentName:"p"},"maxSpeed"),", ",Object(r.mdx)("inlineCode",{parentName:"p"},"minSpeed")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"requiredSpeedRange"),"."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"4.")," Within the ",Object(r.mdx)("inlineCode",{parentName:"p"},"meetsSpeedRangeRequirements")," function, create a variable ",Object(r.mdx)("inlineCode",{parentName:"p"},"range"),", and set it to the difference between ",Object(r.mdx)("inlineCode",{parentName:"p"},"maxSpeed")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"minSpeed"),". "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"5."),"  In the body of the ",Object(r.mdx)("inlineCode",{parentName:"p"},"meetsSpeedRangeRequirements()")," function, create logic to check if the ",Object(r.mdx)("inlineCode",{parentName:"p"},"range")," is greater than the ",Object(r.mdx)("inlineCode",{parentName:"p"},"requiredSpeedRange"),".\nThe function should contain this logic :"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"if the `range` is greater than the `requiredSpeedRange`\n  return true\nelse \n  return false \n")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"6.")," Use ",Object(r.mdx)("inlineCode",{parentName:"p"},"export")," to export the variables as soon as they are declared, and remove the ",Object(r.mdx)("inlineCode",{parentName:"p"},"export")," statement at the bottom of the file."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"export let availableAirplanes = [\n  {\n    name: 'AeroJet',\n    fuelCapacity: 800,\n    availableStaff: [\n      'pilots',\n      'flightAttendants',\n      'engineers',\n      'medicalAssistance',\n      'sensorOperators'\n    ],\n    maxSpeed: 1200,\n    minSpeed: 300\n  }, \n  {\n    name: 'SkyJet',\n    fuelCapacity: 500,\n    availableStaff: [\n      'pilots',\n      'flightAttendants'\n    ],\n    maxSpeed: 800,\n    minSpeed: 200\n  }\n];\nexport let flightRequirements = {\n  requiredStaff: 4,\n  requiredSpeedRange: 700\n};\nexport function meetsStaffRequirements(availableStaff, requiredStaff) {\n  if (availableStaff.length >= requiredStaff) {\n    return true\n  } else {\n    return false\n  }\n};\nexport function meetsSpeedRangeRequirements(maxSpeed, minSpeed, requiredSpeedRange) {\n  let range = maxSpeed - minSpeed;\n  if (range > requiredSpeedRange) {\n    return true\n  } else {\n    return false\n  };\n};\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"10-import-named-imports"},"10. Import Named Imports"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/modules/exercises/import-named-imports"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,"To import variables that are declared, we simply use the original syntax that describes the variable name. In other words, exporting upon declaration does not have an impact on how we import the variables. "),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { specialty, isVegetarian } from 'menu';\n")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Instructions")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"1.")," Add ",Object(r.mdx)("inlineCode",{parentName:"p"},"meetsSpeedRangeRequirements")," to the ",Object(r.mdx)("inlineCode",{parentName:"p"},"import")," statement at the top of the file. "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"2.")," Define a function ",Object(r.mdx)("inlineCode",{parentName:"p"},"displaySpeedRangeStatus()"),"."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"3.")," Within the ",Object(r.mdx)("inlineCode",{parentName:"p"},"displaySpeedRangeStatus()")," function, use the ",Object(r.mdx)("inlineCode",{parentName:"p"},"forEach")," method to iterate over each element in the ",Object(r.mdx)("inlineCode",{parentName:"p"},"availableAirplanes")," array.\nAgain, the ",Object(r.mdx)("inlineCode",{parentName:"p"},"forEach()")," should take a function as a parameter; this function should take ",Object(r.mdx)("inlineCode",{parentName:"p"},"element")," as a parameter. "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"4.")," Within the ",Object(r.mdx)("inlineCode",{parentName:"p"},"displaySpeedRangeStatus()")," function, use ",Object(r.mdx)("inlineCode",{parentName:"p"},"console.log()")," to output the element\u2019s name. "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"5.")," Continuing within the ",Object(r.mdx)("inlineCode",{parentName:"p"},"displaySpeedRangeStatus()")," function, modify the ",Object(r.mdx)("inlineCode",{parentName:"p"},"console.log()")," statement to output a statement like this :"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"(element name) + 'meets speed range requirements: ' + (true/false)\n")),Object(r.mdx)("p",null,"To do this, we can call the ",Object(r.mdx)("inlineCode",{parentName:"p"},"meetsSpeedRangeRequirements")," method, passing in three parameters ",Object(r.mdx)("inlineCode",{parentName:"p"},"element.maxSpeed"),", ",Object(r.mdx)("inlineCode",{parentName:"p"},"element.minSpeed")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"flightRequirements.requiredSpeedRange"),". "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"6.")," Call the ",Object(r.mdx)("inlineCode",{parentName:"p"},"displaySpeedRangeStatus()")," function. "),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { availableAirplanes, flightRequirements, meetsStaffRequirements, meetsSpeedRangeRequirements } from './airplane';\n\nfunction displayFuelCapacity() {\n  availableAirplanes.forEach(function(element) {\n    console.log('Fuel Capacity of ' + element.name + ': ' + element.fuelCapacity);\n  });\n}\nfunction displayStaffStatus() {\n  availableAirplanes.forEach(function(element) {\n    console.log(element.name + ' meets staff requirements: ' + meetsStaffRequirements(element.availableStaff, flightRequirements.requiredStaff));\n  });\n};\nfunction displaySpeedRangeStatus() {\n  availableAirplanes.forEach(function(element) {\n    console.log(element.name+ 'meets speed range requirements: ' + meetsSpeedRangeRequirements(element.maxSpeed, element.minSpeed, flightRequirements.requiredSpeedRange));\n  });\n};\ndisplayFuelCapacity();\ndisplayStaffStatus();\ndisplaySpeedRangeStatus();\n")),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"Fuel Capacity of AeroJet: 800\nFuel Capacity of SkyJet: 500\nAeroJet meets staff requirements: true\nSkyJet meets staff requirements: false\nAeroJetmeets speed range requirements: true\nSkyJetmeets speed range requirements: false\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"11-export-as"},"11. Export as"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/modules/exercises/export-as"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,"Named exports also conveniently offer a way to change the name of variables when we export or import them. We can do this with the ",Object(r.mdx)("inlineCode",{parentName:"p"},"as")," keyword.\nLet\u2019s see how this works. In our ",Object(r.mdx)("strong",{parentName:"p"},"menu.js")," example"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let specialty = '';\nlet isVegetarian = function() {\n}; \nlet isLowSodium = function() {\n}; \n\nexport { specialty as chefsSpecial, isVegetarian as isVeg, isLowSodium };\n")),Object(r.mdx)("p",null,"In the above example, take a look at the ",Object(r.mdx)("inlineCode",{parentName:"p"},"export")," statement at the bottom of the of the file."),Object(r.mdx)("ol",null,Object(r.mdx)("li",{parentName:"ol"},"The ",Object(r.mdx)("inlineCode",{parentName:"li"},"as")," keyword allows us to give a variable name an alias as demonstrated in ",Object(r.mdx)("inlineCode",{parentName:"li"},"specialty as chefsSpecial")," and ",Object(r.mdx)("inlineCode",{parentName:"li"},"isVegetarian as isVeg"),". "),Object(r.mdx)("li",{parentName:"ol"},"Since we did not give ",Object(r.mdx)("inlineCode",{parentName:"li"},"isLowSodium")," an alias, it will maintain its original name. ")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Instructions")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"1.")," Remove the keyword ",Object(r.mdx)("inlineCode",{parentName:"p"},"export")," in front of each variable name, since we will no longer need it. "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"2.")," Add an ",Object(r.mdx)("inlineCode",{parentName:"p"},"export")," statement to export the ",Object(r.mdx)("inlineCode",{parentName:"p"},"availableAirplanes")," object as ",Object(r.mdx)("inlineCode",{parentName:"p"},"aircrafts"),", ",Object(r.mdx)("inlineCode",{parentName:"p"},"flightRequirements")," as ",Object(r.mdx)("inlineCode",{parentName:"p"},"flightReqs"),", the ",Object(r.mdx)("inlineCode",{parentName:"p"},"meetsStaffRequirements")," method as ",Object(r.mdx)("inlineCode",{parentName:"p"},"meetsStaffReqs")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"meetsSpeedRangeRequirements")," as ",Object(r.mdx)("inlineCode",{parentName:"p"},"meetsSpeedRangeReqs"),"."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let availableAirplanes = [\n  {\n    name: 'AeroJet',\n    fuelCapacity: 800,\n    availableStaff: [\n      'pilots',\n      'flightAttendants',\n      'engineers',\n      'medicalAssistance',\n      'sensorOperators'\n    ],\n    maxSpeed: 1200,\n    minSpeed: 300\n  }, \n  {\n    name: 'SkyJet',\n    fuelCapacity: 500,\n    availableStaff: [\n      'pilots',\n      'flightAttendants'\n    ],\n    maxSpeed: 800,\n    minSpeed: 200\n  }\n];\nlet flightRequirements = {\n  requiredStaff: 4,\n  requiredSpeedRange: 700\n};\nfunction meetsStaffRequirements(availableStaff, requiredStaff) {\n  if (availableStaff.length >= requiredStaff) {\n    return true\n  } else {\n    return false\n  }\n};\nfunction meetsSpeedRangeRequirements(maxSpeed, minSpeed, requiredSpeedRange) {\n  let range = maxSpeed - minSpeed;\n  if (range > requiredSpeedRange) {\n    return true\n  } else {\n    return false\n  };\n};\nexport { availableAirplanes as aircrafts, flightRequirements as flightReqs, meetsStaffRequirements as meetsStaffReqs, meetsSpeedRangeRequirements as meetsSpeedRangeReqs };\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"12-import-as"},"12. Import as"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/modules/exercises/import-as"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,"To import named export aliases with the ",Object(r.mdx)("inlineCode",{parentName:"p"},"as")," keyword, we add the aliased variable in our import statement. "),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { chefsSpecial, isVeg } from './menu';\n")),Object(r.mdx)("p",null,"In ",Object(r.mdx)("strong",{parentName:"p"},"orders.js")),Object(r.mdx)("ol",null,Object(r.mdx)("li",{parentName:"ol"},"We import ",Object(r.mdx)("inlineCode",{parentName:"li"},"chefsSpecial")," and ",Object(r.mdx)("inlineCode",{parentName:"li"},"isVeg")," from the ",Object(r.mdx)("inlineCode",{parentName:"li"},"Menu")," object.  "),Object(r.mdx)("li",{parentName:"ol"},"Here, note that we have an option to alias an object that was not previously aliased when exported. For example, the ",Object(r.mdx)("inlineCode",{parentName:"li"},"isLowSodium")," object that we exported could be aliased with the ",Object(r.mdx)("inlineCode",{parentName:"li"},"as")," keyword when imported : ",Object(r.mdx)("inlineCode",{parentName:"li"},"import {isLowSodium as saltFree} from 'Menu';"))),Object(r.mdx)("p",null,"Another way of using aliases is to import the entire module as an alias :"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import * as Carte from './menu';\n\nCarte.chefsSpecial;\nCarte.isVeg();\nCarte.isLowSodium(); \n")),Object(r.mdx)("ol",null,Object(r.mdx)("li",{parentName:"ol"},"This allows us to import an entire module from ",Object(r.mdx)("strong",{parentName:"li"},"menu.js")," as an alias ",Object(r.mdx)("inlineCode",{parentName:"li"},"Carte"),". "),Object(r.mdx)("li",{parentName:"ol"},"In this example, whatever name we exported would be available to us as properties of that module. For example, if we exported the aliases ",Object(r.mdx)("inlineCode",{parentName:"li"},"chefsSpecial")," and ",Object(r.mdx)("inlineCode",{parentName:"li"},"isVeg"),", these would be available to us. If we did not give an alias to ",Object(r.mdx)("inlineCode",{parentName:"li"},"isLowSodium"),", we would call it as defined on the ",Object(r.mdx)("inlineCode",{parentName:"li"},"Carte")," module. ")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Instructions")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"1.")," Within the body of ",Object(r.mdx)("strong",{parentName:"p"},"missionControl.js"),", change each variable to its alias, with the exception of the variable in the import statement.\nIn the body, change :"),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"availableAirplanes")," to ",Object(r.mdx)("inlineCode",{parentName:"li"},"aircrafts")," "),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"flightRequirements")," to ",Object(r.mdx)("inlineCode",{parentName:"li"},"flightReqs")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"meetsStaffRequirements")," to ",Object(r.mdx)("inlineCode",{parentName:"li"},"meetsStaffReqs")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"meetsSpeedRangeRequirements")," to ",Object(r.mdx)("inlineCode",{parentName:"li"},"meetsSpeedRangeReqs"))),Object(r.mdx)("p",null,"You will see an error in the console, but we\u2019ll fix this in the next exercise."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"2.")," Now modify the import statement to import ",Object(r.mdx)("inlineCode",{parentName:"p"},"aircrafts"),", ",Object(r.mdx)("inlineCode",{parentName:"p"},"flightReqs"),", ",Object(r.mdx)("inlineCode",{parentName:"p"},"meetsStaffReqs"),", ",Object(r.mdx)("inlineCode",{parentName:"p"},"meetsSpeedRangeReqs"),". "),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { aircrafts, flightReqs, meetsStaffReqs, meetsSpeedRangeReqs } from './airplane';\n\nfunction displayFuelCapacity() {\n  aircrafts.forEach(function(element) {\n    console.log('Fuel Capacity of ' + element.name + ': ' + element.fuelCapacity);\n  });\n}\nfunction displayStaffStatus() {\n  aircrafts.forEach(function(element) {\n    console.log(element.name + ' meets staff requirements: ' + meetsStaffReqs(element.availableStaff, flightReqs.requiredStaff));\n  });\n};\nfunction displaySpeedRangeStatus() {\n  aircrafts.forEach(function(element) {\n    console.log(element.name+ 'meets speed range requirements: ' + meetsSpeedRangeReqs(element.maxSpeed, element.minSpeed, flightReqs.requiredSpeedRange));\n  });\n};\ndisplayFuelCapacity();\ndisplayStaffStatus();\ndisplaySpeedRangeStatus();\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"13-combining-export-statements"},"13. Combining Export Statements"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/modules/exercises/combining-export-statements"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,"We can also use named exports and default exports together. In ",Object(r.mdx)("strong",{parentName:"p"},"menu.js")," :"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let specialty = '';\nfunction isVegetarian() {\n}; \nfunction isLowSodium() {\n}; \nfunction isGlutenFree() {\n};\n\nexport { specialty as chefsSpecial, isVegetarian as isVeg };\nexport default isGlutenFree;\n")),Object(r.mdx)("p",null,"Here we use the keyword ",Object(r.mdx)("inlineCode",{parentName:"p"},"export")," to export the named exports at the bottom of the file. Meanwhile, we export the ",Object(r.mdx)("inlineCode",{parentName:"p"},"isGlutenFree")," variable using the ",Object(r.mdx)("inlineCode",{parentName:"p"},"export default")," syntax.\nThis would also work if we exported most of the variables as declared and exported others with the ",Object(r.mdx)("inlineCode",{parentName:"p"},"export default")," syntax. "),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"export let Menu = {};\n\nexport let specialty = '';\nexport let isVegetarian = function() {\n}; \nexport let isLowSodium = function() {\n}; \nlet isGlutenFree = function() {\n};\n\nexport default isGlutenFree;\n")),Object(r.mdx)("p",null,"Here we use the ",Object(r.mdx)("inlineCode",{parentName:"p"},"export")," keyword to export the variables upon declaration, and again export the ",Object(r.mdx)("inlineCode",{parentName:"p"},"isGlutenFree")," variable using the ",Object(r.mdx)("inlineCode",{parentName:"p"},"export default syntax"),".\nWhile it\u2019s better to avoid combining two methods of exporting, it is useful on occasion. For example, if you suspect developers may only be interested in importing a specific function and won\u2019t need to import the entire default export."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Instructions")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"1.")," In ",Object(r.mdx)("strong",{parentName:"p"},"airplanes.js"),", use the ",Object(r.mdx)("inlineCode",{parentName:"p"},"export")," keyword to export ",Object(r.mdx)("inlineCode",{parentName:"p"},"availableAirplanes"),", ",Object(r.mdx)("inlineCode",{parentName:"p"},"flightRequirements"),", and ",Object(r.mdx)("inlineCode",{parentName:"p"},"meetsStaffRequirements")," as soon as they are declared. "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"2.")," Use ",Object(r.mdx)("inlineCode",{parentName:"p"},"export default")," to export ",Object(r.mdx)("inlineCode",{parentName:"p"},"meetsSpeedRangeRequirements"),". "),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"export let availableAirplanes = [\n  {\n    name: 'AeroJet',\n    fuelCapacity: 800,\n    availableStaff: [\n      'pilots',\n      'flightAttendants',\n      'engineers',\n      'medicalAssistance',\n      'sensorOperators'\n    ],\n    maxSpeed: 1200,\n    minSpeed: 300\n  }, \n  {\n    name: 'SkyJet',\n    fuelCapacity: 500,\n    availableStaff: [\n      'pilots',\n      'flightAttendants'\n    ],\n    maxSpeed: 800,\n    minSpeed: 200\n  }\n];\nexport let flightRequirements = {\n  requiredStaff: 4,\n  requiredSpeedRange: 700\n};\nexport function meetsStaffRequirements(availableStaff, requiredStaff) {\n  if (availableStaff.length >= requiredStaff) {\n    return true\n  } else {\n    return false\n  }\n};\nfunction meetsSpeedRangeRequirements(maxSpeed, minSpeed, requiredSpeedRange) {\n  let range = maxSpeed - minSpeed;\n  if (range > requiredSpeedRange) {\n    return true\n  } else {\n    return false\n  };\n};\nexport default meetsSpeedRangeRequirements;\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"14-combining-import-statements"},"14. Combining Import Statements"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/modules/exercises/combining-import-statements"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,"We can import the collection of objects and functions with the same data.\nWe can use an ",Object(r.mdx)("inlineCode",{parentName:"p"},"import")," keyword to import both types of variables as such :"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { specialty, isVegetarian, isLowSodium } from './menu';\n\nimport GlutenFree from './menu';\n")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Instructions")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"1.")," Remove the ",Object(r.mdx)("inlineCode",{parentName:"p"},"import")," statement at the top of ",Object(r.mdx)("strong",{parentName:"p"},"missionControl.js"),".\nOnce you have removed ",Object(r.mdx)("inlineCode",{parentName:"p"},"import"),", change each variable to its original, unaliased name within the rest of the file. "),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"aircrafts")," to ",Object(r.mdx)("inlineCode",{parentName:"li"},"availableAirplanes")," "),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"flightReqs")," to ",Object(r.mdx)("inlineCode",{parentName:"li"},"flightRequirements")," "),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"meetsStaffReqs")," to ",Object(r.mdx)("inlineCode",{parentName:"li"},"meetsStaffRequirements")," "),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"meetsSpeedRangeReqs")," to ",Object(r.mdx)("inlineCode",{parentName:"li"},"meetsSpeedRangeRequirements")," ")),Object(r.mdx)("p",null,"If you see errors in the console, not to worry. We\u2019ll resolve this in our last step ! "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"2.")," At the top of the file, we\u2019ll now import all variables from the module."),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},"Use ",Object(r.mdx)("inlineCode",{parentName:"li"},"import")," to import ",Object(r.mdx)("inlineCode",{parentName:"li"},"availableAirplanes"),", ",Object(r.mdx)("inlineCode",{parentName:"li"},"flightRequirements"),", and ",Object(r.mdx)("inlineCode",{parentName:"li"},"meetsStaffRequirements")," between a set of ",Object(r.mdx)("inlineCode",{parentName:"li"},"{}")),Object(r.mdx)("li",{parentName:"ul"},"Use ",Object(r.mdx)("inlineCode",{parentName:"li"},"import")," to import ",Object(r.mdx)("inlineCode",{parentName:"li"},"meetsSpeedRangeRequirements"),".")),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { availableAirplanes, flightRequirements, meetsStaffRequirements } from './airplane';\nimport meetsSpeedRangeRequirements from './airplane';\nfunction displayFuelCapacity() {\n  availableAirplanes.forEach(function(element) {\n    console.log('Fuel Capacity of ' + element.name + ': ' + element.fuelCapacity);\n  });\n}\nfunction displayStaffStatus() {\n  availableAirplanes.forEach(function(element) {\n    console.log(element.name + ' meets staff requirements: ' + meetsStaffRequirements(element.availableStaff, flightRequirements.requiredStaff));\n  });\n};\nfunction displaySpeedRangeStatus() {\n  availableAirplanes.forEach(function(element) {\n    console.log(element.name+ 'meets speed range requirements: ' + meetsSpeedRangeRequirements(element.maxSpeed, element.minSpeed, flightRequirements.requiredSpeedRange));\n  });\n};\ndisplayFuelCapacity();\ndisplayStaffStatus();\ndisplaySpeedRangeStatus();\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"15-review"},"15. Review"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/modules/exercises/review"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,"We just learned how to use JavaScript modules. Let\u2019s review what we learned :"),Object(r.mdx)("p",null,Object(r.mdx)("em",{parentName:"p"},"Modules")," in Node.js are reusable pieces of code that can be exported from one program and imported for use in another program."),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"module.exports")," exports the module for use in another program. "),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"require()")," imports the module for use in the current program. ")),Object(r.mdx)("p",null,"ES6 introduced a more flexible, easier syntax to export modules :"),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},"default exports use ",Object(r.mdx)("inlineCode",{parentName:"li"},"export default")," to export JavaScript objects, functions, and primitive data types."),Object(r.mdx)("li",{parentName:"ul"},"named exports use the ",Object(r.mdx)("inlineCode",{parentName:"li"},"export")," keyword to export data in variables. "),Object(r.mdx)("li",{parentName:"ul"},"named exports can be aliased with the ",Object(r.mdx)("inlineCode",{parentName:"li"},"as")," keyword. "),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"import")," is a keyword that imports any object, function, or data type. ")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"cheatsheet"},"Cheatsheet"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/learn/introduction-to-javascript/modules/intermediate-javascript-modules/cheatsheet"}),"Learn JavaScript: Modules Cheatsheet | Codecademy")),Object(r.mdx)("h3",{id:"import-javascript-modules-with-the-require-function"},"Import Javascript modules with the require function"),Object(r.mdx)("p",null,"In Node.js, the ",Object(r.mdx)("inlineCode",{parentName:"p"},"require")," function can used to import code from another file into the current script."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'var moduleA = require( "./module-a.js" );\n\n// The .js extension is optional\nvar moduleA = require( "./module-a" );\n// Both ways will produce the same result.\n\n// Now the functionality of moduleA can be used\nconsole.log(moduleA.someFunctionality)\n')),Object(r.mdx)("h3",{id:"intermediate-javascript--export-module"},"Intermediate Javascript : Export Module"),Object(r.mdx)("p",null,"To make an object in our Javascript file exportable as a module in Node.js, we assign the object to the ",Object(r.mdx)("inlineCode",{parentName:"p"},"exports")," property of ",Object(r.mdx)("inlineCode",{parentName:"p"},"module"),"."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'let Course = {};\nCourse.name = "Javascript Node.js"\nmodule.exports = Course;\n')),Object(r.mdx)("h3",{id:"javascript-export-default"},"Javascript export default"),Object(r.mdx)("p",null,"As of ES6, the ",Object(r.mdx)("em",{parentName:"p"},"export default")," keywords allow for a single variable or function to be exported, then, in another script, it will be straightforward to import the default export."),Object(r.mdx)("p",null,"After using the ",Object(r.mdx)("em",{parentName:"p"},"export default")," it is possible to import a variable or function without using the ",Object(r.mdx)("inlineCode",{parentName:"p"},"require()")," function."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// module \"moduleA.js\"\nexport default function cube(x) {\n  return x * x * x;\n}\n\n// In main.js\nimport cube from './moduleA.js';\n// Now the `cube` function can be used straightforwardly.\nconsole.log(cube(3)); // 27\n")),Object(r.mdx)("h3",{id:"using-the-import-keyword-in-javascript"},"Using the import keyword in Javascript"),Object(r.mdx)("p",null,"As of ES6, the ",Object(r.mdx)("inlineCode",{parentName:"p"},"import")," keyword can be used to import functions, objects or primitives previously exported into the current script."),Object(r.mdx)("p",null,"There are many ways to use the ",Object(r.mdx)("inlineCode",{parentName:"p"},"import")," keyword, for example, you can import all the exports from a script by using the ",Object(r.mdx)("inlineCode",{parentName:"p"},"*")," selector as follows : ",Object(r.mdx)("inlineCode",{parentName:"p"},"import * from 'module_name';"),"."),Object(r.mdx)("p",null,"A single function can be imported with curly brackets as follows : ",Object(r.mdx)("inlineCode",{parentName:"p"},"import {funcA} as name from 'module_name';"),"."),Object(r.mdx)("p",null,"Or many functions by name: ",Object(r.mdx)("inlineCode",{parentName:"p"},"import {funcA, funcB} as name from 'module_name';")," "),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// add.js\nexport const add = (x, y) => {\n    return x + y\n}\n\n// main.js\nimport { add } from './add';\nconsole.log(add(2, 3)); // 5\n")))}p.isMDXComponent=!0}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{118:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return l})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return d}));var a=t(3),r=t(7),i=(t(0),t(212)),o={id:"guide_JS-05",title:"Fonctions"},l={unversionedId:"MDN-web-docs/guide_JS-05",id:"MDN-web-docs/guide_JS-05",isDocsHomePage:!1,title:"Fonctions",description:"Les fonctions font partie des briques fondamentales de JavaScript. Une fonction est une proc\xe9dure JavaScript, un ensemble d'instructions effectuant une t\xe2che ou calculant une valeur. Afin d'utiliser une fonction, il est n\xe9cessaire de l'avoir auparavant d\xe9finie au sein de la port\xe9e dans laquelle on souhaite l'appeler.",source:"@site/docs/MDN-web-docs/guide_JS-05.md",slug:"/MDN-web-docs/guide_JS-05",permalink:"/docs/MDN-web-docs/guide_JS-05",editUrl:"https://github.com/gylgyl2000/laloutre.github.io/edit/main/docs/MDN-web-docs/guide_JS-05.md",version:"current",sidebar:"docs",previous:{title:"Boucles et it\xe9rations",permalink:"/docs/MDN-web-docs/guide_JS-04"},next:{title:"Expressions et op\xe9rateurs",permalink:"/docs/MDN-web-docs/guide_JS-06"}},c=[{value:"D\xe9finir des fonctions",id:"d\xe9finir-des-fonctions",children:[{value:"Les d\xe9clarations de fonctions",id:"les-d\xe9clarations-de-fonctions",children:[]},{value:"Les expressions de fonction",id:"les-expressions-de-fonction",children:[]}]},{value:"Appeler des fonctions",id:"appeler-des-fonctions",children:[]},{value:"Port\xe9e d&#39;une fonction",id:"port\xe9e-dune-fonction",children:[]},{value:"Port\xe9e et pile de fonctions",id:"port\xe9e-et-pile-de-fonctions",children:[{value:"La r\xe9cursivit\xe9",id:"la-r\xe9cursivit\xe9",children:[]},{value:"Fonctions imbriqu\xe9es et fermetures",id:"fonctions-imbriqu\xe9es-et-fermetures",children:[]},{value:"Pr\xe9servation des variables",id:"pr\xe9servation-des-variables",children:[]},{value:"Imbriquer plusieurs fonctions",id:"imbriquer-plusieurs-fonctions",children:[]},{value:"Conflits de nommage",id:"conflits-de-nommage",children:[]}]},{value:"Fermetures (<em>closures</em>)",id:"fermetures-closures",children:[]},{value:"Utiliser l&#39;objet <code>arguments</code>",id:"utiliser-lobjet-arguments",children:[]},{value:"Param\xe8tres des fonctions",id:"param\xe8tres-des-fonctions",children:[{value:"Les param\xe8tres par d\xe9faut",id:"les-param\xe8tres-par-d\xe9faut",children:[]},{value:"Les param\xe8tres du reste",id:"les-param\xe8tres-du-reste",children:[]}]},{value:"Fonctions fl\xe9ch\xe9es",id:"fonctions-fl\xe9ch\xe9es",children:[{value:"Concision de la syntaxe",id:"concision-de-la-syntaxe",children:[]},{value:"Pas de <code>this</code> distinct",id:"pas-de-this-distinct",children:[]}]},{value:"Fonctions pr\xe9d\xe9finies",id:"fonctions-pr\xe9d\xe9finies",children:[]}],s={rightToc:c};function d(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.mdx)("wrapper",Object(a.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(i.mdx)("p",null,"Les fonctions font partie des briques fondamentales de JavaScript. Une fonction est une proc\xe9dure JavaScript, un ensemble d'instructions effectuant une t\xe2che ou calculant une valeur. Afin d'utiliser une fonction, il est n\xe9cessaire de l'avoir auparavant d\xe9finie au sein de la port\xe9e dans laquelle on souhaite l'appeler."),Object(i.mdx)("p",null,"On pourra \xe9galement lire ",Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Fonctions"}),"le chapitre de la r\xe9f\xe9rence JavaScript sur les fonctions")," pour \xe9tudier plus en d\xe9tails ce concept"),Object(i.mdx)("h2",{id:"d\xe9finir-des-fonctions"},"D\xe9finir des fonctions"),Object(i.mdx)("h3",{id:"les-d\xe9clarations-de-fonctions"},"Les d\xe9clarations de fonctions"),Object(i.mdx)("p",null,"Une ",Object(i.mdx)("strong",{parentName:"p"},"d\xe9finition de fonction")," (aussi appel\xe9e ",Object(i.mdx)("strong",{parentName:"p"},"d\xe9claration de fonction")," ou ",Object(i.mdx)("strong",{parentName:"p"},"instruction de fonction"),") est construite avec le mot-cl\xe9 ",Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Instructions/function"}),Object(i.mdx)("inlineCode",{parentName:"a"},"function")),", suivi par :"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},"Le nom de la fonction."),Object(i.mdx)("li",{parentName:"ul"},"Une liste d'arguments \xe0 passer \xe0 la fonction, entre parenth\xe8ses et s\xe9par\xe9s par des virgules."),Object(i.mdx)("li",{parentName:"ul"},"Les instructions JavaScript d\xe9finissant la fonction, entre accolades, ",Object(i.mdx)("inlineCode",{parentName:"li"},"{ }"),".")),Object(i.mdx)("p",null,"Le code suivant, par exemple, d\xe9finit une fonction intitul\xe9e ",Object(i.mdx)("inlineCode",{parentName:"p"},"carr\xe9")," :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function carr\xe9(nombre) {\n  return nombre * nombre;\n}\n")),Object(i.mdx)("p",null,"La fonction ",Object(i.mdx)("inlineCode",{parentName:"p"},"carr\xe9")," prend un seul argument, appel\xe9 ",Object(i.mdx)("inlineCode",{parentName:"p"},"nombre"),". La fonction est compos\xe9e d'une seule instruction qui renvoie l'argument de la fonction (",Object(i.mdx)("inlineCode",{parentName:"p"},"nombre"),") multipli\xe9 par lui-m\xeame. L'instruction ",Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Instructions/return"}),Object(i.mdx)("inlineCode",{parentName:"a"},"return"))," sp\xe9cifie la valeur qui est renvoy\xe9e par la fonction."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"return nombre * nombre;\n")),Object(i.mdx)("p",null,"Les param\xe8tres primitifs (comme les nombres) sont pass\xe9s \xe0 la fonction ",Object(i.mdx)("strong",{parentName:"p"},"par valeur"),". La valeur est pass\xe9e \xe0 la fonction mais si cette derni\xe8re change la valeur du param\xe8tre, cela n'aura pas d'impact au niveau global ou au niveau de ce qui a appel\xe9 la fonction."),Object(i.mdx)("p",null,"Si l'argument pass\xe9 \xe0 la fonction est un objet (une valeur non-primitive, comme un objet ",Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Array"}),Object(i.mdx)("inlineCode",{parentName:"a"},"Array"))," ou un objet d\xe9fini par l'utilisateur), et que la fonction change les propri\xe9t\xe9s de cet objet, ces changements seront visibles en dehors de la fonction. Par exemple :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'function maFonction(monObjet) {\n  monObjet.fabricant = "Toyota";\n}\n\nvar mavoiture = {fabricant: "Honda", mod\xe8le: "Accord", ann\xe9e: 1998};\nvar x, y;\n\nx = mavoiture.fabricant;     // x aura la valeur "Honda"\n\nmaFonction(mavoiture);\ny = mavoiture.fabricant; // y aura la valeur "Toyota"\n                         // (la propri\xe9t\xe9 fabricant a \xe9t\xe9 modifi\xe9e par la fonction)\n')),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"Note :")," Affecter un nouvel objet au param\xe8tre n'aura ",Object(i.mdx)("strong",{parentName:"p"},"pas")," d'effet en dehors de la fonction car cela revient \xe0 changer la valeur du param\xe8tre plut\xf4t que la valeur d'une des propri\xe9t\xe9s de l'objet. Par exemple :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'function maFonction(monObjet) {\n  monObjet = {fabricant: "Ford", mod\xe8le: "Focus", ann\xe9e: 2006};\n}\n\nvar mavoiture = {fabricant: "Honda", mod\xe8le: "Accord", ann\xe9e: 1998};\nvar x, y;\n\nx = mavoiture.fabricant;     // x re\xe7oit la valeur "Honda"\n\nmaFonction(mavoiture);\ny = mavoiture.fabricant;     // y re\xe7oit la valeur "Honda" \n')),Object(i.mdx)("p",null,"Dans le premier exemple, l'objet ",Object(i.mdx)("inlineCode",{parentName:"p"},"mavoiture "),"\xe9tait pass\xe9 \xe0 la fonction ",Object(i.mdx)("inlineCode",{parentName:"p"},"maFonction")," qui le modifiait. Dans le second exemple, la fonction n'a pas modifi\xe9 l'objet qui avait \xe9t\xe9 pass\xe9 en argument, elle a cr\xe9\xe9 une nouvelle variable locale, poss\xe9dant le m\xeame nom que l'objet global pass\xe9 en argument : il n'y a donc pas de modifications sur cet objet global."),Object(i.mdx)("h3",{id:"les-expressions-de-fonction"},"Les expressions de fonction"),Object(i.mdx)("p",null,"Syntaxiquement, la d\xe9claration de fonction utilis\xe9e ci-dessus est une instruction. On peut \xe9galement cr\xe9er une fonction gr\xe2ce \xe0 une ",Object(i.mdx)("strong",{parentName:"p"},Object(i.mdx)("a",Object(a.a)({parentName:"strong"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/L_op%C3%A9rateur_function"}),"expression de fonction")),". De telles fonctions peuvent \xeatre ",Object(i.mdx)("strong",{parentName:"p"},"anonymes")," (ne pas avoir de nom correspondant). La fonction ",Object(i.mdx)("inlineCode",{parentName:"p"},"carr\xe9 "),"aurait pu \xeatre d\xe9finie de la fa\xe7on suivante :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"var carr\xe9 = function (nombre) { return nombre * nombre };\nvar x = carr\xe9(4); //x re\xe7oit la valeur 16\n")),Object(i.mdx)("p",null,"Cependant, un nom peut \xeatre utilis\xe9 dans une expression de fonction, ce afin de l'utiliser dans la fonction (r\xe9cursivit\xe9) ou afin de l'identifier dans les appels trac\xe9s par un \xe9ventuel d\xe9bogueur :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"var factorielle = function fac(n) { return n < 2 ? 1 : n * fac(n - 1) };\n\nconsole.log(factorielle(3));\n")),Object(i.mdx)("p",null,"Les expressions de fonction sont pratiques lorsqu'il s'agit de passer une fonction comme argument d'une autre fonction. Dans l'exemple qui suit, la fonction ",Object(i.mdx)("inlineCode",{parentName:"p"},"map")," est d\xe9finie et appel\xe9e avec une fonction anonyme comme premier argument :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function map(f, a) {\n  var resultat = []; // Cr\xe9er un nouveau tableau Array\n  for (var i = 0; i != a.length; i++)\n    resultat[i] = f(a[i]);\n  return resultat;\n}\n")),Object(i.mdx)("p",null,"Le code suivant applique la fonction ",Object(i.mdx)("inlineCode",{parentName:"p"},"cube")," sur chacun des \xe9l\xe9ments du tableau :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"var cube = function(x) { return x * x * x}; // Une expression de fonction\nmap(cube, [0, 1, 2, 5, 10]);\n")),Object(i.mdx)("p",null,"Le r\xe9sultat de la derni\xe8re instruction est le tableau ","[0, 1, 8, 125, 1000]","."),Object(i.mdx)("p",null,"En JavaScript, une fonction peut \xeatre d\xe9finie selon une condition. Le fragment de code qui suit d\xe9finit une fonction seulement si ",Object(i.mdx)("inlineCode",{parentName:"p"},"num")," vaut 0 :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'var maFonction;\nif (num === 0){\n  maFonction = function(monObjet) {\n    monObjet.fabricant = "Toyota"\n  }\n}\n')),Object(i.mdx)("p",null,"Une autre fa\xe7on de d\xe9finir des fonctions est d'utiliser le constructeur de l'objet ",Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Function"}),Object(i.mdx)("inlineCode",{parentName:"a"},"Function"))," afin de cr\xe9er des fonctions \xe0 partir d'une cha\xeene lors de l'ex\xe9cution, de la m\xeame fa\xe7on que ",Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/eval"}),Object(i.mdx)("inlineCode",{parentName:"a"},"eval()")),"."),Object(i.mdx)("p",null,"Une ",Object(i.mdx)("strong",{parentName:"p"},"m\xe9thode")," est une fonction \xe9tant une propri\xe9t\xe9 d'un objet. Vous trouverez plus de d\xe9tails sur ces \xe9l\xe9ments dans le chapitre suivant du guide : ",Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/JavaScript/Guide/Utiliser_les_objets"}),"Utiliser les objets"),"."),Object(i.mdx)("h2",{id:"appeler-des-fonctions"},"Appeler des fonctions"),Object(i.mdx)("p",null,"La seule d\xe9finition d'une fonction ne permet pas d'ex\xe9cuter la fonction. Cela permet de lui donner un nom et de d\xe9finir ce qui doit \xeatre fait lorsque la fonction est appel\xe9e. ",Object(i.mdx)("strong",{parentName:"p"},"Appeler")," la fonction permet d'effectuer les actions des instructions avec les param\xe8tres indiqu\xe9s. Par exemple, si on d\xe9finit la fonction ",Object(i.mdx)("inlineCode",{parentName:"p"},"carr\xe9"),", on peut l'appeler de la fa\xe7on suivante :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"carr\xe9(5);\n")),Object(i.mdx)("p",null,"Cette instruction appellera la fonction avec un argument valant 5. La fonction ex\xe9cute ses instructions et renvoie la valeur 25."),Object(i.mdx)("p",null,"Les fonctions doivent appartenir \xe0 la port\xe9e dans laquelle elles sont appel\xe9es. En revanche, la d\xe9claration d'une fonction peut \xeatre faite apr\xe8s l'appel :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"console.log(carr\xe9(5));\n/* ... */\nfunction carr\xe9(n) { return n*n } \n")),Object(i.mdx)("p",null,"La port\xe9e d'une fonction est la fonction dans laquelle elle est d\xe9clar\xe9e ou le programme entier si elle est d\xe9clar\xe9e au niveau le plus haut."),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"Note :")," Cela ne fonctionne que si la d\xe9finition de la fonction utilise la syntaxe pr\xe9c\xe9dente (",Object(i.mdx)("inlineCode",{parentName:"p"},"function nomFonction(){}"),"). Le code ci-dessous ne fonctionnera pas :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"console.log(carr\xe9); // La fonction carr\xe9 est remont\xe9e/hoisted mais vaut undefined\nconsole.log(carr\xe9(5)); // TypeError: carr\xe9 is not a function\nvar carr\xe9 = function (n) {\n  return n * n;\n}\n\n// Et avec let...\n\nconsole.log(carr\xe92); // ReferenceError: carr\xe92 is not defined\nconsole.log(carr\xe92(5)); // TypeError: carr\xe92 is not a function\n\nlet carr\xe92 = function (n) {\n  return n * n;\n}\n")),Object(i.mdx)("p",null,"Les arguments d'une fonction ne sont pas limit\xe9s aux cha\xeenes de caract\xe8res et aux nombres. Il est possible de passer des objets. La fonction ",Object(i.mdx)("inlineCode",{parentName:"p"},"show_props")," (d\xe9finie dans le chapitre sur ",Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/JavaScript/Guide/Utiliser_les_objets"}),"l'utilisation des objets"),") est un exemple de fonction utilisant un argument qui est un objet."),Object(i.mdx)("p",null,"Une fonction peut \xeatre r\xe9cursive, c'est-\xe0-dire qu'elle peut s'appeler elle-m\xeame. Voici la fonction qui calcule r\xe9cursivement la factorielle d'un nombre :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function factorielle(n){\n  if ((n === 0) || (n === 1))\n    return 1;\n  else\n    return (n * factorielle(n - 1));\n}\n")),Object(i.mdx)("p",null,"On peut ensuite calculer les factorielles des nombres 1 \xe0 5 :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"var a, b, c, d, e;\na = factorielle(1); // a re\xe7oit la valeur 1\nb = factorielle(2); // b re\xe7oit la valeur 2\nc = factorielle(3); // c re\xe7oit la valeur 6\nd = factorielle(4); // d re\xe7oit la valeur 24\ne = factorielle(5); // e re\xe7oit la valeur 120\n")),Object(i.mdx)("p",null,"Il existe d'autres fa\xe7ons d'appeler des fonctions. Il existe souvent des cas o\xf9 une fonction doit \xeatre appel\xe9e dynamiquement, o\xf9 le nombre d'arguments peut varier, o\xf9 le contexte de l'appel d'une fonction doit \xeatre cr\xe9\xe9 en fonction d'un objet d\xe9termin\xe9 lors de l'ex\xe9cution. Les fonctions sont des objets, en tant que tels, elles poss\xe8dent des m\xe9thodes (voir la page sur l'objet ",Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Function"}),Object(i.mdx)("inlineCode",{parentName:"a"},"Function")),"). L'une d'entre elles, ",Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Function/apply"}),Object(i.mdx)("inlineCode",{parentName:"a"},"apply()"))," peut \xeatre utilis\xe9e pour r\xe9aliser le dernier cas de figure (ex\xe9cution d'une fonction avec un objet d\xe9termin\xe9 \xe0 l'ex\xe9cution)."),Object(i.mdx)("h2",{id:"port\xe9e-dune-fonction"},"Port\xe9e d'une fonction"),Object(i.mdx)("p",null,"On ne peut pas acc\xe9der aux variables d\xe9finies dans une fonction en dehors de cette fonction : ces variables n'existent que dans la port\xe9e de la fonction. En revanche, une fonction peut acc\xe9der aux diff\xe9rentes variables et fonctions qui appartiennent \xe0 la port\xe9e dans laquelle elle est d\xe9finie. Une fonction d\xe9finie dans une autre fonction peut \xe9galement acc\xe9der \xe0 toutes les variables de la fonction \xab parente \xbb et \xe0 toute autre variable accessible depuis la fonction \xab parente \xbb."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'// Les variables suivantes sont globales \nvar num1 = 20,\n    num2 = 3,\n    nom = "Licorne";\n\n// Cette fonction est d\xe9finie dans la port\xe9e globale\nfunction multiplier() {\n  return num1 * num2;\n}\n\nmultiplier(); // Renvoie 60\n\n// Un exemple de fonction imbriqu\xe9e\nfunction getScore () {\n  var num1 = 2,\n      num2 = 3;\n  \n  function ajoute() {\n    return nom + " a marqu\xe9 " + (num1 + num2);\n  }\n  \n  return ajoute();\n}\n\ngetScore(); // Renvoie "Licorne a marqu\xe9 5"\n')),Object(i.mdx)("h2",{id:"port\xe9e-et-pile-de-fonctions"},"Port\xe9e et pile de fonctions"),Object(i.mdx)("h3",{id:"la-r\xe9cursivit\xe9"},"La r\xe9cursivit\xe9"),Object(i.mdx)("p",null,"Une fonction peut faire r\xe9f\xe9rence \xe0 elle-m\xeame et s'appeler elle-m\xeame. Il existe trois moyens pour qu'une fonction fasse r\xe9f\xe9rence \xe0 elle-m\xeame :"),Object(i.mdx)("ol",null,Object(i.mdx)("li",{parentName:"ol"},"Le nom de la fonction"),Object(i.mdx)("li",{parentName:"ol"},Object(i.mdx)("inlineCode",{parentName:"li"},"arguments.callee")),Object(i.mdx)("li",{parentName:"ol"},"Une variable de la port\xe9e qui fait r\xe9f\xe9rence \xe0 la fonction")),Object(i.mdx)("p",null,"Par exemple, avec la d\xe9finition de fonction suivante :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"var toto = function truc() {\n   // les instructions de la fonction\n};\n")),Object(i.mdx)("p",null,"Dans le corps de la fonction, ces trois \xe9l\xe9ments seront \xe9quivalents :"),Object(i.mdx)("ol",null,Object(i.mdx)("li",{parentName:"ol"},Object(i.mdx)("inlineCode",{parentName:"li"},"truc()")),Object(i.mdx)("li",{parentName:"ol"},Object(i.mdx)("inlineCode",{parentName:"li"},"arguments.callee()")),Object(i.mdx)("li",{parentName:"ol"},Object(i.mdx)("inlineCode",{parentName:"li"},"toto()"))),Object(i.mdx)("p",null,"Une fonction qui s'appelle elle-m\xeame est appel\xe9e une fonction ",Object(i.mdx)("em",{parentName:"p"},"r\xe9cursive"),". Sous certains aspects, une r\xe9cursion est semblable \xe0 une boucle : toutes les deux ex\xe9cutent le m\xeame code plusieurs fois et toutes les deux requi\xe8rent une condition d'arr\xeat (pour \xe9viter une boucle ou une r\xe9cursion infinie). Par exemple, ce fragment de code utilisant une boucle :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'var x = 0;\nwhile (x < 10) { // "x < 10" repr\xe9sente la condition d\'arr\xeat\n  // faire quelque chose\n  x++;\n}\n')),Object(i.mdx)("p",null,"pourra \xeatre converti en une fonction r\xe9cursive de la fa\xe7on suivante :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'function boucle(x) {\n  if (x >= 10) // "x >= 10" repr\xe9sente la condition d\'arr\xeat (\xe9quivalent \xe0 "!(x < 10)")\n    return;\n  // faire quelque chose\n  boucle(x + 1); // l\'appel r\xe9cursif\n}\nboucle(0);\n')),Object(i.mdx)("p",null,"Malgr\xe9 cela, certains algorithmes ne peuvent pas \xeatre convertis en boucles it\xe9ratives. Ainsi, r\xe9cup\xe9rer l'ensemble des n\u0153uds d'un arbre (le ",Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/API/R%C3%A9f%C3%A9rence_du_DOM_Gecko"}),"DOM")," par exemple) se fait plus simplement en utilisant la r\xe9cursivit\xe9 :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function parcourirArbre(noeud) {\n  if (noeud === null) //\n    return;\n  // faire quelque chose avec le noeud\n  for (var i = 0; i < noeud.childNodes.length; i++) {\n    parcourirArbre(noeud.childNodes[i]);\n  }\n}\n")),Object(i.mdx)("p",null,"Contrairement \xe0 l'exemple pr\xe9c\xe9dent avec la fonction ",Object(i.mdx)("inlineCode",{parentName:"p"},"boucle"),", ici, chaque appel r\xe9cursif entra\xeene lui-m\xeame plusieurs appels (et non un seul)."),Object(i.mdx)("p",null,"Th\xe9oriquement, il est possible de convertir tout algorithme r\xe9cursif en un algorithme non r\xe9cursif (avec des boucles par exemple). G\xe9n\xe9ralement, la logique obtenue est plus complexe et n\xe9cessite l'utilisation d'une ",Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://fr.wikipedia.org/wiki/Pile_(informatique)"}),"pile"),". La r\xe9cursivit\xe9 utilise \xe9galement une pile, la pile de fonction."),Object(i.mdx)("p",null,"Ce type de \xab comportement \xbb peut-\xeatre observ\xe9 avec l'exemple suivant :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function toto(i) {\n  if (i < 0)\n    return;\n  console.log('d\xe9but : ' + i);\n  toto(i - 1);\n  console.log('fin : ' + i);\n}\ntoto(3);\n")),Object(i.mdx)("p",null,"qui affichera :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"d\xe9but : 3\nd\xe9but : 2\nd\xe9but : 1\nd\xe9but : 0\nfin : 0\nfin : 1\nfin : 2\nfin : 3\n")),Object(i.mdx)("h3",{id:"fonctions-imbriqu\xe9es-et-fermetures"},"Fonctions imbriqu\xe9es et fermetures"),Object(i.mdx)("p",null,"Il est possible d'imbriquer une fonction dans une autre fonction. La port\xe9e de la fonction fille (celle qui est imbriqu\xe9e) n'est pas contenue dans la port\xe9e de la fonction parente. En revanche, la fonction fille b\xe9n\xe9ficie bien des informations de la fonction parente gr\xe2ce \xe0 sa port\xe9e. On a ce qu'on appelle une fermeture (",Object(i.mdx)("em",{parentName:"p"},"closure")," en anglais). Une fermeture est une expression (g\xe9n\xe9ralement une fonction) qui acc\xe8de \xe0 des variables libres ainsi qu'\xe0 un environnement qui lie ces variables (ce qui \xab ferme \xbb l'expression)."),Object(i.mdx)("p",null,"Une fonction imbriqu\xe9e \xe9tant une fermeture, cela signifie qu'une fonction imbriqu\xe9e peut en quelque sorte h\xe9riter des arguments et des variables de la fonction parente."),Object(i.mdx)("p",null,"En r\xe9sum\xe9 :"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("p",{parentName:"li"},"La fonction imbriqu\xe9e ne peut \xeatre utilis\xe9e qu'\xe0 partir des instructions de la fonction parente.")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("p",{parentName:"li"},"La fonction imbriqu\xe9e forme une fermeture : elle peut utiliser les arguments et les variables de la fonction parente. En revanche, la fonction parente ne peut pas utiliser les arguments et les variables de la fonction fille."))),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"Note :")," Sur les fermetures, voir \xe9galement ",Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Closures"}),"l'article \xe0 ce sujet"),"."),Object(i.mdx)("p",null,"L'exemple qui suit illustre l'imbrication de fonctions :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function ajouteCarr\xe9s(a, b) {\n  function carr\xe9(x) {\n    return x * x;\n  }\n  return carr\xe9(a) + carr\xe9(b);\n}\na = ajouteCarr\xe9s(2,3); // renvoie 13\nb = ajouteCarr\xe9s(3,4); // renvoie 25\nc = ajouteCarr\xe9s(4,5); // renvoie 41\n")),Object(i.mdx)("p",null,"La fonction interne \xe9tant une fermeture, on peut appeler la fonction parente afin de d\xe9finir les arguments pour la fonction englobante et ceux de la fonction fille :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function parente(x) {\n  function fille(y) {\n    return x + y;\n  }\n  return fille;\n}\nfn_fille = parente(3); // Fournit une fonction qui ajoute 3 \xe0 ce qu'on lui donnera\nr\xe9sultat = fn_fille(5); // renvoie 8\n\nr\xe9sultat1 = parente(3)(5); // renvoie 8\n")),Object(i.mdx)("h3",{id:"pr\xe9servation-des-variables"},"Pr\xe9servation des variables"),Object(i.mdx)("p",null,"Dans l'exemple pr\xe9c\xe9dent, ",Object(i.mdx)("inlineCode",{parentName:"p"},"x")," a \xe9t\xe9 \xab pr\xe9serv\xe9 \xbb lorsque la fonction ",Object(i.mdx)("inlineCode",{parentName:"p"},"fille")," a \xe9t\xe9 renvoy\xe9e. Une fermeture conserve les arguments et les variables de chaque port\xe9e qu'elle r\xe9f\xe9rence. Chaque appel \xe0 la fonction parente pouvant fournir un contexte diff\xe9rents selon les arguments, cela entra\xeenera la cr\xe9ation d'une nouvelle fermeture. La m\xe9moire associ\xe9e ne pourra \xeatre lib\xe9r\xe9e que lorsque la fonction ",Object(i.mdx)("inlineCode",{parentName:"p"},"fille")," ne sera plus accessible."),Object(i.mdx)("p",null,"Ce mode de fonctionnement n'est pas diff\xe9rent de celui des r\xe9f\xe9rences vers les objets. Cependant, il est souvent plus compliqu\xe9 \xe0 d\xe9tecter car les r\xe9f\xe9rences ne sont pas d\xe9finies explicitement dans le code et car il n'est pas possible de les inspecter."),Object(i.mdx)("h3",{id:"imbriquer-plusieurs-fonctions"},"Imbriquer plusieurs fonctions"),Object(i.mdx)("p",null,"Il est possible d'imbriquer des fonctions sur plus de deux niveaux, par exemple, on peut avoir une fonction A qui contient une fonction B qui contient une fonction C. Les fonctions B et C sont des fermetures et B peut acc\xe9der \xe0 la port\xe9e de A, C peut acc\xe9der \xe0 la port\xe9e de B. Ainsi, C acc\xe8de \xe0 la port\xe9e de B qui lui acc\xe8de \xe0 la port\xe9e de A, C acc\xe8de donc \xe0 la port\xe9e de A (transitivit\xe9). Les fermetures peuvent donc contenir plusieurs port\xe9es, c'est ce qu'on appelle le ",Object(i.mdx)("em",{parentName:"p"},"cha\xeenage")," de port\xe9es."),Object(i.mdx)("p",null,"Par exemple :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function A(x) {\n  function B(y) {\n    function C(z) {\n      console.log(x + y + z);\n    }\n    C(3);\n  }\n  B(2);\n}\nA(1); // affichera 6 (1 + 2 + 3)\n")),Object(i.mdx)("p",null,"Dans cet exemple ",Object(i.mdx)("inlineCode",{parentName:"p"},"C")," acc\xe8de au ",Object(i.mdx)("inlineCode",{parentName:"p"},"y")," de ",Object(i.mdx)("inlineCode",{parentName:"p"},"B")," et au ",Object(i.mdx)("inlineCode",{parentName:"p"},"x")," de ",Object(i.mdx)("inlineCode",{parentName:"p"},"A"),". Ceci est rendu possible car :"),Object(i.mdx)("ol",null,Object(i.mdx)("li",{parentName:"ol"},Object(i.mdx)("inlineCode",{parentName:"li"},"B")," est une fermeture qui contient ",Object(i.mdx)("inlineCode",{parentName:"li"},"A"),", autrement dit ",Object(i.mdx)("inlineCode",{parentName:"li"},"B")," peut acc\xe9der aux arguments et aux variables de ",Object(i.mdx)("inlineCode",{parentName:"li"},"A"),"."),Object(i.mdx)("li",{parentName:"ol"},Object(i.mdx)("inlineCode",{parentName:"li"},"C")," est une fermeture qui contient ",Object(i.mdx)("inlineCode",{parentName:"li"},"B"),"."),Object(i.mdx)("li",{parentName:"ol"},"La fermeture de ",Object(i.mdx)("inlineCode",{parentName:"li"},"B")," contient ",Object(i.mdx)("inlineCode",{parentName:"li"},"A")," donc la fermeture de ",Object(i.mdx)("inlineCode",{parentName:"li"},"C")," contient ",Object(i.mdx)("inlineCode",{parentName:"li"},"A"),", ",Object(i.mdx)("inlineCode",{parentName:"li"},"C")," peut ainsi acc\xe9der aux arguments et aux variables de ",Object(i.mdx)("inlineCode",{parentName:"li"},"B")," ",Object(i.mdx)("em",{parentName:"li"},"et")," ",Object(i.mdx)("inlineCode",{parentName:"li"},"A"),". On dit que ",Object(i.mdx)("inlineCode",{parentName:"li"},"C")," ",Object(i.mdx)("em",{parentName:"li"},"cha\xeene")," les port\xe9es de ",Object(i.mdx)("inlineCode",{parentName:"li"},"B")," et de ",Object(i.mdx)("inlineCode",{parentName:"li"},"A")," (dans cet ordre).")),Object(i.mdx)("p",null,"La r\xe9ciproque n'est pas vraie. ",Object(i.mdx)("inlineCode",{parentName:"p"},"A")," ne peut pas acc\xe9der \xe0 ",Object(i.mdx)("inlineCode",{parentName:"p"},"C"),", car ",Object(i.mdx)("inlineCode",{parentName:"p"},"A")," ne peut pas acc\xe9der aux arguments ou aux variables de ",Object(i.mdx)("inlineCode",{parentName:"p"},"B"),", or ",Object(i.mdx)("inlineCode",{parentName:"p"},"C")," est une variable de ",Object(i.mdx)("inlineCode",{parentName:"p"},"B"),". De cette fa\xe7on, ",Object(i.mdx)("inlineCode",{parentName:"p"},"C")," reste priv\xe9e en dehors de ",Object(i.mdx)("inlineCode",{parentName:"p"},"B"),"."),Object(i.mdx)("h3",{id:"conflits-de-nommage"},"Conflits de nommage"),Object(i.mdx)("p",null,"Lorsque deux arguments ou variables des port\xe9es d'une fermeture ont le m\xeame nom, il y a un conflit de noms. Dans ces cas, ce sera la port\xe9e la plus imbriqu\xe9e qui prendra la priorit\xe9 sur le nom, la port\xe9e la plus \xab externe \xbb aura la priorit\xe9 la plus faible pour les noms de variables. Du point de vue de la cha\xeene des port\xe9es, la premi\xe8re port\xe9e sur la cha\xeene est la port\xe9e la plus imbriqu\xe9e et la derni\xe8re est la port\xe9e situ\xe9e le plus \xe0 l'ext\xe9rieur :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function externe() {\n  var x = 10;\n  function interne(x) {\n    return x;\n  }\n  return interne;\n}\nr\xe9sultat = externe()(20); // renvoie 20 et pas 10\n")),Object(i.mdx)("p",null,"Le conflit se produit \xe0 l'instruction ",Object(i.mdx)("inlineCode",{parentName:"p"},"return x")," entre le param\xe8tre x de la fonction ",Object(i.mdx)("inlineCode",{parentName:"p"},"interne")," et la variable ",Object(i.mdx)("inlineCode",{parentName:"p"},"x")," de la fonction ",Object(i.mdx)("inlineCode",{parentName:"p"},"externe"),". La cha\xeene de port\xe9e est ici {",Object(i.mdx)("inlineCode",{parentName:"p"},"interne"),", ",Object(i.mdx)("inlineCode",{parentName:"p"},"externe"),", objet global}. Ainsi, le param\xe8tre ",Object(i.mdx)("inlineCode",{parentName:"p"},"x")," de ",Object(i.mdx)("inlineCode",{parentName:"p"},"interne")," a la priorit\xe9 sur la variable ",Object(i.mdx)("inlineCode",{parentName:"p"},"x")," de la fonction ",Object(i.mdx)("inlineCode",{parentName:"p"},"externe"),", le r\xe9sultat obtenu est donc 20 et non 10."),Object(i.mdx)("h2",{id:"fermetures-closures"},"Fermetures (",Object(i.mdx)("em",{parentName:"h2"},"closures"),")"),Object(i.mdx)("p",null,"Les fermetures sont l'une des fonctionnalit\xe9s les plus int\xe9ressantes de JavaScript. Comme on l'a vu pr\xe9c\xe9demment, JavaScript permet d'imbriquer des fonctions et la fonction interne aura acc\xe8s aux variables et param\xe8tres de la fonction parente. \xc0 l'inverse, la fonction parente ne pourra pas acc\xe9der aux variables li\xe9es \xe0 la fonction interne. Cela fournit une certaine s\xe9curit\xe9 pour les variables de la fonction interne. De plus, si la fonction interne peut exister plus longtemps que la fonction parente, les variables et fonctions de la fonction parente pourront exister au travers de la fonction interne. On cr\xe9e une fermeture lorsque la fonction interne est disponible en dehors de la fonction parente."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'var animal = function(nom) {   // La fonction externe utilise un param\xe8tre "nom"\n  var getNom = function () {\n    return nom;                // La fonction interne acc\xe8de \xe0 la variable "nom" de la fonction externe\n  }\n  return getNom;               // Renvoie la fonction interne pour la rendre disponible en dehors de la port\xe9e de la fonction parente\n}\n\nmonAnimal = animal("Licorne");\n    \nmonAnimal();                   // Renvoie "Licorne"\n')),Object(i.mdx)("p",null,"Bien entendu, dans la pratique, les cas peuvent \xeatre plus complexes. On peut renvoyer un objet qui contient des m\xe9thodes manipulant les variables internes de la fonction parente."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'var cr\xe9erAnimal  = function (nom) {\n  var sexe;\n \n  return {\n    setNom: function(nouveauNom) {\n      nom = nouveauNom;\n    },\n    \n    getNom: function () {\n      return nom;\n    },\n    \n    getSexe: function () {\n      return sexe;\n    },\n    \n    setSexe: function(nouveauSexe) {\n      if (typeof nouveauSexe == "string" && (nouveauSexe.toLowerCase() == "m\xe2le" || nouveauSexe.toLowerCase() == "femelle")) {\n        sexe = nouveauSexe;\n      }\n    }\n  }\n}\n\nvar animal = cr\xe9erAnimal("Licorne");\nanimal.getNom();        // Licorne\n\nanimal.setNom("Bobby");\nanimal.setSexe("m\xe2le");\nanimal.getSexe();       // m\xe2le\nanimal.getNom();        // Bobby\n')),Object(i.mdx)("p",null,"Dans le code pr\xe9c\xe9dent, la variable ",Object(i.mdx)("inlineCode",{parentName:"p"},"nom")," est de la fonction externe est accessible depuis les fonctions internes. Il est impossible d'acc\xe9der aux variables internes en dehors des fonctions internes. Les variables internes agissent comme des coffres-forts pour les fonctions internes. Elles permettent d'avoir un acc\xe8s persistent et encapsul\xe9 aux donn\xe9es internes. Pour les fonctions, il n'est pas n\xe9cessaire de les affecter \xe0 une variable ou m\xeame de les nommer."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'var getCode = (function (){\n  var codeAPI = "0]Eal(eh&2";    // Un code qu\'on ne souhaite pas diffuser ni modifier\n \n  return function () {\n    return codeAPI;\n  };\n})();\n\ngetCode();    // Renvoie la valeur du code\n')),Object(i.mdx)("p",null,"Il y a malgr\xe9 tout quelques pi\xe8ges auxquels il faut faire attention lorsqu'on utilise les fermetures. Si une fonction imbriqu\xe9e d\xe9finit une variable avec le m\xeame nom que le nom d'une variable de la port\xe9e externe, il n'y aura plus aucun moyen d'acc\xe9der \xe0 la variable."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'var cr\xe9erAnimal = function(nom) {  // La fonction externe d\xe9finit une variable appel\xe9e "nom"\n  return {\n    setNom: function(nom) {    // La fonction imbriqu\xe9e d\xe9finit une variable appel\xe9e "nom"\n      nom = nom;               // ??? comment acc\xe9der \xe0 la variable "nom" d\xe9finie par la fonction externe\n    }\n  }\n}\n')),Object(i.mdx)("p",null,"L",Object(i.mdx)("inlineCode",{parentName:"p"},"'op\xe9rateur "),Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Op%C3%A9rateurs/L_op%C3%A9rateur_this"}),Object(i.mdx)("inlineCode",{parentName:"a"},"this"))," doit \xeatre trait\xe9 avec pr\xe9caution dans les fermetures. Attention, ",Object(i.mdx)("inlineCode",{parentName:"p"},"this")," fait r\xe9f\xe9rence au contexte o\xf9 la fonction est appel\xe9e et non \xe0 l'endroit o\xf9 il est d\xe9fini."),Object(i.mdx)("h2",{id:"utiliser-lobjet-arguments"},"Utiliser l'objet ",Object(i.mdx)("inlineCode",{parentName:"h2"},"arguments")),Object(i.mdx)("p",null,"Les arguments d'une fonction sont maintenus dans un objet semblable \xe0 un tableau. Dans une fonction, il est possible d'utiliser les arguments pass\xe9s \xe0 la fonction de la fa\xe7on suivante :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"arguments[i]\n")),Object(i.mdx)("p",null,"o\xf9 ",Object(i.mdx)("inlineCode",{parentName:"p"},"i")," repr\xe9sente l'index ordinal de l'argument (le premier argument ayant un indice \xe0 0). On acc\xe8de donc au premier argument avec ",Object(i.mdx)("inlineCode",{parentName:"p"},"arguments[0]"),". Le nombre total d'arguments est fourni gr\xe2ce \xe0 ",Object(i.mdx)("inlineCode",{parentName:"p"},"arguments.length"),"."),Object(i.mdx)("p",null,"En utilisant l'objet ",Object(i.mdx)("inlineCode",{parentName:"p"},"arguments"),", il est possible de recenser les arguments suppl\xe9mentaires fournis \xe0 la fonction si jamais il y a plus d'arguments fournis que requis. Cet objet est souvent utile si on ne conna\xeet pas le nombre d'arguments pass\xe9s \xe0 la fonction. La propri\xe9t\xe9 ",Object(i.mdx)("inlineCode",{parentName:"p"},"arguments.length")," permet de d\xe9terminer le nombre d'arguments r\xe9ellement pass\xe9s \xe0 la fonction. On peut donc ensuite acc\xe9der aux diff\xe9rents arguments en parcourant l'objet ",Object(i.mdx)("inlineCode",{parentName:"p"},"arguments"),"."),Object(i.mdx)("p",null,"Par exemple, on peut construire une fonction qui concat\xe8ne plusieurs cha\xeenes. Le seul argument formellement d\xe9fini sera la cha\xeene utilis\xe9e pour concat\xe9ner les diff\xe9rentes cha\xeenes. On peut d\xe9finir la fonction de la fa\xe7on suivante :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'function monConcat(s\xe9parateur) {\n   var result = ""; // on initialise la liste\n   var i;\n   // on parcourt les arguments\n   for (i = 1; i < arguments.length; i++) {\n      result += arguments[i] + s\xe9parateur;\n   }\n   return result;\n}\n')),Object(i.mdx)("p",null,"On peut passer autant d'arguments que n\xe9cessaire \xe0 cette fonction. Ils seront tous concat\xe9n\xe9s dans une cha\xeene finale. Ainsi, on aura :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'// renverra "rouge, orange, bleu, "\nmonConcat(", ", "red", "orange", "blue");\n\n// renverra "\xe9l\xe9phant; girafe; lion; singe; "\nmonConcat("; ", "\xe9l\xe9phant", "girafe", "lion", "singe");\n\n// renverra "sauge. basilic. origan. poivre. \xe9chalotte. "\nmonConcat(". ", "sauge", "basilic", "origan", "poivre", "\xe9chalotte");\n')),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"Note :")," ",Object(i.mdx)("inlineCode",{parentName:"p"},"arguments")," est une variable \xab semblable \xbb \xe0 un tableau. Mais ce n'est pas un tableau au sens strict. En effet, il poss\xe8de un index num\xe9rot\xe9 ainsi qu'une propri\xe9t\xe9 ",Object(i.mdx)("inlineCode",{parentName:"p"},"length"),". En revanche, il ne poss\xe8de pas les m\xe9thodes classiques de manipulation des tableaux (Array)."),Object(i.mdx)("p",null,"Voir la page sur l'objet ",Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Function"}),Object(i.mdx)("inlineCode",{parentName:"a"},"Function"))," dans la r\xe9f\xe9rence JavaScript pour plus d'informations."),Object(i.mdx)("h2",{id:"param\xe8tres-des-fonctions"},"Param\xe8tres des fonctions"),Object(i.mdx)("p",null,"\xc0 partir d'ECMAScript 2015, deux sortes de param\xe8tres sont introduites : les param\xe8tres par d\xe9faut et les param\xe8tres du reste."),Object(i.mdx)("h3",{id:"les-param\xe8tres-par-d\xe9faut"},"Les param\xe8tres par d\xe9faut"),Object(i.mdx)("p",null,"En JavaScript, par d\xe9faut, les param\xe8tres des fonctions vaudront ",Object(i.mdx)("inlineCode",{parentName:"p"},"undefined"),". Il peut toutefois \xeatre utile de d\xe9finir une valeur par d\xe9faut diff\xe9rente. Les param\xe8tres par d\xe9faut permettent de r\xe9pondre \xe0 ce besoin."),Object(i.mdx)("p",null,"Avant ECMAScript 2015, la strat\xe9gie pour manipuler des valeurs par d\xe9faut adapt\xe9es \xe9tait de tester si la valeur du param\xe8tre \xe9tait ind\xe9finie puis de lui affecter la valeur souhait\xe9e si c'\xe9tait le cas. Par exemple, dans le code qui suit, on ne fournit pas de valeur pour ",Object(i.mdx)("inlineCode",{parentName:"p"},"b")," dans l'appel, la valeur sera ",Object(i.mdx)("inlineCode",{parentName:"p"},"undefined")," lors de l'\xe9valuation de ",Object(i.mdx)("inlineCode",{parentName:"p"},"a*b")," et l'appel \xe0 ",Object(i.mdx)("inlineCode",{parentName:"p"},"multiplier")," aurait renvoy\xe9 ",Object(i.mdx)("inlineCode",{parentName:"p"},"NaN"),". Pour \xe9viter \xe7a, la deuxi\xe8me ligne d\xe9finit une valeur par d\xe9faut au cas o\xf9 ",Object(i.mdx)("inlineCode",{parentName:"p"},"b")," n'est pas renseign\xe9 :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function multiplier(a, b) {\n  b = typeof b !== 'undefined' ?  b : 1;\n\n  return a*b;\n}\n\nmultiplier(5); // 5\n")),Object(i.mdx)("p",null,"Si on peut utiliser les param\xe8tres par d\xe9faut, il n'est plus n\xe9cessaire de faire l'op\xe9ration \xe0 l'int\xe9rieur du corps de la fonction, il suffit de d\xe9clarer que la valeur par d\xe9faut pour ",Object(i.mdx)("inlineCode",{parentName:"p"},"b")," est 1 dans la signature de la fonction :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function multiplier(a, b = 1) {\n  return a*b;\n}\n\nmultiplier(5); // 5\n")),Object(i.mdx)("p",null,"Pour plus de d\xe9tails, voir ",Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Fonctions/Valeurs_par_d%C3%A9faut_des_arguments"}),"la page sur les param\xe8tres par d\xe9faut")," dans la r\xe9f\xe9rence."),Object(i.mdx)("h3",{id:"les-param\xe8tres-du-reste"},"Les param\xe8tres du reste"),Object(i.mdx)("p",null,"La syntaxe des ",Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Fonctions/param%C3%A8tres_du_reste"}),"param\xe8tres du reste")," permet de repr\xe9senter un nombre ind\xe9fini d'arguments contenus dans un tableau. Dans l'exemple suivant, on utilise les param\xe8tres du reste pour collecter les arguments \xe0 partir du deuxi\xe8me et jusqu'au dernier. Ces arguments sont multipli\xe9s par le premier. Dans cet exemple, on utilise une fonction fl\xe9ch\xe9e, concept qui est pr\xe9sent\xe9 et illustr\xe9 dans la section qui suit."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function multiplier(facteur, ...lesArgs) {\n  return lesArgs.map(x => facteur * x);\n}\n\nvar arr = multiplier(2, 1, 2, 3);\nconsole.log(arr); // [2, 4, 6]\n")),Object(i.mdx)("h2",{id:"fonctions-fl\xe9ch\xe9es"},"Fonctions fl\xe9ch\xe9es"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Fonctions/Fonctions_fl%C3%A9ch%C3%A9es"}),"Une expression de fonction fl\xe9ch\xe9e")," permet d'utiliser une syntaxe plus concise que les expressions de fonctions classiques. Une telle fonction ne poss\xe8de alors pas de valeur propre pour ",Object(i.mdx)("inlineCode",{parentName:"p"},"this"),", ",Object(i.mdx)("inlineCode",{parentName:"p"},"arguments"),", ",Object(i.mdx)("inlineCode",{parentName:"p"},"super")," ou ",Object(i.mdx)("inlineCode",{parentName:"p"},"new.target"),". Les fonctions fl\xe9ch\xe9es sont n\xe9cessairement anonymes."),Object(i.mdx)("p",null,"Les fonctions fl\xe9ch\xe9es ont \xe9t\xe9 introduites pour deux raisons principales : une syntaxe plus courte et l'absence de ",Object(i.mdx)("inlineCode",{parentName:"p"},"this")," rattach\xe9 \xe0 la fonction. Voir aussi ",Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://tech.mozfr.org/post/2015/06/10/ES6-en-details-%3A-les-fonctions-flechees"}),"ce billet sur tech.mozfr.org sur les fonctions fl\xe9ch\xe9es"),"."),Object(i.mdx)("h3",{id:"concision-de-la-syntaxe"},"Concision de la syntaxe"),Object(i.mdx)("p",null,"Dans certaines constructions fonctionnelles, on peut appr\xe9cier une syntaxe courte. Par exemple, si on compare les deux derni\xe8res lignes de ce fragment de code :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'var a = [\n  "Hydrogen",\n  "Helium",\n  "Lithium",\n  "Beryl\xadlium"\n];\n\nvar a2 = a.map(function(s){ return s.length });\nconsole.log(a2); // affiche [8, 6, 7, 9]\nvar a3 = a.map( s => s.length );\nconsole.log(a3); // affiche [8, 6, 7, 9]\n')),Object(i.mdx)("h3",{id:"pas-de-this-distinct"},"Pas de ",Object(i.mdx)("inlineCode",{parentName:"h3"},"this")," distinct"),Object(i.mdx)("p",null,"Avant les fonctions fl\xe9ch\xe9es, chaque nouvelle fonction d\xe9finissait sa propre valeur ",Object(i.mdx)("inlineCode",{parentName:"p"},"this")," (un nouvel objet dans le cas d'un constructeur, ",Object(i.mdx)("inlineCode",{parentName:"p"},"undefined")," lors des appels en ",Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Strict_mode"}),"mode strict"),", l'objet courant dans le cas d'une m\xe9thode, etc.). Cela pouvait poser quelques probl\xe8mes avec un style de programmation orient\xe9 objet."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function Personne() {\n  // Le constructeur Personne() utilise `this` comme lui-m\xeame.\n  this.\xe2ge = 0;\n\n  setInterval(function grandir() {\n    // En mode non-strict, la fonction grandir() d\xe9finit `this` \n    // avec l'objet global, qui est donc diff\xe9rent du `this`\n    // d\xe9fini par le constructeur Person().\n    this.\xe2ge++;\n  }, 1000);\n}\n\nvar p = new Personne();\n")),Object(i.mdx)("p",null,"Avec ECMAScript 3/5, ce probl\xe8me fut r\xe9solu avec l'affectation de la valeur de ",Object(i.mdx)("inlineCode",{parentName:"p"},"this")," dans une variable a variable that could be closed over."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function Personne() {\n  var self = this; // Certains utilisent `that`, d'autres `self`. \n                   // On utilisera l'un des deux et on pas \n                   // l'autre pour \xeatre coh\xe9rent.\n  self.\xe2ge = 0;\n\n  setInterval(function grandir() {\n    // La fonction callback fait r\xe9f\xe9rence \xe0 la variable `self`\n    // qui est bien la valeur attendue li\xe9e \xe0 l'objet.\n    self.\xe2ge++;\n  }, 1000);\n}\n")),Object(i.mdx)("p",null,"On aurait aussi pu cr\xe9er une fonction li\xe9e afin que la \xab bonne \xbb valeur de ",Object(i.mdx)("inlineCode",{parentName:"p"},"this")," soit pass\xe9e \xe0 la fonction ",Object(i.mdx)("inlineCode",{parentName:"p"},"grandir()"),"."),Object(i.mdx)("p",null,"Les fonctions fl\xe9ch\xe9es capturent la valeur de ",Object(i.mdx)("inlineCode",{parentName:"p"},"this")," dans le contexte englobant et cela permet de manipuler la valeur pertinente ici :"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"function Personne(){\n  this.\xe2ge = 0;\n\n  setInterval(() => {\n    this.\xe2ge++; // this fait r\xe9f\xe9rence \xe0 l'objet personne\n  }, 1000);\n}\n\nvar p = new Personne();\n")),Object(i.mdx)("h2",{id:"fonctions-pr\xe9d\xe9finies"},"Fonctions pr\xe9d\xe9finies"),Object(i.mdx)("p",null,"JavaScript poss\xe8de plusieurs fonctions natives, disponibles au plus haut niveau :"),Object(i.mdx)("ul",null,Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("p",{parentName:"li"},Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/eval"}),Object(i.mdx)("inlineCode",{parentName:"a"},"eval()"))),Object(i.mdx)("p",{parentName:"li"}," La fonction ",Object(i.mdx)("inlineCode",{parentName:"p"},"eval()")," permet d'\xe9valuer du code JavaScript contenu dans une cha\xeene de caract\xe8res. ")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("p",{parentName:"li"},Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/uneval"}),Object(i.mdx)("inlineCode",{parentName:"a"},"uneval()")),"  "),Object(i.mdx)("p",{parentName:"li"}," La fonction ",Object(i.mdx)("inlineCode",{parentName:"p"},"uneval()")," cr\xe9e une repr\xe9sentation sous la forme d'une cha\xeene de caract\xe8res pour le code source d'un objet. ")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("p",{parentName:"li"},Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/isFinite"}),Object(i.mdx)("inlineCode",{parentName:"a"},"isFinite()"))),Object(i.mdx)("p",{parentName:"li"}," La fonction ",Object(i.mdx)("inlineCode",{parentName:"p"},"isFinite()")," d\xe9termine si la valeur pass\xe9e est un nombre fini. Si n\xe9cessaire, le param\xe8tre sera converti en un nombre. ")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("p",{parentName:"li"},Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/isNaN"}),Object(i.mdx)("inlineCode",{parentName:"a"},"isNaN()"))),Object(i.mdx)("p",{parentName:"li"}," La fonction ",Object(i.mdx)("inlineCode",{parentName:"p"},"isNaN()")," d\xe9termine si une valeur est ",Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/NaN"}),Object(i.mdx)("inlineCode",{parentName:"a"},"NaN"))," ou non. Note : On pourra \xe9galement utiliser ",Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Number/isNaN"}),Object(i.mdx)("inlineCode",{parentName:"a"},"Number.isNaN()"))," d\xe9fini avec ECMAScript 6 ou utiliser ",Object(i.mdx)("inlineCode",{parentName:"p"},"typeof")," afin de d\xe9terminer si la valeur est ",Object(i.mdx)("strong",{parentName:"p"},"*N"),"ot-",Object(i.mdx)("strong",{parentName:"p"},"A"),"-",Object(i.mdx)("strong",{parentName:"p"},"N"),"umber*. ")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("p",{parentName:"li"},Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/parseFloat"}),Object(i.mdx)("inlineCode",{parentName:"a"},"parseFloat()"))),Object(i.mdx)("p",{parentName:"li"}," La fonction ",Object(i.mdx)("inlineCode",{parentName:"p"},"parseFloat()")," convertit une cha\xeene de caract\xe8res en un nombre flottant. ")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("p",{parentName:"li"},Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/parseInt"}),Object(i.mdx)("inlineCode",{parentName:"a"},"parseInt()"))),Object(i.mdx)("p",{parentName:"li"}," La fonction ",Object(i.mdx)("inlineCode",{parentName:"p"},"parseInt()")," convertit une cha\xeene de caract\xe8res et renvoie un entier dans la base donn\xe9e. ")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("p",{parentName:"li"},Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/decodeURI"}),Object(i.mdx)("inlineCode",{parentName:"a"},"decodeURI()"))),Object(i.mdx)("p",{parentName:"li"}," La fonction ",Object(i.mdx)("inlineCode",{parentName:"p"},"decodeURI()")," d\xe9code un Uniform Resource Identifier (URI) cr\xe9\xe9 par ",Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/encodeURI"}),Object(i.mdx)("inlineCode",{parentName:"a"},"encodeURI()"))," ou une m\xe9thode similaire. ")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("p",{parentName:"li"},Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/decodeURIComponent"}),Object(i.mdx)("inlineCode",{parentName:"a"},"decodeURIComponent()"))),Object(i.mdx)("p",{parentName:"li"}," La fonction ",Object(i.mdx)("inlineCode",{parentName:"p"},"decodeURIComponent()")," d\xe9code un composant d'un Uniform Resource Identifier (URI) cr\xe9\xe9 par ",Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/encodeURIComponent"}),Object(i.mdx)("inlineCode",{parentName:"a"},"encodeURIComponent"))," ou une m\xe9thode similaire. ")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("p",{parentName:"li"},Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/encodeURI"}),Object(i.mdx)("inlineCode",{parentName:"a"},"encodeURI()"))),Object(i.mdx)("p",{parentName:"li"}," La fonction ",Object(i.mdx)("inlineCode",{parentName:"p"},"encodeURI()")," encode un Uniform Resource Identifier (URI) en rempla\xe7ant chaque exemplaire de certains caract\xe8res par un, deux, trois voire quatre s\xe9quences d'\xe9chappement repr\xe9sentant l'encodage UTF-8 du caract\xe8res (quatre s\xe9quences seront utilis\xe9es uniquement lorsque le caract\xe8re est compos\xe9 d'une paire de deux demi-codets). ")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("p",{parentName:"li"},Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/encodeURIComponent"}),Object(i.mdx)("inlineCode",{parentName:"a"},"encodeURIComponent()"))),Object(i.mdx)("p",{parentName:"li"}," La fonction ",Object(i.mdx)("inlineCode",{parentName:"p"},"encodeURIComponent()")," encode un composant d'un Uniform Resource Identifier (URI) en rempla\xe7ant chaque exemplaire de certainQs caract\xe8res par un, deux, trois voire quatre s\xe9quences d'\xe9chappement repr\xe9sentant l'encodage UTF-8 du caract\xe8res (quatre s\xe9quences seront utilis\xe9es uniquement lorsque le caract\xe8re est compos\xe9 d'une paire de deux demi-codets). ")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("p",{parentName:"li"},Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/escape"}),Object(i.mdx)("inlineCode",{parentName:"a"},"escape()")),"  "),Object(i.mdx)("p",{parentName:"li"}," La fonction d\xe9pr\xe9ci\xe9e ",Object(i.mdx)("inlineCode",{parentName:"p"},"escape()")," calcule une nouvelle cha\xeene de caract\xe8res pour laquelle certains caract\xe8res ont \xe9t\xe9 remplac\xe9s par leur s\xe9quence d'\xe9chappement hexad\xe9cimale. Les fonctions ",Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/encodeURI"}),Object(i.mdx)("inlineCode",{parentName:"a"},"encodeURI()"))," ou ",Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/encodeURIComponent"}),Object(i.mdx)("inlineCode",{parentName:"a"},"encodeURIComponent()"))," doivent \xeatre utilis\xe9es \xe0 la place. ")),Object(i.mdx)("li",{parentName:"ul"},Object(i.mdx)("p",{parentName:"li"},Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/unescape"}),Object(i.mdx)("inlineCode",{parentName:"a"},"unescape()")),"  "),Object(i.mdx)("p",{parentName:"li"}," La fonction d\xe9pr\xe9ci\xe9e ",Object(i.mdx)("inlineCode",{parentName:"p"},"unescape()")," calcule une nouvelle cha\xeene de caract\xe8res pour laquelle les s\xe9quences d'\xe9chappement hexad\xe9cimales sont remplac\xe9es par les caract\xe8res qu'elles repr\xe9sentent. Les s\xe9quences d'\xe9chappement introduites peuvent provenir d'une fonction telle que ",Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/escape"}),Object(i.mdx)("inlineCode",{parentName:"a"},"escape()")),". ",Object(i.mdx)("inlineCode",{parentName:"p"},"unescape")," est d\xe9pr\xe9ci\xe9e et doit \xeatre remplac\xe9e par ",Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/decodeURI"}),Object(i.mdx)("inlineCode",{parentName:"a"},"decodeURI()"))," ou ",Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/decodeURIComponent"}),Object(i.mdx)("inlineCode",{parentName:"a"},"decodeURIComponent()")),"."))))}d.isMDXComponent=!0},212:function(e,n,t){"use strict";t.r(n),t.d(n,"MDXContext",(function(){return d})),t.d(n,"MDXProvider",(function(){return m})),t.d(n,"mdx",(function(){return j})),t.d(n,"useMDXComponents",(function(){return p})),t.d(n,"withMDXComponents",(function(){return u}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(){return(o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=r.a.createContext({}),u=function(e){return function(n){var t=p(n.components);return r.a.createElement(e,o({},n,{components:t}))}},p=function(e){var n=r.a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},m=function(e){var n=p(e.components);return r.a.createElement(d.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},f=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(t),u=a,m=d["".concat(o,".").concat(u)]||d[u]||b[u]||i;return t?r.a.createElement(m,c(c({ref:n},l),{},{components:t})):r.a.createElement(m,c({ref:n},l))}));function j(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=f;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}f.displayName="MDXCreateElement"}}]);
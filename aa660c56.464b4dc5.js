(window.webpackJsonp=window.webpackJsonp||[]).push([[96],{166:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return l}));var a=t(3),i=t(7),r=(t(0),t(214)),o={id:"Codecademy-Learn_JavaScript-09",title:"Classes"},c={unversionedId:"Codecademy/Codecademy-Learn_JavaScript-09",id:"Codecademy/Codecademy-Learn_JavaScript-09",isDocsHomePage:!1,title:"Classes",description:"Learn how to share data and functions between objects.",source:"@site/docs/Codecademy/Codecademy-Learn_JavaScript-09.md",slug:"/Codecademy/Codecademy-Learn_JavaScript-09",permalink:"/docs/Codecademy/Codecademy-Learn_JavaScript-09",editUrl:"https://github.com/gylgyl2000/laloutre.github.io/edit/main/docs/Codecademy/Codecademy-Learn_JavaScript-09.md",version:"current"},s=[{value:"01. Introduction to Classes",id:"01-introduction-to-classes",children:[]},{value:"02. Constructor",id:"02-constructor",children:[]},{value:"03. Instance",id:"03-instance",children:[]},{value:"04. Methods",id:"04-methods",children:[]},{value:"05. Method Calls",id:"05-method-calls",children:[]},{value:"06. Inheritance I",id:"06-inheritance-i",children:[]},{value:"07. Inheritance II",id:"07-inheritance-ii",children:[]},{value:"08. Inheritance III",id:"08-inheritance-iii",children:[]},{value:"09. Inheritance IV",id:"09-inheritance-iv",children:[]},{value:"10. Inheritance V",id:"10-inheritance-v",children:[]},{value:"11. Static Methods",id:"11-static-methods",children:[]},{value:"12. Review : Classes",id:"12-review--classes",children:[]}],m={rightToc:s};function l(e){var n=e.components,o=Object(i.a)(e,["components"]);return Object(r.mdx)("wrapper",Object(a.a)({},m,o,{components:n,mdxType:"MDXLayout"}),Object(r.mdx)("p",null,"Learn how to share data and functions between objects."),Object(r.mdx)("h2",{id:"01-introduction-to-classes"},"01. Introduction to Classes"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/classes/exercises/introduction"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,"JavaScript is an ",Object(r.mdx)("em",{parentName:"p"},"object-oriented programming")," (OOP) language we can use to model real-world items. In this lesson, you will learn how to make ",Object(r.mdx)("em",{parentName:"p"},"classes"),". Classes are a tool that developers use to quickly produce similar objects. "),Object(r.mdx)("p",null,"Take, for example, an object representing a dog named ",Object(r.mdx)("inlineCode",{parentName:"p"},"halley"),". This dog\u2019s ",Object(r.mdx)("inlineCode",{parentName:"p"},"name")," (a key) is ",Object(r.mdx)("inlineCode",{parentName:"p"},'"Halley"')," (a value) and has an ",Object(r.mdx)("inlineCode",{parentName:"p"},"age")," (another key) of ",Object(r.mdx)("inlineCode",{parentName:"p"},"3")," (another value). We create the ",Object(r.mdx)("inlineCode",{parentName:"p"},"halley")," object below :"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let halley = {\n  _name: 'Halley',\n  _behavior: 0,\n\n  get name() {\n    return this._name;\n  },\n\n  get behavior() {\n    return this._behavior;\n  },\n\n  incrementBehavior() {\n    this._behavior++;\n  }\n}\n")),Object(r.mdx)("p",null,"Now, imagine you own a dog daycare and want to create a catalog of all the dogs who belong to the daycare. Instead of using the syntax above for every dog that joins the daycare, we can create a ",Object(r.mdx)("inlineCode",{parentName:"p"},"Dog")," class that serves as a template for creating new ",Object(r.mdx)("inlineCode",{parentName:"p"},"Dog")," objects. For each new dog, you can provide a value for their name. "),Object(r.mdx)("p",null,"As you can see, classes are a great way to reduce duplicate code and debugging time."),Object(r.mdx)("p",null,"After we lay the foundation for classes in the first few exercises, we will introduce inheritance and static methods \u2014 two features that will make your code more efficient and meaningful."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Instructions")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"1.")," In the next exercise, you will learn about classes in greater detail. Before you do, take a moment to study the class in ",Object(r.mdx)("strong",{parentName:"p"},"main.js"),".\nSpend some time identifying the similarities and differences between the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Dog")," class in ",Object(r.mdx)("strong",{parentName:"p"},"main.js")," and the code we used to create our ",Object(r.mdx)("inlineCode",{parentName:"p"},"halley")," object in the instructions above."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"class Dog {\n  constructor(name) {\n    this._name = name;\n    this._behavior = 0;\n  }\n\n  get name() {\n    return this._name;\n  }\n  get behavior() {\n    return this._behavior;\n  }   \n\n  incrementBehavior() {\n    this._behavior ++;\n  }\n}\n")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"2.")," Copy the class instantiation, method call, and ",Object(r.mdx)("inlineCode",{parentName:"p"},"console.log()")," statements below into ",Object(r.mdx)("strong",{parentName:"p"},"main.js"),"."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const halley = new Dog('Halley');\nconsole.log(halley.name); // Print name value to console\nconsole.log(halley.behavior); // Print behavior value to console\nhalley.incrementBehavior(); // Add one to behavior\nconsole.log(halley.name); // Print name value to console\nconsole.log(halley.behavior); // Print behavior value to console\n")),Object(r.mdx)("p",null,"What do you expect to see when you run this code ?"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"console.log(halley.name); // Halley\nconsole.log(halley.behavior); // 0\nhalley.incrementBehavior();\nconsole.log(halley.name); // Halley\nconsole.log(halley.behavior); // 1\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"02-constructor"},"02. Constructor"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/classes/exercises/constructor-method"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,"In the last exercise, you created a class called ",Object(r.mdx)("inlineCode",{parentName:"p"},"Dog"),", and used it to produce a ",Object(r.mdx)("inlineCode",{parentName:"p"},"Dog")," object. "),Object(r.mdx)("p",null,"Although you may see similarities between class and object syntax, there is one important method that sets them apart. It\u2019s called the ",Object(r.mdx)("em",{parentName:"p"},"constructor")," method. JavaScript calls the ",Object(r.mdx)("inlineCode",{parentName:"p"},"constructor()")," method every time it creates a new ",Object(r.mdx)("em",{parentName:"p"},"instance")," of a class."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"class Dog {\n  constructor(name) {\n    this.name = name;\n    this.behavior = 0;\n  }\n}\n")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"Dog")," is the name of our class. By convention, we capitalize and CamelCase class names."),Object(r.mdx)("li",{parentName:"ul"},"JavaScript will invoke the ",Object(r.mdx)("inlineCode",{parentName:"li"},"constructor()")," method every time we create a new instance of our ",Object(r.mdx)("inlineCode",{parentName:"li"},"Dog")," class. "),Object(r.mdx)("li",{parentName:"ul"},"This ",Object(r.mdx)("inlineCode",{parentName:"li"},"constructor()")," method accepts one argument, ",Object(r.mdx)("inlineCode",{parentName:"li"},"name"),". "),Object(r.mdx)("li",{parentName:"ul"},"Inside of the ",Object(r.mdx)("inlineCode",{parentName:"li"},"constructor()")," method, we use the ",Object(r.mdx)("inlineCode",{parentName:"li"},"this")," keyword. In the context of a class, ",Object(r.mdx)("inlineCode",{parentName:"li"},"this")," refers to an instance of that class. In the ",Object(r.mdx)("inlineCode",{parentName:"li"},"Dog")," class, we use ",Object(r.mdx)("inlineCode",{parentName:"li"},"this")," to set the value of the Dog instance\u2019s ",Object(r.mdx)("inlineCode",{parentName:"li"},"name")," property to the ",Object(r.mdx)("inlineCode",{parentName:"li"},"name")," argument. "),Object(r.mdx)("li",{parentName:"ul"},"Under ",Object(r.mdx)("inlineCode",{parentName:"li"},"this.name"),", we create a property called ",Object(r.mdx)("inlineCode",{parentName:"li"},"behavior"),", which will keep track of the number of times a dog misbehaves. The ",Object(r.mdx)("inlineCode",{parentName:"li"},"behavior")," property is always initialized to zero. ")),Object(r.mdx)("p",null,"In the next exercise, you will learn how to create ",Object(r.mdx)("inlineCode",{parentName:"p"},"Dog")," instances."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Instructions")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"1.")," Create an empty class named ",Object(r.mdx)("inlineCode",{parentName:"p"},"Surgeon"),"."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"2.")," Inside the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Surgeon")," class, create a ",Object(r.mdx)("inlineCode",{parentName:"p"},"constructor()")," method that accepts two parameters : ",Object(r.mdx)("inlineCode",{parentName:"p"},"name")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"department"),"."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"3.")," Inside the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Surgeon")," ",Object(r.mdx)("inlineCode",{parentName:"p"},"constructor()"),", create ",Object(r.mdx)("inlineCode",{parentName:"p"},"name")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"department")," properties and set them equal to your input parameters."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"class Surgeon {\n  constructor(name, department) {\n    this.name = name;\n    this.department = department;\n  }\n}\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"03-instance"},"03. Instance"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/classes/exercises/instance"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,"Now, we\u2019re ready to create class instances. An ",Object(r.mdx)("em",{parentName:"p"},"instance")," is an object that contains the property names and methods of a class, but with unique property values. Let\u2019s look at our ",Object(r.mdx)("inlineCode",{parentName:"p"},"Dog")," class example."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"class Dog {\n  constructor(name) {\n    this.name = name;\n    this.behavior = 0;\n  } \n}\n\nconst halley = new Dog('Halley'); // Create new Dog instance\nconsole.log(halley.name); // Log the name value saved to halley\n// Output: 'Halley'\n")),Object(r.mdx)("p",null,"Below our ",Object(r.mdx)("inlineCode",{parentName:"p"},"Dog")," class, we use the ",Object(r.mdx)("inlineCode",{parentName:"p"},"new")," keyword to create an instance of our ",Object(r.mdx)("inlineCode",{parentName:"p"},"Dog")," class. Let\u2019s consider the line of code step-by-step."),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},"We create a new variable named ",Object(r.mdx)("inlineCode",{parentName:"li"},"halley")," that will store an instance of our ",Object(r.mdx)("inlineCode",{parentName:"li"},"Dog")," class."),Object(r.mdx)("li",{parentName:"ul"},"We use the ",Object(r.mdx)("inlineCode",{parentName:"li"},"new")," keyword to generate a new instance of the ",Object(r.mdx)("inlineCode",{parentName:"li"},"Dog")," class. The ",Object(r.mdx)("inlineCode",{parentName:"li"},"new")," keyword calls the ",Object(r.mdx)("inlineCode",{parentName:"li"},"constructor()"),", runs the code inside of it, and then returns the new instance."),Object(r.mdx)("li",{parentName:"ul"},"We pass the ",Object(r.mdx)("inlineCode",{parentName:"li"},"'Halley'")," string to the ",Object(r.mdx)("inlineCode",{parentName:"li"},"Dog")," constructor, which sets the ",Object(r.mdx)("inlineCode",{parentName:"li"},"name")," property to ",Object(r.mdx)("inlineCode",{parentName:"li"},"'Halley'"),"."),Object(r.mdx)("li",{parentName:"ul"},"Finally, we log the value saved to the ",Object(r.mdx)("inlineCode",{parentName:"li"},"name")," key in our ",Object(r.mdx)("inlineCode",{parentName:"li"},"halley")," object, which logs ",Object(r.mdx)("inlineCode",{parentName:"li"},"'Halley'")," to the console.")),Object(r.mdx)("p",null,"Now you know how to create instances. In the next exercise, you will learn how to add getters, setters, and methods."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Instructions")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"1.")," Create an instance of the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Surgeon")," class \u2014 set the ",Object(r.mdx)("inlineCode",{parentName:"p"},"name")," to ",Object(r.mdx)("inlineCode",{parentName:"p"},"'Curry'")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"department")," to ",Object(r.mdx)("inlineCode",{parentName:"p"},"'Cardiovascular'"),".\nSave the instance to a constant variable called ",Object(r.mdx)("inlineCode",{parentName:"p"},"surgeonCurry"),". "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"2.")," Create an instance of the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Surgeon")," class \u2014 set the ",Object(r.mdx)("inlineCode",{parentName:"p"},"name")," to ",Object(r.mdx)("inlineCode",{parentName:"p"},"'Durant'")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"department")," to ",Object(r.mdx)("inlineCode",{parentName:"p"},"'Orthopedics'"),".\nSave the instance to a constant variable called ",Object(r.mdx)("inlineCode",{parentName:"p"},"surgeonDurant"),". "),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"class Surgeon {\n  constructor(name, department) {\n    this.name = name;\n    this.department = department;\n  }\n}\nconst surgeonCurry = new Surgeon('Curry', 'Cardiovascular');\nconst surgeonDurant = new Surgeon('Durant', 'Orthopedics');\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"04-methods"},"04. Methods"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/classes/exercises/methods"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,"At this point, we have a ",Object(r.mdx)("inlineCode",{parentName:"p"},"Dog")," class that spins up objects with ",Object(r.mdx)("inlineCode",{parentName:"p"},"name")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"behavior")," properties. Below, we will add getters and a method to bring our class to life.\nClass method and getter syntax is the same as it is for objects ",Object(r.mdx)("strong",{parentName:"p"},"except you can not include commas between methods"),"."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"class Dog {\n  constructor(name) {\n    this._name = name;\n    this._behavior = 0;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get behavior() {\n    return this._behavior;\n  }\n\n  incrementBehavior() {\n    this._behavior++;\n  }\n}\n")),Object(r.mdx)("p",null,"In the example above, we add getter methods for ",Object(r.mdx)("inlineCode",{parentName:"p"},"name")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"behavior"),". Notice, we also prepended our property names with underscores (",Object(r.mdx)("inlineCode",{parentName:"p"},"_name")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"_behavior"),"), which indicate these properties should not be accessed directly. Under the getters, we add a method named ",Object(r.mdx)("inlineCode",{parentName:"p"},".incrementBehavior()"),". When you call ",Object(r.mdx)("inlineCode",{parentName:"p"},".incrementBehavior()")," on a Dog instance, it adds ",Object(r.mdx)("inlineCode",{parentName:"p"},"1")," to the ",Object(r.mdx)("inlineCode",{parentName:"p"},"_behavior")," property. Between each of our methods, we did ",Object(r.mdx)("em",{parentName:"p"},"not")," include commas."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Instructions")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"1.")," In the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Surgeon")," constructor, prepend the ",Object(r.mdx)("inlineCode",{parentName:"p"},"name")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"department")," properties with an underscore (",Object(r.mdx)("inlineCode",{parentName:"p"},"_"),")."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"2.")," Inside of the ",Object(r.mdx)("inlineCode",{parentName:"p"},"constructor()"),", add a property named ",Object(r.mdx)("inlineCode",{parentName:"p"},"_remainingVacationDays")," and set it equal to ",Object(r.mdx)("inlineCode",{parentName:"p"},"20"),"."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"3.")," Under the ",Object(r.mdx)("inlineCode",{parentName:"p"},"constructor()"),", create a getter called ",Object(r.mdx)("inlineCode",{parentName:"p"},"name")," that returns the value saved to ",Object(r.mdx)("inlineCode",{parentName:"p"},"_name"),"."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"4.")," Under the ",Object(r.mdx)("inlineCode",{parentName:"p"},"name")," getter, create a getter called ",Object(r.mdx)("inlineCode",{parentName:"p"},"department")," that returns the value saved to ",Object(r.mdx)("inlineCode",{parentName:"p"},"_department"),"."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"5.")," Under the ",Object(r.mdx)("inlineCode",{parentName:"p"},"department")," getter, create a getter called ",Object(r.mdx)("inlineCode",{parentName:"p"},"remainingVacationDays")," that returns the value saved to ",Object(r.mdx)("inlineCode",{parentName:"p"},"_remainingVacationDays"),"."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"6.")," Under the ",Object(r.mdx)("inlineCode",{parentName:"p"},"remainingVacationDays")," getter, create a method called ",Object(r.mdx)("inlineCode",{parentName:"p"},"takeVacationDays")," that accepts one argument named ",Object(r.mdx)("inlineCode",{parentName:"p"},"daysOff"),".\nInside of the method, subtract ",Object(r.mdx)("inlineCode",{parentName:"p"},"daysOff")," from the number saved to ",Object(r.mdx)("inlineCode",{parentName:"p"},"_remainingVacationDays"),". Set ",Object(r.mdx)("inlineCode",{parentName:"p"},"_remainingVacationDays")," to the result."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"class Surgeon {\n  constructor(name, department) {\n    this._name = name;\n    this._department = department;\n    this._remainingVacationDays = 20;\n  }\n  \n  get name() {\n    return this._name;\n  }\n  \n  get department() {\n    return this._department;\n  }\n  \n  get remainingVacationDays() {\n    return this._remainingVacationDays;\n  }\n  \n  takeVacationDays(daysOff) {\n    this._remainingVacationDays -= daysOff;\n  }\n}\n\nconst surgeonCurry = new Surgeon('Curry', 'Cardiovascular');\nconst surgeonDurant = new Surgeon('Durant', 'Orthopedics');\n\nconsole.log(surgeonCurry.name); // Curry\nsurgeonCurry.takeVacationDays(3);\nconsole.log(surgeonCurry.remainingVacationDays); // 17\nconsole.log(surgeonDurant);\n/*\nSurgeon {\n  _name: 'Durant',\n  _department: 'Orthopedics',\n  _remainingVacationDays: 20 }\n*/\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"05-method-calls"},"05. Method Calls"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/classes/exercises/method-calls"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,"Finally, let\u2019s use our new methods to access and manipulate data from ",Object(r.mdx)("inlineCode",{parentName:"p"},"Dog")," instances. "),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"class Dog {\n  constructor(name) {\n    this._name = name;\n    this._behavior = 0;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get behavior() {\n    return this._behavior;\n  }   \n\n  incrementBehavior() {\n    this._behavior++;\n  }\n}\n\nconst halley = new Dog('Halley');\n")),Object(r.mdx)("p",null,"In the example above, we create the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Dog")," class, then create an instance, and save it to a variable named ",Object(r.mdx)("inlineCode",{parentName:"p"},"halley"),". "),Object(r.mdx)("p",null,"The syntax for calling methods and getters on an instance is the same as calling them on an object \u2014 append the instance with a period, then the property or method name. For methods, you must also include opening and closing parentheses."),Object(r.mdx)("p",null,"  Let\u2019s take a moment to create two ",Object(r.mdx)("inlineCode",{parentName:"p"},"Dog")," instances and call our ",Object(r.mdx)("inlineCode",{parentName:"p"},".incrementBehavior()")," method on one of them."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let nikko = new Dog('Nikko'); // Create dog named Nikko\nnikko.incrementBehavior(); // Add 1 to nikko instance's behavior\nlet bradford = new Dog('Bradford'); // Create dog name Bradford\nconsole.log(nikko.behavior); // Logs 1 to the console\nconsole.log(bradford.behavior); // Logs 0 to the console\n")),Object(r.mdx)("p",null,"In the example above, we create two new ",Object(r.mdx)("inlineCode",{parentName:"p"},"Dog")," instances, ",Object(r.mdx)("inlineCode",{parentName:"p"},"nikko")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"bradford"),". Because we increment the behavior of our ",Object(r.mdx)("inlineCode",{parentName:"p"},"nikko")," instance, but not ",Object(r.mdx)("inlineCode",{parentName:"p"},"bradford"),", accessing ",Object(r.mdx)("inlineCode",{parentName:"p"},"nikko.behavior")," returns ",Object(r.mdx)("inlineCode",{parentName:"p"},"1")," and accessing ",Object(r.mdx)("inlineCode",{parentName:"p"},"bradford.behavior")," returns ",Object(r.mdx)("inlineCode",{parentName:"p"},"0"),"."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Instructions")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"1.")," At the bottom of ",Object(r.mdx)("strong",{parentName:"p"},"main.js"),", use ",Object(r.mdx)("inlineCode",{parentName:"p"},"console.log()")," to print the value saved to the",Object(r.mdx)("inlineCode",{parentName:"p"},"name")," property of the ",Object(r.mdx)("inlineCode",{parentName:"p"},"surgeonCurry")," object."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"2.")," Call ",Object(r.mdx)("inlineCode",{parentName:"p"},".takeVacationDays()")," on ",Object(r.mdx)("inlineCode",{parentName:"p"},"surgeonCurry"),", with an input of ",Object(r.mdx)("inlineCode",{parentName:"p"},"3"),". "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"3.")," After the call to ",Object(r.mdx)("inlineCode",{parentName:"p"},".takeVacationDays()"),", use ",Object(r.mdx)("inlineCode",{parentName:"p"},"console.log()")," to print the value saved to the ",Object(r.mdx)("inlineCode",{parentName:"p"},"remainingVacationDays")," property of the ",Object(r.mdx)("inlineCode",{parentName:"p"},"surgeonCurry")," instance."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"class Surgeon {\n  constructor(name, department) {\n    this._name = name;\n    this._department = department;\n    this._remainingVacationDays = 20;\n  }\n  \n  get name() {\n    return this._name;\n  }\n  \n  get department() {\n    return this._department;\n  }\n  \n  get remainingVacationDays() {\n    return this._remainingVacationDays;\n  }\n  \n  takeVacationDays(daysOff) {\n    this._remainingVacationDays -= daysOff;\n  }\n}\n\nconst surgeonCurry = new Surgeon('Curry', 'Cardiovascular');\nconst surgeonDurant = new Surgeon('Durant', 'Orthopedics');\n\nconsole.log(surgeonCurry.name); // Curry\nsurgeonCurry.takeVacationDays(3); // 17\nconsole.log(surgeonCurry.remainingVacationDays);\nconsole.log(surgeonDurant);\n/*\nSurgeon {\n  _name: 'Durant',\n  _department: 'Orthopedics',\n  _remainingVacationDays: 20 }\n*/\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"06-inheritance-i"},"06. Inheritance I"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/classes/exercises/inheritance-i"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,"Imagine our doggy daycare is so successful that we decide to expand the business and open a kitty daycare.  Before the daycare opens, we need to create a ",Object(r.mdx)("inlineCode",{parentName:"p"},"Cat")," class so we can quickly generate ",Object(r.mdx)("inlineCode",{parentName:"p"},"Cat")," instances. We know that the properties in our ",Object(r.mdx)("inlineCode",{parentName:"p"},"Cat")," class (",Object(r.mdx)("inlineCode",{parentName:"p"},"name"),", ",Object(r.mdx)("inlineCode",{parentName:"p"},"behavior"),") are similar to the properties in our ",Object(r.mdx)("inlineCode",{parentName:"p"},"Dog")," class, though, there will be some differences, because of course, cats are not dogs. "),Object(r.mdx)("p",null,"Let\u2019s say that our ",Object(r.mdx)("inlineCode",{parentName:"p"},"Cat")," class looks like this :"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"class Cat {\n  constructor(name, usesLitter) {\n    this._name = name;\n    this._usesLitter = usesLitter;\n    this._behavior = 0;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get usesLitter() {\n    return this._usesLitter;\n  }\n\n  get behavior() {\n    return this._behavior;\n  }  \n\n  incrementBehavior() {\n    this._behavior++;\n  }\n}\n")),Object(r.mdx)("p",null,"In the example above, we create a ",Object(r.mdx)("inlineCode",{parentName:"p"},"Cat")," class. It shares a couple of properties (",Object(r.mdx)("inlineCode",{parentName:"p"},"_name")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"_behavior"),") and a method (",Object(r.mdx)("inlineCode",{parentName:"p"},".incrementBehavior()"),") with the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Dog")," class from earlier exercises. The ",Object(r.mdx)("inlineCode",{parentName:"p"},"Cat")," class also contains one additional property (",Object(r.mdx)("inlineCode",{parentName:"p"},"_usesLitter"),"), that holds a boolean value to indicate whether a cat can use their litter box."),Object(r.mdx)("p",null,"When multiple classes share properties or methods, they become candidates for ",Object(r.mdx)("em",{parentName:"p"},"inheritance")," \u2014 a tool developers use to decrease the amount of code they need to write. "),Object(r.mdx)("p",null,"With inheritance, you can create a ",Object(r.mdx)("em",{parentName:"p"},"parent")," class (also known as a superclass) with properties and methods that multiple ",Object(r.mdx)("em",{parentName:"p"},"child")," classes (also known as subclasses) share. The child classes inherit the properties and methods from their parent class.  "),Object(r.mdx)("p",null,"Let\u2019s abstract the shared properties and methods from our ",Object(r.mdx)("inlineCode",{parentName:"p"},"Cat")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"Dog")," classes into a parent class called ",Object(r.mdx)("inlineCode",{parentName:"p"},"Animal"),". "),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"class Animal {\n  constructor(name) {\n    this._name = name;\n    this._behavior = 0;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get behavior() {\n    return this._behavior;\n  }   \n\n  incrementBehavior() {\n    this._behavior++;\n  }\n} \n")),Object(r.mdx)("p",null,"In the example above, the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Animal")," class contains the properties and methods that the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Cat")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"Dog")," classes share (",Object(r.mdx)("inlineCode",{parentName:"p"},"name"),", ",Object(r.mdx)("inlineCode",{parentName:"p"},"behavior"),", ",Object(r.mdx)("inlineCode",{parentName:"p"},".incrementBehavior()"),"). "),Object(r.mdx)("p",null,"The diagram to the right shows the relationships we want to create between the Animal, Cat, and Dog classes."),Object(r.mdx)("p",null,Object(r.mdx)("img",{alt:"inheritance_diagram",src:t(450).default})),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"07-inheritance-ii"},"07. Inheritance II"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/classes/exercises/inheritance-ii"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,"In the last exercise, we created a parent class named ",Object(r.mdx)("inlineCode",{parentName:"p"},"Animal")," for two child classes named ",Object(r.mdx)("inlineCode",{parentName:"p"},"Cat")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"Dog"),". "),Object(r.mdx)("p",null,"The ",Object(r.mdx)("inlineCode",{parentName:"p"},"Animal")," class below contains the shared properties and methods of ",Object(r.mdx)("inlineCode",{parentName:"p"},"Cat")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"Dog"),"."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"class Animal {\n  constructor(name) {\n    this._name = name;\n    this._behavior = 0;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get behavior() {\n    return this._behavior;\n  }   \n\n  incrementBehavior() {\n    this._behavior++;\n  }\n} \n")),Object(r.mdx)("p",null,"The code below shows the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Cat")," class that will inherit information from the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Animal")," class."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"class Cat {\n  constructor(name, usesLitter) {\n    this._name = name;\n    this._usesLitter = usesLitter;\n    this._behavior = 0;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get behavior() {\n    return this._behavior;\n  }\n\n  get usesLitter() {\n    return this._usesLitter;\n  }\n\n  incrementBehavior() {\n    this._behavior++;\n  }\n}\n")),Object(r.mdx)("p",null,"To the right, in ",Object(r.mdx)("strong",{parentName:"p"},"main.js"),", you will put what you learned to practice by creating a parent class named ",Object(r.mdx)("inlineCode",{parentName:"p"},"HospitalEmployee"),"."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Instructions")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"1.")," In the next few exercises, you will create two subclasses (",Object(r.mdx)("inlineCode",{parentName:"p"},"Doctor")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"Nurse"),") from a parent class named ",Object(r.mdx)("inlineCode",{parentName:"p"},"HospitalEmployee"),". Below, we have listed the properties and methods you will find in the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Doctor")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"Nurse")," classes."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Doctor")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},"Properties: ",Object(r.mdx)("inlineCode",{parentName:"li"},"_name"),", ",Object(r.mdx)("inlineCode",{parentName:"li"},"_remainingVacationDays")," (set to ",Object(r.mdx)("inlineCode",{parentName:"li"},"20")," inside the ",Object(r.mdx)("inlineCode",{parentName:"li"},"constructor()"),"), ",Object(r.mdx)("inlineCode",{parentName:"li"},"_insurance")),Object(r.mdx)("li",{parentName:"ul"},"Methods: ",Object(r.mdx)("inlineCode",{parentName:"li"},".takeVacationDays()"))),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Nurse")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},"Properties: ",Object(r.mdx)("inlineCode",{parentName:"li"},"_name"),", ",Object(r.mdx)("inlineCode",{parentName:"li"},"_remainingVacationDays")," (set to ",Object(r.mdx)("inlineCode",{parentName:"li"},"20")," inside ",Object(r.mdx)("inlineCode",{parentName:"li"},"constructor()"),"), ",Object(r.mdx)("inlineCode",{parentName:"li"},"_certifications")),Object(r.mdx)("li",{parentName:"ul"},"Methods: ",Object(r.mdx)("inlineCode",{parentName:"li"},".takeVacationDays()"),", ",Object(r.mdx)("inlineCode",{parentName:"li"},".addCertification()"))),Object(r.mdx)("p",null,"In ",Object(r.mdx)("strong",{parentName:"p"},"main.js"),", create a parent class named ",Object(r.mdx)("inlineCode",{parentName:"p"},"HospitalEmployee"),".  Add a constructor with ",Object(r.mdx)("inlineCode",{parentName:"p"},"name")," as an argument."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"2.")," Inside of the ",Object(r.mdx)("inlineCode",{parentName:"p"},"constructor()"),", set the instance\u2019s ",Object(r.mdx)("inlineCode",{parentName:"p"},"_name")," to ",Object(r.mdx)("inlineCode",{parentName:"p"},"name")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"_remainingVacationDays")," to ",Object(r.mdx)("inlineCode",{parentName:"p"},"20"),"."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"3.")," Under the constructor, create getters for your ",Object(r.mdx)("inlineCode",{parentName:"p"},"_name")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"_remainingVacationDays")," properties.\nInside the getter, return the property\u2019s value."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"4.")," Under the getters, add a method called ",Object(r.mdx)("inlineCode",{parentName:"p"},"takeVacationDays"),".\nThis method should accept one argument, called ",Object(r.mdx)("inlineCode",{parentName:"p"},"daysOff"),".\nInside the method, subtract ",Object(r.mdx)("inlineCode",{parentName:"p"},"daysOff")," from ",Object(r.mdx)("inlineCode",{parentName:"p"},"_remainingVacationDays"),". Save the result to ",Object(r.mdx)("inlineCode",{parentName:"p"},"_remainingVacationDays"),"."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"class HospitalEmployee {\n  constructor(name) {\n    this._name = name;\n    this._remainingVacationDays = 20;\n  }\n  \n  get name() {\n    return this._name;\n  }\n\n  get remainingVacationDays() {\n    return this._remainingVacationDays;\n  }\n  \n  takeVacationDays(daysOff) {\n    this._remainingVacationDays -= daysOff;\n  }\n}\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"08-inheritance-iii"},"08. Inheritance III"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/classes/exercises/inheritance-iii"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,"We\u2019ve abstracted the shared properties and methods of our ",Object(r.mdx)("inlineCode",{parentName:"p"},"Cat")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"Dog")," classes into a parent class called ",Object(r.mdx)("inlineCode",{parentName:"p"},"Animal")," (See below). "),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"class Animal {\n  constructor(name) {\n    this._name = name;\n    this._behavior = 0;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get behavior() {\n    return this._behavior;\n  }\n\n  incrementBehavior() {\n    this._behavior++;\n  }\n} \n")),Object(r.mdx)("p",null,"Now that we have these shared properties and methods in the parent ",Object(r.mdx)("inlineCode",{parentName:"p"},"Animal")," class, we can extend them to the subclass, ",Object(r.mdx)("inlineCode",{parentName:"p"},"Cat"),"."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"class Cat extends Animal {\n  constructor(name, usesLitter) {\n    super(name);\n    this._usesLitter = usesLitter;\n  }\n}\n")),Object(r.mdx)("p",null,"In the example above, we create a new class named ",Object(r.mdx)("inlineCode",{parentName:"p"},"Cat")," that extends the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Animal")," class. Let\u2019s pay special attention to our new keywords : ",Object(r.mdx)("inlineCode",{parentName:"p"},"extends")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"super"),"."),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},"The ",Object(r.mdx)("inlineCode",{parentName:"li"},"extends")," keyword makes the methods of the animal class available inside the cat class."),Object(r.mdx)("li",{parentName:"ul"},"The constructor, called when you create a new ",Object(r.mdx)("inlineCode",{parentName:"li"},"Cat")," object, accepts two arguments, ",Object(r.mdx)("inlineCode",{parentName:"li"},"name")," and ",Object(r.mdx)("inlineCode",{parentName:"li"},"usesLitter"),". "),Object(r.mdx)("li",{parentName:"ul"},"The ",Object(r.mdx)("inlineCode",{parentName:"li"},"super")," keyword calls the constructor of the parent class. In this case, ",Object(r.mdx)("inlineCode",{parentName:"li"},"super(name)")," passes the name argument of the ",Object(r.mdx)("inlineCode",{parentName:"li"},"Cat")," class to the constructor of the ",Object(r.mdx)("inlineCode",{parentName:"li"},"Animal")," class. When the ",Object(r.mdx)("inlineCode",{parentName:"li"},"Animal")," constructor runs, it sets ",Object(r.mdx)("inlineCode",{parentName:"li"},"this._name = name;")," for new ",Object(r.mdx)("inlineCode",{parentName:"li"},"Cat")," instances."),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"_usesLitter")," is a new property that is unique to the ",Object(r.mdx)("inlineCode",{parentName:"li"},"Cat")," class, so we set it in the ",Object(r.mdx)("inlineCode",{parentName:"li"},"Cat")," constructor.")),Object(r.mdx)("p",null,"Notice, we call ",Object(r.mdx)("inlineCode",{parentName:"p"},"super")," on the first line of our ",Object(r.mdx)("inlineCode",{parentName:"p"},"constructor()"),", then set the ",Object(r.mdx)("inlineCode",{parentName:"p"},"usesLitter")," property on the second line. In a ",Object(r.mdx)("inlineCode",{parentName:"p"},"constructor()"),", you must always call the ",Object(r.mdx)("inlineCode",{parentName:"p"},"super")," method before you can use the ",Object(r.mdx)("inlineCode",{parentName:"p"},"this")," keyword \u2014 if you do not, JavaScript will throw a reference error. To avoid reference errors, it is best practice to call ",Object(r.mdx)("inlineCode",{parentName:"p"},"super")," on the first line of subclass constructors."),Object(r.mdx)("p",null,"Below, we create a new ",Object(r.mdx)("inlineCode",{parentName:"p"},"Cat")," instance and call its name with the same syntax as we did with the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Dog")," class :"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const bryceCat = new Cat('Bryce', false); \nconsole.log(bryceCat._name); // output: Bryce\n")),Object(r.mdx)("p",null,"In the example above, we create a new instance the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Cat")," class, named ",Object(r.mdx)("inlineCode",{parentName:"p"},"bryceCat"),". We pass it ",Object(r.mdx)("inlineCode",{parentName:"p"},"'Bryce'")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"false")," for our ",Object(r.mdx)("inlineCode",{parentName:"p"},"name")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"usesLitter")," arguments. When we call ",Object(r.mdx)("inlineCode",{parentName:"p"},"console.log(bryceCat._name)")," our program prints, ",Object(r.mdx)("inlineCode",{parentName:"p"},"Bryce"),"."),Object(r.mdx)("p",null,"In the example above, we abandoned best practices by calling our ",Object(r.mdx)("inlineCode",{parentName:"p"},"_name")," property directly. In the next exercise, we\u2019ll address this by calling an inherited getter method for our ",Object(r.mdx)("inlineCode",{parentName:"p"},"name")," property."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Instructions")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"1.")," In this exercise, you will begin to create the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Nurse")," class as a child of the ",Object(r.mdx)("inlineCode",{parentName:"p"},"HospitalEmployee")," class. Remember the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Nurse")," class has the following properties and methods :"),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Nurse")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},"Properties : ",Object(r.mdx)("inlineCode",{parentName:"li"},"_name"),", ",Object(r.mdx)("inlineCode",{parentName:"li"},"_remainingVacationDays")," (set to ",Object(r.mdx)("inlineCode",{parentName:"li"},"20")," inside ",Object(r.mdx)("inlineCode",{parentName:"li"},"constructor()"),"), ",Object(r.mdx)("inlineCode",{parentName:"li"},"_certifications")),Object(r.mdx)("li",{parentName:"ul"},"Methods : ",Object(r.mdx)("inlineCode",{parentName:"li"},".takeVacationDays()"),", ",Object(r.mdx)("inlineCode",{parentName:"li"},".addCertification()"))),Object(r.mdx)("p",null,"Under ",Object(r.mdx)("inlineCode",{parentName:"p"},"HospitalEmployee"),", create an empty class named ",Object(r.mdx)("inlineCode",{parentName:"p"},"Nurse")," that extends ",Object(r.mdx)("inlineCode",{parentName:"p"},"HospitalEmployee"),"."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"2.")," Inside the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Nurse")," class, create a ",Object(r.mdx)("inlineCode",{parentName:"p"},"constructor()")," that accepts two arguments. Use the list of properties above to name these arguments. "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"3.")," In the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Nurse")," constructor, call the parent\u2019s constructor method and pass the appropriate value(s)."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"4.")," Inside of the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Nurse")," constructor, and under ",Object(r.mdx)("inlineCode",{parentName:"p"},"super"),", set ",Object(r.mdx)("inlineCode",{parentName:"p"},"_certifications"),"."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"5.")," Under the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Nurse")," class, create a new instance of ",Object(r.mdx)("inlineCode",{parentName:"p"},"Nurse")," and save it to a constant variable named ",Object(r.mdx)("inlineCode",{parentName:"p"},"nurseOlynyk"),". Pass in the following values for each property :"),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"name"),": ",Object(r.mdx)("inlineCode",{parentName:"li"},"'Olynyk'")),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"certifications"),": ",Object(r.mdx)("inlineCode",{parentName:"li"},"['Trauma', 'Pediatrics']"))),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"class HospitalEmployee {\n  constructor(name) {\n    this._name = name;\n    this._remainingVacationDays = 20;\n  }\n  \n  get name() {\n    return this._name;\n  }\n  \n  get remainingVacationDays() {\n    return this._remainingVacationDays;\n  }\n  \n  takeVacationDays(daysOff) {\n    this._remainingVacationDays -= daysOff;\n  }\n}\nclass Nurse extends HospitalEmployee {\n  constructor(name) {\n  super(name, certification);\n  this._certifications = certifications;\n  }\n}\nconst nurseOlynyk = new Nurse('Olynyk', ['Trauma', 'Pediatrics']);\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"09-inheritance-iv"},"09. Inheritance IV"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/classes/exercises/inheritance-iv"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,"Now that we know how to create an object that inherits properties from a parent class let\u2019s turn our attention to methods.\nWhen we call ",Object(r.mdx)("inlineCode",{parentName:"p"},"extends")," in a class declaration, all of the parent methods are available to the child class.\nBelow, we extend our ",Object(r.mdx)("inlineCode",{parentName:"p"},"Animal")," class to a ",Object(r.mdx)("inlineCode",{parentName:"p"},"Cat")," subclass."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"class Animal {\n  constructor(name) {\n    this._name = name;\n    this._behavior = 0;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get behavior() {\n    return this._behavior;\n  }\n\n  incrementBehavior() {\n    this._behavior++;\n  }\n} \n\n\nclass Cat extends Animal {\n  constructor(name, usesLitter) {\n    super(name);\n    this._usesLitter = usesLitter;\n  }\n}\n\nconst bryceCat = new Cat('Bryce', false);\n")),Object(r.mdx)("p",null,"In the example above, our ",Object(r.mdx)("inlineCode",{parentName:"p"},"Cat")," class extends ",Object(r.mdx)("inlineCode",{parentName:"p"},"Animal"),". As a result, the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Cat")," class has access to the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Animal")," getters and the ",Object(r.mdx)("inlineCode",{parentName:"p"},".incrementBehavior()")," method.\nAlso in the code above, we create a ",Object(r.mdx)("inlineCode",{parentName:"p"},"Cat")," instance named ",Object(r.mdx)("inlineCode",{parentName:"p"},"bryceCat"),". Because ",Object(r.mdx)("inlineCode",{parentName:"p"},"bryceCat")," has access to the ",Object(r.mdx)("inlineCode",{parentName:"p"},"name")," getter, the code below logs ",Object(r.mdx)("inlineCode",{parentName:"p"},"'Bryce'")," to the console. "),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"console.log(bryceCat.name);\n")),Object(r.mdx)("p",null,"Since the ",Object(r.mdx)("inlineCode",{parentName:"p"},"extends")," keyword brings all of the parent\u2019s getters and methods into the child class, ",Object(r.mdx)("inlineCode",{parentName:"p"},"bryceCat.name")," accesses the ",Object(r.mdx)("inlineCode",{parentName:"p"},"name")," getter and returns the value saved to the ",Object(r.mdx)("inlineCode",{parentName:"p"},"name")," property.\nNow consider a more involved example and try to answer the following question : What will the code below log to the console ?"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"bryceCat.incrementBehavior(); // Call .incrementBehavior() on Cat instance \nconsole.log(bryceCat.behavior); // Log value saved to behavior\n")),Object(r.mdx)("p",null,"The correct answer is ",Object(r.mdx)("inlineCode",{parentName:"p"},"1"),". But why ?"),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},"The ",Object(r.mdx)("inlineCode",{parentName:"li"},"Cat")," class inherits the ",Object(r.mdx)("inlineCode",{parentName:"li"},"_behavior")," property, ",Object(r.mdx)("inlineCode",{parentName:"li"},"behavior")," getter, and the ",Object(r.mdx)("inlineCode",{parentName:"li"},".incrementBehavior()")," method from the ",Object(r.mdx)("inlineCode",{parentName:"li"},"Animal")," class. "),Object(r.mdx)("li",{parentName:"ul"},"When we created the ",Object(r.mdx)("inlineCode",{parentName:"li"},"bryceCat")," instance, the ",Object(r.mdx)("inlineCode",{parentName:"li"},"Animal")," constructor set the ",Object(r.mdx)("inlineCode",{parentName:"li"},"_behavior")," property to zero. "),Object(r.mdx)("li",{parentName:"ul"},"The first line of code calls the inherited ",Object(r.mdx)("inlineCode",{parentName:"li"},".incrementBehavior()")," method, which increases the ",Object(r.mdx)("inlineCode",{parentName:"li"},"bryceCat")," ",Object(r.mdx)("inlineCode",{parentName:"li"},"_behavior")," value from zero to one."),Object(r.mdx)("li",{parentName:"ul"},"The second line of code calls the ",Object(r.mdx)("inlineCode",{parentName:"li"},"behavior")," getter and logs the value saved to ",Object(r.mdx)("inlineCode",{parentName:"li"},"_behavior")," (",Object(r.mdx)("inlineCode",{parentName:"li"},"1"),").")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Instructions")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"1.")," Call ",Object(r.mdx)("inlineCode",{parentName:"p"},".takeVacationDays()")," with an input of ",Object(r.mdx)("inlineCode",{parentName:"p"},"5")," on your ",Object(r.mdx)("inlineCode",{parentName:"p"},"nurseOlynyk")," instance. "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"2.")," Under the method call, log the value saved to the ",Object(r.mdx)("inlineCode",{parentName:"p"},"remainingVacationDays")," property in ",Object(r.mdx)("inlineCode",{parentName:"p"},"nurseOlynyk"),"."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"class HospitalEmployee {\n  constructor(name) {\n    this._name = name;\n    this._remainingVacationDays = 20;\n  }\n  \n  get name() {\n    return this._name;\n  }\n  \n  get remainingVacationDays() {\n    return this._remainingVacationDays;\n  }\n  \n  takeVacationDays(daysOff) {\n    this._remainingVacationDays -= daysOff;\n  }\n}\n\nclass Nurse extends HospitalEmployee {\n constructor(name, certifications) {\n   super(name);\n   this._certifications = certifications;\n\n } \n}\n\nconst nurseOlynyk = new Nurse('Olynyk', ['Trauma','Pediatrics']);\nnurseOlynyk.takeVacationDays(5);\nconsole.log(nurseOlynyk.remainingVacationDays); // 15\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"10-inheritance-v"},"10. Inheritance V"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/classes/exercises/inheritance-v"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,"In addition to the inherited features, child classes can contain their own properties, getters, setters, and methods.\nBelow, we will add a ",Object(r.mdx)("inlineCode",{parentName:"p"},"usesLitter")," getter. The syntax for creating getters, setters, and methods is the same as it is in any other class."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"class Cat extends Animal {\n  constructor(name, usesLitter) {\n    super(name);\n    this._usesLitter = usesLitter;\n  }\n\n  get usesLitter() {\n    return this._usesLitter;\n  }\n}\n")),Object(r.mdx)("p",null,"In the example above, we create a ",Object(r.mdx)("inlineCode",{parentName:"p"},"usesLitter")," getter in the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Cat")," class that returns the value saved to ",Object(r.mdx)("inlineCode",{parentName:"p"},"_usesLitter"),".\nCompare the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Cat")," class above to the one we created without inheritance :"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"class Cat {\n  constructor(name, usesLitter) {\n    this._name = name;\n    this._usesLitter = usesLitter;\n    this._behavior = 0;\n  }\n\n  get name() {\n    return this._name;\n  }\n\n  get usesLitter() {\n    return this._usesLitter;\n  }\n\n  get behavior() {\n    return this._behavior;\n  }   \n\n  incrementBehavior() {\n    this._behavior++;\n  }\n}\n")),Object(r.mdx)("p",null,"We decreased the number of lines required to create the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Cat")," class by about half. Yes, it did require an extra class (",Object(r.mdx)("inlineCode",{parentName:"p"},"Animal"),"), making the reduction in the size of our ",Object(r.mdx)("inlineCode",{parentName:"p"},"Cat")," class seem moot. However, the benefits (time saved, readability, efficiency) of inheritance grow as the number and size of your subclasses increase.\nOne benefit is that when you need to change a method or property that multiple classes share, you can change the parent class, instead of each subclass.\nBefore we move past inheritance, take a moment to see how we would create an additional subclass, called ",Object(r.mdx)("inlineCode",{parentName:"p"},"Dog"),". "),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"class Dog extends Animal {\n  constructor(name) {\n    super(name);\n  }\n}\n")),Object(r.mdx)("p",null,"This ",Object(r.mdx)("inlineCode",{parentName:"p"},"Dog")," class has access to the same properties, getters, setters, and methods as the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Dog")," class we made without inheritance, and is a quarter the size.\nNow that we\u2019ve abstracted animal daycare features, it\u2019s easy to see how you can extend ",Object(r.mdx)("inlineCode",{parentName:"p"},"Animal")," to support other classes, like ",Object(r.mdx)("inlineCode",{parentName:"p"},"Rabbit"),", ",Object(r.mdx)("inlineCode",{parentName:"p"},"Bird")," or even ",Object(r.mdx)("inlineCode",{parentName:"p"},"Snake"),". "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Instructions")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"1.")," Use the properties and methods below to help you complete the tasks that follow."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Nurse")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},"Properties: ",Object(r.mdx)("inlineCode",{parentName:"li"},"_name"),", ",Object(r.mdx)("inlineCode",{parentName:"li"},"_remainingVacationDays")," (set to ",Object(r.mdx)("inlineCode",{parentName:"li"},"20")," inside the ",Object(r.mdx)("inlineCode",{parentName:"li"},"constructor()"),"), ",Object(r.mdx)("inlineCode",{parentName:"li"},"_certifications")),Object(r.mdx)("li",{parentName:"ul"},"Methods: ",Object(r.mdx)("inlineCode",{parentName:"li"},".takeVacationDays()"),", ",Object(r.mdx)("inlineCode",{parentName:"li"},".addCertification()"))),Object(r.mdx)("p",null,"Under the Nurse ",Object(r.mdx)("inlineCode",{parentName:"p"},"constructor()"),", add a getter that returns the value saved to  the Nurse instance\u2019s ",Object(r.mdx)("inlineCode",{parentName:"p"},"_certifications"),"."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"2.")," Add a method called ",Object(r.mdx)("inlineCode",{parentName:"p"},"addCertification")," under the ",Object(r.mdx)("inlineCode",{parentName:"p"},"certifications")," getter.\nThe method should accept one input (",Object(r.mdx)("inlineCode",{parentName:"p"},"newCertification"),"). Inside the method, use the ",Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push?v=example"}),"push")," method to add the ",Object(r.mdx)("inlineCode",{parentName:"p"},"newCertification")," value to the nurse\u2019s ",Object(r.mdx)("inlineCode",{parentName:"p"},"certifications")," array."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"3.")," At the bottom of ",Object(r.mdx)("strong",{parentName:"p"},"main.js")," call the ",Object(r.mdx)("inlineCode",{parentName:"p"},".addCertification()")," method on ",Object(r.mdx)("inlineCode",{parentName:"p"},"nurseOlynyk")," with a parameter of ",Object(r.mdx)("inlineCode",{parentName:"p"},"'Genetics'"),"."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"4.")," Log the value saved to the ",Object(r.mdx)("inlineCode",{parentName:"p"},"certifications")," property of ",Object(r.mdx)("inlineCode",{parentName:"p"},"nurseOlynyk"),"."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"class HospitalEmployee {\n  constructor(name) {\n    this._name = name;\n    this._remainingVacationDays = 20;\n  }\n  \n  get name() {\n    return this._name;\n  }\n  \n  get remainingVacationDays() {\n    return this._remainingVacationDays;\n  }\n  \n  takeVacationDays(daysOff) {\n    this._remainingVacationDays -= daysOff;\n  }\n}\n\nclass Nurse extends HospitalEmployee {\n  constructor(name, certifications) {\n    super(name);\n    this._certifications = certifications;\n  }\n  get certifications() {\n    return this._certifications;\n  }\n  addCertification(newCertification) {\n    this._certifications.push(newCertification);\n  }\n}\n\nconst nurseOlynyk = new Nurse('Olynyk', ['Trauma','Pediatrics']);\nnurseOlynyk.takeVacationDays(5);\nconsole.log(nurseOlynyk.remainingVacationDays); // 15\nnurseOlynyk.addCertification('Genetics');\nconsole.log(nurseOlynyk.certifications); // [ 'Trauma', 'Pediatrics', 'Genetics' ]\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"11-static-methods"},"11. Static Methods"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/classes/exercises/static-methods"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,"Sometimes you will want a class to have methods that aren\u2019t available in individual instances, but that you can call directly from the class.\nTake the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Date")," class, for example \u2014 you can both create ",Object(r.mdx)("inlineCode",{parentName:"p"},"Date")," instances to represent whatever date you want, and call ",Object(r.mdx)("em",{parentName:"p"},"static")," methods, like ",Object(r.mdx)("inlineCode",{parentName:"p"},"Date.now()")," which returns the current date, directly from the class. The ",Object(r.mdx)("inlineCode",{parentName:"p"},".now()")," method is static, so you can call it directly from the class, but not from an instance of the class.\nLet\u2019s see how to use the ",Object(r.mdx)("inlineCode",{parentName:"p"},"static")," keyword to create a static method called ",Object(r.mdx)("inlineCode",{parentName:"p"},"generateName")," method in our ",Object(r.mdx)("inlineCode",{parentName:"p"},"Animal")," class :"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"class Animal {\n  constructor(name) {\n    this._name = name;\n    this._behavior = 0;\n  }\n\n  static generateName() {\n    const names = ['Angel', 'Spike', 'Buffy', 'Willow', 'Tara'];\n    const randomNumber = Math.floor(Math.random()*5);\n    return names[randomNumber];\n  }\n} \n")),Object(r.mdx)("p",null,"In the example above, we create a ",Object(r.mdx)("inlineCode",{parentName:"p"},"static")," method called ",Object(r.mdx)("inlineCode",{parentName:"p"},".generateName()")," that returns a random name when it\u2019s called. Because of the ",Object(r.mdx)("inlineCode",{parentName:"p"},"static")," keyword, we can only access ",Object(r.mdx)("inlineCode",{parentName:"p"},".generateName()")," by appending it to the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Animal")," class.\nWe call the ",Object(r.mdx)("inlineCode",{parentName:"p"},".generateName()")," method with the following syntax :"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"console.log(Animal.generateName()); // returns a name\n")),Object(r.mdx)("p",null,"You cannot access the ",Object(r.mdx)("inlineCode",{parentName:"p"},".generateName()")," method from instances of the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Animal")," class or instances of its subclasses (See below)."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const tyson = new Animal('Tyson'); \ntyson.generateName(); // TypeError\n")),Object(r.mdx)("p",null,"The example above will result in an error, because you cannot call static methods (",Object(r.mdx)("inlineCode",{parentName:"p"},".generateName()"),") on an instance (",Object(r.mdx)("inlineCode",{parentName:"p"},"tyson"),"). "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Instructions")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"1.")," Inside of your ",Object(r.mdx)("inlineCode",{parentName:"p"},"HospitalEmployee")," class, create a static method called ",Object(r.mdx)("inlineCode",{parentName:"p"},"generatePassword"),". When it\u2019s called, this method should return a random integer between zero and 10,000."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"class HospitalEmployee {\n  constructor(name) {\n    this._name = name;\n    this._remainingVacationDays = 20;\n  }\n  \n  get name() {\n    return this._name;\n  }\n  \n  get remainingVacationDays() {\n    return this._remainingVacationDays;\n  }\n  \n  takeVacationDays(daysOff) {\n    this._remainingVacationDays -= daysOff;\n  }\n  \n  static generatePassword() {\n    return Math.floor(Math.random() * 10000);\n  }\n}\n\nclass Nurse extends HospitalEmployee {\n  constructor(name, certifications) {\n    super(name);\n    this._certifications = certifications;\n  } \n  \n  get certifications() {\n    return this._certifications;\n  }\n  \n  addCertification(newCertification) {\n    this.certifications.push(newCertification);\n  }\n}\n\nconst nurseOlynyk = new Nurse('Olynyk', ['Trauma','Pediatrics']);\nnurseOlynyk.takeVacationDays(5);\nconsole.log(nurseOlynyk.remainingVacationDays);\nnurseOlynyk.addCertification('Genetics');\nconsole.log(nurseOlynyk.certifications);\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"12-review--classes"},"12. Review : Classes"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/classes/exercises/review-classes"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,"Way to go ! Let\u2019s review what you learned. "),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("em",{parentName:"li"},"Classes")," are templates for objects."),Object(r.mdx)("li",{parentName:"ul"},"Javascript calls a ",Object(r.mdx)("em",{parentName:"li"},"constructor")," method when we create a new instance of a class."),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("em",{parentName:"li"},"Inheritance")," is when we create a parent class with properties and methods that we can extend to child classes."),Object(r.mdx)("li",{parentName:"ul"},"We use the ",Object(r.mdx)("inlineCode",{parentName:"li"},"extends")," keyword to create a subclass."),Object(r.mdx)("li",{parentName:"ul"},"The ",Object(r.mdx)("inlineCode",{parentName:"li"},"super")," keyword calls the ",Object(r.mdx)("inlineCode",{parentName:"li"},"constructor()")," of a parent class."),Object(r.mdx)("li",{parentName:"ul"},"Static methods are called on the class, but not on instances of the class.")),Object(r.mdx)("p",null,"In completing this lesson, you\u2019ve taken one step closer to writing efficient, production-level JavaScript. Good luck as you continue to develop your skills and move into intermediate-level concepts."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Instructions")),Object(r.mdx)("p",null,"If you want extra practice with inheritance, take some time to create a ",Object(r.mdx)("inlineCode",{parentName:"p"},"Doctor")," class that inherits from ",Object(r.mdx)("inlineCode",{parentName:"p"},"HospitalEmployee"),". The properties and methods for the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Doctor")," class are listed below :"),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Doctor")),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},"properties: ",Object(r.mdx)("inlineCode",{parentName:"li"},"_name"),", ",Object(r.mdx)("inlineCode",{parentName:"li"},"_remainingVacationDays")," (set to ",Object(r.mdx)("inlineCode",{parentName:"li"},"20")," inside ",Object(r.mdx)("inlineCode",{parentName:"li"},"constructor()"),"), ",Object(r.mdx)("inlineCode",{parentName:"li"},"_insurance")),Object(r.mdx)("li",{parentName:"ul"},"methods: ",Object(r.mdx)("inlineCode",{parentName:"li"},".takeVacationDays()"))),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"class HospitalEmployee {\n  constructor(name) {\n    this._name = name;\n    this._remainingVacationDays = 20;\n  }\n  \n  get name() {\n    return this._name;\n  }\n  \n  get remainingVacationDays() {\n    return this._remainingVacationDays;\n  }\n  \n  takeVacationDays(daysOff) {\n    this._remainingVacationDays -= daysOff;\n  }\n  \n  static generatePassword() {\n    return Math.floor(Math.random() * 10000);\n  }\n}\n\nclass Nurse extends HospitalEmployee {\n  constructor(name, certifications) {\n    super(name);\n    this._certifications = certifications;\n  } \n  \n  get certifications() {\n    return this._certifications;\n  }\n  \n  addCertification(newCertification) {\n    this.certifications.push(newCertification);\n  }\n}\n\nconst nurseOlynyk = new Nurse('Olynyk', ['Trauma','Pediatrics']);\nnurseOlynyk.takeVacationDays(5);\nconsole.log(nurseOlynyk.remainingVacationDays);\nnurseOlynyk.addCertification('Genetics');\nconsole.log(nurseOlynyk.certifications);\n\nclass Doctor extends HospitalEmployee {\n  constructor(name, insurance) {\n    super(name);\n    this._insurance = insurance;\n  }\n  get insurance() {\n    return this._insurance;\n  }\n}\n\nconst doctorLouis = new Doctor('Louis', 'good');\ndoctorLouis.takeVacationDays(12);\nconsole.log(doctorLouis.remainingVacationDays);\nconsole.log(doctorLouis.insurance);\n")))}l.isMDXComponent=!0},214:function(e,n,t){"use strict";t.r(n),t.d(n,"MDXContext",(function(){return l})),t.d(n,"MDXProvider",(function(){return b})),t.d(n,"mdx",(function(){return j})),t.d(n,"useMDXComponents",(function(){return p})),t.d(n,"withMDXComponents",(function(){return d}));var a=t(0),i=t.n(a);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(){return(o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function m(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=i.a.createContext({}),d=function(e){return function(n){var t=p(n.components);return i.a.createElement(e,o({},n,{components:t}))}},p=function(e){var n=i.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},b=function(e){var n=p(e.components);return i.a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},h=i.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,c=m(e,["components","mdxType","originalType","parentName"]),l=p(t),d=a,b=l["".concat(o,".").concat(d)]||l[d]||u[d]||r;return t?i.a.createElement(b,s(s({ref:n},c),{},{components:t})):i.a.createElement(b,s({ref:n},c))}));function j(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=h;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var m=2;m<r;m++)o[m]=t[m];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},450:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/inheritance_diagram-1b1c5beed0b39ef7397992585e944c18.svg"}}]);
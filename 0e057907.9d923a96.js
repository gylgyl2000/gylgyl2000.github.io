(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{212:function(e,n,t){"use strict";t.r(n),t.d(n,"MDXContext",(function(){return u})),t.d(n,"MDXProvider",(function(){return p})),t.d(n,"mdx",(function(){return O})),t.d(n,"useMDXComponents",(function(){return m})),t.d(n,"withMDXComponents",(function(){return d}));var o=t(0),r=t.n(o);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(){return(c=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=r.a.createContext({}),d=function(e){return function(n){var t=m(n.components);return r.a.createElement(e,c({},n,{components:t}))}},m=function(e){var n=r.a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=m(e.components);return r.a.createElement(u.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},b=r.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=m(t),d=o,p=u["".concat(c,".").concat(d)]||u[d]||f[d]||a;return t?r.a.createElement(p,i(i({ref:n},s),{},{components:t})):r.a.createElement(p,i({ref:n},s))}));function O(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,c=new Array(a);c[0]=b;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"==typeof e?e:o,c[1]=s;for(var l=2;l<a;l++)c[l]=t[l];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},75:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"metadata",(function(){return s})),t.d(n,"rightToc",(function(){return i})),t.d(n,"default",(function(){return u}));var o=t(3),r=t(7),a=(t(0),t(212)),c={id:"Codecademy-Cheatsheets-Learn_JavaScript-03-Functions-fr",title:"Fonctions"},s={unversionedId:"Codecademy/Codecademy-Cheatsheets-Learn_JavaScript-03-Functions-fr",id:"Codecademy/Codecademy-Cheatsheets-Learn_JavaScript-03-Functions-fr",isDocsHomePage:!1,title:"Fonctions",description:"Learn JavaScript: Functions Cheatsheet | Codecademy",source:"@site/docs/Codecademy/Codecademy-Cheatsheets-Learn_JavaScript-03-Functions-fr.md",slug:"/Codecademy/Codecademy-Cheatsheets-Learn_JavaScript-03-Functions-fr",permalink:"/docs/Codecademy/Codecademy-Cheatsheets-Learn_JavaScript-03-Functions-fr",editUrl:"https://github.com/gylgyl2000/laloutre.github.io/edit/main/docs/Codecademy/Codecademy-Cheatsheets-Learn_JavaScript-03-Functions-fr.md",version:"current",sidebar:"docs",previous:{title:"Conditionnelles",permalink:"/docs/Codecademy/Codecademy-Cheatsheets-Learn_JavaScript-02-Conditionals-fr"},next:{title:"Port\xe9e",permalink:"/docs/Codecademy/Codecademy-Cheatsheets-Learn_JavaScript-04-Scope-fr"}},i=[{value:"Fonctions fl\xe9ch\xe9es (ES6)",id:"fonctions-fl\xe9ch\xe9es-es6",children:[]},{value:"Les fonctions",id:"les-fonctions",children:[]},{value:"Fonctions anonymes",id:"fonctions-anonymes",children:[]},{value:"Expressions de fonction",id:"expressions-de-fonction",children:[]},{value:"Param\xe8tres de fonction",id:"param\xe8tres-de-fonction",children:[]},{value:"Mot-cl\xe9 <code>return</code>",id:"mot-cl\xe9-return",children:[]},{value:"D\xe9claration de fonction",id:"d\xe9claration-de-fonction",children:[]},{value:"Appel de fonctions",id:"appel-de-fonctions",children:[]}],l={rightToc:i};function u(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(a.mdx)("wrapper",Object(o.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(a.mdx)("p",null,Object(a.mdx)("a",Object(o.a)({parentName:"p"},{href:"https://www.codecademy.com/learn/introduction-to-javascript/modules/learn-javascript-functions/cheatsheet"}),"Learn JavaScript: Functions Cheatsheet | Codecademy")),Object(a.mdx)("h3",{id:"fonctions-fl\xe9ch\xe9es-es6"},"Fonctions fl\xe9ch\xe9es (ES6)"),Object(a.mdx)("p",null,"Les expressions de fonction fl\xe9ch\xe9e  ont \xe9t\xe9 introduites dans ES6. Ces expressions sont claires et concises.  La syntaxe d'une expression de fonction fl\xe9ch\xe9e ne n\xe9cessite pas le mot-cl\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"function")," et utilise une grosse fl\xe8che ",Object(a.mdx)("inlineCode",{parentName:"p"},"=>")," pour s\xe9parer le ou  les param\xe8tres du corps.\nIl existe plusieurs variantes de fonctions fl\xe9ch\xe9es :"),Object(a.mdx)("ul",null,Object(a.mdx)("li",{parentName:"ul"},"Les fonctions fl\xe9ch\xe9es avec un seul param\xe8tre ne n\xe9cessitent pas ",Object(a.mdx)("inlineCode",{parentName:"li"},"()")," autour de la liste de param\xe8tres."),Object(a.mdx)("li",{parentName:"ul"},"Les fonctions fl\xe9ch\xe9es avec une seule expression peuvent utiliser le corps de fonction concis qui renvoie le r\xe9sultat de l'expression sans  le mot-cl\xe9 ",Object(a.mdx)("inlineCode",{parentName:"li"},"return"),".")),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"// Fonction fl\xe9ch\xe9e avec deux arguments\nconst sum = (firstParam, secondParam) => {\n  return firstParam + secondParam;\n};\nconsole.log(sum(2,5)); // Imprime : 7\n\n// Fonction fl\xe9ch\xe9e sans arguments\nconst printHello = () => {\n  console.log('bonjour');\n};\nprintHello(); // Imprime : bonjour\n\n// Fonction fl\xe9ch\xe9e avec un seul argument\nconst checkWeight = poids => {\n  console.log(`Poids des bagages : ${poids} kilogrammes.`);\n};\ncheckWeight(25); // Imprime : Poids des bagages : 25 kilogrammes.\n\n// Fonctions fl\xe9ch\xe9es concises\nconst multiplier = (a, b) => a * b;\nconsole.log(multiplier (2, 30)); // Imprime : 60\n")),Object(a.mdx)("h3",{id:"les-fonctions"},"Les fonctions"),Object(a.mdx)("p",null,"Les fonctions sont l'un des \xe9l\xe9ments fondamentaux de JavaScript. Une  ",Object(a.mdx)("em",{parentName:"p"},"fonction")," est un ensemble d'instructions r\xe9utilisables pour effectuer une t\xe2che ou calculer une valeur. Les fonctions peuvent recevoir une ou  plusieurs valeurs et peuvent renvoyer une valeur \xe0 la fin de leur  ex\xe9cution. Pour utiliser une fonction, vous devez la d\xe9finir quelque  part dans la port\xe9e o\xf9 vous souhaitez l'appeler.\nL'exemple de code fourni contient une fonction qui prend 2 valeurs et renvoie la somme de ces nombres."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"// D\xe9finition de la fonction :\nfunction sum(num1, num2) {\n  return num1 + num2;\n}\n\n// Appel de la fonction :\nsum(3, 6); // 9\n")),Object(a.mdx)("h3",{id:"fonctions-anonymes"},"Fonctions anonymes"),Object(a.mdx)("p",null,Object(a.mdx)("em",{parentName:"p"},"Les fonctions anonymes")," en JavaScript n'ont pas de propri\xe9t\xe9 de nom. Elles peuvent \xeatre d\xe9finies \xe0 l'aide du mot-cl\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"function")," ou sous forme de  fonction fl\xe9ch\xe9e. Consultez l'exemple de code pour la diff\xe9rence entre  une fonction nomm\xe9e et une fonction anonyme."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"// Fonction nomm\xe9e\nfunction rocketToMars() {\n  return 'BOOM!';\n}\n\n// Fonction anonyme\nconst rocketToMars = function() {\n  return 'BOOM!';\n}\n")),Object(a.mdx)("h3",{id:"expressions-de-fonction"},"Expressions de fonction"),Object(a.mdx)("p",null,"Les ",Object(a.mdx)("em",{parentName:"p"},"expressions")," de fonction cr\xe9ent des fonctions \xe0 l'int\xe9rieur d'une  expression plut\xf4t qu'en tant que d\xe9claration de fonction. Ils peuvent  \xeatre anonymes et / ou affect\xe9s \xe0 une variable."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"const dog = function() {\n  return 'Woof!';\n}\n")),Object(a.mdx)("h3",{id:"param\xe8tres-de-fonction"},"Param\xe8tres de fonction"),Object(a.mdx)("p",null,"Les entr\xe9es des fonctions sont appel\xe9es ",Object(a.mdx)("em",{parentName:"p"},"param\xe8tres")," lorsqu'une fonction est  d\xe9clar\xe9e ou d\xe9finie. Les param\xe8tres sont utilis\xe9s comme variables dans  le corps de la fonction. Lorsque la fonction est appel\xe9e, ces param\xe8tres auront la valeur de tout ce qui est pass\xe9 en arguments. Il est possible de d\xe9finir une fonction sans param\xe8tres."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"// Le param\xe8tre est nom\nfunction sayHello(nom) {\n  return `Bonjour, ${nom} !`;\n}\n")),Object(a.mdx)("h3",{id:"mot-cl\xe9-return"},"Mot-cl\xe9 ",Object(a.mdx)("inlineCode",{parentName:"h3"},"return")),Object(a.mdx)("p",null,"Les fonctions renvoient (retransmettent) des valeurs \xe0 l'aide du mot-cl\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"return"),". ",Object(a.mdx)("inlineCode",{parentName:"p"},"return")," termine l'ex\xe9cution de la fonction et renvoie la valeur  sp\xe9cifi\xe9e \xe0 l'emplacement o\xf9 elle a \xe9t\xe9 appel\xe9e. Une erreur courante est d'oublier le mot-cl\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"return"),", auquel cas la fonction retournera ",Object(a.mdx)("inlineCode",{parentName:"p"},"undefined")," par d\xe9faut."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"// Avec return\nfunction somme(num1, num2) {\n  returne num1 + num2;\n}\n\n// Sans return, donc la fonction ne produit pas la somme\nfunction somme(num1, num2) {\n  num1 + num2;\n}\n")),Object(a.mdx)("h3",{id:"d\xe9claration-de-fonction"},"D\xe9claration de fonction"),Object(a.mdx)("p",null,"Les ",Object(a.mdx)("em",{parentName:"p"},"d\xe9clarations")," de fonction sont utilis\xe9es pour cr\xe9er des fonctions  nomm\xe9es. Ces fonctions peuvent \xeatre appel\xe9es en utilisant leur nom  d\xe9clar\xe9. Les d\xe9clarations de fonction sont construites \xe0 partir de :"),Object(a.mdx)("ul",null,Object(a.mdx)("li",{parentName:"ul"},"Le mot-cl\xe9 ",Object(a.mdx)("inlineCode",{parentName:"li"},"function"),"."),Object(a.mdx)("li",{parentName:"ul"},"Le nom de la fonction."),Object(a.mdx)("li",{parentName:"ul"},"Une liste facultative de param\xe8tres s\xe9par\xe9s par des virgules entour\xe9s d'un jeu de parenth\xe8ses ",Object(a.mdx)("inlineCode",{parentName:"li"},"()"),"."),Object(a.mdx)("li",{parentName:"ul"},"Un corps de fonction entour\xe9 d'un ensemble d'accolades ",Object(a.mdx)("inlineCode",{parentName:"li"},"{}"),".")),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"function add(num1, num2) {\n  return num1 + num2;\n}\n")),Object(a.mdx)("h3",{id:"appel-de-fonctions"},"Appel de fonctions"),Object(a.mdx)("p",null,"Les fonctions peuvent \xeatre ",Object(a.mdx)("em",{parentName:"p"},"appel\xe9es"),", ou ex\xe9cut\xe9es, ailleurs dans le code en utilisant des parenth\xe8ses apr\xe8s le nom de la fonction. Lorsqu'une  fonction est appel\xe9e, le code \xe0 l'int\xe9rieur de son corps de fonction  s'ex\xe9cute. Les ",Object(a.mdx)("em",{parentName:"p"},"arguments")," sont des valeurs transmises \xe0 une fonction  lorsqu'elle est appel\xe9e."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"// D\xe9finition de la fonction\nfunction somme(num1, num2) {\n  return num1 + num2;\n}\n\n// Appel de la fonction\nsomme(2, 4); // 6\n")))}u.isMDXComponent=!0}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{212:function(e,t,n){"use strict";n.r(t),n.d(t,"MDXContext",(function(){return p})),n.d(t,"MDXProvider",(function(){return u})),n.d(t,"mdx",(function(){return j})),n.d(t,"useMDXComponents",(function(){return m})),n.d(t,"withMDXComponents",(function(){return s}));var o=n(0),a=n.n(o);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e}).apply(this,arguments)}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),s=function(e){return function(t){var n=m(t.components);return a.a.createElement(e,i({},t,{components:n}))}},m=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=m(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},h=a.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,l=d(e,["components","mdxType","originalType","parentName"]),p=m(n),s=o,u=p["".concat(i,".").concat(s)]||p[s]||b[s]||r;return n?a.a.createElement(u,c(c({ref:t},l),{},{components:n})):a.a.createElement(u,c({ref:t},l))}));function j(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=h;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var d=2;d<r;d++)i[d]=n[d];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},324:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/loops_abatraction_v5-a1b4fe5b791b530199385f49ce238655.svg"},67:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var o=n(3),a=n(7),r=(n(0),n(212)),i={id:"Codecademy-Learn_JavaScript-06",title:"Loops"},l={unversionedId:"Codecademy/Codecademy-Learn_JavaScript-06",id:"Codecademy/Codecademy-Learn_JavaScript-06",isDocsHomePage:!1,title:"Loops",description:"Learn how to write automated loops in JavaScript.",source:"@site/docs/Codecademy/Codecademy-Learn_JavaScript-06.md",slug:"/Codecademy/Codecademy-Learn_JavaScript-06",permalink:"/docs/Codecademy/Codecademy-Learn_JavaScript-06",editUrl:"https://github.com/gylgyl2000/laloutre.github.io/edit/main/docs/Codecademy/Codecademy-Learn_JavaScript-06.md",version:"current"},c=[{value:"01. Loops",id:"01-loops",children:[]},{value:"02. Repeating Tasks Manually",id:"02-repeating-tasks-manually",children:[]},{value:"03. The For Loop",id:"03-the-for-loop",children:[]},{value:"04. Looping in Reverse",id:"04-looping-in-reverse",children:[]},{value:"05. Looping through Arrays",id:"05-looping-through-arrays",children:[]},{value:"06. Nested Loops",id:"06-nested-loops",children:[]},{value:"07. The While Loop",id:"07-the-while-loop",children:[]},{value:"08. Do...While Statements",id:"08-dowhile-statements",children:[]},{value:"09. The break Keyword",id:"09-the-break-keyword",children:[]},{value:"10. Review",id:"10-review",children:[]}],d={rightToc:c};function p(e){var t=e.components,i=Object(a.a)(e,["components"]);return Object(r.mdx)("wrapper",Object(o.a)({},d,i,{components:t,mdxType:"MDXLayout"}),Object(r.mdx)("p",null,"Learn how to write automated loops in JavaScript."),Object(r.mdx)("h2",{id:"01-loops"},"01. Loops"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(o.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/loops/exercises/loops"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,"A ",Object(r.mdx)("em",{parentName:"p"},"loop")," is a programming tool that repeats a set of instructions until a specified condition, called a ",Object(r.mdx)("em",{parentName:"p"},"stopping condition")," is reached. As a programmer, you\u2019ll find that you rely on loops all the time! You\u2019ll hear the generic term ",Object(r.mdx)("em",{parentName:"p"},"iterate")," when referring to loops; iterate simply means \u201cto repeat\u201d. "),Object(r.mdx)("p",null,"When we need to reuse a task in our code, we often bundle that action in a function. Similarly, when we see that a process has to repeat multiple times in a row, we write a loop. Loops allow us to create efficient code that automates processes to make scalable, manageable programs. "),Object(r.mdx)("p",null,"As illustrated in the diagram, loops iterate or repeat an action until a specific condition is met. When the condition is met, the loop stops and the computer moves on to the next part of the program. "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Instructions")),Object(r.mdx)("p",null,"Check out the diagram to see how loops work in programming."),Object(r.mdx)("p",null,Object(r.mdx)("img",{alt:"loops_abatraction_v5",src:n(324).default})),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"02-repeating-tasks-manually"},"02. Repeating Tasks Manually"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(o.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/loops/exercises/manual-loop"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,"Before we write our own loops let\u2019s take a moment to develop an appreciation for loops. The best way to do that is by showing you how cumbersome it would be if a repeated task required you to type out the same code every single time."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Instructions")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"1.")," Create the variable ",Object(r.mdx)("inlineCode",{parentName:"p"},"vacationSpots"),", and assign its value to an array of three strings naming places you\u2019d like to visit."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"2.")," Next, ",Object(r.mdx)("inlineCode",{parentName:"p"},"console.log()")," each item in ",Object(r.mdx)("inlineCode",{parentName:"p"},"vacationSpots"),". Since we don\u2019t know loops yet, we have to ",Object(r.mdx)("inlineCode",{parentName:"p"},"console.log()")," each element in the array separately."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"3.")," Nice work ! Now imagine that the vacation list had 100 places on it\u2014 logging each array element to the console by hand would be a tedious task! In the next exercise, we will learn how to make things more efficient with ",Object(r.mdx)("inlineCode",{parentName:"p"},"for")," loops."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"const vacationSpots = ['Biarritz', 'Anglet', 'Bayonne'];\nconsole.log(vacationSpots[0]); // Biarritz\nconsole.log(vacationSpots[1]); // Anglet\nconsole.log(vacationSpots[2]); // Bayonne\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"03-the-for-loop"},"03. The For Loop"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(o.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/loops/exercises/for-loop"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,"Instead of writing out the same code over and over, loops allow us to tell computers to repeat a given block of code on its own. One way to give computers these instructions is with a ",Object(r.mdx)("inlineCode",{parentName:"p"},"for")," loop. "),Object(r.mdx)("p",null,"The typical ",Object(r.mdx)("inlineCode",{parentName:"p"},"for")," loop includes an ",Object(r.mdx)("em",{parentName:"p"},"iterator variable")," that usually appears in all three expressions. The iterator variable is initialized, checked against the stopping condition, and assigned a new value on each loop iteration. Iterator variables can have any name, but it\u2019s best practice to use a descriptive variable name."),Object(r.mdx)("p",null,"A ",Object(r.mdx)("inlineCode",{parentName:"p"},"for")," loop contains three expressions separated by ",Object(r.mdx)("inlineCode",{parentName:"p"},";")," inside the parentheses : "),Object(r.mdx)("ol",null,Object(r.mdx)("li",{parentName:"ol"},"an ",Object(r.mdx)("em",{parentName:"li"},"initialization")," starts the loop and can also be used to declare the iterator variable."),Object(r.mdx)("li",{parentName:"ol"},"a ",Object(r.mdx)("em",{parentName:"li"},"stopping condition")," is the condition that the iterator variable is evaluated against\u2014 if the condition evaluates to ",Object(r.mdx)("inlineCode",{parentName:"li"},"true")," the code block will run, and if it evaluates to ",Object(r.mdx)("inlineCode",{parentName:"li"},"false")," the code will stop."),Object(r.mdx)("li",{parentName:"ol"},"an ",Object(r.mdx)("em",{parentName:"li"},"iteration statement")," is used to update the iterator variable on each loop.")),Object(r.mdx)("p",null,"The ",Object(r.mdx)("inlineCode",{parentName:"p"},"for")," loop syntax looks like this :"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"for (let counter = 0; counter < 4; counter++) {\n  console.log(counter);\n}\n")),Object(r.mdx)("p",null,"In this example, the output would be the following :"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(o.a)({parentName:"pre"},{}),"0\n1\n2\n3\n")),Object(r.mdx)("p",null,"Let\u2019s break down the example :"),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},"The initialization is ",Object(r.mdx)("inlineCode",{parentName:"li"},"let counter = 0"),", so the loop will start counting at ",Object(r.mdx)("inlineCode",{parentName:"li"},"0"),"."),Object(r.mdx)("li",{parentName:"ul"},"The stopping condition is ",Object(r.mdx)("inlineCode",{parentName:"li"},"counter < 4"),", meaning the loop will run as long as the iterator variable, ",Object(r.mdx)("inlineCode",{parentName:"li"},"counter"),", is less than 4."),Object(r.mdx)("li",{parentName:"ul"},"The iteration statement is ",Object(r.mdx)("inlineCode",{parentName:"li"},"counter++"),". This means after each loop, the value of ",Object(r.mdx)("inlineCode",{parentName:"li"},"counter")," will increase by 1. For the first iteration ",Object(r.mdx)("inlineCode",{parentName:"li"},"counter")," will equal ",Object(r.mdx)("inlineCode",{parentName:"li"},"0"),", for the second iteration ",Object(r.mdx)("inlineCode",{parentName:"li"},"counter")," will equal 1, and so on."),Object(r.mdx)("li",{parentName:"ul"},"The code block is inside of the curly braces, ",Object(r.mdx)("inlineCode",{parentName:"li"},"console.log(counter)"),", will execute until the condition evaluates to ",Object(r.mdx)("inlineCode",{parentName:"li"},"false"),". The condition will be false when ",Object(r.mdx)("inlineCode",{parentName:"li"},"counter")," is greater than or equal to 4 \u2014 the point that the condition becomes false is sometimes called the ",Object(r.mdx)("em",{parentName:"li"},"stop condition"),".")),Object(r.mdx)("p",null,"This ",Object(r.mdx)("inlineCode",{parentName:"p"},"for")," loop makes it possible to write ",Object(r.mdx)("inlineCode",{parentName:"p"},"0"),", ",Object(r.mdx)("inlineCode",{parentName:"p"},"1"),", ",Object(r.mdx)("inlineCode",{parentName:"p"},"2"),", and ",Object(r.mdx)("inlineCode",{parentName:"p"},"3")," programmatically."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Instructions")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"1.")," Now, make your own! Create a program that loops from 5 to 10 and logs each number to the console."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"for (let counter = 5; counter < 11; counter++) {\n  console.log(counter);\n}\n")),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"5\n6\n7\n8\n9\n10\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"04-looping-in-reverse"},"04. Looping in Reverse"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(o.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/loops/exercises/for-loop-ii"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,"What if we want the ",Object(r.mdx)("inlineCode",{parentName:"p"},"for")," loop to log ",Object(r.mdx)("inlineCode",{parentName:"p"},"3"),", ",Object(r.mdx)("inlineCode",{parentName:"p"},"2"),", ",Object(r.mdx)("inlineCode",{parentName:"p"},"1"),", and then ",Object(r.mdx)("inlineCode",{parentName:"p"},"0"),"? With simple modifications to the expressions, we can make our loop run backward !\nTo run a backward ",Object(r.mdx)("inlineCode",{parentName:"p"},"for")," loop, we must :"),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},"Set the iterator variable to the highest desired value in the initialization expression."),Object(r.mdx)("li",{parentName:"ul"},"Set the stopping condition for when the iterator variable is less than the desired amount."),Object(r.mdx)("li",{parentName:"ul"},"The iterator should decrease in intervals after each iteration.")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Instructions")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"1.")," Make a ",Object(r.mdx)("inlineCode",{parentName:"p"},"for")," loop that loops backwards printing ",Object(r.mdx)("inlineCode",{parentName:"p"},"3")," to ",Object(r.mdx)("inlineCode",{parentName:"p"},"0")," to the console. Use the ",Object(r.mdx)("inlineCode",{parentName:"p"},">=")," comparison operator in your stopping condition and the ",Object(r.mdx)("inlineCode",{parentName:"p"},"--")," operator in your iteration statement. "),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"// The loop below loops from 0 to 3. Edit it to loop backwards from 3 to 0\nfor (let counter = 3; counter >= 0; counter--){\n  console.log(counter);\n}\n")),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"3\n2\n1\n0\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"05-looping-through-arrays"},"05. Looping through Arrays"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(o.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/loops/exercises/for-loops-with-arrays"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,Object(r.mdx)("inlineCode",{parentName:"p"},"for")," loops are very handy for iterating over data structures. For example, we can use a ",Object(r.mdx)("inlineCode",{parentName:"p"},"for")," loop to perform the same operation on each element on an array. Arrays hold lists of data, like customer names or product information. Imagine we owned a store and wanted to increase the price of every product in our catalog. That could be a lot of repeating code, but by using a ",Object(r.mdx)("inlineCode",{parentName:"p"},"for")," loop to iterate through the array we could accomplish this task easily.\nTo loop through each element in an array, a ",Object(r.mdx)("inlineCode",{parentName:"p"},"for")," loop should use the array\u2019s ",Object(r.mdx)("inlineCode",{parentName:"p"},".length")," property in its condition.\nCheck out the example below to see how ",Object(r.mdx)("inlineCode",{parentName:"p"},"for")," loops iterate on arrays :"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"const animals = ['Grizzly Bear', 'Sloth', 'Sea Lion'];\nfor (let i = 0; i < animals.length; i++){\n  console.log(animals[i]);\n}\n")),Object(r.mdx)("p",null,"This example would give you the following output :"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"Grizzly Bear\nSloth\nSea Lion\n")),Object(r.mdx)("p",null,"In the loop above, we\u2019ve named our iterator variable ",Object(r.mdx)("inlineCode",{parentName:"p"},"i"),". This is a variable naming convention you\u2019ll see in a lot of loops. When we use ",Object(r.mdx)("inlineCode",{parentName:"p"},"i")," to iterate through arrays we can think of it as being short-hand for the word ",Object(r.mdx)("strong",{parentName:"p"},"i"),"ndex. Notice how our stopping condition checks that ",Object(r.mdx)("inlineCode",{parentName:"p"},"i")," is less than ",Object(r.mdx)("inlineCode",{parentName:"p"},"animals.length"),". Remember that arrays are zero-indexed, the index of the last element of an array is equivalent to the length of that array minus 1. If we tried to access an element at the index of ",Object(r.mdx)("inlineCode",{parentName:"p"},"animals.length")," we will have gone too far !\nWith ",Object(r.mdx)("inlineCode",{parentName:"p"},"for")," loops, it\u2019s easier for us to work with elements in arrays."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Instructions")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"1.")," Write a ",Object(r.mdx)("inlineCode",{parentName:"p"},"for")," loop that iterates through our ",Object(r.mdx)("inlineCode",{parentName:"p"},"vacationSpots")," array using ",Object(r.mdx)("inlineCode",{parentName:"p"},"i")," as the iterator variable.\nInside the block of the ",Object(r.mdx)("inlineCode",{parentName:"p"},"for")," loop, use ",Object(r.mdx)("inlineCode",{parentName:"p"},"console.log()")," to log each element in the ",Object(r.mdx)("inlineCode",{parentName:"p"},"vacationSpots")," array after the string ",Object(r.mdx)("inlineCode",{parentName:"p"},"'I would love to visit '"),". For example, the first round of the loop should print ",Object(r.mdx)("inlineCode",{parentName:"p"},"'I would love to visit Bali'")," to the console. "),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"const vacationSpots = ['Bali', 'Paris', 'Tulum'];\nfor (let i = 0; i < vacationSpots.length; i++){\n  console.log('I would love to visit ' + vacationSpots[i]);\n  }\n")),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"I would love to visit Bali\nI would love to visit Paris\nI would love to visit Tulum\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"06-nested-loops"},"06. Nested Loops"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(o.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/loops/exercises/for-loops-iii"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,"When we have a loop running inside another loop, we call that a ",Object(r.mdx)("em",{parentName:"p"},"nested loop"),". One use for a nested ",Object(r.mdx)("inlineCode",{parentName:"p"},"for")," loop is to compare the elements in two arrays. For each round of the outer ",Object(r.mdx)("inlineCode",{parentName:"p"},"for")," loop, the inner ",Object(r.mdx)("inlineCode",{parentName:"p"},"for")," loop will run completely.\nLet\u2019s look at an example of a nested ",Object(r.mdx)("inlineCode",{parentName:"p"},"for")," loop :"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"const myArray = [6, 19, 20];\nconst yourArray = [19, 81, 2];\nfor (let i = 0; i < myArray.length; i++) {\n  for (let j = 0; j < yourArray.length; j++) {\n    if (myArray[i] === yourArray[j]) {\n      console.log('Both loops have the number: ' + yourArray[j])\n    }\n  }\n};\n")),Object(r.mdx)("p",null,"Let\u2019s think about what\u2019s happening in the nested loop in our example. For each element in the outer loop array, ",Object(r.mdx)("inlineCode",{parentName:"p"},"myArray"),", the inner loop will run in its entirety comparing the current element from the outer array, ",Object(r.mdx)("inlineCode",{parentName:"p"},"myArray[i]"),", to each element in the inner array, ",Object(r.mdx)("inlineCode",{parentName:"p"},"yourArray[j]"),". When it finds a match, it prints a string to the console.\nNow it\u2019s your turn to write a nested loop !"),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Instructions")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"1.")," Imagine you\u2019re a big-wig programmer for a social media platform! You have been tasked with building a prototype for a mutual followers program. You\u2019ll need two arrays of \u201cfriends\u201d from two mock users so that you can extract the names of the followers who exist in both lists. Make a variable called ",Object(r.mdx)("inlineCode",{parentName:"p"},"bobsFollowers")," and set it equal to an array with four strings representing the names of Bob\u2019s friends."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"2.")," Make a variable called ",Object(r.mdx)("inlineCode",{parentName:"p"},"tinasFollowers")," and set it equal to an array with three strings representing the names of Tina\u2019s friends. Make exactly two of these the same as two of the friends in the ",Object(r.mdx)("inlineCode",{parentName:"p"},"bobsFollowers")," array."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"3.")," Create a third variable named ",Object(r.mdx)("inlineCode",{parentName:"p"},"mutualFollowers")," and set it to an empty array. "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"4.")," Create a nested loop that iterates through ",Object(r.mdx)("inlineCode",{parentName:"p"},"bobsFollowers")," as the array for the outer loop and ",Object(r.mdx)("inlineCode",{parentName:"p"},"tinasFollowers")," as the array for the inner loop. If the current element from the outer loop is the same as the current element from the inner loop, push that element into the ",Object(r.mdx)("inlineCode",{parentName:"p"},"mutualFollowers")," array. "),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"const bobsFollowers = ['Eric', 'Franck', 'Sylvie', 'Francine'];\nconst tinasFollowers = ['Maurice', 'Sylvie', 'Eric'];\nconst mutualFollowers = [];\nfor (let i = 0; i < bobsFollowers.length; i++) {\n  for (let j = 0; j < tinasFollowers.length;j++) {\n    if (bobsFollowers[i] === tinasFollowers[j]) {\n      mutualFollowers.push(tinasFollowers[j]);\n    }\n  }\n};\nconsole.log(mutualFollowers); // [ 'Eric', 'Sylvie' ]\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"07-the-while-loop"},"07. The While Loop"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(o.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/loops/exercises/while"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,"You\u2019re doing great ! We\u2019re going to teach you about a different type of loop: the ",Object(r.mdx)("inlineCode",{parentName:"p"},"while")," loop. To start, let\u2019s convert a ",Object(r.mdx)("inlineCode",{parentName:"p"},"for")," loop into a ",Object(r.mdx)("inlineCode",{parentName:"p"},"while")," loop :"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"// A for loop that prints 1, 2, and 3\nfor (let counterOne = 1; counterOne < 4; counterOne++){\n  console.log(counterOne);\n}\n\n// A while loop that prints 1, 2, and 3\nlet counterTwo = 1;\nwhile (counterTwo < 4) {\n  console.log(counterTwo);\n  counterTwo++;\n}\n")),Object(r.mdx)("p",null,"Let\u2019s break down what\u2019s happening with our ",Object(r.mdx)("inlineCode",{parentName:"p"},"while")," loop syntax : "),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},"The ",Object(r.mdx)("inlineCode",{parentName:"li"},"counterTwo")," variable is declared before the loop. We can access it inside our ",Object(r.mdx)("inlineCode",{parentName:"li"},"while")," loop since it\u2019s in the global scope. "),Object(r.mdx)("li",{parentName:"ul"},"We start our loop with the keyword ",Object(r.mdx)("inlineCode",{parentName:"li"},"while")," followed by our stopping condition, or ",Object(r.mdx)("em",{parentName:"li"},"test condition"),". This will be evaluated before each round of the loop. While the condition evaluates to ",Object(r.mdx)("inlineCode",{parentName:"li"},"true"),", the block will continue to run. Once it evaluates to ",Object(r.mdx)("inlineCode",{parentName:"li"},"false")," the loop will stop. "),Object(r.mdx)("li",{parentName:"ul"},"Next, we have our loop\u2019s code block which prints ",Object(r.mdx)("inlineCode",{parentName:"li"},"counterTwo")," to the console and increments ",Object(r.mdx)("inlineCode",{parentName:"li"},"counterTwo"),". ")),Object(r.mdx)("p",null,"What would happen if we didn\u2019t increment ",Object(r.mdx)("inlineCode",{parentName:"p"},"counterTwo")," inside our block? If we didn\u2019t include this, ",Object(r.mdx)("inlineCode",{parentName:"p"},"counterTwo")," would always have its initial value, ",Object(r.mdx)("inlineCode",{parentName:"p"},"1"),". That would mean the testing condition ",Object(r.mdx)("inlineCode",{parentName:"p"},"counterTwo < 4")," would always evaluate to ",Object(r.mdx)("inlineCode",{parentName:"p"},"true")," and our loop would never stop running! This is called an ",Object(r.mdx)("em",{parentName:"p"},"infinite loop")," and it\u2019s something we always want to ",Object(r.mdx)("strong",{parentName:"p"},"avoid"),". Infinite loops can take up all of your computer\u2019s processing power potentially freezing your computer. "),Object(r.mdx)("p",null,"So you may be wondering when to use a ",Object(r.mdx)("inlineCode",{parentName:"p"},"while")," loop ! The syntax of a ",Object(r.mdx)("inlineCode",{parentName:"p"},"for")," loop is ideal when we know how many times the loop should run, but we don\u2019t always know this in advance. Think of eating like a ",Object(r.mdx)("inlineCode",{parentName:"p"},"while")," loop: when you start taking bites, you don\u2019t know the exact number you\u2019ll need to become full. Rather you\u2019ll eat ",Object(r.mdx)("inlineCode",{parentName:"p"},"while")," you\u2019re hungry. In situations when we want a loop to execute an undetermined number of times, ",Object(r.mdx)("inlineCode",{parentName:"p"},"while")," loops are the best choice."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Instructions")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"1.")," Below the ",Object(r.mdx)("inlineCode",{parentName:"p"},"cards")," array, declare a variable, ",Object(r.mdx)("inlineCode",{parentName:"p"},"currentCard"),", with the ",Object(r.mdx)("inlineCode",{parentName:"p"},"let")," keyword but don\u2019t assign it a value."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"2.")," Create a ",Object(r.mdx)("inlineCode",{parentName:"p"},"while")," loop with a condition that checks if the ",Object(r.mdx)("inlineCode",{parentName:"p"},"currentCard")," does not have that value ",Object(r.mdx)("inlineCode",{parentName:"p"},"'spade'"),".\nInside the block of your ",Object(r.mdx)("inlineCode",{parentName:"p"},"while")," loop, add the following line of code :"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"currentCard = cards[Math.floor(Math.random() * 4)];\n")),Object(r.mdx)("p",null,Object(r.mdx)("inlineCode",{parentName:"p"},"Math.floor(Math.random() * 4)")," will give us a random number from ",Object(r.mdx)("inlineCode",{parentName:"p"},"0")," to ",Object(r.mdx)("inlineCode",{parentName:"p"},"3"),". We\u2019ll use this number to index the ",Object(r.mdx)("inlineCode",{parentName:"p"},"cards")," array, and assign the value of ",Object(r.mdx)("inlineCode",{parentName:"p"},"currentCard")," to a random element from that array. "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"3.")," Awesome ! Your loop is running, but you can\u2019t tell because it doesn\u2019t output anything. Let\u2019s add a ",Object(r.mdx)("inlineCode",{parentName:"p"},"console.log()")," statement to our ",Object(r.mdx)("inlineCode",{parentName:"p"},"while")," block. Inside the block, after you assign ",Object(r.mdx)("inlineCode",{parentName:"p"},"currentCard")," a new value, log ",Object(r.mdx)("inlineCode",{parentName:"p"},"currentCard")," to the console.\nFor fun you can run your code a few times and see how the output changes !"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"const cards = ['diamond', 'spade', 'heart', 'club'];\nlet currentCard;\nwhile (currentCard != 'spade') {\n  currentCard = cards[Math.floor(Math.random() * 4)];\n  console.log(currentCard)\n}\n")),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"diamond\nheart\nclub\ndiamond\nheart\nheart\nspade\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"08-dowhile-statements"},"08. Do...While Statements"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(o.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/loops/exercises/do-while-statement"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,"In some cases, you want a piece of code to run at least once and then loop based on a specific condition after its initial run. This is where the ",Object(r.mdx)("inlineCode",{parentName:"p"},"do...while")," statement comes in.\nA ",Object(r.mdx)("inlineCode",{parentName:"p"},"do...while")," statement says to do a task once and then keep doing it until a specified condition is no longer met. The syntax for a ",Object(r.mdx)("inlineCode",{parentName:"p"},"do...while")," statement looks like this :"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"let countString = '';\nlet i = 0;\n\ndo {\n  countString = countString + i;\n  i++;\n} while (i < 5);\n\nconsole.log(countString);\n")),Object(r.mdx)("p",null,"In this example, the code block makes changes to the ",Object(r.mdx)("inlineCode",{parentName:"p"},"countString")," variable by appending the string form of the ",Object(r.mdx)("inlineCode",{parentName:"p"},"i")," variable to it. First, the code block after the ",Object(r.mdx)("inlineCode",{parentName:"p"},"do")," keyword is executed once. Then the condition is evaluated. If the condition evaluates to ",Object(r.mdx)("inlineCode",{parentName:"p"},"true"),", the block will execute again. The looping stops when the condition evaluates to ",Object(r.mdx)("inlineCode",{parentName:"p"},"false"),".\nNote that the ",Object(r.mdx)("inlineCode",{parentName:"p"},"while")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"do...while")," loop are different! Unlike the ",Object(r.mdx)("inlineCode",{parentName:"p"},"while")," loop, ",Object(r.mdx)("inlineCode",{parentName:"p"},"do...while")," will run at least once whether or not the condition evaluates to ",Object(r.mdx)("inlineCode",{parentName:"p"},"true"),"."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"const firstMessage = 'I will print!';\nconst secondMessage = 'I will not print!'; \n\n// A do while with a stopping condition that evaluates to false\ndo {\n console.log(firstMessage)\n} while (true === false);\n\n// A while loop with a stopping condition that evaluates to false\nwhile (true === false){\n  console.log(secondMessage)\n};\n")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Instructions")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"1.")," We\u2019d like a program to simulate part of the cake-baking process. Depending on the recipe, a different number of cups of sugar is required. Create the variable ",Object(r.mdx)("inlineCode",{parentName:"p"},"cupsOfSugarNeeded"),", and assign it a number value of your choosing. The cups of sugar must be added to the batter one at a time. Declare the variable ",Object(r.mdx)("inlineCode",{parentName:"p"},"cupsAdded")," and assign it the value ",Object(r.mdx)("inlineCode",{parentName:"p"},"0"),". "),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"2.")," We have a sweet tooth, so we want to add at least one cup of sugar to the batter even if the value of ",Object(r.mdx)("inlineCode",{parentName:"p"},"cupsOfSugarNeeded")," is ",Object(r.mdx)("inlineCode",{parentName:"p"},"0"),".  Create a ",Object(r.mdx)("inlineCode",{parentName:"p"},"do...while")," loop which increments ",Object(r.mdx)("inlineCode",{parentName:"p"},"cupsAdded")," by one while ",Object(r.mdx)("inlineCode",{parentName:"p"},"cupsAdded")," is less than ",Object(r.mdx)("inlineCode",{parentName:"p"},"cupsOfSugarNeeded"),". "),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"const cupsOfSugarNeeded = 8;\nlet cupsAdded = 0;\n\ndo {\n cupsAdded++\n} while (cupsAdded < cupsOfSugarNeeded);\nconsole.log(cupsAdded); // 8\n")),Object(r.mdx)("hr",null),Object(r.mdx)("p",null,"D\xe9clarations Do ... While"),Object(r.mdx)("p",null,"Dans certains cas, vous voulez qu'un morceau de code s'ex\xe9cute au moins  une fois, puis boucle en fonction d'une condition sp\xe9cifique apr\xe8s son  ex\xe9cution initiale. C'est l\xe0 que la d\xe9claration ",Object(r.mdx)("inlineCode",{parentName:"p"},"do ... while")," entre en  jeu."),Object(r.mdx)("p",null,"Une instruction ",Object(r.mdx)("inlineCode",{parentName:"p"},"do ... while")," dit de faire une t\xe2che une fois et de continuer \xe0 la faire jusqu'\xe0 ce qu'une condition sp\xe9cifi\xe9e ne  soit plus remplie. La syntaxe d'une instruction do ... while ressemble \xe0 ceci :"),Object(r.mdx)("p",null,"Dans cet exemple, le bloc de code modifie la variable ",Object(r.mdx)("inlineCode",{parentName:"p"},"countString")," en y  ajoutant la forme de cha\xeene de la variable ",Object(r.mdx)("inlineCode",{parentName:"p"},"i"),". Tout d'abord, le bloc de  code apr\xe8s le mot cl\xe9 ",Object(r.mdx)("inlineCode",{parentName:"p"},"do")," est ex\xe9cut\xe9 une fois. Ensuite, la condition est \xe9valu\xe9e. Si la condition est \xe9valu\xe9e \xe0 ",Object(r.mdx)("inlineCode",{parentName:"p"},"true"),", le bloc s'ex\xe9cutera \xe0  nouveau. La boucle s'arr\xeate lorsque la condition est \xe9valu\xe9e \xe0 ",Object(r.mdx)("inlineCode",{parentName:"p"},"false"),"."),Object(r.mdx)("p",null,"Notez que les boucles ",Object(r.mdx)("inlineCode",{parentName:"p"},"while")," et ",Object(r.mdx)("inlineCode",{parentName:"p"},"do ... while")," sont diff\xe9rentes ! Contrairement \xe0 la boucle ",Object(r.mdx)("inlineCode",{parentName:"p"},"while"),", ",Object(r.mdx)("inlineCode",{parentName:"p"},"do ... while")," s'ex\xe9cutera au moins une fois, que la  condition soit ",Object(r.mdx)("inlineCode",{parentName:"p"},"true")," ou non."),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"09-the-break-keyword"},"09. The break Keyword"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(o.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/loops/exercises/break-keyword"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,"Imagine we\u2019re looking to adopt a dog. We plan to go to the shelter every day for a year and then give up. But what if we meet our dream dog on day 65 ? We don\u2019t want to keep going to the shelter for the next 300 days just because our original plan was to go for a whole year. In our code, when we want to stop a loop from continuing to execute even though the original stopping condition we wrote for our loop hasn\u2019t been met, we can use the keyword ",Object(r.mdx)("inlineCode",{parentName:"p"},"break"),".\nThe ",Object(r.mdx)("inlineCode",{parentName:"p"},"break")," keyword allows programs to \u201cbreak\u201d out of the loop from within the loop\u2019s block.\nLet\u2019s check out the syntax of a ",Object(r.mdx)("inlineCode",{parentName:"p"},"break")," keyword :"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"for (let i = 0; i < 99; i++) {\n  if (i > 2 ) {\n     break;\n  }\n  console.log('Banana.');\n}\n\nconsole.log('Orange you glad I broke out the loop!');\n")),Object(r.mdx)("p",null,"This is the output for the above code :"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"Banana.\nBanana.\nBanana.\nOrange you glad I broke out the loop!\n")),Object(r.mdx)("p",null,Object(r.mdx)("inlineCode",{parentName:"p"},"break")," statements can be especially helpful when we\u2019re looping through large data structures! With breaks, we can add test conditions besides the stopping condition, and exit the loop when they\u2019re met."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"Instructions")),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"1.")," Log each element from ",Object(r.mdx)("inlineCode",{parentName:"p"},"rapperArray")," in a ",Object(r.mdx)("inlineCode",{parentName:"p"},"for")," loop with the iterator variable ",Object(r.mdx)("inlineCode",{parentName:"p"},"i"),"."),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"2.")," After the ",Object(r.mdx)("inlineCode",{parentName:"p"},"for")," loop, log the string ",Object(r.mdx)("inlineCode",{parentName:"p"},'"And if you don\'t know, now you know."')," to the console. Note: since there\u2019s a single quote character, ",Object(r.mdx)("inlineCode",{parentName:"p"},"'"),",  in our string, we can use double quotes around the string to make sure character prints. "),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'const rapperArray = ["Lil\' Kim", "Jay-Z", "Notorious B.I.G.", "Tupac"];\nfor (let i = 0; i < rapperArray.length; i++) {\n}\nconsole.log("And if you don\'t know, now you know."); // And if you don\'t know, now you know.\n')),Object(r.mdx)("p",null,Object(r.mdx)("strong",{parentName:"p"},"3.")," Add a ",Object(r.mdx)("inlineCode",{parentName:"p"},"break")," inside your loop\u2019s block that breaks out of the loop if the element at the current index in the ",Object(r.mdx)("inlineCode",{parentName:"p"},"rapperArray")," is ",Object(r.mdx)("inlineCode",{parentName:"p"},"'Notorious B.I.G.'"),"."),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'const rapperArray = ["Lil\' Kim", "Jay-Z", "Notorious B.I.G.", "Tupac"];\nfor (let i = 0; i < rapperArray.length; i++) {\n  console.log(rapperArray[i]);\n  if (rapperArray[i] === \'Notorious B.I.G.\') {\n    break;\n  }\n}\nconsole.log("And if you don\'t know, now you know.");\n')),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"Lil' Kim\nJay-Z\nNotorious B.I.G.\nAnd if you don't know, now you know.\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"10-review"},"10. Review"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(o.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/loops/exercises/review-loops"}),"Learn JavaScript | Codecademy")),Object(r.mdx)("p",null,"Great job ! In this lesson, we learned how to write cleaner code with loops. You now know :"),Object(r.mdx)("ul",null,Object(r.mdx)("li",{parentName:"ul"},"Loops perform repetitive actions so we don\u2019t have to code that process manually every time. "),Object(r.mdx)("li",{parentName:"ul"},"How to write ",Object(r.mdx)("inlineCode",{parentName:"li"},"for")," loops with an iterator variable that increments or decrements"),Object(r.mdx)("li",{parentName:"ul"},"How to use a ",Object(r.mdx)("inlineCode",{parentName:"li"},"for")," loop to iterate through an array"),Object(r.mdx)("li",{parentName:"ul"},"A nested ",Object(r.mdx)("inlineCode",{parentName:"li"},"for")," loop is a loop inside another loop"),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"while")," loops allow for different types of stopping conditions"),Object(r.mdx)("li",{parentName:"ul"},"Stopping conditions are crucial for avoiding infinite loops."),Object(r.mdx)("li",{parentName:"ul"},Object(r.mdx)("inlineCode",{parentName:"li"},"do...while")," loops run code at least once\u2014 only checking the stopping condition after the first execution"),Object(r.mdx)("li",{parentName:"ul"},"The ",Object(r.mdx)("inlineCode",{parentName:"li"},"break")," keyword allows programs to leave a loop during the execution of its block")))}p.isMDXComponent=!0}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{155:function(e,r,n){"use strict";n.r(r),n.d(r,"frontMatter",(function(){return o})),n.d(r,"metadata",(function(){return l})),n.d(r,"rightToc",(function(){return i})),n.d(r,"default",(function(){return d}));var t=n(3),a=n(7),s=(n(0),n(212)),o={id:"freeCodeCamp-Regular_Expressions-fr",title:"Expressions r\xe9guli\xe8res"},l={unversionedId:"freeCodeCamp/freeCodeCamp-Regular_Expressions-fr",id:"freeCodeCamp/freeCodeCamp-Regular_Expressions-fr",isDocsHomePage:!1,title:"Expressions r\xe9guli\xe8res",description:"Introduction aux d\xe9fis de l'expression r\xe9guli\xe8re",source:"@site/docs/freeCodeCamp/freeCodeCamp-Regular_Expressions-fr.md",slug:"/freeCodeCamp/freeCodeCamp-Regular_Expressions-fr",permalink:"/docs/freeCodeCamp/freeCodeCamp-Regular_Expressions-fr",editUrl:"https://github.com/gylgyl2000/laloutre.github.io/edit/main/docs/freeCodeCamp/freeCodeCamp-Regular_Expressions-fr.md",version:"current",sidebar:"docs",previous:{title:"ES6",permalink:"/docs/freeCodeCamp/freeCodeCamp-ES6-fr"},next:{title:"D\xe9bogage",permalink:"/docs/freeCodeCamp/freeCodeCamp-Debugging-fr"}},i=[{value:"Introduction aux d\xe9fis de l&#39;expression r\xe9guli\xe8re",id:"introduction-aux-d\xe9fis-de-lexpression-r\xe9guli\xe8re",children:[]},{value:"1. Utilisation de la m\xe9thode de test (<code>.test()</code>)",id:"1-utilisation-de-la-m\xe9thode-de-test-test",children:[]},{value:"2. Faire correspondre les cha\xeenes litt\xe9rales (<code>//</code>)",id:"2-faire-correspondre-les-cha\xeenes-litt\xe9rales-",children:[]},{value:"3. Faire correspondre une cha\xeene litt\xe9rale avec diff\xe9rentes possibilit\xe9s (<code>|</code>)",id:"3-faire-correspondre-une-cha\xeene-litt\xe9rale-avec-diff\xe9rentes-possibilit\xe9s-",children:[]},{value:"4. Ignorer la casse lors de la correspondance (<code>i</code>)",id:"4-ignorer-la-casse-lors-de-la-correspondance-i",children:[]},{value:"5. Extraire les correspondances (<code>.match()</code>)",id:"5-extraire-les-correspondances-match",children:[]},{value:"6. Trouvez plus que la premi\xe8re correspondance (<code>g</code>)",id:"6-trouvez-plus-que-la-premi\xe8re-correspondance-g",children:[]},{value:"7. Faire tout correspondre avec une p\xe9riode g\xe9n\xe9rique (<code>.</code>)",id:"7-faire-tout-correspondre-avec-une-p\xe9riode-g\xe9n\xe9rique-",children:[]},{value:"8. Faire correspondre un seul caract\xe8re avec plusieurs possibilit\xe9s (<code>[]</code>)",id:"8-faire-correspondre-un-seul-caract\xe8re-avec-plusieurs-possibilit\xe9s-",children:[]},{value:"9. Correspondre aux lettres de l&#39;alphabet (<code>-</code>)",id:"9-correspondre-aux-lettres-de-lalphabet--",children:[]},{value:"10. Faire correspondre les nombres et les lettres de l&#39;alphabet (<code>-</code>)",id:"10-faire-correspondre-les-nombres-et-les-lettres-de-lalphabet--",children:[]},{value:"11. Faire correspondre les caract\xe8res uniques non sp\xe9cifi\xe9s (<code>[^ ]</code>)",id:"11-faire-correspondre-les-caract\xe8res-uniques-non-sp\xe9cifi\xe9s--",children:[]},{value:"12. Faire correspondre les caract\xe8res qui apparaissent une ou plusieurs fois (<code>+</code>)",id:"12-faire-correspondre-les-caract\xe8res-qui-apparaissent-une-ou-plusieurs-fois-",children:[]},{value:"13. Faire correspondre les caract\xe8res qui se produisent z\xe9ro fois ou plus (<code>*</code>)",id:"13-faire-correspondre-les-caract\xe8res-qui-se-produisent-z\xe9ro-fois-ou-plus-",children:[]},{value:"14. Rechercher des caract\xe8res avec une correspondance paresseuse (<code>?</code>)",id:"14-rechercher-des-caract\xe8res-avec-une-correspondance-paresseuse-",children:[]},{value:"15. Trouver un ou plusieurs criminels dans une chasse (<code>/z+/</code>)",id:"15-trouver-un-ou-plusieurs-criminels-dans-une-chasse-z",children:[]},{value:"16. Faire correspondre les mod\xe8les en d\xe9but de cha\xeene (<code>/^/</code>)",id:"16-faire-correspondre-les-mod\xe8les-en-d\xe9but-de-cha\xeene-",children:[]},{value:"17. Faire correspondre les mod\xe8les en fin de cha\xeene (<code>$</code>)",id:"17-faire-correspondre-les-mod\xe8les-en-fin-de-cha\xeene-",children:[]},{value:"18. Faire correspondre toutes les lettres et tous les nombres (<code>w</code>)",id:"18-faire-correspondre-toutes-les-lettres-et-tous-les-nombres-w",children:[]},{value:"19. Faites correspondre tout sauf les lettres et les chiffres (W)",id:"19-faites-correspondre-tout-sauf-les-lettres-et-les-chiffres-w",children:[]},{value:"20. Faire correspondre tous les nombres (<code>d</code>)",id:"20-faire-correspondre-tous-les-nombres-d",children:[]},{value:"21. Faire correspondre tous les non-nombres (D)",id:"21-faire-correspondre-tous-les-non-nombres-d",children:[]},{value:"22. Restreindre les noms d&#39;utilisateurs possibles",id:"22-restreindre-les-noms-dutilisateurs-possibles",children:[]},{value:"23. Faire correspondre les espaces (<code>s</code>)",id:"23-faire-correspondre-les-espaces-s",children:[]},{value:"24. Faire correspondre les caract\xe8res non-espaces",id:"24-faire-correspondre-les-caract\xe8res-non-espaces",children:[]},{value:"25. Sp\xe9cifiez le nombre sup\xe9rieur et inf\xe9rieur des correspondances (<code>{3,5}</code>)",id:"25-sp\xe9cifiez-le-nombre-sup\xe9rieur-et-inf\xe9rieur-des-correspondances-35",children:[]},{value:"26. Sp\xe9cifiez uniquement le nombre inf\xe9rieur de correspondances (<code>{3,}</code>)",id:"26-sp\xe9cifiez-uniquement-le-nombre-inf\xe9rieur-de-correspondances-3",children:[]},{value:"27. Sp\xe9cifiez le nombre exact de correspondances (<code>{3}</code>)",id:"27-sp\xe9cifiez-le-nombre-exact-de-correspondances-3",children:[]},{value:"28. V\xe9rifier tout ou rien (<code>?</code>)",id:"28-v\xe9rifier-tout-ou-rien-",children:[]},{value:"29. Anticipation (lookahead) positif et n\xe9gatif <code>(?=...)</code> <code>(?!...)</code>",id:"29-anticipation-lookahead-positif-et-n\xe9gatif--",children:[]},{value:"30. V\xe9rifier le regroupement mixte de caract\xe8res",id:"30-v\xe9rifier-le-regroupement-mixte-de-caract\xe8res",children:[]},{value:"31. R\xe9utiliser des mod\xe8les \xe0 l&#39;aide de groupes de capture <code>(w+)</code>",id:"31-r\xe9utiliser-des-mod\xe8les-\xe0-laide-de-groupes-de-capture-w",children:[]},{value:"32. Utiliser des groupes de capture pour rechercher et remplacer (<code>$n</code>) (<code>.replace()</code>)",id:"32-utiliser-des-groupes-de-capture-pour-rechercher-et-remplacer-n-replace",children:[]},{value:"33. Supprimer les espaces du d\xe9but et de la fin",id:"33-supprimer-les-espaces-du-d\xe9but-et-de-la-fin",children:[]}],c={rightToc:i};function d(e){var r=e.components,n=Object(a.a)(e,["components"]);return Object(s.mdx)("wrapper",Object(t.a)({},c,n,{components:r,mdxType:"MDXLayout"}),Object(s.mdx)("h2",{id:"introduction-aux-d\xe9fis-de-lexpression-r\xe9guli\xe8re"},"Introduction aux d\xe9fis de l'expression r\xe9guli\xe8re"),Object(s.mdx)("p",null,Object(s.mdx)("a",Object(t.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/"}),"Regular Expressions | freeCodeCamp.org")),Object(s.mdx)("p",null,"Les expressions  r\xe9guli\xe8res sont des cha\xeenes sp\xe9ciales qui repr\xe9sentent un mod\xe8le de  recherche. Aussi connus sous le nom de \xab regex \xbb ou \xab regexp \xbb, ils aident  les programmeurs \xe0 faire correspondre, rechercher et remplacer du texte. Les expressions r\xe9guli\xe8res peuvent para\xeetre \xe9nigmatiques car quelques  caract\xe8res ont une signification particuli\xe8re. Le but est de combiner  les symboles et le texte dans un mod\xe8le qui correspond \xe0 ce que vous  voulez, mais uniquement \xe0 ce que vous voulez. Cette section couvrira les caract\xe8res, quelques raccourcis et les utilisations courantes de  l'\xe9criture d'expressions r\xe9guli\xe8res."),Object(s.mdx)("hr",null),Object(s.mdx)("h2",{id:"1-utilisation-de-la-m\xe9thode-de-test-test"},"1. Utilisation de la m\xe9thode de test (",Object(s.mdx)("inlineCode",{parentName:"h2"},".test()"),")"),Object(s.mdx)("p",null,Object(s.mdx)("a",Object(t.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/using-the-test-method"}),"Learn Regular Expressions: Using the Test Method | freeCodeCamp.org")),Object(s.mdx)("p",null,"Les expressions r\xe9guli\xe8res sont utilis\xe9es dans les langages de  programmation pour faire correspondre des parties de cha\xeenes. Vous cr\xe9ez des mod\xe8les pour vous aider \xe0 faire cette correspondance.\nSi  vous voulez trouver le mot ",Object(s.mdx)("inlineCode",{parentName:"p"},'"le"')," dans la cha\xeene ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Le chien a chass\xe9 le  chat"'),", vous pouvez utiliser l'expression r\xe9guli\xe8re suivante : ",Object(s.mdx)("inlineCode",{parentName:"p"},"/le/"),".  Notez que les guillemets ne sont pas obligatoires dans l'expression r\xe9guli\xe8re.\nJavaScript a plusieurs fa\xe7ons d'utiliser les  expressions r\xe9guli\xe8res. Une fa\xe7on de tester une expression r\xe9guli\xe8re consiste \xe0 utiliser la m\xe9thode ",Object(s.mdx)("inlineCode",{parentName:"p"},".test()"),". La m\xe9thode ",Object(s.mdx)("inlineCode",{parentName:"p"},".test()")," prend  l'expression rationnelle, l'applique \xe0 une cha\xeene (qui est plac\xe9e entre  parenth\xe8ses) et renvoie ",Object(s.mdx)("inlineCode",{parentName:"p"},"true")," ou ",Object(s.mdx)("inlineCode",{parentName:"p"},"false")," si votre mod\xe8le trouve quelque  chose ou non."),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let testStr = "freeCodeCamp";\nlet testRegex = /Code/;\ntestRegex.test(testStr);\n// Returns true\n')),Object(s.mdx)("hr",null),Object(s.mdx)("p",null,"Appliquez l'expression r\xe9guli\xe8re ",Object(s.mdx)("inlineCode",{parentName:"p"},"myRegex")," sur la cha\xeene ",Object(s.mdx)("inlineCode",{parentName:"p"},"myString")," \xe0 l'aide de la m\xe9thode ",Object(s.mdx)("inlineCode",{parentName:"p"},".test()"),"."),Object(s.mdx)("blockquote",null,Object(s.mdx)("p",{parentName:"blockquote"},"Vous devez utiliser ",Object(s.mdx)("inlineCode",{parentName:"p"},".test()")," pour tester l'expression r\xe9guli\xe8re.\nVotre r\xe9sultat doit retourner ",Object(s.mdx)("inlineCode",{parentName:"p"},"true"),".")),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let myString = "Hello, World!";\nlet myRegex = /Hello/;\nlet result = myRegex; // Change this line\n')),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let myString = "Hello, World!";\nlet myRegex = /Hello/;\nlet result = myRegex.test(myString); // true\n')),Object(s.mdx)("hr",null),Object(s.mdx)("h2",{id:"2-faire-correspondre-les-cha\xeenes-litt\xe9rales-"},"2. Faire correspondre les cha\xeenes litt\xe9rales (",Object(s.mdx)("inlineCode",{parentName:"h2"},"//"),")"),Object(s.mdx)("p",null,Object(s.mdx)("a",Object(t.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/match-literal-strings"}),"Learn Regular Expressions: Match Literal Strings | freeCodeCamp.org")),Object(s.mdx)("p",null,"Dans le dernier d\xe9fi, vous avez recherch\xe9 le mot ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Hello"')," en utilisant  l'expression r\xe9guli\xe8re ",Object(s.mdx)("inlineCode",{parentName:"p"},"/Hello/"),". Cette expression r\xe9guli\xe8re a recherch\xe9 une correspondance litt\xe9rale de la cha\xeene ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Hello"'),". Voici un autre  exemple de recherche d'une correspondance litt\xe9rale de la cha\xeene ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Kevin"')," :"),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let testStr = "Hello, my name is Kevin.";\nlet testRegex = /Kevin/;\ntestRegex.test(testStr);\n// Returns true\n')),Object(s.mdx)("p",null,"Aucune autre forme de ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Kevin"')," ne correspondra. Par exemple, l'expression  r\xe9guli\xe8re ",Object(s.mdx)("inlineCode",{parentName:"p"},"/Kevin/")," ne correspondra pas \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"kevin"')," ou ",Object(s.mdx)("inlineCode",{parentName:"p"},'"KEVIN"'),"."),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"let wrongRegex = /kevin/;\nwrongRegex.test(testStr);\n// Returns false\n")),Object(s.mdx)("p",null,"Un d\xe9fi futur montrera \xe9galement comment faire correspondre ces autres formes."),Object(s.mdx)("hr",null),Object(s.mdx)("p",null,"Compl\xe9tez la regex ",Object(s.mdx)("inlineCode",{parentName:"p"},"waldoRegex")," pour trouver ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Waldo"')," dans la cha\xeene ",Object(s.mdx)("inlineCode",{parentName:"p"},"waldoIsHiding")," avec une correspondance litt\xe9rale."),Object(s.mdx)("blockquote",null,Object(s.mdx)("p",{parentName:"blockquote"},"Votre regex ",Object(s.mdx)("inlineCode",{parentName:"p"},"waldoRegex")," devrait trouver ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Waldo"'),"\nVotre regex ",Object(s.mdx)("inlineCode",{parentName:"p"},"waldoRegex")," ne doit pas rechercher autre chose.\nVous devez effectuer une correspondance de cha\xeene litt\xe9rale avec votre regex.")),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let waldoIsHiding = "Somewhere Waldo is hiding in this text.";\nlet waldoRegex = /search/; // Change this line\nlet result = waldoRegex.test(waldoIsHiding);\n')),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let waldoIsHiding = "Somewhere Waldo is hiding in this text.";\nlet waldoRegex = /Waldo/; // Change this line\nlet result = waldoRegex.test(waldoIsHiding);\nconsole.log(result); // true\n')),Object(s.mdx)("hr",null),Object(s.mdx)("h2",{id:"3-faire-correspondre-une-cha\xeene-litt\xe9rale-avec-diff\xe9rentes-possibilit\xe9s-"},"3. Faire correspondre une cha\xeene litt\xe9rale avec diff\xe9rentes possibilit\xe9s (",Object(s.mdx)("inlineCode",{parentName:"h2"},"|"),")"),Object(s.mdx)("p",null,Object(s.mdx)("a",Object(t.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/match-a-literal-string-with-different-possibilities"}),"Learn Regular Expressions: Match a Literal String with Different Possibilities | freeCodeCamp.org")),Object(s.mdx)("p",null,"En utilisant des expressions rationnelles comme ",Object(s.mdx)("inlineCode",{parentName:"p"},"/coding/"),", vous pouvez rechercher le mod\xe8le ",Object(s.mdx)("inlineCode",{parentName:"p"},'"coding"')," dans une autre cha\xeene.\nCeci est puissant pour rechercher des cha\xeenes uniques, mais il est limit\xe9 \xe0  un seul mod\xe8le. Vous pouvez rechercher plusieurs mod\xe8les \xe0 l'aide de  ",Object(s.mdx)("inlineCode",{parentName:"p"},"alternation")," ou de l'op\xe9rateur ",Object(s.mdx)("inlineCode",{parentName:"p"},"OR")," : ",Object(s.mdx)("inlineCode",{parentName:"p"},"|"),".\nCet op\xe9rateur fait  correspondre les mod\xe8les avant ou apr\xe8s. Par exemple, si vous vouliez  faire correspondre ",Object(s.mdx)("inlineCode",{parentName:"p"},'"yes"')," ou ",Object(s.mdx)("inlineCode",{parentName:"p"},'"no"'),", l'expression r\xe9guli\xe8re que vous  souhaitez est ",Object(s.mdx)("inlineCode",{parentName:"p"},"/yes|no/"),".\nVous pouvez \xe9galement rechercher plus de deux mod\xe8les. Vous pouvez le faire en ajoutant plus de mod\xe8les avec  plus d'op\xe9rateurs ",Object(s.mdx)("inlineCode",{parentName:"p"},"OR")," les s\xe9parant, comme ",Object(s.mdx)("inlineCode",{parentName:"p"},"/yes|no|maybe/"),"."),Object(s.mdx)("hr",null),Object(s.mdx)("p",null,"Compl\xe9tez l'expression ",Object(s.mdx)("inlineCode",{parentName:"p"},"petRegex")," pour correspondre aux animaux de compagnie ",Object(s.mdx)("inlineCode",{parentName:"p"},'"dog"'),", ",Object(s.mdx)("inlineCode",{parentName:"p"},'"cat"'),", ",Object(s.mdx)("inlineCode",{parentName:"p"},'"bird"'),", ou ",Object(s.mdx)("inlineCode",{parentName:"p"},'"fish"'),"."),Object(s.mdx)("blockquote",null,Object(s.mdx)("p",{parentName:"blockquote"},"Votre expression ",Object(s.mdx)("inlineCode",{parentName:"p"},"petRegex")," doit renvoyer ",Object(s.mdx)("inlineCode",{parentName:"p"},"true")," pour la cha\xeene ",Object(s.mdx)("inlineCode",{parentName:"p"},'"John has a pet dog."'),"\nVotre expression ",Object(s.mdx)("inlineCode",{parentName:"p"},"petRegex")," doit renvoyer ",Object(s.mdx)("inlineCode",{parentName:"p"},"false")," pour la cha\xeene ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Emma has a pet rock."'),"\nVotre expression ",Object(s.mdx)("inlineCode",{parentName:"p"},"petRegex")," doit renvoyer ",Object(s.mdx)("inlineCode",{parentName:"p"},"true")," pour la cha\xeene ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Emma has a pet bird."'),"\nVotre expression ",Object(s.mdx)("inlineCode",{parentName:"p"},"petRegex")," doit renvoyer ",Object(s.mdx)("inlineCode",{parentName:"p"},"true")," pour la cha\xeene ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Liz has a pet cat."'),"\nVotre expression ",Object(s.mdx)("inlineCode",{parentName:"p"},"petRegex")," doit retourner ",Object(s.mdx)("inlineCode",{parentName:"p"},"false")," pour la cha\xeene ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Kara has a pet dolphin."'),"\nVotre expression ",Object(s.mdx)("inlineCode",{parentName:"p"},"petRegex")," doit retourner ",Object(s.mdx)("inlineCode",{parentName:"p"},"true")," pour la cha\xeene ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Alice has a pet fish."'),"\nVotre expression ",Object(s.mdx)("inlineCode",{parentName:"p"},"petRegex")," doit retourner ",Object(s.mdx)("inlineCode",{parentName:"p"},"false")," pour la cha\xeene ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Jimmy has a pet computer."'))),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let petString = "James has a pet cat.";\nlet petRegex = /change/; // Change this line\nlet result = petRegex.test(petString);\n')),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let petString = "James has a pet cat.";\nlet petRegex = /dog|cat|bird|fish/;\nlet result = petRegex.test(petString);\nconsole.log(result); // true\n')),Object(s.mdx)("hr",null),Object(s.mdx)("h2",{id:"4-ignorer-la-casse-lors-de-la-correspondance-i"},"4. Ignorer la casse lors de la correspondance (",Object(s.mdx)("inlineCode",{parentName:"h2"},"i"),")"),Object(s.mdx)("p",null,Object(s.mdx)("a",Object(t.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/ignore-case-while-matching"}),"Learn Regular Expressions: Ignore Case While Matching | freeCodeCamp.org")),Object(s.mdx)("p",null,"Jusqu'\xe0 pr\xe9sent, vous avez examin\xe9 les expressions r\xe9guli\xe8res pour faire des  correspondances litt\xe9rales de cha\xeenes. Mais parfois, vous voudrez  peut-\xeatre \xe9galement faire correspondre les diff\xe9rences de casse.\nLa casse (ou parfois la casse des lettres) est la diff\xe9rence entre les  lettres majuscules et minuscules. Des exemples de majuscules sont ",Object(s.mdx)("inlineCode",{parentName:"p"},'"A"'),", ",Object(s.mdx)("inlineCode",{parentName:"p"},'"B"'),", et ",Object(s.mdx)("inlineCode",{parentName:"p"},'"C"'),". Des exemples de minuscules sont ",Object(s.mdx)("inlineCode",{parentName:"p"},'"a"'),", ",Object(s.mdx)("inlineCode",{parentName:"p"},'"b"'),", et ",Object(s.mdx)("inlineCode",{parentName:"p"},'"c"'),".\nVous pouvez faire correspondre les deux cas en utilisant ce qu'on appelle un drapeau. Il y a d'autres drapeaux, mais ici vous vous concentrerez sur  le drapeau qui ignore la casse - le drapeau ",Object(s.mdx)("inlineCode",{parentName:"p"},"i"),". Vous pouvez l'utiliser en l'ajoutant \xe0 l'expression r\xe9guli\xe8re. Un exemple d'utilisation de cet  indicateur est ",Object(s.mdx)("inlineCode",{parentName:"p"},"/ignorecase/i"),". Cette expression r\xe9guli\xe8re peut  correspondre aux cha\xeenes ",Object(s.mdx)("inlineCode",{parentName:"p"},'"ignorecase"'),", ",Object(s.mdx)("inlineCode",{parentName:"p"},'"igNoreCase"'),", et ",Object(s.mdx)("inlineCode",{parentName:"p"},'"IgnoreCase"'),"."),Object(s.mdx)("hr",null),Object(s.mdx)("p",null,"\xc9crivez une expression r\xe9guli\xe8re ",Object(s.mdx)("inlineCode",{parentName:"p"},"fccRegex")," pour qu'elle corresponde \xe0  ",Object(s.mdx)("inlineCode",{parentName:"p"},'"freeCodeCamp"'),", quel que soit son cas. Votre expression r\xe9guli\xe8re ne doit correspondre \xe0 aucune abr\xe9viation ou variation avec des espaces."),Object(s.mdx)("blockquote",null,Object(s.mdx)("p",{parentName:"blockquote"},"Votre expression r\xe9guli\xe8re doit correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},"freeCodeCamp"),"\nVotre expression r\xe9guli\xe8re doit correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},"FreeCodeCamp"),"\nVotre expression r\xe9guli\xe8re doit correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},"FreecodeCamp"),"\nVotre expression r\xe9guli\xe8re doit correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},"FreeCodecamp"),"\nVotre expression r\xe9guli\xe8re ne doit pas correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},"Free Code Camp"),"\nVotre expression r\xe9guli\xe8re doit correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},"FreeCOdeCamp"),"\nVotre expression r\xe9guli\xe8re ne doit pas correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},"FCC"),"\nVotre expression r\xe9guli\xe8re doit correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},"FrEeCoDeCamp"),"\nVotre expression r\xe9guli\xe8re doit correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},"FrEeCodECamp"),"\nVotre expression r\xe9guli\xe8re doit correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},"FReeCodeCAmp"))),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let myString = "freeCodeCamp";\nlet fccRegex = /change/; // Change this line\nlet result = fccRegex.test(myString);\n')),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let myString = "freeCodeCamp";\nlet fccRegex = /freecodecamp/i;\nlet result = fccRegex.test(myString);\nconsole.log(result); // true\n')),Object(s.mdx)("hr",null),Object(s.mdx)("h2",{id:"5-extraire-les-correspondances-match"},"5. Extraire les correspondances (",Object(s.mdx)("inlineCode",{parentName:"h2"},".match()"),")"),Object(s.mdx)("p",null,Object(s.mdx)("a",Object(t.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/extract-matches"}),"Learn Regular Expressions: Extract Matches | freeCodeCamp.org")),Object(s.mdx)("p",null,"Jusqu'\xe0 pr\xe9sent, vous avez seulement v\xe9rifi\xe9 si un mod\xe8le existe ou non dans  une cha\xeene. Vous pouvez \xe9galement extraire les correspondances r\xe9elles  que vous avez trouv\xe9es avec la m\xe9thode ",Object(s.mdx)("inlineCode",{parentName:"p"},".match()"),".\nPour utiliser la m\xe9thode ",Object(s.mdx)("inlineCode",{parentName:"p"},".match()"),", appliquez la m\xe9thode sur une cha\xeene et passez l'expression r\xe9guli\xe8re entre parenth\xe8ses.\nVoici un exemple :"),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'"Hello, World!".match(/Hello/);\n// Returns ["Hello"]\nlet ourStr = "Regular expressions";\nlet ourRegex = /expressions/;\nourStr.match(ourRegex);\n// Returns ["expressions"]\n')),Object(s.mdx)("p",null,"Notez que la syntaxe ",Object(s.mdx)("inlineCode",{parentName:"p"},".match")," est l'oppos\xe9 de la m\xe9thode ",Object(s.mdx)("inlineCode",{parentName:"p"},".test")," que vous avez utilis\xe9e jusqu'\xe0 pr\xe9sent :"),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"'string'.match(/regex/);\n/regex/.test('string');\n")),Object(s.mdx)("hr",null),Object(s.mdx)("p",null,"Appliquez la m\xe9thode ",Object(s.mdx)("inlineCode",{parentName:"p"},".match()")," pour extraire le mot ",Object(s.mdx)("inlineCode",{parentName:"p"},"coding"),"."),Object(s.mdx)("blockquote",null,Object(s.mdx)("p",{parentName:"blockquote"},"Le r\xe9sultat doit avoir le mot ",Object(s.mdx)("inlineCode",{parentName:"p"},"coding"),"\nVotre expression r\xe9guli\xe8re ",Object(s.mdx)("inlineCode",{parentName:"p"},"codingRegex")," devrait rechercher ",Object(s.mdx)("inlineCode",{parentName:"p"},"coding"),"\nVous devez utiliser la m\xe9thode ",Object(s.mdx)("inlineCode",{parentName:"p"},".match()"),".")),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"let extractStr = \"Extract the word 'coding' from this string.\";\nlet codingRegex = /change/; // Change this line\nlet result = extractStr; // Change this line\n")),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"let extractStr = \"Extract the word 'coding' from this string.\";\nlet codingRegex = /coding/;\nlet result = extractStr.match(codingRegex);\nconsol.log(result); // [ 'coding', index: 18, input: 'Extract the word \\'coding\\' from this string.', groups: undefined ]\n")),Object(s.mdx)("hr",null),Object(s.mdx)("h2",{id:"6-trouvez-plus-que-la-premi\xe8re-correspondance-g"},"6. Trouvez plus que la premi\xe8re correspondance (",Object(s.mdx)("inlineCode",{parentName:"h2"},"g"),")"),Object(s.mdx)("p",null,Object(s.mdx)("a",Object(t.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/find-more-than-the-first-match"}),"Learn Regular Expressions: Find More Than the First Match | freeCodeCamp.org")),Object(s.mdx)("p",null,"Jusqu'\xe0 pr\xe9sent, vous n'avez pu extraire ou rechercher un motif qu'une seule fois."),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let testStr = "Repeat, Repeat, Repeat";\nlet ourRegex = /Repeat/;\ntestStr.match(ourRegex);\n// Returns ["Repeat"]\n')),Object(s.mdx)("p",null,"Pour rechercher ou extraire un motif plusieurs fois, vous pouvez utiliser l'indicateur ",Object(s.mdx)("inlineCode",{parentName:"p"},"g"),"."),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let repeatRegex = /Repeat/g;\ntestStr.match(repeatRegex);\n// Returns ["Repeat", "Repeat", "Repeat"]\n')),Object(s.mdx)("hr",null),Object(s.mdx)("p",null,"\xc0 l'aide de l'expression r\xe9guli\xe8re ",Object(s.mdx)("inlineCode",{parentName:"p"},"starRegex"),", recherchez et extrayez les deux mots ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Twinkle"')," de la cha\xeene ",Object(s.mdx)("inlineCode",{parentName:"p"},"twinkleStar"),".\n",Object(s.mdx)("strong",{parentName:"p"},"Remarque :")," Vous pouvez avoir plusieurs indicateurs sur votre expression r\xe9guli\xe8re comme ",Object(s.mdx)("inlineCode",{parentName:"p"},"/search/gi"),"."),Object(s.mdx)("blockquote",null,Object(s.mdx)("p",{parentName:"blockquote"},"Votre regex ",Object(s.mdx)("inlineCode",{parentName:"p"},"starRegex")," devrait utiliser l'indicateur global ",Object(s.mdx)("inlineCode",{parentName:"p"},"g"),"\nVotre regex ",Object(s.mdx)("inlineCode",{parentName:"p"},"starRegex")," doit utiliser l'indicateur insensible \xe0 la casse ",Object(s.mdx)("inlineCode",{parentName:"p"},"i"),"\nVotre correspondance doit correspondre aux deux occurrences du mot ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Twinkle"'),"\nVotre correspondance ",Object(s.mdx)("inlineCode",{parentName:"p"},"result")," doit contenir deux \xe9l\xe9ments.")),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let twinkleStar = "Twinkle, twinkle, little star";\nlet starRegex = /change/; // Change this line\nlet result = twinkleStar; // Change this line\n')),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"let twinkleStar = \"Twinkle, twinkle, little star\";\nlet starRegex = /Twinkle/gi;\nlet result = twinkleStar.match(starRegex);\nconsole.log(result); // [ 'Twinkle', 'twinkle' ]\n")),Object(s.mdx)("hr",null),Object(s.mdx)("h2",{id:"7-faire-tout-correspondre-avec-une-p\xe9riode-g\xe9n\xe9rique-"},"7. Faire tout correspondre avec une p\xe9riode g\xe9n\xe9rique (",Object(s.mdx)("inlineCode",{parentName:"h2"},"."),")"),Object(s.mdx)("p",null,Object(s.mdx)("a",Object(t.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/match-anything-with-wildcard-period"}),"Learn Regular Expressions: Match Anything with Wildcard Period | freeCodeCamp.org")),Object(s.mdx)("p",null,"Parfois, vous ne connaissez pas (ou n'avez pas besoin de) conna\xeetre les  caract\xe8res exacts de vos mod\xe8les. Penser \xe0 tous les mots qui  correspondent, par exemple, \xe0 une faute d'orthographe prendrait beaucoup de temps. Heureusement, vous pouvez gagner du temps en utilisant le  caract\xe8re g\xe9n\xe9rique : ",Object(s.mdx)("inlineCode",{parentName:"p"},"."),"\nLe caract\xe8re g\xe9n\xe9rique ",Object(s.mdx)("inlineCode",{parentName:"p"},".")," correspondra \xe0  n'importe quel caract\xe8re. Le caract\xe8re g\xe9n\xe9rique est \xe9galement appel\xe9 ",Object(s.mdx)("inlineCode",{parentName:"p"},"dot")," et ",Object(s.mdx)("inlineCode",{parentName:"p"},"period"),". Vous pouvez utiliser le caract\xe8re g\xe9n\xe9rique comme  n'importe quel autre caract\xe8re de l'expression r\xe9guli\xe8re. Par exemple,  si vous vouliez faire correspondre ",Object(s.mdx)("inlineCode",{parentName:"p"},'"hug"'),", ",Object(s.mdx)("inlineCode",{parentName:"p"},'"huh"'),", ",Object(s.mdx)("inlineCode",{parentName:"p"},'"hut"'),", et ",Object(s.mdx)("inlineCode",{parentName:"p"},'"hum"'),", vous  pouvez utiliser l'expression r\xe9guli\xe8re ",Object(s.mdx)("inlineCode",{parentName:"p"},"/hu./")," pour faire correspondre les quatre mots."),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let humStr = "I\'ll hum a song";\nlet hugStr = "Bear hug";\nlet huRegex = /hu./;\nhuRegex.test(humStr); // Returns true\nhuRegex.test(hugStr); // Returns true\n')),Object(s.mdx)("hr",null),Object(s.mdx)("p",null,"Compl\xe9tez le regex ",Object(s.mdx)("inlineCode",{parentName:"p"},"unRegex")," pour qu'il corresponde aux cha\xeenes ",Object(s.mdx)("inlineCode",{parentName:"p"},'"run"'),", ",Object(s.mdx)("inlineCode",{parentName:"p"},'"sun"'),", ",Object(s.mdx)("inlineCode",{parentName:"p"},'"fun"'),", ",Object(s.mdx)("inlineCode",{parentName:"p"},'"pun"'),", ",Object(s.mdx)("inlineCode",{parentName:"p"},'"nun"'),", et ",Object(s.mdx)("inlineCode",{parentName:"p"},'"bun"'),". Votre regex doit utiliser le caract\xe8re  g\xe9n\xe9rique."),Object(s.mdx)("blockquote",null,Object(s.mdx)("p",{parentName:"blockquote"},"Vous devez utiliser la m\xe9thode ",Object(s.mdx)("inlineCode",{parentName:"p"},".test()"),".\nVous devez utiliser le caract\xe8re g\xe9n\xe9rique dans votre regex ",Object(s.mdx)("inlineCode",{parentName:"p"},"unRegex"),"\nVotre regex ",Object(s.mdx)("inlineCode",{parentName:"p"},"unRegex")," doit correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"run"')," dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Let us go on a run."'),"\nVotre regex ",Object(s.mdx)("inlineCode",{parentName:"p"},"unRegex")," doit correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"sun"')," dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'"The sun is out today."'),"\nVotre regex ",Object(s.mdx)("inlineCode",{parentName:"p"},"unRegex")," doit correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"fun"')," dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Coding is a lot of fun."'),"\nVotre regex ",Object(s.mdx)("inlineCode",{parentName:"p"},"unRegex")," devrait correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"pun"')," dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Seven days without a pun makes one weak."'),"\nVotre regex ",Object(s.mdx)("inlineCode",{parentName:"p"},"unRegex")," doit correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"nun"')," dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'"One takes a vow to be a nun."'),"\nVotre regex ",Object(s.mdx)("inlineCode",{parentName:"p"},"unRegex")," doit correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"bun"')," dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'"She got fired from the hot dog stand for putting her hair in a bun."'),"\nVotre regex ",Object(s.mdx)("inlineCode",{parentName:"p"},"unRegex")," ne doit pas correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"There is a bug in my code."'),"\nVotre regex ",Object(s.mdx)("inlineCode",{parentName:"p"},"unRegex")," ne doit pas correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Catch me if you can."'))),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let exampleStr = "Let\'s have fun with regular expressions!";\nlet unRegex = /change/; // Change this line\nlet result = unRegex.test(exampleStr);\n')),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let exampleStr = "Let\'s have fun with regular expressions!";\nlet unRegex = /.un/;\nlet result = unRegex.test(exampleStr);\nconsole.log(result); // true\n')),Object(s.mdx)("hr",null),Object(s.mdx)("h2",{id:"8-faire-correspondre-un-seul-caract\xe8re-avec-plusieurs-possibilit\xe9s-"},"8. Faire correspondre un seul caract\xe8re avec plusieurs possibilit\xe9s (",Object(s.mdx)("inlineCode",{parentName:"h2"},"[]"),")"),Object(s.mdx)("p",null,Object(s.mdx)("a",Object(t.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/match-single-character-with-multiple-possibilities"}),"Learn Regular Expressions: Match Single Character with Multiple Possibilities | freeCodeCamp.org")),Object(s.mdx)("p",null,"Vous avez appris \xe0 faire correspondre des mod\xe8les litt\xe9raux (",Object(s.mdx)("inlineCode",{parentName:"p"},"/literal/"),") et des caract\xe8res g\xe9n\xe9riques (",Object(s.mdx)("inlineCode",{parentName:"p"},"/./"),"). Ce sont les extr\xeames des expressions  r\xe9guli\xe8res, o\xf9 l'un trouve des correspondances exactes et l'autre  correspond \xe0 tout. Il existe des options qui \xe9quilibrent les deux  extr\xeames.\nVous pouvez rechercher un mod\xe8le litt\xe9ral avec une  certaine flexibilit\xe9 avec les classes de caract\xe8res. Les classes de  caract\xe8res vous permettent de d\xe9finir un groupe de caract\xe8res que vous  souhaitez mettre en correspondance en les pla\xe7ant entre crochets (",Object(s.mdx)("inlineCode",{parentName:"p"},"["),"et",Object(s.mdx)("inlineCode",{parentName:"p"},"]"),").\nPar exemple, vous voulez faire correspondre",Object(s.mdx)("inlineCode",{parentName:"p"},'"bag"'),", ",Object(s.mdx)("inlineCode",{parentName:"p"},'"big"'),", et ",Object(s.mdx)("inlineCode",{parentName:"p"},'"bug"')," mais pas ",Object(s.mdx)("inlineCode",{parentName:"p"},'"bog"'),". Vous pouvez cr\xe9er le regex ",Object(s.mdx)("inlineCode",{parentName:"p"},"/b[aiu]g/")," pour ce faire. Le ",Object(s.mdx)("inlineCode",{parentName:"p"},"[aiu]"),"  est la classe de caract\xe8res qui ne correspondra qu'aux caract\xe8res ",Object(s.mdx)("inlineCode",{parentName:"p"},'"a"'),", ",Object(s.mdx)("inlineCode",{parentName:"p"},'"i"'),", ou ",Object(s.mdx)("inlineCode",{parentName:"p"},'"u"'),"."),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let bigStr = "big";\nlet bagStr = "bag";\nlet bugStr = "bug";\nlet bogStr = "bog";\nlet bgRegex = /b[aiu]g/;\nbigStr.match(bgRegex); // Returns ["big"]\nbagStr.match(bgRegex); // Returns ["bag"]\nbugStr.match(bgRegex); // Returns ["bug"]\nbogStr.match(bgRegex); // Returns null\n')),Object(s.mdx)("hr",null),Object(s.mdx)("p",null,"Utilisez une classe de caract\xe8res avec des voyelles (",Object(s.mdx)("inlineCode",{parentName:"p"},"a"),", ",Object(s.mdx)("inlineCode",{parentName:"p"},"e"),", ",Object(s.mdx)("inlineCode",{parentName:"p"},"i"),", ",Object(s.mdx)("inlineCode",{parentName:"p"},"o"),", ",Object(s.mdx)("inlineCode",{parentName:"p"},"u"),") dans votre regex ",Object(s.mdx)("inlineCode",{parentName:"p"},"vowelRegex")," pour trouver toutes les voyelles dans la cha\xeene  ",Object(s.mdx)("inlineCode",{parentName:"p"},"quoteSample"),".\n",Object(s.mdx)("strong",{parentName:"p"},"Remarque :")," Assurez-vous de faire correspondre les voyelles majuscules et minuscules."),Object(s.mdx)("blockquote",null,Object(s.mdx)("p",{parentName:"blockquote"},"Vous devriez trouver les 25 voyelles.\nVotre regex ",Object(s.mdx)("inlineCode",{parentName:"p"},"vowelRegex")," doit utiliser une classe de caract\xe8res.\nVotre regex ",Object(s.mdx)("inlineCode",{parentName:"p"},"vowelRegex")," doit utiliser l'indicateur global.\nVotre regex ",Object(s.mdx)("inlineCode",{parentName:"p"},"vowelRegex")," doit utiliser l'indicateur insensible \xe0 la casse.\nVotre regex ne doit correspondre \xe0 aucune consonnes.")),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let quoteSample = "Beware of bugs in the above code; I have only proved it correct, not tried it.";\nlet vowelRegex = /change/; // Change this line\nlet result = vowelRegex; // Change this line\n')),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"let quoteSample = \"Beware of bugs in the above code; I have only proved it correct, not tried it.\";\nlet vowelRegex = /[aeiou]/gi;\nlet result = quoteSample.match(vowelRegex);\nconsole.log(result); // [ 'e', 'a', 'e', 'o', 'u', 'i', 'e', 'a', 'o', 'e', 'o', 'e', 'I', 'a', 'e', 'o', 'o', 'e', 'i', 'o', 'e', 'o', 'i', 'e', 'i' ]\n")),Object(s.mdx)("hr",null),Object(s.mdx)("h2",{id:"9-correspondre-aux-lettres-de-lalphabet--"},"9. Correspondre aux lettres de l'alphabet (",Object(s.mdx)("inlineCode",{parentName:"h2"},"-"),")"),Object(s.mdx)("p",null,Object(s.mdx)("a",Object(t.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/match-letters-of-the-alphabet"}),"Learn Regular Expressions: Match Letters of the Alphabet | freeCodeCamp.org")),Object(s.mdx)("p",null,"Vous avez vu comment vous pouvez utiliser ",Object(s.mdx)("em",{parentName:"p"},"des jeux de caract\xe8res")," pour  sp\xe9cifier un groupe de caract\xe8res \xe0 faire correspondre, mais c'est  beaucoup de saisie lorsque vous devez faire correspondre une large gamme de caract\xe8res (par exemple, chaque lettre de l'alphabet). Heureusement, il existe une fonctionnalit\xe9 int\xe9gr\xe9e qui rend cela court et simple.\nDans un jeu de caract\xe8res, vous pouvez d\xe9finir une plage de caract\xe8res \xe0 faire correspondre \xe0 l'aide d'un trait d'union : ",Object(s.mdx)("inlineCode",{parentName:"p"},"-"),".\nPar exemple, pour faire correspondre les lettres minuscules de ",Object(s.mdx)("inlineCode",{parentName:"p"},"a")," \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},"e"),", vous utiliseriez ",Object(s.mdx)("inlineCode",{parentName:"p"},"[a-e]"),"."),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let catStr = "cat";\nlet batStr = "bat";\nlet matStr = "mat";\nlet bgRegex = /[a-e]at/;\ncatStr.match(bgRegex); // Returns ["cat"]\nbatStr.match(bgRegex); // Returns ["bat"]\nmatStr.match(bgRegex); // Returns null\n')),Object(s.mdx)("hr",null),Object(s.mdx)("p",null,"Faites correspondre toutes les lettres de la cha\xeene ",Object(s.mdx)("inlineCode",{parentName:"p"},"quoteSample"),".\n",Object(s.mdx)("strong",{parentName:"p"},"Remarque :")," Assurez-vous de faire correspondre les lettres majuscules et minuscules."),Object(s.mdx)("blockquote",null,Object(s.mdx)("p",{parentName:"blockquote"},"Votre regex ",Object(s.mdx)("inlineCode",{parentName:"p"},"alphabetRegex")," doit correspondre \xe0 35 \xe9l\xe9ments.\nVotre regex ",Object(s.mdx)("inlineCode",{parentName:"p"},"alphabetRegex")," doit utiliser l'indicateur global.\nVotre regex ",Object(s.mdx)("inlineCode",{parentName:"p"},"alphabetRegex")," doit utiliser l'indicateur insensible \xe0 la casse.")),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let quoteSample = "The quick brown fox jumps over the lazy dog.";\nlet alphabetRegex = /change/; // Change this line\nlet result = alphabetRegex; // Change this line\n')),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"let quoteSample = \"The quick brown fox jumps over the lazy dog.\";\nlet alphabetRegex = /[a-z]/gi;\nlet result = quoteSample.match(alphabetRegex);\nconsole.log(result); // [ 'T', 'h', 'e', 'q', 'u', 'i', 'c', 'k', 'b', 'r', 'o', 'w', 'n', 'f', 'o', 'x', 'j', 'u', 'm', 'p', 's', 'o', 'v', 'e', 'r', 't', 'h', 'e', 'l', 'a', 'z', 'y', 'd', 'o', 'g' ]\n")),Object(s.mdx)("hr",null),Object(s.mdx)("h2",{id:"10-faire-correspondre-les-nombres-et-les-lettres-de-lalphabet--"},"10. Faire correspondre les nombres et les lettres de l'alphabet (",Object(s.mdx)("inlineCode",{parentName:"h2"},"-"),")"),Object(s.mdx)("p",null,Object(s.mdx)("a",Object(t.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/match-numbers-and-letters-of-the-alphabet"}),"Learn Regular Expressions: Match Numbers and Letters of the Alphabet | freeCodeCamp.org")),Object(s.mdx)("p",null,"L'utilisation du trait d'union (",Object(s.mdx)("inlineCode",{parentName:"p"},"-"),") pour faire correspondre une plage de  caract\xe8res n'est pas limit\xe9e aux lettres. Il fonctionne \xe9galement pour  correspondre \xe0 une plage de nombres.\nPar exemple, ",Object(s.mdx)("inlineCode",{parentName:"p"},"/[0-5]/")," correspond \xe0 n'importe quel nombre entre ",Object(s.mdx)("inlineCode",{parentName:"p"},"0")," et ",Object(s.mdx)("inlineCode",{parentName:"p"},"5"),", y compris le ",Object(s.mdx)("inlineCode",{parentName:"p"},"0")," et le ",Object(s.mdx)("inlineCode",{parentName:"p"},"5"),".\nEn outre, il est possible de combiner une plage de lettres et de chiffres dans un seul jeu de caract\xe8res."),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let jennyStr = "Jenny8675309";\nlet myRegex = /[a-z0-9]/ig;\n// matches all letters and numbers in jennyStr\njennyStr.match(myRegex);\n')),Object(s.mdx)("hr",null),Object(s.mdx)("p",null,"Cr\xe9ez une seule expression r\xe9guli\xe8re qui correspond \xe0 une plage de lettres entre ",Object(s.mdx)("inlineCode",{parentName:"p"},"h")," et ",Object(s.mdx)("inlineCode",{parentName:"p"},"s"),", et une plage de nombres entre ",Object(s.mdx)("inlineCode",{parentName:"p"},"2")," et ",Object(s.mdx)("inlineCode",{parentName:"p"},"6"),". N'oubliez pas  d'inclure les indicateurs appropri\xe9s dans l'expression r\xe9guli\xe8re."),Object(s.mdx)("blockquote",null,Object(s.mdx)("p",{parentName:"blockquote"},"Votre regex ",Object(s.mdx)("inlineCode",{parentName:"p"},"myRegex")," doit correspondre \xe0 17 \xe9l\xe9ments.\nVotre regex ",Object(s.mdx)("inlineCode",{parentName:"p"},"myRegex")," doit utiliser l'indicateur global.\nVotre regex ",Object(s.mdx)("inlineCode",{parentName:"p"},"myRegex")," doit utiliser l'indicateur insensible \xe0 la casse.")),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let quoteSample = "Blueberry 3.141592653s are delicious.";\nlet myRegex = /change/; // Change this line\nlet result = myRegex; // Change this line\n')),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"let quoteSample = \"Blueberry 3.141592653s are delicious.\";\nlet myRegex = /[h-s2-6]/gi;\nlet result = quoteSample.match(myRegex);\nconsole.log(result); // [ 'l', 'r', 'r', '3', '4', '5', '2', '6', '5', '3', 's', 'r', 'l', 'i', 'i', 'o', 's' ]\n")),Object(s.mdx)("hr",null),Object(s.mdx)("h2",{id:"11-faire-correspondre-les-caract\xe8res-uniques-non-sp\xe9cifi\xe9s--"},"11. Faire correspondre les caract\xe8res uniques non sp\xe9cifi\xe9s (",Object(s.mdx)("inlineCode",{parentName:"h2"},"[^ ]"),")"),Object(s.mdx)("p",null,Object(s.mdx)("a",Object(t.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/match-single-characters-not-specified"}),"Learn Regular Expressions: Match Single Characters Not Specified | freeCodeCamp.org")),Object(s.mdx)("p",null,"Jusqu'\xe0 pr\xe9sent, vous avez cr\xe9\xe9 un ensemble de caract\xe8res que vous  souhaitez associer, mais vous pouvez \xe9galement cr\xe9er un ensemble de  caract\xe8res que vous ne souhaitez pas associer. Ces types de jeux de  caract\xe8res sont appel\xe9s jeux de ",Object(s.mdx)("em",{parentName:"p"},"caract\xe8re invers\xe9"),".\nPour cr\xe9er  un jeu de caract\xe8res invers\xe9, vous placez un caract\xe8re curseur (",Object(s.mdx)("inlineCode",{parentName:"p"},"^"),") apr\xe8s  le crochet ouvrant et avant les caract\xe8res que vous ne souhaitez pas  faire correspondre.\nPar exemple, ",Object(s.mdx)("inlineCode",{parentName:"p"},"/[^aeiou]/gi")," correspond \xe0  tous les caract\xe8res qui ne sont pas une voyelle. Notez que les  caract\xe8res comme ",Object(s.mdx)("inlineCode",{parentName:"p"},"."),", ",Object(s.mdx)("inlineCode",{parentName:"p"},"!"),", ",Object(s.mdx)("inlineCode",{parentName:"p"},"["),", ",Object(s.mdx)("inlineCode",{parentName:"p"},"@"),", ",Object(s.mdx)("inlineCode",{parentName:"p"},"/"),"  et les espaces blancs sont mis en  correspondance - le jeu de caract\xe8res de voyelle invers\xe9e exclut  uniquement les caract\xe8res de voyelle."),Object(s.mdx)("hr",null),Object(s.mdx)("p",null,"Cr\xe9ez une seule expression  r\xe9guli\xe8re qui correspond \xe0 tous les caract\xe8res qui ne sont pas un nombre ou une voyelle. N'oubliez pas d'inclure les indicateurs appropri\xe9s dans l'expression r\xe9guli\xe8re."),Object(s.mdx)("blockquote",null,Object(s.mdx)("p",{parentName:"blockquote"},"Votre regex ",Object(s.mdx)("inlineCode",{parentName:"p"},"myRegex")," doit correspondre \xe0 9 \xe9l\xe9ments.\nVotre regex ",Object(s.mdx)("inlineCode",{parentName:"p"},"myRegex")," doit utiliser l'indicateur global.\nVotre regex ",Object(s.mdx)("inlineCode",{parentName:"p"},"myRegex")," doit utiliser l'indicateur insensible \xe0 la casse.")),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let quoteSample = "3 blind mice.";\nlet myRegex = /change/; // Change this line\nlet result = myRegex; // Change this line\n')),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"let quoteSample = \"3 blind mice.\";\nlet myRegex = /[^0-9aeiou]/gi;\nlet result = quoteSample.match(myRegex);\nconsole.log(result); // [ ' ', 'b', 'l', 'n', 'd', ' ', 'm', 'c', '.' ]\n")),Object(s.mdx)("hr",null),Object(s.mdx)("h2",{id:"12-faire-correspondre-les-caract\xe8res-qui-apparaissent-une-ou-plusieurs-fois-"},"12. Faire correspondre les caract\xe8res qui apparaissent une ou plusieurs fois (",Object(s.mdx)("inlineCode",{parentName:"h2"},"+"),")"),Object(s.mdx)("p",null,Object(s.mdx)("a",Object(t.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/match-characters-that-occur-one-or-more-times"}),"Learn Regular Expressions: Match Characters that Occur One or More Times | freeCodeCamp.org")),Object(s.mdx)("p",null,"Parfois, vous devez faire correspondre un caract\xe8re (ou un groupe de caract\xe8res) qui appara\xeet une ou plusieurs fois de suite. Cela signifie qu'il se  produit au moins une fois et peut \xeatre r\xe9p\xe9t\xe9.\nVous pouvez  utiliser le caract\xe8re ",Object(s.mdx)("inlineCode",{parentName:"p"},"+")," pour v\xe9rifier si tel est le cas. N'oubliez pas  que le caract\xe8re ou le motif doit \xeatre pr\xe9sent cons\xe9cutivement.  Autrement dit, le caract\xe8re doit se r\xe9p\xe9ter l'un apr\xe8s l'autre.\nPar exemple, ",Object(s.mdx)("inlineCode",{parentName:"p"},"/a+/g")," trouverait une correspondance dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'"abc"')," et  retournerait ",Object(s.mdx)("inlineCode",{parentName:"p"},'["a"]'),". En raison du ",Object(s.mdx)("inlineCode",{parentName:"p"},"+"),", il trouverait \xe9galement une seule  correspondance dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'"aabc"')," et retournerait ",Object(s.mdx)("inlineCode",{parentName:"p"},'["aa"]'),".\nS'il v\xe9rifiait \xe0 la place la cha\xeene ",Object(s.mdx)("inlineCode",{parentName:"p"},'"abab"'),", il trouverait deux correspondances et  retournerait ",Object(s.mdx)("inlineCode",{parentName:"p"},'["a", "a"]')," parce que les caract\xe8res ",Object(s.mdx)("inlineCode",{parentName:"p"},"a")," ne sont pas dans une  ligne - il y a un ",Object(s.mdx)("inlineCode",{parentName:"p"},"b")," entre eux. Enfin, comme il n'y a pas de ",Object(s.mdx)("inlineCode",{parentName:"p"},'"a"')," dans la  cha\xeene ",Object(s.mdx)("inlineCode",{parentName:"p"},'"bcd"'),", il ne trouverait pas de correspondance."),Object(s.mdx)("hr",null),Object(s.mdx)("p",null,"Vous  souhaitez rechercher des correspondances lorsque la lettre ",Object(s.mdx)("inlineCode",{parentName:"p"},"s")," appara\xeet  une ou plusieurs fois dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Mississippi"'),". \xc9crivez une expression  r\xe9guli\xe8re qui utilise le signe ",Object(s.mdx)("inlineCode",{parentName:"p"},"+"),"."),Object(s.mdx)("blockquote",null,Object(s.mdx)("p",{parentName:"blockquote"},"Votre regex ",Object(s.mdx)("inlineCode",{parentName:"p"},"myRegex")," doit utiliser le signe ",Object(s.mdx)("inlineCode",{parentName:"p"},"+")," pour correspondre \xe0 un ou plusieurs caract\xe8res ",Object(s.mdx)("inlineCode",{parentName:"p"},"s"),".\nVotre regex ",Object(s.mdx)("inlineCode",{parentName:"p"},"myRegex")," doit correspondre \xe0 2 \xe9l\xe9ments.\nLa variable ",Object(s.mdx)("inlineCode",{parentName:"p"},"result")," doit \xeatre un tableau avec deux correspondances de ",Object(s.mdx)("inlineCode",{parentName:"p"},'"ss"'))),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let difficultSpelling = "Mississippi";\nlet myRegex = /change/; // Change this line\nlet result = difficultSpelling.match(myRegex);\n')),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"let difficultSpelling = \"Mississippi\";\nlet myRegex = /s+/g;\nlet result = difficultSpelling.match(myRegex);\nconsole.log(result); // [ 'ss', 'ss' ]\n")),Object(s.mdx)("hr",null),Object(s.mdx)("h2",{id:"13-faire-correspondre-les-caract\xe8res-qui-se-produisent-z\xe9ro-fois-ou-plus-"},"13. Faire correspondre les caract\xe8res qui se produisent z\xe9ro fois ou plus (",Object(s.mdx)("inlineCode",{parentName:"h2"},"*"),")"),Object(s.mdx)("p",null,Object(s.mdx)("a",Object(t.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/match-characters-that-occur-zero-or-more-times"}),"Learn Regular Expressions: Match Characters that Occur Zero or More Times | freeCodeCamp.org")),Object(s.mdx)("p",null,"Le dernier d\xe9fi a utilis\xe9 le signe plus ",Object(s.mdx)("inlineCode",{parentName:"p"},"+")," pour rechercher des caract\xe8res qui se produisent une ou plusieurs fois. Il existe \xe9galement une option qui correspond aux caract\xe8res qui apparaissent z\xe9ro fois ou plus.\nLe caract\xe8re pour cela est l'ast\xe9risque ou l'\xe9toile : ",Object(s.mdx)("inlineCode",{parentName:"p"},"*"),"."),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let soccerWord = "gooooooooal!";\nlet gPhrase = "gut feeling";\nlet oPhrase = "over the moon";\nlet goRegex = /go*/;\nsoccerWord.match(goRegex); // Returns ["goooooooo"]\ngPhrase.match(goRegex); // Returns ["g"]\noPhrase.match(goRegex); // Returns null\n')),Object(s.mdx)("hr",null),Object(s.mdx)("p",null,"Pour ce d\xe9fi, ",Object(s.mdx)("inlineCode",{parentName:"p"},"chewieQuote"),' a \xe9t\xe9 initialis\xe9 en tant que  "Aaaaaaaaaaaaaaaarrrgh!" dans les coulisses. Cr\xe9ez une regex ',Object(s.mdx)("inlineCode",{parentName:"p"},"chewieRegex")," qui utilise le caract\xe8re ",Object(s.mdx)("inlineCode",{parentName:"p"},"*")," pour faire correspondre un caract\xe8re ",Object(s.mdx)("inlineCode",{parentName:"p"},'"A"')," majuscule imm\xe9diatement suivi de z\xe9ro ou plusieurs caract\xe8res ",Object(s.mdx)("inlineCode",{parentName:"p"},'"a"')," minuscules dans ",Object(s.mdx)("inlineCode",{parentName:"p"},"chewieQuote"),". Votre expression r\xe9guli\xe8re n'a pas besoin  d'indicateurs ou de classes de caract\xe8res, et ne doit correspondre \xe0  aucune des autres expressions."),Object(s.mdx)("blockquote",null,Object(s.mdx)("p",{parentName:"blockquote"},"Votre regex ",Object(s.mdx)("inlineCode",{parentName:"p"},"chewieRegex")," doit utiliser le caract\xe8re ",Object(s.mdx)("inlineCode",{parentName:"p"},"*")," pour correspondre \xe0 z\xe9ro ou plusieurs caract\xe8res ",Object(s.mdx)("inlineCode",{parentName:"p"},"a"),".\nVotre regex doit correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"A"')," dans ",Object(s.mdx)("inlineCode",{parentName:"p"},"chewieQuote"),".\nVotre regex doit correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Aaaaaaaaaaaaaaaa"')," dans ",Object(s.mdx)("inlineCode",{parentName:"p"},"chewieQuote"),".\nVotre regex ",Object(s.mdx)("inlineCode",{parentName:"p"},"chewieRegex")," doit correspondre \xe0 16 caract\xe8res dans ",Object(s.mdx)("inlineCode",{parentName:"p"},"chewieQuote"),'.\nVotre regex ne doit correspondre \xe0 aucun caract\xe8re dans "He made a fair move. Screaming about it can\'t help you."\nVotre regex ne doit correspondre \xe0 aucun caract\xe8re dans "Let him have it. It\'s not wise to upset a Wookiee."')),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"// Changer uniquement le code en dessous de cette ligne\nlet chewieRegex = /change/; // Changer cette ligne\n// Ne changez le code qu'au-dessus de cette ligne\nlet result = chewieQuote.match(chewieRegex);\n")),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"let chewieRegex = /Aa*/;\nlet result = chewieQuote.match(chewieRegex);\nconsole.log(result); // [ 'Aaaaaaaaaaaaaaaa', index: 0, input: 'Aaaaaaaaaaaaaaaarrrgh!', groups: undefined ]\n")),Object(s.mdx)("hr",null),Object(s.mdx)("h2",{id:"14-rechercher-des-caract\xe8res-avec-une-correspondance-paresseuse-"},"14. Rechercher des caract\xe8res avec une correspondance paresseuse (",Object(s.mdx)("inlineCode",{parentName:"h2"},"?"),")"),Object(s.mdx)("p",null,Object(s.mdx)("a",Object(t.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/find-characters-with-lazy-matching"}),"Learn Regular Expressions: Find Characters with Lazy Matching | freeCodeCamp.org")),Object(s.mdx)("p",null,"Dans les expressions r\xe9guli\xe8res, une correspondance ",Object(s.mdx)("em",{parentName:"p"},"gourmande")," trouve la  partie la plus longue possible d'une cha\xeene qui correspond au mod\xe8le  regex et la renvoie comme correspondance. L'alternative s'appelle une correspondance ",Object(s.mdx)("em",{parentName:"p"},"paresseuse"),", qui trouve la plus petite partie possible de la cha\xeene qui satisfait le mod\xe8le de regex.\nVous pouvez appliquer  l'expression r\xe9guli\xe8re ",Object(s.mdx)("inlineCode",{parentName:"p"},"/t[a-z]*i/")," \xe0 la cha\xeene ",Object(s.mdx)("inlineCode",{parentName:"p"},'"titanic"'),". Cette  expression r\xe9guli\xe8re est fondamentalement un mod\xe8le qui commence par ",Object(s.mdx)("inlineCode",{parentName:"p"},"t"),",  se termine par ",Object(s.mdx)("inlineCode",{parentName:"p"},"i")," et a quelques lettres entre les deux.\nLes  expressions r\xe9guli\xe8res sont par d\xe9faut gourmandes, donc la  correspondance renverrait ",Object(s.mdx)("inlineCode",{parentName:"p"},'["titani"]'),". Il trouve la plus grande  sous-cha\xeene possible pour s'adapter au mod\xe8le.\nCependant, vous  pouvez utiliser le caract\xe8re ",Object(s.mdx)("inlineCode",{parentName:"p"},"?")," pour le changer en correspondance paresseuse. ",Object(s.mdx)("inlineCode",{parentName:"p"},'"titanic"')," correspond \xe0 l'expression r\xe9guli\xe8re ajust\xe9e de ",Object(s.mdx)("inlineCode",{parentName:"p"},"/t[a-z]*?i/")," renvoie ",Object(s.mdx)("inlineCode",{parentName:"p"},'["ti"]'),".\n",Object(s.mdx)("strong",{parentName:"p"},"Remarque :")," L'analyse HTML avec des expressions r\xe9guli\xe8res doit \xeatre \xe9vit\xe9e, mais la mise en correspondance de mod\xe8les d'une cha\xeene HTML avec des expressions r\xe9guli\xe8res est tout \xe0 fait correcte."),Object(s.mdx)("hr",null),Object(s.mdx)("p",null,"Corrigez l'expression r\xe9guli\xe8re ",Object(s.mdx)("inlineCode",{parentName:"p"},"/<.*>/")," pour  renvoyer la balise HTML ",Object(s.mdx)("inlineCode",{parentName:"p"},"<h1>"),"et non le texte",Object(s.mdx)("inlineCode",{parentName:"p"},'"<h1>Winter is coming</h1>"'),". Souvenez-vous du joker ",Object(s.mdx)("inlineCode",{parentName:"p"},".")," dans une expression r\xe9guli\xe8re qui correspond \xe0  n'importe quel caract\xe8re."),Object(s.mdx)("blockquote",null,Object(s.mdx)("p",{parentName:"blockquote"},"La variable ",Object(s.mdx)("inlineCode",{parentName:"p"},"result")," doit \xeatre un tableau contenant ",Object(s.mdx)("inlineCode",{parentName:"p"},"<h1>"),"\n",Object(s.mdx)("inlineCode",{parentName:"p"},"myRegex")," devrait utiliser la correspondance paresseuse\n",Object(s.mdx)("inlineCode",{parentName:"p"},"myRegex")," ne doit pas inclure la cha\xeene ",Object(s.mdx)("inlineCode",{parentName:"p"},"'h1'"))),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let text = "<h1>Winter is coming</h1>";\nlet myRegex = /<.*>/; // Change this line\nlet result = text.match(myRegex);\n')),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"let text = \"<h1>Winter is coming</h1>\";\nlet myRegex = /<.*?>/;\nlet result = text.match(myRegex);\nconsole.log(result); // [ '<h1>', index: 0, input: '<h1>Winter is coming</h1>', groups: undefined ]\n")),Object(s.mdx)("hr",null),Object(s.mdx)("h2",{id:"15-trouver-un-ou-plusieurs-criminels-dans-une-chasse-z"},"15. Trouver un ou plusieurs criminels dans une chasse (",Object(s.mdx)("inlineCode",{parentName:"h2"},"/z+/"),")"),Object(s.mdx)("p",null,Object(s.mdx)("a",Object(t.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/find-one-or-more-criminals-in-a-hunt"}),"Learn Regular Expressions: Find One or More Criminals in a Hunt | freeCodeCamp.org")),Object(s.mdx)("p",null,"Il est temps de faire une pause et de tester vos nouvelles comp\xe9tences  en \xe9criture regex. Un groupe de criminels s'est \xe9chapp\xe9 de prison et  s'est enfui, mais vous ne savez pas combien. Cependant, vous savez  qu'ils restent proches les uns des autres lorsqu'ils sont autour  d'autres personnes. Vous \xeates responsable de trouver tous les criminels \xe0 la fois.\nVoici un exemple pour d\xe9couvrir comment proc\xe9der :\nL'expression r\xe9guli\xe8re ",Object(s.mdx)("inlineCode",{parentName:"p"},"/z+/")," correspond \xe0 la lettre ",Object(s.mdx)("inlineCode",{parentName:"p"},"z")," lorsqu'elle appara\xeet une ou  plusieurs fois de suite. Il trouverait des correspondances dans toutes  les cha\xeenes suivantes :"),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'"z"\n"zzzzzz"\n"ABCzzzz"\n"zzzzABC"\n"abczzzzzzzzzzzzzzzzzzzzzabc"\n')),Object(s.mdx)("p",null,"Mais il ne trouve pas de correspondance dans les cha\xeenes suivantes car il n'y a pas de caract\xe8res de la lettre ",Object(s.mdx)("inlineCode",{parentName:"p"},"z")," :"),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'""\n"ABC"\n"abcabc"\n')),Object(s.mdx)("hr",null),Object(s.mdx)("p",null,"\xc9crivez une expression r\xe9guli\xe8re gourmande qui trouve un ou plusieurs criminels au sein d'un groupe d'autres personnes. Un criminel est repr\xe9sent\xe9 par  la lettre majuscule ",Object(s.mdx)("inlineCode",{parentName:"p"},"C"),"."),Object(s.mdx)("blockquote",null,Object(s.mdx)("p",{parentName:"blockquote"},"Votre expression r\xe9guli\xe8re doit correspondre \xe0 un criminel (",Object(s.mdx)("inlineCode",{parentName:"p"},"C"),") dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'"C"'),"\nVotre regex doit correspondre \xe0 deux criminels (",Object(s.mdx)("inlineCode",{parentName:"p"},"CC"),") dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'"CC"'),"\nVotre regex doit correspondre \xe0 trois criminels (",Object(s.mdx)("inlineCode",{parentName:"p"},"CCC"),") dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'"P1P5P4CCCP2P6P3"'),"\nVotre regex doit correspondre \xe0 cinq criminels (",Object(s.mdx)("inlineCode",{parentName:"p"},"CCCCC"),") dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'"P6P2P7P4P5CCCCCP3P1"'),"\nVotre regex ne doit correspondre \xe0 aucun criminel dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'""'),"\nVotre regex ne doit correspondre \xe0 aucun criminel dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'"P1P2P3"'),"\nVotre regex doit correspondre \xe0 cinquante criminels  (",Object(s.mdx)("inlineCode",{parentName:"p"},"CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC"),") dans  ",Object(s.mdx)("inlineCode",{parentName:"p"},'"P2P1P5P4CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCP3"'),".")),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"let reCriminals = /./; // Change this line\n")),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"let reCriminals = /C+/g;\nconsole.log('C'.match(reCriminals)); // [ 'C' ]\nconsole.log('CC'.match(reCriminals)); // [ 'CC' ]\nconsole.log('P1P5P4CCCP2P6P3'.match(reCriminals)); // [ 'CCC' ]\nconsole.log(''.match(reCriminals)); // null\nconsole.log('P1P2P3'.match(reCriminals)); // null\nconsole.log('P2P1P5P4CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCP3'.match(reCriminals));\n// [ 'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC' ]\n")),Object(s.mdx)("hr",null),Object(s.mdx)("h2",{id:"16-faire-correspondre-les-mod\xe8les-en-d\xe9but-de-cha\xeene-"},"16. Faire correspondre les mod\xe8les en d\xe9but de cha\xeene (",Object(s.mdx)("inlineCode",{parentName:"h2"},"/^/"),")"),Object(s.mdx)("p",null,Object(s.mdx)("a",Object(t.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/match-beginning-string-patterns"}),"Learn Regular Expressions: Match Beginning String Patterns | freeCodeCamp.org")),Object(s.mdx)("p",null,"Les d\xe9fis pr\xe9c\xe9dents ont montr\xe9 que les expressions r\xe9guli\xe8res peuvent  \xeatre utilis\xe9es pour rechercher un certain nombre de correspondances. Ils sont \xe9galement utilis\xe9s pour rechercher des mod\xe8les \xe0 des positions  sp\xe9cifiques dans les cha\xeenes.\nDans un d\xe9fi pr\xe9c\xe9dent, vous avez  utilis\xe9 le caract\xe8re caret (",Object(s.mdx)("inlineCode",{parentName:"p"},"^"),") dans un jeu de caract\xe8res pour cr\xe9er un  jeu de caract\xe8res invers\xe9 sous la forme ",Object(s.mdx)("inlineCode",{parentName:"p"},"[^thingsThatWillNotBeMatched]"),".  En dehors d'un jeu de caract\xe8res, le signe d'insertion est utilis\xe9 pour  rechercher des mod\xe8les au d\xe9but des cha\xeenes."),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let firstString = "Ricky is first and can be found.";\nlet firstRegex = /^Ricky/;\nfirstRegex.test(firstString);\n// Returns true\nlet notFirst = "You can\'t find Ricky now.";\nfirstRegex.test(notFirst);\n// Returns false\n')),Object(s.mdx)("hr",null),Object(s.mdx)("p",null,"Utilisez le caract\xe8re caret dans une expression r\xe9guli\xe8re pour trouver ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Cal"')," uniquement au d\xe9but de la cha\xeene ",Object(s.mdx)("inlineCode",{parentName:"p"},"rickyAndCal"),"."),Object(s.mdx)("blockquote",null,Object(s.mdx)("p",{parentName:"blockquote"},"Votre regex doit rechercher ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Cal"')," avec une majuscule.\nVotre regex ne doit utiliser aucun indicateur.\nVotre regex doit correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Cal"')," au d\xe9but de la cha\xeene.\nVotre regex ne doit pas correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Cal"')," au milieu d'une cha\xeene.")),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let rickyAndCal = "Cal and Ricky both like racing.";\nlet calRegex = /change/; // Change this line\nlet result = calRegex.test(rickyAndCal);\n')),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let rickyAndCal = "Cal and Ricky both like racing.";\nlet calRegex = /^Cal/;\nlet result = calRegex.test(rickyAndCal);\nconsole.log(result); // true\n')),Object(s.mdx)("hr",null),Object(s.mdx)("h2",{id:"17-faire-correspondre-les-mod\xe8les-en-fin-de-cha\xeene-"},"17. Faire correspondre les mod\xe8les en fin de cha\xeene (",Object(s.mdx)("inlineCode",{parentName:"h2"},"$"),")"),Object(s.mdx)("p",null,Object(s.mdx)("a",Object(t.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/match-ending-string-patterns"}),"Learn Regular Expressions: Match Ending String Patterns | freeCodeCamp.org")),Object(s.mdx)("p",null,"Dans le dernier d\xe9fi, vous avez appris \xe0 utiliser le caract\xe8re caret  pour rechercher des motifs au d\xe9but des cha\xeenes. Il existe \xe9galement un  moyen de rechercher des mod\xe8les \xe0 la fin des cha\xeenes.\nVous pouvez rechercher la fin des cha\xeenes en utilisant le caract\xe8re de signe dollar ",Object(s.mdx)("inlineCode",{parentName:"p"},"$")," \xe0 la fin de l'expression r\xe9guli\xe8re."),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let theEnding = "This is a never ending story";\nlet storyRegex = /story$/;\nstoryRegex.test(theEnding);\n// Returns true\nlet noEnding = "Sometimes a story will have to end";\nstoryRegex.test(noEnding);\n// Returns false\n')),Object(s.mdx)("hr",null),Object(s.mdx)("p",null,"Utilisez le caract\xe8re d'ancrage (",Object(s.mdx)("inlineCode",{parentName:"p"},"$"),") pour faire correspondre la cha\xeene ",Object(s.mdx)("inlineCode",{parentName:"p"},'"caboose"')," \xe0 la fin de la cha\xeene ",Object(s.mdx)("inlineCode",{parentName:"p"},"caboose"),"."),Object(s.mdx)("blockquote",null,Object(s.mdx)("p",{parentName:"blockquote"},"Vous devez rechercher ",Object(s.mdx)("inlineCode",{parentName:"p"},'"caboose"')," avec le signe d'ancrage dollar ",Object(s.mdx)("inlineCode",{parentName:"p"},"$")," dans votre regex.\nVotre regex ne doit utiliser aucun indicateur.\nVous devez faire correspondre ",Object(s.mdx)("inlineCode",{parentName:"p"},'"caboose"')," \xe0 la fin de la cha\xeene ",Object(s.mdx)("inlineCode",{parentName:"p"},'"La derni\xe8re voiture d\'un train est le caboose"'))),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let caboose = "The last car on a train is the caboose";\nlet lastRegex = /change/; // Change this line\nlet result = lastRegex.test(caboose);\n')),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let caboose = "The last car on a train is the caboose";\nlet lastRegex = /caboose$/;\nlet result = lastRegex.test(caboose);\nconsole.log(result); //true\n')),Object(s.mdx)("hr",null),Object(s.mdx)("h2",{id:"18-faire-correspondre-toutes-les-lettres-et-tous-les-nombres-w"},"18. Faire correspondre toutes les lettres et tous les nombres (",Object(s.mdx)("inlineCode",{parentName:"h2"},"\\w"),")"),Object(s.mdx)("p",null,Object(s.mdx)("a",Object(t.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/match-all-letters-and-numbers"}),"Learn Regular Expressions: Match All Letters and Numbers | freeCodeCamp.org")),Object(s.mdx)("p",null,"En utilisant des classes de caract\xe8res, vous avez pu rechercher toutes  les lettres de l'alphabet avec ",Object(s.mdx)("inlineCode",{parentName:"p"},"[a-z]"),". Ce type de classe de caract\xe8res  est assez courant pour qu'il y ait un raccourci pour cela, bien qu'il  comprenne \xe9galement quelques caract\xe8res suppl\xe9mentaires.\nLa  classe de caract\xe8res JavaScript pour faire correspondre l'alphabet est ",Object(s.mdx)("inlineCode",{parentName:"p"},"\\w"),".  Ce raccourci est \xe9gal \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},"[A-Za-z0-9_]"),". Cette classe de caract\xe8res  correspond aux lettres majuscules et minuscules ainsi qu'aux chiffres.  Notez que cette classe de caract\xe8res comprend \xe9galement le caract\xe8re de  soulignement (",Object(s.mdx)("inlineCode",{parentName:"p"},"_"),")."),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let longHand = /[A-Za-z0-9_]+/;\nlet shortHand = /\\w+/;\nlet numbers = "42";\nlet varNames = "important_var";\nlongHand.test(numbers); // Returns true\nshortHand.test(numbers); // Returns true\nlongHand.test(varNames); // Returns true\nshortHand.test(varNames); // Returns true\n')),Object(s.mdx)("p",null,"Ces classes de caract\xe8res de raccourci sont \xe9galement appel\xe9es ",Object(s.mdx)("em",{parentName:"p"},"classes de caract\xe8re abr\xe9g\xe9"),"."),Object(s.mdx)("hr",null),Object(s.mdx)("p",null,"Utilisez la classe de caract\xe8re abr\xe9g\xe9 ",Object(s.mdx)("inlineCode",{parentName:"p"},"\\w")," pour compter le nombre de caract\xe8res alphanum\xe9riques entre guillemets et cha\xeenes."),Object(s.mdx)("blockquote",null,Object(s.mdx)("p",{parentName:"blockquote"},"Votre regex doit utiliser l'indicateur global.\nVotre expression r\xe9guli\xe8re doit utiliser le caract\xe8re abr\xe9g\xe9 ",Object(s.mdx)("inlineCode",{parentName:"p"},"\\w")," pour correspondre \xe0 tous les caract\xe8res alphanum\xe9riques.\nVotre regex devrait trouver 31 caract\xe8res alphanum\xe9riques dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'"The five boxing wizards jump quickly."'),"\nVotre regex devrait trouver 32 caract\xe8res alphanum\xe9riques dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Pack my box with five dozen liquor jugs."'),"\nVotre regex devrait trouver 30 caract\xe8res alphanum\xe9riques dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'"How vexingly quick daft zebras jump!"'),"\nVotre regex devrait trouver 36 caract\xe8res alphanum\xe9riques dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'"123 456 7890 ABC def GHI jkl MNO pqr STU vwx YZ."'))),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let quoteSample = "The five boxing wizards jump quickly.";\nlet alphabetRegexV2 = /change/; // Change this line\nlet result = quoteSample.match(alphabetRegexV2).length;\n')),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"let quoteSample = \"The five boxing wizards jump quickly.\";\nlet alphabetRegexV2 = /\\w/g;\nlet result = quoteSample.match(alphabetRegexV2).length;\nconsole.log(result); // 31\nconsole.log('Pack my box with five dozen liquor jugs.'.match(alphabetRegexV2).length); // 32\nconsole.log('How vexingly quick daft zebras jump!'.match(alphabetRegexV2).length); // 30\nconsole.log('123 456 7890 ABC def GHI jkl MNO pqr STU vwx YZ.'.match(alphabetRegexV2).length); // 36\n")),Object(s.mdx)("hr",null),Object(s.mdx)("h2",{id:"19-faites-correspondre-tout-sauf-les-lettres-et-les-chiffres-w"},"19. Faites correspondre tout sauf les lettres et les chiffres (\\W)"),Object(s.mdx)("p",null,Object(s.mdx)("a",Object(t.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/match-everything-but-letters-and-numbers"}),"Learn Regular Expressions: Match Everything But Letters and Numbers | freeCodeCamp.org")),Object(s.mdx)("p",null,"Vous avez appris que vous pouvez utiliser un raccourci pour faire  correspondre les caract\xe8res alphanum\xe9riques ",Object(s.mdx)("inlineCode",{parentName:"p"},"[A-Za-z0-9_]")," en utilisant ",Object(s.mdx)("inlineCode",{parentName:"p"},"\\w"),". Un motif naturel que vous voudrez peut-\xeatre rechercher est le  contraire des alphanum\xe9riques.\nVous pouvez rechercher l'oppos\xe9 de ",Object(s.mdx)("inlineCode",{parentName:"p"},"\\w")," avec ",Object(s.mdx)("inlineCode",{parentName:"p"},"\\W"),". Notez que le mod\xe8le oppos\xe9 utilise une lettre  majuscule. Ce raccourci est le m\xeame que ",Object(s.mdx)("inlineCode",{parentName:"p"},"[^A-Za-z0-9_]"),"."),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let shortHand = /\\W/;\nlet numbers = "42%";\nlet sentence = "Coding!";\nnumbers.match(shortHand); // Returns ["%"]\nsentence.match(shortHand); // Returns ["!"]\n')),Object(s.mdx)("hr",null),Object(s.mdx)("p",null,"Utilisez la classe de caract\xe8res abr\xe9g\xe9s ",Object(s.mdx)("inlineCode",{parentName:"p"},"\\W")," pour compter le nombre de  caract\xe8res non alphanum\xe9riques entre guillemets et cha\xeenes."),Object(s.mdx)("blockquote",null,Object(s.mdx)("p",{parentName:"blockquote"},"Votre regex doit utiliser l'indicateur global.\nVotre regex devrait trouver 6 caract\xe8res non alphanum\xe9riques dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'"The five boxing wizards jump quickly."'),".\nVotre expression r\xe9guli\xe8re doit utiliser le caract\xe8re abr\xe9g\xe9 pour faire  correspondre les caract\xe8res qui ne sont pas alphanum\xe9riques.\nVotre regex devrait trouver 8 caract\xe8res non alphanum\xe9riques dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Pack my box with five dozen liquor jugs."'),"\nVotre regex devrait trouver 6 caract\xe8res non alphanum\xe9riques dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'"How vexingly quick daft zebras jump!"'),"\nVotre expression r\xe9guli\xe8re devrait trouver 12 caract\xe8res non alphanum\xe9riques  dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'"123 456 7890 ABC def GHI jkl MNO pqr STU vwx YZ."'))),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let quoteSample = "The five boxing wizards jump quickly.";\nlet nonAlphabetRegex = /change/; // Change this line\nlet result = quoteSample.match(nonAlphabetRegex).length;\n')),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"let quoteSample = \"The five boxing wizards jump quickly.\";\nlet nonAlphabetRegex = /\\W/g;\nlet result = quoteSample.match(nonAlphabetRegex).length;\nconsole.log(result); // 6\nconsole.log('Pack my box with five dozen liquor jugs.'.match(nonAlphabetRegex).length); // 8\nconsole.log('How vexingly quick daft zebras jump!'.match(nonAlphabetRegex).length); // 6\nconsole.log('123 456 7890 ABC def GHI jkl MNO pqr STU vwx YZ.'.match(nonAlphabetRegex).length); // 12\n")),Object(s.mdx)("hr",null),Object(s.mdx)("h2",{id:"20-faire-correspondre-tous-les-nombres-d"},"20. Faire correspondre tous les nombres (",Object(s.mdx)("inlineCode",{parentName:"h2"},"\\d"),")"),Object(s.mdx)("p",null,Object(s.mdx)("a",Object(t.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/match-all-numbers"}),"Learn Regular Expressions: Match All Numbers | freeCodeCamp.org")),Object(s.mdx)("p",null,"Vous avez appris des raccourcis pour les mod\xe8les de cha\xeene courants tels que les alphanum\xe9riques. Un autre mod\xe8le courant consiste \xe0 rechercher  uniquement des chiffres ou des nombres.\nLe raccourci pour  rechercher des caract\xe8res num\xe9riques est ",Object(s.mdx)("inlineCode",{parentName:"p"},"\\d"),", avec un ",Object(s.mdx)("inlineCode",{parentName:"p"},"d")," minuscule. Ceci est \xe9gal \xe0 la classe de caract\xe8res ",Object(s.mdx)("inlineCode",{parentName:"p"},"[0-9]"),", qui recherche un seul  caract\xe8re de n'importe quel nombre entre z\xe9ro et neuf."),Object(s.mdx)("hr",null),Object(s.mdx)("p",null,"Utilisez  la classe de caract\xe8res abr\xe9g\xe9s ",Object(s.mdx)("inlineCode",{parentName:"p"},"\\d"),' pour compter le nombre de chiffres  dans les titres de films. Les nombres \xe9crits ("six" au lieu de 6) ne  comptent pas.'),Object(s.mdx)("blockquote",null,Object(s.mdx)("p",{parentName:"blockquote"},"Votre regex doit utiliser le caract\xe8re de raccourci pour faire correspondre les caract\xe8res num\xe9riques\nVotre regex doit utiliser l'indicateur global.\nVotre regex devrait trouver 1 chiffre dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'"9"'),".\nVotre regex devrait trouver 2 chiffres dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Catch 22"'),".\nVotre regex devrait trouver 3 chiffres dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'"101 Dalmatiens"'),".\nVotre regex ne devrait trouver aucun chiffre dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Un, Deux, Trois"'),".\nVotre regex devrait trouver 2 chiffres dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'"21 Jump Street"'),".\nVotre regex devrait trouver 4 chiffres dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'"2001: A Space Odyssey"'),".")),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let movieName = "2001: A Space Odyssey";\nlet numRegex = /change/; // Change this line\nlet result = movieName.match(numRegex).length;\n')),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"let movieName = \"2001: A Space Odyssey\";\nlet numRegex = /\\d/g;\nlet result = movieName.match(numRegex).length;\nconsole.log(result); // 4\nconsole.log('9'.match(numRegex).length); // 1\nconsole.log('Catch 22'.match(numRegex).length); // 2\nconsole.log('101 Dalmatiens'.match(numRegex).length); // 3\nconsole.log('Un, Deux, Trois'.match(numRegex).length); // TypeError: can't access property \"length\", \"Un, Deux, Trois\".match(...) is null\nconsole.log('21 Jump Street'.match(numRegex).length); // 2\n")),Object(s.mdx)("hr",null),Object(s.mdx)("h2",{id:"21-faire-correspondre-tous-les-non-nombres-d"},"21. Faire correspondre tous les non-nombres (\\D)"),Object(s.mdx)("p",null,Object(s.mdx)("a",Object(t.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/match-all-non-numbers"}),"Learn Regular Expressions: Match All Non-Numbers | freeCodeCamp.org")),Object(s.mdx)("p",null,"Le dernier d\xe9fi a montr\xe9 comment rechercher des chiffres en utilisant le raccourci ",Object(s.mdx)("inlineCode",{parentName:"p"},"\\d")," avec un ",Object(s.mdx)("inlineCode",{parentName:"p"},"d")," minuscule. Vous pouvez \xe9galement rechercher  des non-chiffres en utilisant un raccourci similaire qui utilise un ",Object(s.mdx)("inlineCode",{parentName:"p"},"D")," majuscule \xe0 la place.\nLe raccourci pour rechercher des caract\xe8res non num\xe9riques est ",Object(s.mdx)("inlineCode",{parentName:"p"},"\\D"),". Ceci est \xe9gal \xe0 la classe de caract\xe8res ",Object(s.mdx)("inlineCode",{parentName:"p"},"[^0-9]"),", qui recherche un seul caract\xe8re qui n'est pas un nombre entre z\xe9ro et neuf."),Object(s.mdx)("hr",null),Object(s.mdx)("p",null,"Utilisez la classe de caract\xe8res abr\xe9g\xe9s pour les  non-chiffres ",Object(s.mdx)("inlineCode",{parentName:"p"},"\\D")," pour compter le nombre de non-chiffres dans les titres de films."),Object(s.mdx)("blockquote",null,Object(s.mdx)("p",{parentName:"blockquote"},"Votre expression r\xe9guli\xe8re doit utiliser le caract\xe8re de raccourci pour faire correspondre les caract\xe8res non num\xe9riques.\nVotre regex doit utiliser l'indicateur global.\nVotre regex ne devrait trouver aucun autre chiffre dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'"9"'),".\nVotre regex devrait trouver 6 non-chiffres dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Catch 22"'),".\nVotre regex devrait trouver 11 non-chiffres dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'"101 Dalmatiens"'),".\nVotre regex devrait trouver 15 non-chiffres dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Un, Deux, Trois"'),".\nVotre regex devrait trouver 12 non-chiffres dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'"21 Jump Street"'),".\nVotre regex devrait trouver 17 non-chiffres dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'"2001: A Space Odyssey"'),".")),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let movieName = "2001: A Space Odyssey";\nlet noNumRegex = /change/; // Change this line\nlet result = movieName.match(noNumRegex).length;\n')),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"let movieName = \"2001: A Space Odyssey\";\nlet noNumRegex = /\\D/g;\nlet result = movieName.match(noNumRegex).length;\nconsole.log(result); //17\nconsole.log('9'.match(noNumRegex).length); // TypeError: can't access property \"length\", \"9\".match(...) is null\nconsole.log('Catch 22'.match(noNumRegex).length); // 6\nconsole.log('101 Dalmatiens'.match(noNumRegex).length); // 11\nconsole.log('Un, Deux, Trois'.match(noNumRegex).length); // 15\nconsole.log('21 Jump Street'.match(noNumRegex).length); // 12\n")),Object(s.mdx)("hr",null),Object(s.mdx)("h2",{id:"22-restreindre-les-noms-dutilisateurs-possibles"},"22. Restreindre les noms d'utilisateurs possibles"),Object(s.mdx)("p",null,Object(s.mdx)("a",Object(t.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/restrict-possible-usernames"}),"Learn Regular Expressions: Restrict Possible Usernames | freeCodeCamp.org")),Object(s.mdx)("p",null,"Les noms d'utilisateur sont utilis\xe9s partout sur Internet. Ce sont eux  qui donnent aux utilisateurs une identit\xe9 unique sur leurs sites  pr\xe9f\xe9r\xe9s.\nVous devez v\xe9rifier tous les noms d'utilisateur dans  une base de donn\xe9es. Voici quelques r\xe8gles simples que les utilisateurs  doivent suivre lors de la cr\xe9ation de leur nom d'utilisateur.\n1) Les noms d'utilisateur ne peuvent utiliser que des caract\xe8res alphanum\xe9riques.\n2) Les seuls chiffres du nom d'utilisateur doivent \xeatre \xe0 la fin. Il peut y en avoir z\xe9ro ou plus \xe0 la fin. Le nom d'utilisateur ne peut pas commencer par un num\xe9ro.\n3) Les lettres du nom d'utilisateur peuvent \xeatre en minuscules et en majuscules.\n4) Les noms d'utilisateur doivent comporter au moins deux caract\xe8res. Un  nom d'utilisateur \xe0 deux caract\xe8res ne peut utiliser que des lettres de  l'alphabet comme caract\xe8res."),Object(s.mdx)("hr",null),Object(s.mdx)("p",null,"Modifiez le ",Object(s.mdx)("inlineCode",{parentName:"p"},"userCheck")," de l'expression r\xe9guli\xe8re pour l'adapter aux contraintes r\xe9pertori\xe9es ci-dessus."),Object(s.mdx)("blockquote",null,Object(s.mdx)("p",{parentName:"blockquote"},"Votre expression r\xe9guli\xe8re doit correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},"JACK"),"\nVotre regex ne doit pas correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},"J"),"\nVotre regex doit correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},"Jo"),"\nVotre regex doit correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},"Oceans11"),"\nVotre regex doit correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},"RegexGuru"),"\nVotre regex ne doit pas correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},"007"),"\nVotre regex ne doit pas correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},"9"),"\nVotre regex ne doit pas correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},"A1"),"\nVotre regex ne doit pas correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},"BadUs3rnam3"),"\nVotre regex doit correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},"Z97"),"\nVotre regex ne doit pas correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},"c57bT3"))),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let username = "JackOfAllTrades";\nlet userCheck = /change/; // Change this line\nlet result = userCheck.test(username);\n')),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"let username = \"JackOfAllTrades\";\nlet userCheck = /^[a-z][a-z]+\\d*$|^[a-z]\\d\\d+$/i;\nlet result = userCheck.test(username);\nconsole.log(result); // true\nconsole.log(userCheck.test('JACK')); // true\nconsole.log(userCheck.test('J')); // false\nconsole.log(userCheck.test('Jo')); // true\nconsole.log(userCheck.test('Oceans11')); // true\nconsole.log(userCheck.test('RegexGuru')); //true\nconsole.log(userCheck.test('007')); //false\nconsole.log(userCheck.test('9')); // false\nconsole.log(userCheck.test('A1')); // false\nconsole.log(userCheck.test('BadUs3rnam3')); // false\nconsole.log(userCheck.test('Z97')); // true\nconsole.log(userCheck.test('c57bT3')); // false\n")),Object(s.mdx)("p",null,Object(s.mdx)("strong",{parentName:"p"},"Explication du code")),Object(s.mdx)("ol",null,Object(s.mdx)("li",{parentName:"ol"},Object(s.mdx)("inlineCode",{parentName:"li"},"^")," - d\xe9but de l'entr\xe9e"),Object(s.mdx)("li",{parentName:"ol"},Object(s.mdx)("inlineCode",{parentName:"li"},"[a-z]")," - le premier caract\xe8re est une lettre"),Object(s.mdx)("li",{parentName:"ol"},Object(s.mdx)("inlineCode",{parentName:"li"},"[a-z]+")," - les caract\xe8res suivants sont des lettres"),Object(s.mdx)("li",{parentName:"ol"},Object(s.mdx)("inlineCode",{parentName:"li"},"\\d*$")," - l'entr\xe9e se termine par 0 ou plus de chiffres"),Object(s.mdx)("li",{parentName:"ol"},Object(s.mdx)("inlineCode",{parentName:"li"},"|")," - ou"),Object(s.mdx)("li",{parentName:"ol"},Object(s.mdx)("inlineCode",{parentName:"li"},"^[a-z]")," - le premier caract\xe8re est une lettre"),Object(s.mdx)("li",{parentName:"ol"},Object(s.mdx)("inlineCode",{parentName:"li"},"\\d\\d+")," - les caract\xe8res suivants sont au moins 2 chiffres"),Object(s.mdx)("li",{parentName:"ol"},Object(s.mdx)("inlineCode",{parentName:"li"},"$"),"- fin de l'entr\xe9e")),Object(s.mdx)("hr",null),Object(s.mdx)("h2",{id:"23-faire-correspondre-les-espaces-s"},"23. Faire correspondre les espaces (",Object(s.mdx)("inlineCode",{parentName:"h2"},"\\s"),")"),Object(s.mdx)("p",null,Object(s.mdx)("a",Object(t.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/match-whitespace"}),"Learn Regular Expressions: Match Whitespace | freeCodeCamp.org")),Object(s.mdx)("p",null,"Les d\xe9fis jusqu'\xe0 pr\xe9sent ont port\xe9 sur la correspondance des lettres de l'alphabet et des chiffres. Vous pouvez \xe9galement faire correspondre  les espaces ou les espaces entre les lettres.\nVous pouvez  rechercher des espaces en utilisant ",Object(s.mdx)("inlineCode",{parentName:"p"},"\\s"),", qui est un ",Object(s.mdx)("inlineCode",{parentName:"p"},"s")," minuscule. Ce  mod\xe8le correspond non seulement aux espaces, mais \xe9galement aux  caract\xe8res de retour chariot, de tabulation, de saut de formulaire et de nouvelle ligne. Vous pouvez le consid\xe9rer comme similaire \xe0 la classe  de caract\xe8res ",Object(s.mdx)("inlineCode",{parentName:"p"},"[\\r\\t\\f\\n\\v]"),"."),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let whiteSpace = "Whitespace. Whitespace everywhere!"\nlet spaceRegex = /\\s/g;\nwhiteSpace.match(spaceRegex);\n// Returns [" ", " "]\n')),Object(s.mdx)("hr",null),Object(s.mdx)("p",null,"Modifiez l'expression r\xe9guli\xe8re ",Object(s.mdx)("inlineCode",{parentName:"p"},"countWhiteSpace")," pour rechercher plusieurs espaces blancs dans une cha\xeene."),Object(s.mdx)("blockquote",null,Object(s.mdx)("p",{parentName:"blockquote"},"Votre regex doit utiliser l'indicateur global.\nVotre regex doit utiliser le caract\xe8re abr\xe9g\xe9 ",Object(s.mdx)("inlineCode",{parentName:"p"},"\\s")," pour correspondre \xe0 tous les caract\xe8res d'espacement.\nVotre expression r\xe9guli\xe8re devrait trouver huit espaces dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Men are from Mars and women are from Venus."'),"\nVotre regex devrait trouver trois espaces dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Space: the final frontier."'),"\nVotre regex ne devrait trouver aucun espace dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'"MindYourPersonalSpace"'))),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let sample = "Whitespace is important in separating words";\nlet countWhiteSpace = /change/; // Change this line\nlet result = sample.match(countWhiteSpace);\n')),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"let sample = \"Whitespace is important in separating words\";\nlet countWhiteSpace = /\\s/g;\nlet result = sample.match(countWhiteSpace);\nconsole.log(result); // [ ' ', ' ', ' ', ' ', ' ' ]\nconsole.log('Men are from Mars and women are from Venus.'.match(countWhiteSpace)); // [ ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' ]\nconsole.log('Space: the final frontier.'.match(countWhiteSpace)); // [ ' ', ' ', ' ' ]\nconsole.log('MindYourPersonalSpace'.match(countWhiteSpace)); // null\n")),Object(s.mdx)("hr",null),Object(s.mdx)("h2",{id:"24-faire-correspondre-les-caract\xe8res-non-espaces"},"24. Faire correspondre les caract\xe8res non-espaces"),Object(s.mdx)("p",null,Object(s.mdx)("a",Object(t.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/match-non-whitespace-characters"}),"Learn Regular Expressions: Match Non-Whitespace Characters | freeCodeCamp.org")),Object(s.mdx)("p",null,"Vous avez appris \xe0 rechercher des espaces en utilisant ",Object(s.mdx)("inlineCode",{parentName:"p"},"\\s"),", avec un ",Object(s.mdx)("inlineCode",{parentName:"p"},"s")," minuscule. Vous pouvez \xe9galement rechercher tout sauf les espaces.\nRecherchez les espaces non blancs en utilisant ",Object(s.mdx)("inlineCode",{parentName:"p"},"\\S"),", qui est un ",Object(s.mdx)("inlineCode",{parentName:"p"},"s")," majuscule. Ce mod\xe8le ne correspondra pas aux espaces, aux retours chariot, aux  tabulations, aux sauts de page et aux caract\xe8res de nouvelle ligne. Vous pouvez penser qu'il est similaire \xe0 la classe de caract\xe8res ",Object(s.mdx)("inlineCode",{parentName:"p"},"[^ \\r\\t\\f\\n\\v]"),"."),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let whiteSpace = "Whitespace. Whitespace everywhere!"\nlet nonSpaceRegex = /\\S/g;\nwhiteSpace.match(nonSpaceRegex).length; // Returns 32\n')),Object(s.mdx)("hr",null),Object(s.mdx)("p",null,"Modifiez l'expression r\xe9guli\xe8re ",Object(s.mdx)("inlineCode",{parentName:"p"},"countNonWhiteSpace")," pour rechercher plusieurs caract\xe8res non-espaces dans une cha\xeene."),Object(s.mdx)("blockquote",null,Object(s.mdx)("p",{parentName:"blockquote"},"Votre regex doit utiliser l'indicateur global.\nVotre expression r\xe9guli\xe8re doit utiliser le caract\xe8re abr\xe9g\xe9 ",Object(s.mdx)("inlineCode",{parentName:"p"},"\\S")," pour faire correspondre tous les caract\xe8res non-espaces.\nVotre regex devrait trouver 35 non-espaces dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Men are from Mars and women are from Venus."'),"\nVotre regex devrait trouver 23 non-espaces dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Space: the final frontier."'),"\nVotre regex devrait trouver 21 non-espaces dans ",Object(s.mdx)("inlineCode",{parentName:"p"},'"MindYourPersonalSpace"'))),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let sample = "Whitespace is important in separating words";\nlet countNonWhiteSpace = /change/; // Change this line\nlet result = sample.match(countNonWhiteSpace);\n')),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"let sample = \"Whitespace is important in separating words\";\nlet countNonWhiteSpace = /\\S/g;\nlet result = sample.match(countNonWhiteSpace);\nconsole.log(result); // [ 'W', 'h', 'i', 't', 'e', 's', 'p', 'a', 'c', 'e', 'i', 's', 'i', 'm', 'p', 'o', 'r', 't', 'a', 'n', 't', 'i', 'n', 's', 'e', 'p', 'a', 'r', 'a', 't', 'i', 'n', 'g', 'w', 'o', 'r', 'd', 's' ]\nconsole.log('Men are from Mars and women are from Venus.'.match(countNonWhiteSpace)); // [ 'M', 'e', 'n', 'a', 'r', 'e', 'f', 'r', 'o', 'm', 'M', 'a', 'r', 's', 'a', 'n', 'd', 'w', 'o', 'm', 'e', 'n', 'a', 'r', 'e', 'f', 'r', 'o', 'm', 'V', 'e', 'n', 'u', 's', '.' ]\nconsole.log('Space: the final frontier.'.match(countNonWhiteSpace)); // [ 'S', 'p', 'a', 'c', 'e', ':', 't', 'h', 'e', 'f', 'i', 'n', 'a', 'l', 'f', 'r', 'o', 'n', 't', 'i', 'e', 'r', '.' ]\nconsole.log('MindYourPersonalSpace'.match(countNonWhiteSpace)); // [ 'M', 'i', 'n', 'd', 'Y', 'o', 'u', 'r', 'P', 'e', 'r', 's', 'o', 'n', 'a', 'l', 'S', 'p', 'a', 'c', 'e' ]\n")),Object(s.mdx)("hr",null),Object(s.mdx)("h2",{id:"25-sp\xe9cifiez-le-nombre-sup\xe9rieur-et-inf\xe9rieur-des-correspondances-35"},"25. Sp\xe9cifiez le nombre sup\xe9rieur et inf\xe9rieur des correspondances (",Object(s.mdx)("inlineCode",{parentName:"h2"},"{3,5}"),")"),Object(s.mdx)("p",null,Object(s.mdx)("a",Object(t.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/specify-upper-and-lower-number-of-matches"}),"Learn Regular Expressions: Specify Upper and Lower Number of Matches | freeCodeCamp.org")),Object(s.mdx)("p",null,"Rappelez-vous que vous utilisez le signe plus ",Object(s.mdx)("inlineCode",{parentName:"p"},"+")," pour rechercher un ou  plusieurs caract\xe8res et l'ast\xe9risque ",Object(s.mdx)("inlineCode",{parentName:"p"},"*")," pour rechercher z\xe9ro ou plusieurs caract\xe8res. Celles-ci sont pratiques, mais vous souhaitez parfois faire correspondre une certaine gamme de mod\xe8les.\nVous pouvez  sp\xe9cifier le nombre inf\xe9rieur et sup\xe9rieur de mod\xe8les avec des  ",Object(s.mdx)("em",{parentName:"p"},"sp\xe9cificateurs de quantit\xe9"),". Les sp\xe9cificateurs de quantit\xe9 sont utilis\xe9s avec des accolades (",Object(s.mdx)("inlineCode",{parentName:"p"},"{"),"et",Object(s.mdx)("inlineCode",{parentName:"p"},"}"),"). Vous mettez deux nombres entre les accolades - pour le nombre inf\xe9rieur et sup\xe9rieur de motifs.\nPar exemple,  pour correspondre uniquement \xe0 la lettre ",Object(s.mdx)("inlineCode",{parentName:"p"},"a")," apparaissant entre ",Object(s.mdx)("inlineCode",{parentName:"p"},"3")," et ",Object(s.mdx)("inlineCode",{parentName:"p"},"5")," fois dans la cha\xeene ",Object(s.mdx)("inlineCode",{parentName:"p"},'"ah"'),", votre expression r\xe9guli\xe8re serait ",Object(s.mdx)("inlineCode",{parentName:"p"},"/a{3,5}h/"),"."),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let A4 = "aaaah";\nlet A2 = "aah";\nlet multipleA = /a{3,5}h/;\nmultipleA.test(A4); // Returns true\nmultipleA.test(A2); // Returns false\n')),Object(s.mdx)("hr",null),Object(s.mdx)("p",null,"Changez l'expression r\xe9guli\xe8re ",Object(s.mdx)("inlineCode",{parentName:"p"},"ohRegex")," pour qu'elle corresponde \xe0 la phrase  enti\xe8re ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Oh no"')," uniquement lorsqu'elle a ",Object(s.mdx)("inlineCode",{parentName:"p"},"3")," \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},"6")," lettres ",Object(s.mdx)("inlineCode",{parentName:"p"},"h"),"."),Object(s.mdx)("blockquote",null,Object(s.mdx)("p",{parentName:"blockquote"},"Votre regex doit utiliser des accolades.\nVotre regex ne doit pas correspondre \xe0",Object(s.mdx)("inlineCode",{parentName:"p"},'"Ohh no"'),"\nVotre regex doit correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Ohhh no"'),"\nVotre expression r\xe9guli\xe8re doit correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Ohhhh no"'),"\nVotre expression r\xe9guli\xe8re doit correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},"Ohhhhh no"),"\nVotre expression r\xe9guli\xe8re doit correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Ohhhhhh no"'),"\nVotre regex ne doit pas correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Ohhhhhhh no"'))),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let ohStr = "Ohhh no";\nlet ohRegex = /change/; // Change this line\nlet result = ohRegex.test(ohStr);\n')),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"let ohStr = \"Ohhh no\";\nlet ohRegex = /Oh{3,6} no/;\nlet result = ohRegex.test(ohStr);\nconsole.log(result); // true\nconsole.log(ohRegex.test('Ohh no')); // false\nconsole.log(ohRegex.test('Ohhhh no')); // true\nconsole.log(ohRegex.test('Ohhhhh no')); // true\nconsole.log(ohRegex.test('Ohhhhhh no')); // true\nconsole.log(ohRegex.test('Ohhhhhhh no')); // false\n")),Object(s.mdx)("hr",null),Object(s.mdx)("h2",{id:"26-sp\xe9cifiez-uniquement-le-nombre-inf\xe9rieur-de-correspondances-3"},"26. Sp\xe9cifiez uniquement le nombre inf\xe9rieur de correspondances (",Object(s.mdx)("inlineCode",{parentName:"h2"},"{3,}"),")"),Object(s.mdx)("p",null,Object(s.mdx)("a",Object(t.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/specify-only-the-lower-number-of-matches"}),"Learn Regular Expressions: Specify Only the Lower Number of Matches | freeCodeCamp.org")),Object(s.mdx)("p",null,"Vous pouvez sp\xe9cifier le nombre inf\xe9rieur et sup\xe9rieur de motifs avec  des sp\xe9cificateurs de quantit\xe9 utilisant des accolades. Parfois, vous  souhaitez uniquement sp\xe9cifier le nombre inf\xe9rieur de motifs sans limite sup\xe9rieure.\nPour sp\xe9cifier uniquement le nombre inf\xe9rieur de motifs, conservez le premier nombre suivi d'une virgule.\nPar exemple, pour faire correspondre uniquement la cha\xeene ",Object(s.mdx)("inlineCode",{parentName:"p"},'"hah"')," avec la lettre ",Object(s.mdx)("inlineCode",{parentName:"p"},"a")," apparaissant au moins ",Object(s.mdx)("inlineCode",{parentName:"p"},"3")," fois, votre regex serait ",Object(s.mdx)("inlineCode",{parentName:"p"},"/ha{3,}h/"),"."),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let A4 = "haaaah";\nlet A2 = "haah";\nlet A100 = "h" + "a".repeat(100) + "h";\nlet multipleA = /ha{3,}h/;\nmultipleA.test(A4); // Returns true\nmultipleA.test(A2); // Returns false\nmultipleA.test(A100); // Returns true\n')),Object(s.mdx)("hr",null),Object(s.mdx)("p",null,"Changez l'expression r\xe9guli\xe8re ",Object(s.mdx)("inlineCode",{parentName:"p"},"haRegex")," pour qu'elle corresponde au mot ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Hazzah"')," uniquement lorsqu'il a quatre lettres ",Object(s.mdx)("inlineCode",{parentName:"p"},"z")," ou plus."),Object(s.mdx)("blockquote",null,Object(s.mdx)("p",{parentName:"blockquote"},"Votre regex doit utiliser des accolades.\nVotre expression r\xe9guli\xe8re ne doit pas correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Hazzah"'),"\nVotre expression r\xe9guli\xe8re ne doit pas correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Hazzzah"'),"\nVotre regex doit correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Hazzzzah"'),"\nVotre regex doit correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Hazzzzzah"'),"\nVotre regex doit correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Hazzzzzzah"'),"\nVotre regex doit correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Hazzah"')," avec 30 ",Object(s.mdx)("inlineCode",{parentName:"p"},"z")," dedans.")),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let haStr = "Hazzzzah";\nlet haRegex = /change/; // Change this line\nlet result = haRegex.test(haStr);\n')),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"let haStr = \"Hazzzzah\";\nlet haRegex = /Haz{4,}ah/;\nlet result = haRegex.test(haStr);\nconsole.log(result); // true\nconsole.log(haRegex.test('Hazzah')); // false\nconsole.log(haRegex.test('Hazzzah')); // false\nconsole.log(haRegex.test('Hazzzzzah')); // true\nconsole.log(haRegex.test('Hazzzzzzah')); // true\nconsole.log(haRegex.test('Hazzzzzzzzzzzzzzzzzzzzzzzzzzzzzzah')); // true\n")),Object(s.mdx)("hr",null),Object(s.mdx)("h2",{id:"27-sp\xe9cifiez-le-nombre-exact-de-correspondances-3"},"27. Sp\xe9cifiez le nombre exact de correspondances (",Object(s.mdx)("inlineCode",{parentName:"h2"},"{3}"),")"),Object(s.mdx)("p",null,Object(s.mdx)("a",Object(t.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/specify-exact-number-of-matches"}),"Learn Regular Expressions: Specify Exact Number of Matches | freeCodeCamp.org")),Object(s.mdx)("p",null,"Vous pouvez sp\xe9cifier le nombre inf\xe9rieur et sup\xe9rieur de motifs avec des sp\xe9cificateurs de quantit\xe9 utilisant des accolades. Parfois, vous ne voulez qu'un nombre sp\xe9cifique de correspondances.\nPour sp\xe9cifier un certain nombre de motifs, placez simplement ce chiffre entre les accolades.\nPar exemple, pour faire correspondre uniquement le mot ",Object(s.mdx)("inlineCode",{parentName:"p"},'"hah"')," avec la lettre ",Object(s.mdx)("inlineCode",{parentName:"p"},"a")," ",Object(s.mdx)("inlineCode",{parentName:"p"},"3")," fois, votre expression r\xe9guli\xe8re serait ",Object(s.mdx)("inlineCode",{parentName:"p"},"/ha{3}h/"),"."),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let A4 = "haaaah";\nlet A3 = "haaah";\nlet A100 = "h" + "a".repeat(100) + "h";\nlet multipleHA = /ha{3}h/;\nmultipleHA.test(A4); // Returns false\nmultipleHA.test(A3); // Returns true\nmultipleHA.test(A100); // Returns false\n')),Object(s.mdx)("hr",null),Object(s.mdx)("p",null,"Changez l'expression r\xe9guli\xe8re ",Object(s.mdx)("inlineCode",{parentName:"p"},"timRegex")," pour qu'elle corresponde au mot ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Timber"')," uniquement lorsqu'il a quatre lettres ",Object(s.mdx)("inlineCode",{parentName:"p"},"m"),"."),Object(s.mdx)("blockquote",null,Object(s.mdx)("p",{parentName:"blockquote"},"Votre regex doit utiliser des accolades.\nVotre expression r\xe9guli\xe8re ne doit pas correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Timber"'),"\nVotre expression r\xe9guli\xe8re ne doit pas correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Timmber"'),"\nVotre expression r\xe9guli\xe8re ne doit pas correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Timmmber"'),"\nVotre expression r\xe9guli\xe8re doit correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Timmmmber"'),"\nVotre regex ne doit pas correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Timber"')," avec 30 ",Object(s.mdx)("inlineCode",{parentName:"p"},"m")," dedans.")),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let timStr = "Timmmmber";\nlet timRegex = /change/; // Change this line\nlet result = timRegex.test(timStr);\n')),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"let timStr = \"Timmmmber\";\nlet timRegex = /Tim{4}ber/;\nlet result = timRegex.test(timStr);\nconsole.log(result); // true\nconsole.log(timRegex.test('Timber')); // false\nconsole.log(timRegex.test('Timmber')); // false\nconsole.log(timRegex.test('Timmmber')); // false\nconsole.log(timRegex.test('Timmmmmmmmmmmmmmmmmmmmmmmmmmmmmmber')); // false\n")),Object(s.mdx)("hr",null),Object(s.mdx)("h2",{id:"28-v\xe9rifier-tout-ou-rien-"},"28. V\xe9rifier tout ou rien (",Object(s.mdx)("inlineCode",{parentName:"h2"},"?"),")"),Object(s.mdx)("p",null,Object(s.mdx)("a",Object(t.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/check-for-all-or-none"}),"Learn Regular Expressions: Check for All or None | freeCodeCamp.org")),Object(s.mdx)("p",null,"Parfois, les mod\xe8les que vous souhaitez rechercher peuvent contenir des  parties qui peuvent exister ou non. Cependant, il peut \xeatre important de les v\xe9rifier quand m\xeame.\nVous pouvez sp\xe9cifier l'existence  possible d'un \xe9l\xe9ment avec un point d'interrogation, ",Object(s.mdx)("inlineCode",{parentName:"p"},"?"),". Cela v\xe9rifie z\xe9ro ou l'un des \xe9l\xe9ments pr\xe9c\xe9dents. Vous pouvez consid\xe9rer ce symbole  comme indiquant que l'\xe9l\xe9ment pr\xe9c\xe9dent est facultatif.\nPar  exemple, il existe de l\xe9g\xe8res diff\xe9rences entre l'anglais am\xe9ricain et  britannique et vous pouvez utiliser le point d'interrogation pour faire  correspondre les deux orthographes."),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let american = "color";\nlet british = "colour";\nlet rainbowRegex= /colou?r/;\nrainbowRegex.test(american); // Returns true\nrainbowRegex.test(british); // Returns true\n')),Object(s.mdx)("hr",null),Object(s.mdx)("p",null,"Changez le regex ",Object(s.mdx)("inlineCode",{parentName:"p"},"favRegex")," pour qu'il corresponde \xe0 la fois \xe0 la version  anglaise am\xe9ricaine (favorite) et britannique (favourite) du mot."),Object(s.mdx)("blockquote",null,Object(s.mdx)("p",{parentName:"blockquote"},"Votre expression r\xe9guli\xe8re doit utiliser le symbole facultatif, ",Object(s.mdx)("inlineCode",{parentName:"p"},"?"),".\nVotre regex doit correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"favorite"'),"\nVotre regex doit correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"favourite"'),"\nVotre expression r\xe9guli\xe8re ne doit pas correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"fav"'))),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let favWord = "favorite";\nlet favRegex = /change/; // Change this line\nlet result = favRegex.test(favWord);\n')),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"let favWord = \"favorite\";\nlet favRegex = /favou?rite/;\nlet result = favRegex.test(favWord);\nconsole.log(result); // true\nconsole.log(favRegex.test('favourite')); // true\nconsole.log(favRegex.test('fav')); // false\n")),Object(s.mdx)("hr",null),Object(s.mdx)("h2",{id:"29-anticipation-lookahead-positif-et-n\xe9gatif--"},"29. Anticipation (lookahead) positif et n\xe9gatif ",Object(s.mdx)("inlineCode",{parentName:"h2"},"(?=...)")," ",Object(s.mdx)("inlineCode",{parentName:"h2"},"(?!...)")),Object(s.mdx)("p",null,Object(s.mdx)("a",Object(t.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/positive-and-negative-lookahead"}),"Learn Regular Expressions: Positive and Negative Lookahead | freeCodeCamp.org")),Object(s.mdx)("p",null,"Les ",Object(s.mdx)("em",{parentName:"p"},"lookaheads")," sont des mod\xe8les qui indiquent \xe0 JavaScript de regarder en avant dans votre cha\xeene pour v\xe9rifier les mod\xe8les plus loin. Cela  peut \xeatre utile lorsque vous souhaitez rechercher plusieurs mod\xe8les sur  la m\xeame cha\xeene.\nIl existe deux types d'anticipations : ",Object(s.mdx)("em",{parentName:"p"},"l'anticipation positive")," et ",Object(s.mdx)("em",{parentName:"p"},"l'anticipation n\xe9gative"),".\nUne anticipation positive cherchera \xe0 s'assurer que l'\xe9l\xe9ment dans le  mod\xe8le de recherche est l\xe0, mais ne correspondra pas r\xe9ellement. Une  anticipation positive est utilis\xe9e comme ",Object(s.mdx)("inlineCode",{parentName:"p"},"(?=...)")," o\xf9 le ",Object(s.mdx)("inlineCode",{parentName:"p"},"...")," est la  partie requise qui ne correspond pas.\nD'un autre c\xf4t\xe9, une  anticipation n\xe9gative cherchera \xe0 s'assurer que l'\xe9l\xe9ment dans le mod\xe8le de recherche n'est pas l\xe0. Une anticipation n\xe9gative est utilis\xe9e comme ",Object(s.mdx)("inlineCode",{parentName:"p"},"(?!...)")," o\xf9 le ",Object(s.mdx)("inlineCode",{parentName:"p"},"...")," est le motif que vous ne voulez pas \xeatre l\xe0. Le reste du motif est renvoy\xe9 si la partie d'anticipation n\xe9gative n'est  pas pr\xe9sente.\nLes lookaheads sont un peu d\xe9routants mais quelques exemples vous aideront."),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let quit = "qu";\nlet noquit = "qt";\nlet quRegex= /q(?=u)/;\nlet qRegex = /q(?!u)/;\nquit.match(quRegex); // Returns ["q"]\nnoquit.match(qRegex); // Returns ["q"]\n')),Object(s.mdx)("p",null,"Une utilisation plus pratique des lookaheads consiste \xe0 v\xe9rifier deux ou  plusieurs mod\xe8les dans une cha\xeene. Voici un v\xe9rificateur de mot de passe simple (na\xefvement) qui recherche entre 3 et 6 caract\xe8res et au moins un nombre :"),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let password = "abc123";\nlet checkPass = /(?=\\w{3,6})(?=\\D*\\d)/;\ncheckPass.test(password); // Returns true\n')),Object(s.mdx)("hr",null),Object(s.mdx)("p",null,"Utilisez des lookaheads dans le ",Object(s.mdx)("inlineCode",{parentName:"p"},"pwRegex")," pour faire correspondre les mots de  passe de plus de 5 caract\xe8res, ne commen\xe7ant pas par des chiffres et  comportant deux chiffres cons\xe9cutifs."),Object(s.mdx)("blockquote",null,Object(s.mdx)("p",{parentName:"blockquote"},"Votre regex doit utiliser deux anticipations positives.\nVotre expression r\xe9guli\xe8re ne doit pas correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"astronaut"'),"\nVotre expression r\xe9guli\xe8re ne doit pas correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"banan1"'),"\nVotre expression r\xe9guli\xe8re doit correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"bana12"'),"\nVotre expression r\xe9guli\xe8re doit correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"abc123"'),"\nVotre expression r\xe9guli\xe8re ne doit pas correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"1234"'),"\nVotre expression r\xe9guli\xe8re ne doit pas correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"8pass99"'),"\nVotre regex ne doit pas correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"12abcde"'),"\nVotre regex doit correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"astr1on11aut"'))),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let sampleWord = "astronaut";\nlet pwRegex = /change/; // Change this line\nlet result = pwRegex.test(sampleWord);\n')),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"let sampleWord = \"astronaut\";\nlet pwRegex = /^\\D(?=\\w{5,})(?=\\w*\\d{2})/;\nlet result = pwRegex.test(sampleWord);\nconsole.log(result); // false\nconsole.log(pwRegex.test('banan1')); // false\nconsole.log(pwRegex.test('bana12')); // true\nconsole.log(pwRegex.test('abc123')); //true\nconsole.log(pwRegex.test('1234')); // false\nconsole.log(pwRegex.test('8pass99')); // false\nconsole.log(pwRegex.test('12abcde')); // false\nconsole.log(pwRegex.test('astr1on11aut')); // true\n")),Object(s.mdx)("hr",null),Object(s.mdx)("h2",{id:"30-v\xe9rifier-le-regroupement-mixte-de-caract\xe8res"},"30. V\xe9rifier le regroupement mixte de caract\xe8res"),Object(s.mdx)("p",null,Object(s.mdx)("a",Object(t.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/check-for-mixed-grouping-of-characters"}),"Learn Regular Expressions: Check For Mixed Grouping of Characters | freeCodeCamp.org")),Object(s.mdx)("p",null,"Parfois, nous voulons v\xe9rifier les groupes de caract\xe8res en utilisant  une expression r\xe9guli\xe8re et pour y parvenir, nous utilisons des  parenth\xe8ses ",Object(s.mdx)("inlineCode",{parentName:"p"},"()"),".\nSi vous voulez trouver ",Object(s.mdx)("inlineCode",{parentName:"p"},"Penguin")," ou ",Object(s.mdx)("inlineCode",{parentName:"p"},"Pumpkin")," dans  une cha\xeene, vous pouvez utiliser l'expression r\xe9guli\xe8re suivante : ",Object(s.mdx)("inlineCode",{parentName:"p"},"/P(engu|umpk)in/g"),"\nV\xe9rifiez ensuite si les groupes de cha\xeenes souhait\xe9s se trouvent dans la cha\xeene de test \xe0 l'aide de la m\xe9thode ",Object(s.mdx)("inlineCode",{parentName:"p"},"test()"),"."),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let testStr = "Pumpkin";\nlet testRegex = /P(engu|umpk)in/;\ntestRegex.test(testStr);\n// Returns true\n')),Object(s.mdx)("hr",null),Object(s.mdx)("p",null,"Corrigez l'expression r\xe9guli\xe8re afin qu'elle v\xe9rifie les noms de ",Object(s.mdx)("inlineCode",{parentName:"p"},"Franklin Roosevelt")," ou de ",Object(s.mdx)("inlineCode",{parentName:"p"},"Eleanor Roosevelt")," en respectant la casse et qu'elle fasse des concessions pour les pr\xe9noms.\nEnsuite, corrigez le code afin que l'expression r\xe9guli\xe8re que vous avez cr\xe9\xe9e soit v\xe9rifi\xe9e par rapport \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},"myString")," et que la valeur ",Object(s.mdx)("inlineCode",{parentName:"p"},"true")," ou ",Object(s.mdx)("inlineCode",{parentName:"p"},"false")," soit renvoy\xe9e selon  que l'expression r\xe9guli\xe8re correspond."),Object(s.mdx)("blockquote",null,Object(s.mdx)("p",{parentName:"blockquote"},"Votre regex ",Object(s.mdx)("inlineCode",{parentName:"p"},"myRegex")," doit retourner ",Object(s.mdx)("inlineCode",{parentName:"p"},"true")," pour la cha\xeene ",Object(s.mdx)("inlineCode",{parentName:"p"},"Franklin D. Roosevelt"),"\nVotre regex ",Object(s.mdx)("inlineCode",{parentName:"p"},"myRegex")," doit retourner ",Object(s.mdx)("inlineCode",{parentName:"p"},"true")," pour la cha\xeene ",Object(s.mdx)("inlineCode",{parentName:"p"},"Eleanor Roosevelt"),"\nVotre regex ",Object(s.mdx)("inlineCode",{parentName:"p"},"myRegex")," doit retourner ",Object(s.mdx)("inlineCode",{parentName:"p"},"false")," pour la cha\xeene ",Object(s.mdx)("inlineCode",{parentName:"p"},"Franklin Rosevelt"),"\nVotre regex ",Object(s.mdx)("inlineCode",{parentName:"p"},"myRegex")," doit retourner ",Object(s.mdx)("inlineCode",{parentName:"p"},"false")," pour la cha\xeene ",Object(s.mdx)("inlineCode",{parentName:"p"},"Frank Roosevelt"),"\nVous devez utiliser ",Object(s.mdx)("inlineCode",{parentName:"p"},".test()")," pour tester l'expression r\xe9guli\xe8re.\nVotre r\xe9sultat doit retourner ",Object(s.mdx)("inlineCode",{parentName:"p"},"true"),".")),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let myString = "Eleanor Roosevelt";\nlet myRegex = /False/; // Change this line\nlet result = false; // Change this line\n// After passing the challenge experiment with myString and see how the grouping works\n')),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"let myString = \"Eleanor Roosevelt\";\nlet myRegex = /(Franklin D.|Eleanor) Roosevelt/;\nlet result = myRegex.test(myString); // true\nconsole.log(myRegex.test('Franklin D. Roosevelt')); // true\nconsole.log(myRegex.test('Eleanor Roosevelt')); //true\nconsole.log(myRegex.test('Franklin Rosevelt')); // false\nconsole.log(myRegex.test('Frank Roosevelt')); // false\n")),Object(s.mdx)("hr",null),Object(s.mdx)("h2",{id:"31-r\xe9utiliser-des-mod\xe8les-\xe0-laide-de-groupes-de-capture-w"},"31. R\xe9utiliser des mod\xe8les \xe0 l'aide de groupes de capture ",Object(s.mdx)("inlineCode",{parentName:"h2"},"(\\w+)")),Object(s.mdx)("p",null,Object(s.mdx)("a",Object(t.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/reuse-patterns-using-capture-groups"}),"Learn Regular Expressions: Reuse Patterns Using Capture Groups | freeCodeCamp.org")),Object(s.mdx)("p",null,"Certains mod\xe8les que vous recherchez appara\xeetront plusieurs fois dans  une cha\xeene. Il est inutile de r\xe9p\xe9ter manuellement cette expression  r\xe9guli\xe8re. Il existe un meilleur moyen de sp\xe9cifier si vous avez  plusieurs sous-cha\xeenes de r\xe9p\xe9tition dans votre cha\xeene.\nVous  pouvez rechercher des sous-cha\xeenes r\xe9p\xe9t\xe9es \xe0 l'aide de ",Object(s.mdx)("em",{parentName:"p"},"groupes de  capture"),". Les parenth\xe8ses, ",Object(s.mdx)("inlineCode",{parentName:"p"},"(")," et ",Object(s.mdx)("inlineCode",{parentName:"p"},")"),", sont utilis\xe9es pour rechercher des  sous-cha\xeenes r\xe9p\xe9t\xe9es. Vous mettez l'expression r\xe9guli\xe8re du mod\xe8le qui  se r\xe9p\xe8te entre les parenth\xe8ses.\nPour sp\xe9cifier o\xf9 cette cha\xeene  de r\xe9p\xe9tition appara\xeetra, vous utilisez une barre oblique inverse (",Object(s.mdx)("inlineCode",{parentName:"p"},"\\"),")  puis un nombre. Ce nombre commence \xe0 1 et augmente avec chaque groupe de capture suppl\xe9mentaire que vous utilisez. Un exemple serait ",Object(s.mdx)("inlineCode",{parentName:"p"},"\\1")," pour  correspondre au premier groupe.\nL'exemple ci-dessous correspond \xe0 n'importe quel mot qui appara\xeet deux fois s\xe9par\xe9 par un espace :"),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let repeatStr = "regex regex";\nlet repeatRegex = /(\\w+)\\s\\1/;\nrepeatRegex.test(repeatStr); // Returns true\nrepeatStr.match(repeatRegex); // Returns ["regex regex", "regex"]\n')),Object(s.mdx)("p",null,"L'utilisation de la m\xe9thode ",Object(s.mdx)("inlineCode",{parentName:"p"},".match()")," sur une cha\xeene renverra un tableau avec la  cha\xeene qu'il correspond, ainsi que son groupe de capture."),Object(s.mdx)("hr",null),Object(s.mdx)("p",null,"Utilisez des groupes de capture dans ",Object(s.mdx)("inlineCode",{parentName:"p"},"reRegex")," pour faire correspondre des nombres qui ne sont r\xe9p\xe9t\xe9s que trois fois dans une cha\xeene, chacun \xe9tant s\xe9par\xe9 par un espace."),Object(s.mdx)("blockquote",null,Object(s.mdx)("p",{parentName:"blockquote"},"Votre expression r\xe9guli\xe8re doit utiliser la classe de caract\xe8res abr\xe9g\xe9s pour les chiffres.\nVotre regex doit r\xe9utiliser un groupe de capture deux fois.\nVotre regex doit avoir deux espaces s\xe9parant les trois nombres.\nVotre regex doit correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"42 42 42"'),".\nVotre regex doit correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"100 100 100"'),".\nVotre regex ne doit pas correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"42 42 42 42"'),".\nVotre regex ne doit pas correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"42 42"'),".\nVotre expression r\xe9guli\xe8re ne doit pas correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"101 102 103"'),".\nVotre regex ne doit pas correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"1 2 3"'),".\nVotre expression r\xe9guli\xe8re doit correspondre \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"10 10 10"'),".")),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let repeatNum = "42 42 42";\nlet reRegex = /change/; // Change this line\nlet result = reRegex.test(repeatNum);\n')),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let repeatNum = "42 42 42";\nlet reRegex = /^(\\d+)\\s\\1\\s\\1$/;\nlet result = reRegex.test(repeatNum);\nconsole.log(result); // true\nconsole.log(reRegex.test("100 100 100")); // true\nconsole.log(reRegex.test("42 42 42 42")); // false\nconsole.log(reRegex.test("42 42")); //false\nconsole.log(reRegex.test("101 102 103")); // false\nconsole.log(reRegex.test("1 2 3")); // false\nconsole.log(reRegex.test("10 10 10")); // true\n')),Object(s.mdx)("hr",null),Object(s.mdx)("h2",{id:"32-utiliser-des-groupes-de-capture-pour-rechercher-et-remplacer-n-replace"},"32. Utiliser des groupes de capture pour rechercher et remplacer (",Object(s.mdx)("inlineCode",{parentName:"h2"},"$n"),") (",Object(s.mdx)("inlineCode",{parentName:"h2"},".replace()"),")"),Object(s.mdx)("p",null,Object(s.mdx)("a",Object(t.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/use-capture-groups-to-search-and-replace"}),"Learn Regular Expressions: Use Capture Groups to Search and Replace | freeCodeCamp.org")),Object(s.mdx)("p",null,"La recherche est utile. Cependant, vous pouvez rendre la recherche  encore plus puissante lorsqu'elle modifie (ou remplace) le texte  correspondant.\nVous pouvez rechercher et remplacer du texte dans  une cha\xeene en utilisant ",Object(s.mdx)("inlineCode",{parentName:"p"},".replace()")," sur une cha\xeene. Les entr\xe9es pour ",Object(s.mdx)("inlineCode",{parentName:"p"},".replace()")," sont d'abord le mod\xe8le regex que vous souhaitez rechercher.  Le deuxi\xe8me param\xe8tre est la cha\xeene pour remplacer la correspondance ou  une fonction pour faire quelque chose."),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let wrongText = "The sky is silver.";\nlet silverRegex = /silver/;\nwrongText.replace(silverRegex, "blue");\n// Returns "The sky is blue."\n')),Object(s.mdx)("p",null,"Vous pouvez \xe9galement acc\xe9der aux groupes de capture dans la cha\xeene de remplacement avec des signes dollar (",Object(s.mdx)("inlineCode",{parentName:"p"},"$"),")."),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'"Code Camp".replace(/(\\w+)\\s(\\w+)/, \'$2 $1\');\n// Returns "Camp Code"\n')),Object(s.mdx)("hr",null),Object(s.mdx)("p",null,"\xc9crivez une regex ",Object(s.mdx)("inlineCode",{parentName:"p"},"fixRegex")," en utilisant trois groupes de capture qui  rechercheront chaque mot dans la cha\xeene ",Object(s.mdx)("inlineCode",{parentName:"p"},'"one two three"'),". Mettez ensuite \xe0 jour la variable ",Object(s.mdx)("inlineCode",{parentName:"p"},"replaceText")," pour remplacer ",Object(s.mdx)("inlineCode",{parentName:"p"},'"one two three"')," par la  cha\xeene ",Object(s.mdx)("inlineCode",{parentName:"p"},'"three two one"')," et attribuez le r\xe9sultat \xe0 la variable ",Object(s.mdx)("inlineCode",{parentName:"p"},"result"),". Assurez-vous que vous utilisez des groupes de capture dans la  cha\xeene de remplacement \xe0 l'aide de la syntaxe du signe dollar (",Object(s.mdx)("inlineCode",{parentName:"p"},"$"),")."),Object(s.mdx)("blockquote",null,Object(s.mdx)("p",{parentName:"blockquote"},"Vous devez utiliser ",Object(s.mdx)("inlineCode",{parentName:"p"},".replace()")," pour rechercher et remplacer.\nVotre regex devrait changer ",Object(s.mdx)("inlineCode",{parentName:"p"},'"one two three"')," en ",Object(s.mdx)("inlineCode",{parentName:"p"},'"three two one"'),"\nVous ne devez pas changer la derni\xe8re ligne.\n",Object(s.mdx)("inlineCode",{parentName:"p"},"fixRegex")," doit utiliser au moins trois groupes de capture.\n",Object(s.mdx)("inlineCode",{parentName:"p"},"replaceText")," doit utiliser des cha\xeenes de sous-correspondance entre parenth\xe8ses (c'est-\xe0-dire que la ni\xe8me cha\xeene de sous-correspondance entre  parenth\xe8ses, $n, correspond au ni\xe8me groupe de capture).")),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let str = "one two three";\nlet fixRegex = /change/; // Change this line\nlet replaceText = ""; // Change this line\nlet result = str.replace(fixRegex, replaceText);\n')),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let str = "one two three";\nlet fixRegex = /(\\D+)\\s(\\D+)\\s(\\D+)/;\nlet replaceText = "$3 $2 $1";\nlet result = str.replace(fixRegex, replaceText);\nconsole.log(result); // three two one\n')),Object(s.mdx)("hr",null),Object(s.mdx)("h2",{id:"33-supprimer-les-espaces-du-d\xe9but-et-de-la-fin"},"33. Supprimer les espaces du d\xe9but et de la fin"),Object(s.mdx)("p",null,Object(s.mdx)("a",Object(t.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/regular-expressions/remove-whitespace-from-start-and-end"}),"Learn Regular Expressions: Remove Whitespace from Start and End | freeCodeCamp.org")),Object(s.mdx)("p",null,"Parfois, les espaces autour des cha\xeenes ne sont pas voulus mais sont l\xe0. Le traitement typique des cha\xeenes consiste \xe0 supprimer les espaces au d\xe9but et \xe0 la fin."),Object(s.mdx)("hr",null),Object(s.mdx)("p",null,"\xc9crivez une expression r\xe9guli\xe8re et utilisez les  m\xe9thodes de cha\xeene appropri\xe9es pour supprimer les espaces au d\xe9but et \xe0  la fin des cha\xeenes.\n",Object(s.mdx)("strong",{parentName:"p"},"Remarque :")," la m\xe9thode ",Object(s.mdx)("inlineCode",{parentName:"p"},"String.prototype.trim()")," fonctionnerait ici, mais vous devrez relever ce d\xe9fi en utilisant des  expressions r\xe9guli\xe8res."),Object(s.mdx)("blockquote",null,Object(s.mdx)("p",{parentName:"blockquote"},Object(s.mdx)("inlineCode",{parentName:"p"},"result")," doit \xeatre \xe9gal \xe0 ",Object(s.mdx)("inlineCode",{parentName:"p"},'"Hello, World!"'),"\nVotre solution ne doit pas utiliser la m\xe9thode ",Object(s.mdx)("inlineCode",{parentName:"p"},"String.prototype.trim()"),".\nLa variable ",Object(s.mdx)("inlineCode",{parentName:"p"},"result")," ne doit pas \xeatre d\xe9finie comme \xe9gale \xe0 une cha\xeene.")),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let hello = "   Hello, World!  ";\nlet wsRegex = /change/; // Change this line\nlet result = hello; // Change this line\n')),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'let hello = "   Hello, World!  ";\nlet wsRegex = /(\\s+)(\\D+)(\\D+)(\\s+)/;\nlet result = hello.replace(wsRegex, "$2");\nconsole.log(result); // Hello, World!\n')),Object(s.mdx)("pre",null,Object(s.mdx)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),'// solution\nlet hello = "   Hello, World!  ";\nlet wsRegex = /^\\s+|\\s+$/g;\nlet result = hello.replace(wsRegex, "");\n')))}d.isMDXComponent=!0},212:function(e,r,n){"use strict";n.r(r),n.d(r,"MDXContext",(function(){return d})),n.d(r,"MDXProvider",(function(){return m})),n.d(r,"mdx",(function(){return g})),n.d(r,"useMDXComponents",(function(){return u})),n.d(r,"withMDXComponents",(function(){return p}));var t=n(0),a=n.n(t);function s(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(){return(o=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var n=arguments[r];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e}).apply(this,arguments)}function l(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?l(Object(n),!0).forEach((function(r){s(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function c(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},s=Object.keys(e);for(t=0;t<s.length;t++)n=s[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)n=s[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=a.a.createContext({}),p=function(e){return function(r){var n=u(r.components);return a.a.createElement(e,o({},r,{components:n}))}},u=function(e){var r=a.a.useContext(d),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},m=function(e){var r=u(e.components);return a.a.createElement(d.Provider,{value:r},e.children)},x={inlineCode:"code",wrapper:function(e){var r=e.children;return a.a.createElement(a.a.Fragment,{},r)}},b=a.a.forwardRef((function(e,r){var n=e.components,t=e.mdxType,s=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=u(n),p=t,m=d["".concat(o,".").concat(p)]||d[p]||x[p]||s;return n?a.a.createElement(m,i(i({ref:r},l),{},{components:n})):a.a.createElement(m,i({ref:r},l))}));function g(e,r){var n=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var s=n.length,o=new Array(s);o[0]=b;var l={};for(var i in r)hasOwnProperty.call(r,i)&&(l[i]=r[i]);l.originalType=e,l.mdxType="string"==typeof e?e:t,o[1]=l;for(var c=2;c<s;c++)o[c]=n[c];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);
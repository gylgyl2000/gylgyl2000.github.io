(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{130:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return d})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return l}));var a=n(3),o=n(7),r=(n(0),n(214)),i={id:"freeCodeCamp-Redux",title:"Redux"},d={unversionedId:"freeCodeCamp/freeCodeCamp-Redux",id:"freeCodeCamp/freeCodeCamp-Redux",isDocsHomePage:!1,title:"Redux",description:"Introduction to the Redux Challenges",source:"@site/docs/freeCodeCamp/freeCodeCamp-Redux.md",slug:"/freeCodeCamp/freeCodeCamp-Redux",permalink:"/docs/freeCodeCamp/freeCodeCamp-Redux",editUrl:"https://github.com/gylgyl2000/laloutre.github.io/edit/main/docs/freeCodeCamp/freeCodeCamp-Redux.md",version:"current"},c=[{value:"Introduction to the Redux Challenges",id:"introduction-to-the-redux-challenges",children:[]},{value:"1. Create a Redux Store",id:"1-create-a-redux-store",children:[]},{value:"2. Get State from the Redux Store",id:"2-get-state-from-the-redux-store",children:[]},{value:"3. Define a Redux Action",id:"3-define-a-redux-action",children:[]},{value:"4. Define an Action Creator",id:"4-define-an-action-creator",children:[]},{value:"5. Dispatch an Action Event",id:"5-dispatch-an-action-event",children:[]},{value:"6. Handle an Action in the Store",id:"6-handle-an-action-in-the-store",children:[]},{value:"7. Use a Switch Statement to Handle Multiple Actions",id:"7-use-a-switch-statement-to-handle-multiple-actions",children:[]},{value:"8. Use const for Action Types",id:"8-use-const-for-action-types",children:[]},{value:"9. Register a Store Listener",id:"9-register-a-store-listener",children:[]},{value:"10. Combine Multiple Reducers",id:"10-combine-multiple-reducers",children:[]},{value:"11. Send Action Data to the Store",id:"11-send-action-data-to-the-store",children:[]},{value:"12. Use Middleware to Handle Asynchronous Actions",id:"12-use-middleware-to-handle-asynchronous-actions",children:[]},{value:"13. Write a Counter with Redux",id:"13-write-a-counter-with-redux",children:[]},{value:"14. Never Mutate State",id:"14-never-mutate-state",children:[]},{value:"15. Use the Spread Operator on Arrays",id:"15-use-the-spread-operator-on-arrays",children:[]},{value:"16. Remove an Item from an Array",id:"16-remove-an-item-from-an-array",children:[]},{value:"17. Copy an Object with Object.assign",id:"17-copy-an-object-with-objectassign",children:[]}],s={rightToc:c};function l(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.mdx)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(r.mdx)("h2",{id:"introduction-to-the-redux-challenges"},"Introduction to the Redux Challenges"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://redux.js.org/"}),"Redux")," is a predictable state  container for JavaScript apps. It helps you write applications that  behave consistently, run in different environments (client, server, and  native), and are easy to test. While you can use Redux with any view  library, it's introduced here before being combined with React."),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"1-create-a-redux-store"},"1. Create a Redux Store"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/redux/create-a-redux-store"}),"Learn Redux: Create a Redux Store | freeCodeCamp.org")),Object(r.mdx)("p",null,"Redux is a state management framework that can be used with a number of different web technologies, including React.\nIn Redux, there is a single state object that's responsible for the entire state of your application. This means if you had a React app with ten components, and each component had its own local state, the entire state of your app would be defined by a single state object housed in the Redux ",Object(r.mdx)("inlineCode",{parentName:"p"},"store"),". This is the first important principle to understand when learning Redux: the Redux store is the single source of truth when it comes to application state.\nThis also means that any time any piece of your app wants to update state, it ",Object(r.mdx)("strong",{parentName:"p"},"must")," do so through the Redux store. The unidirectional data flow makes it easier to track state management in your app."),Object(r.mdx)("hr",null),Object(r.mdx)("p",null,"The Redux ",Object(r.mdx)("inlineCode",{parentName:"p"},"store")," is an object which holds and manages application ",Object(r.mdx)("inlineCode",{parentName:"p"},"state"),". There is a method called ",Object(r.mdx)("inlineCode",{parentName:"p"},"createStore()")," on the Redux object, which you use to create the Redux ",Object(r.mdx)("inlineCode",{parentName:"p"},"store"),". This method takes a ",Object(r.mdx)("inlineCode",{parentName:"p"},"reducer")," function as a required argument. The ",Object(r.mdx)("inlineCode",{parentName:"p"},"reducer")," function is covered in a later challenge, and is already defined for you in the code editor. It simply takes ",Object(r.mdx)("inlineCode",{parentName:"p"},"state")," as an argument and returns ",Object(r.mdx)("inlineCode",{parentName:"p"},"state"),".\nDeclare a ",Object(r.mdx)("inlineCode",{parentName:"p"},"store")," variable and assign it to the ",Object(r.mdx)("inlineCode",{parentName:"p"},"createStore()")," method, passing in the ",Object(r.mdx)("inlineCode",{parentName:"p"},"reducer")," as an argument.\n",Object(r.mdx)("strong",{parentName:"p"},"Note:")," The code in the editor uses ES6 default argument syntax to initialize this state to hold a value of ",Object(r.mdx)("inlineCode",{parentName:"p"},"5"),". If you're not familiar with default arguments, you can refer to the ",Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://learn.freecodecamp.org/javascript-algorithms-and-data-structures/es6/set-default-parameters-for-your-functions"}),"ES6 section in the Curriculum")," which covers this topic."),Object(r.mdx)("blockquote",null,Object(r.mdx)("p",{parentName:"blockquote"},"The redux store should exist.\nThe redux store should have a value of 5 for the state.")),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const reducer = (state = 5) => {\n  return state;\n}\n\n// Redux methods are available from a Redux object\n// For example: Redux.createStore()\n// Define the store here:\n\nconst store = Redux.createStore(reducer);\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"2-get-state-from-the-redux-store"},"2. Get State from the Redux Store"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/redux/get-state-from-the-redux-store"}),"Learn Redux: Get State from the Redux Store | freeCodeCamp.org")),Object(r.mdx)("p",null,"The Redux store object provides several methods that allow you to interact with it. For example, you can retrieve the current ",Object(r.mdx)("inlineCode",{parentName:"p"},"state")," held in the Redux store object with the ",Object(r.mdx)("inlineCode",{parentName:"p"},"getState()")," method."),Object(r.mdx)("hr",null),Object(r.mdx)("p",null,"The code from the previous challenge is re-written more concisely in the code editor. Use ",Object(r.mdx)("inlineCode",{parentName:"p"},"store.getState()")," to retrieve the ",Object(r.mdx)("inlineCode",{parentName:"p"},"state")," from the ",Object(r.mdx)("inlineCode",{parentName:"p"},"store"),", and assign this to a new variable ",Object(r.mdx)("inlineCode",{parentName:"p"},"currentState"),"."),Object(r.mdx)("blockquote",null,Object(r.mdx)("p",{parentName:"blockquote"},"The redux store should have a value of 5 for the initial state.\nA variable ",Object(r.mdx)("inlineCode",{parentName:"p"},"currentState")," should exist and should be assigned the current state of the Redux store.")),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const store = Redux.createStore(\n  (state = 5) => state\n);\n\nlet currentState = store.getState();\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"3-define-a-redux-action"},"3. Define a Redux Action"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/redux/define-a-redux-action"}),"Learn Redux: Define a Redux Action | freeCodeCamp.org")),Object(r.mdx)("p",null,"Since Redux is a state management framework, updating state is one of its core tasks. In Redux, all state updates are triggered by dispatching actions. An action is simply a JavaScript object that contains information about an action event that has occurred. The Redux store receives these action objects, then updates its state accordingly. Sometimes a Redux action also carries some data. For example, the action carries a username after a user logs in. While the data is optional, actions must carry a ",Object(r.mdx)("inlineCode",{parentName:"p"},"type")," property that specifies the 'type' of action that occurred.\nThink of Redux actions as messengers that deliver information about events happening in your app to the Redux store. The store then conducts the business of updating state based on the action that occurred."),Object(r.mdx)("hr",null),Object(r.mdx)("p",null,"Writing a Redux action is as simple as declaring an object with a type property. Declare an object ",Object(r.mdx)("inlineCode",{parentName:"p"},"action")," and give it a property ",Object(r.mdx)("inlineCode",{parentName:"p"},"type")," set to the string ",Object(r.mdx)("inlineCode",{parentName:"p"},"'LOGIN'"),"."),Object(r.mdx)("blockquote",null,Object(r.mdx)("p",{parentName:"blockquote"},"An action object should exist.\nThe action should have a key property type with value ",Object(r.mdx)("inlineCode",{parentName:"p"},"LOGIN"),".")),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let action = {\n    type: 'LOGIN'\n};\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"4-define-an-action-creator"},"4. Define an Action Creator"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/redux/define-an-action-creator"}),"Learn Redux: Define an Action Creator | freeCodeCamp.org")),Object(r.mdx)("p",null,"After creating an action, the next step is sending the action to the Redux store so it can update its state. In Redux, you define action creators to accomplish this. An action creator is simply a JavaScript function that returns an action. In other words, action creators create objects that represent action events."),Object(r.mdx)("hr",null),Object(r.mdx)("p",null,"Define a function named ",Object(r.mdx)("inlineCode",{parentName:"p"},"actionCreator()")," that returns the ",Object(r.mdx)("inlineCode",{parentName:"p"},"action")," object when called."),Object(r.mdx)("blockquote",null,Object(r.mdx)("p",{parentName:"blockquote"},"The function ",Object(r.mdx)("inlineCode",{parentName:"p"},"actionCreator")," should exist.\nRunning the ",Object(r.mdx)("inlineCode",{parentName:"p"},"actionCreator")," function should return the action object.\nThe returned action should have a key property type with value ",Object(r.mdx)("inlineCode",{parentName:"p"},"LOGIN"),".")),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const action = {\n  type: 'LOGIN'\n}\n\nfunction actionCreator() {\n  return action;\n}\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"5-dispatch-an-action-event"},"5. Dispatch an Action Event"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/redux/dispatch-an-action-event"}),"Learn Redux: Dispatch an Action Event | freeCodeCamp.org")),Object(r.mdx)("p",null,Object(r.mdx)("inlineCode",{parentName:"p"},"dispatch")," method is what you use to dispatch actions to the Redux store. Calling ",Object(r.mdx)("inlineCode",{parentName:"p"},"store.dispatch()")," and passing the value returned from an action creator sends an action back to the store.\nRecall that action creators return an object with a type property that specifies the action that has occurred. Then the method dispatches an action object to the Redux store. Based on the previous challenge's example, the following lines are equivalent, and both dispatch the action of type ",Object(r.mdx)("inlineCode",{parentName:"p"},"LOGIN"),":"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"store.dispatch(actionCreator());\nstore.dispatch({ type: 'LOGIN' });\n")),Object(r.mdx)("hr",null),Object(r.mdx)("p",null,"The Redux store in the code editor has an initialized state that's an object containing a ",Object(r.mdx)("inlineCode",{parentName:"p"},"login")," property currently set to ",Object(r.mdx)("inlineCode",{parentName:"p"},"false"),". There's also an action creator called ",Object(r.mdx)("inlineCode",{parentName:"p"},"loginAction()")," which returns an action of type ",Object(r.mdx)("inlineCode",{parentName:"p"},"LOGIN"),". Dispatch the ",Object(r.mdx)("inlineCode",{parentName:"p"},"LOGIN")," action to the Redux store by calling the ",Object(r.mdx)("inlineCode",{parentName:"p"},"dispatch")," method, and pass in the action created by ",Object(r.mdx)("inlineCode",{parentName:"p"},"loginAction()"),"."),Object(r.mdx)("blockquote",null,Object(r.mdx)("p",{parentName:"blockquote"},"Calling the function ",Object(r.mdx)("inlineCode",{parentName:"p"},"loginAction")," should return an object with ",Object(r.mdx)("inlineCode",{parentName:"p"},"type")," property set to the string ",Object(r.mdx)("inlineCode",{parentName:"p"},"LOGIN"),".\nThe store should be initialized with an object with property ",Object(r.mdx)("inlineCode",{parentName:"p"},"login")," set to ",Object(r.mdx)("inlineCode",{parentName:"p"},"false"),".\nThe ",Object(r.mdx)("inlineCode",{parentName:"p"},"store.dispatch()")," method should be used to dispatch an action of type ",Object(r.mdx)("inlineCode",{parentName:"p"},"LOGIN"),".")),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const store = Redux.createStore(\n  (state = {login: false}) => state\n);\n\nconst loginAction = () => {\n  return {\n    type: 'LOGIN'\n  }\n};\n\nstore.dispatch(loginAction());\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"6-handle-an-action-in-the-store"},"6. Handle an Action in the Store"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/redux/handle-an-action-in-the-store"}),"Learn Redux: Handle an Action in the Store | freeCodeCamp.org")),Object(r.mdx)("p",null,"After an action is created and dispatched, the Redux store needs to know how to respond to that action. This is the job of a ",Object(r.mdx)("inlineCode",{parentName:"p"},"reducer")," function. Reducers in Redux are responsible for the state modifications that take place in response to actions. A ",Object(r.mdx)("inlineCode",{parentName:"p"},"reducer")," takes ",Object(r.mdx)("inlineCode",{parentName:"p"},"state")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"action")," as arguments, and it always returns a new ",Object(r.mdx)("inlineCode",{parentName:"p"},"state"),". It is important to see that this is the ",Object(r.mdx)("strong",{parentName:"p"},"only")," role of the reducer. It has no side effects \u2014 it never calls an API endpoint and it never has any hidden surprises. The reducer is simply a pure function that takes state and action, then returns new state.\nAnother key principle in Redux is that ",Object(r.mdx)("inlineCode",{parentName:"p"},"state")," is read-only. In other words, the ",Object(r.mdx)("inlineCode",{parentName:"p"},"reducer")," function must ",Object(r.mdx)("strong",{parentName:"p"},"always")," return a new copy of ",Object(r.mdx)("inlineCode",{parentName:"p"},"state")," and never modify state directly. Redux does not enforce state immutability, however, you are responsible for enforcing it in the code of your reducer functions. You'll practice this in later challenges."),Object(r.mdx)("hr",null),Object(r.mdx)("p",null,"The code editor has the previous example as well as the start of a ",Object(r.mdx)("inlineCode",{parentName:"p"},"reducer")," function for you. Fill in the body of the ",Object(r.mdx)("inlineCode",{parentName:"p"},"reducer")," function so that if it receives an action of type ",Object(r.mdx)("inlineCode",{parentName:"p"},"'LOGIN'")," it returns a state object with ",Object(r.mdx)("inlineCode",{parentName:"p"},"login")," set to ",Object(r.mdx)("inlineCode",{parentName:"p"},"true"),". Otherwise, it returns the current ",Object(r.mdx)("inlineCode",{parentName:"p"},"state"),". Note that the current ",Object(r.mdx)("inlineCode",{parentName:"p"},"state")," and the dispatched ",Object(r.mdx)("inlineCode",{parentName:"p"},"action")," are passed to the reducer, so you can access the action's type directly with ",Object(r.mdx)("inlineCode",{parentName:"p"},"action.type"),"."),Object(r.mdx)("blockquote",null,Object(r.mdx)("p",{parentName:"blockquote"},"Calling the function ",Object(r.mdx)("inlineCode",{parentName:"p"},"loginAction")," should return an object with type property set to the string ",Object(r.mdx)("inlineCode",{parentName:"p"},"LOGIN"),".\nThe store should be initialized with an object with property ",Object(r.mdx)("inlineCode",{parentName:"p"},"login")," set to ",Object(r.mdx)("inlineCode",{parentName:"p"},"false"),".\nDispatching ",Object(r.mdx)("inlineCode",{parentName:"p"},"loginAction")," should update the ",Object(r.mdx)("inlineCode",{parentName:"p"},"login")," property in the store state to ",Object(r.mdx)("inlineCode",{parentName:"p"},"true"),".\nIf the action is not of type ",Object(r.mdx)("inlineCode",{parentName:"p"},"LOGIN"),", the store should return the current state.")),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const defaultState = {\n  login: false\n};\n\nconst reducer = (state = defaultState, action) => {\n  // Change code below this line\n  if (action.type === 'LOGIN') {\n    return {\n      login: true\n    };\n  } else {\n    return state;\n  }\n  // Change code above this line\n};\n\nconst store = Redux.createStore(reducer);\n\nconst loginAction = () => {\n  return {\n    type: 'LOGIN'\n  }\n};\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"7-use-a-switch-statement-to-handle-multiple-actions"},"7. Use a Switch Statement to Handle Multiple Actions"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/redux/use-a-switch-statement-to-handle-multiple-actions"}),"Learn Redux: Use a Switch Statement to Handle Multiple Actions | freeCodeCamp.org")),Object(r.mdx)("p",null,"You can tell the Redux store how to handle multiple action types. Say you are managing user authentication in your Redux store. You want to have a state representation for when users are logged in and when they are logged out. You represent this with a single state object with the property ",Object(r.mdx)("inlineCode",{parentName:"p"},"authenticated"),". You also need action creators that create actions corresponding to user login and user logout, along with the action objects themselves."),Object(r.mdx)("hr",null),Object(r.mdx)("p",null,"The code editor has a store, actions, and action creators set up for you. Fill in the ",Object(r.mdx)("inlineCode",{parentName:"p"},"reducer")," function to handle multiple authentication actions. Use a JavaScript ",Object(r.mdx)("inlineCode",{parentName:"p"},"switch")," statement in the ",Object(r.mdx)("inlineCode",{parentName:"p"},"reducer")," to respond to different action events. This is a standard pattern in writing Redux reducers. The switch statement should switch over ",Object(r.mdx)("inlineCode",{parentName:"p"},"action.type")," and return the appropriate authentication state.\n",Object(r.mdx)("strong",{parentName:"p"},"Note:")," At this point, don't worry about state immutability, since it is small and simple in this example. For each action, you can return a new object \u2014 for example, ",Object(r.mdx)("inlineCode",{parentName:"p"},"{authenticated: true}"),". Also, don't forget to write a ",Object(r.mdx)("inlineCode",{parentName:"p"},"default")," case in your switch statement that returns the current ",Object(r.mdx)("inlineCode",{parentName:"p"},"state"),". This is important because once your app has multiple reducers, they are all run any time an action dispatch is made, even when the action isn't related to that reducer. In such a case, you want to make sure that you return the current ",Object(r.mdx)("inlineCode",{parentName:"p"},"state"),"."),Object(r.mdx)("blockquote",null,Object(r.mdx)("p",{parentName:"blockquote"},"Calling the function ",Object(r.mdx)("inlineCode",{parentName:"p"},"loginUser")," should return an object with type property set to the string ",Object(r.mdx)("inlineCode",{parentName:"p"},"LOGIN"),".\nCalling the function ",Object(r.mdx)("inlineCode",{parentName:"p"},"logoutUser")," should return an object with type property set to the string ",Object(r.mdx)("inlineCode",{parentName:"p"},"LOGOUT"),".\nThe store should be initialized with an object with an ",Object(r.mdx)("inlineCode",{parentName:"p"},"authenticated")," property set to ",Object(r.mdx)("inlineCode",{parentName:"p"},"false"),".\nDispatching ",Object(r.mdx)("inlineCode",{parentName:"p"},"loginUser")," should update the ",Object(r.mdx)("inlineCode",{parentName:"p"},"authenticated")," property in the store state to ",Object(r.mdx)("inlineCode",{parentName:"p"},"true"),".\nDispatching ",Object(r.mdx)("inlineCode",{parentName:"p"},"logoutUser")," should update the ",Object(r.mdx)("inlineCode",{parentName:"p"},"authenticated")," property in the store state to ",Object(r.mdx)("inlineCode",{parentName:"p"},"false"),".\nThe ",Object(r.mdx)("inlineCode",{parentName:"p"},"authReducer")," function should handle multiple action types with a ",Object(r.mdx)("inlineCode",{parentName:"p"},"switch")," statement.")),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const defaultState = {\n  authenticated: false\n};\n\nconst authReducer = (state = defaultState, action) => {\n  // Change code below this line\n  switch(action.type) {\n    case 'LOGIN':\n      return {\n        authenticated: true\n      };\n    case 'LOGOUT':\n      return {\n        authenticated: false\n      };\n    default:\n    return defaultState;\n  }\n  // Change code above this line\n};\n\nconst store = Redux.createStore(authReducer);\n\nconst loginUser = () => {\n  return {\n    type: 'LOGIN'\n  }\n};\n\nconst logoutUser = () => {\n  return {\n    type: 'LOGOUT'\n  }\n};\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"8-use-const-for-action-types"},"8. Use const for Action Types"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/redux/use-const-for-action-types"}),"Learn Redux: Use const for Action Types | freeCodeCamp.org")),Object(r.mdx)("p",null,"A common practice when working with Redux is to assign action types as read-only constants, then reference these constants wherever they are used. You can refactor the code you're working with to write the action types as ",Object(r.mdx)("inlineCode",{parentName:"p"},"const")," declarations."),Object(r.mdx)("hr",null),Object(r.mdx)("p",null,"Declare ",Object(r.mdx)("inlineCode",{parentName:"p"},"LOGIN")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"LOGOUT")," as ",Object(r.mdx)("inlineCode",{parentName:"p"},"const")," values and assign them to the strings ",Object(r.mdx)("inlineCode",{parentName:"p"},"'LOGIN'")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"'LOGOUT'"),", respectively. Then, edit the ",Object(r.mdx)("inlineCode",{parentName:"p"},"authReducer()")," and the action creators to reference these constants instead of string values.\n",Object(r.mdx)("strong",{parentName:"p"},"Note:")," It's generally a convention to write constants in all uppercase, and this is standard practice in Redux as well."),Object(r.mdx)("blockquote",null,Object(r.mdx)("p",{parentName:"blockquote"},"Calling the function ",Object(r.mdx)("inlineCode",{parentName:"p"},"loginUser")," should return an object with ",Object(r.mdx)("inlineCode",{parentName:"p"},"type")," property set to the string ",Object(r.mdx)("inlineCode",{parentName:"p"},"LOGIN"),".\nCalling the function ",Object(r.mdx)("inlineCode",{parentName:"p"},"logoutUser")," should return an object with ",Object(r.mdx)("inlineCode",{parentName:"p"},"type")," property set to the string ",Object(r.mdx)("inlineCode",{parentName:"p"},"LOGOUT"),".\nThe store should be initialized with an object with property ",Object(r.mdx)("inlineCode",{parentName:"p"},"login")," set to ",Object(r.mdx)("inlineCode",{parentName:"p"},"false"),".\nDispatching ",Object(r.mdx)("inlineCode",{parentName:"p"},"loginUser")," should update the ",Object(r.mdx)("inlineCode",{parentName:"p"},"login")," property in the store state to ",Object(r.mdx)("inlineCode",{parentName:"p"},"true"),".\nDispatching ",Object(r.mdx)("inlineCode",{parentName:"p"},"logoutUser")," should update the ",Object(r.mdx)("inlineCode",{parentName:"p"},"login")," property in the store state to ",Object(r.mdx)("inlineCode",{parentName:"p"},"false"),".\nThe ",Object(r.mdx)("inlineCode",{parentName:"p"},"authReducer")," function should handle multiple action types with a switch statement.\n",Object(r.mdx)("inlineCode",{parentName:"p"},"LOGIN")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"LOGOUT")," should be declared as ",Object(r.mdx)("inlineCode",{parentName:"p"},"const")," values and should be assigned strings of ",Object(r.mdx)("inlineCode",{parentName:"p"},"LOGIN"),"and ",Object(r.mdx)("inlineCode",{parentName:"p"},"LOGOUT"),".\nThe action creators and the reducer should reference the ",Object(r.mdx)("inlineCode",{parentName:"p"},"LOGIN")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"LOGOUT")," constants.")),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// Change code below this line\nconst LOGIN = 'LOGIN';\nconst LOGOUT = 'LOGOUT';\n// Change code above this line\n\nconst defaultState = {\n  authenticated: false\n};\n\nconst authReducer = (state = defaultState, action) => {\n  switch (action.type) {\n    case LOGIN:\n      return {\n        authenticated: true\n      }\n    case LOGOUT:\n      return {\n        authenticated: false\n      }\n    default:\n      return state;\n  }\n};\n\nconst store = Redux.createStore(authReducer);\n\nconst loginUser = () => {\n  return {\n    type: LOGIN\n  }\n};\n\nconst logoutUser = () => {\n  return {\n    type: LOGOUT\n  }\n};\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"9-register-a-store-listener"},"9. Register a Store Listener"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/redux/register-a-store-listener"}),"Learn Redux: Register a Store Listener | freeCodeCamp.org")),Object(r.mdx)("p",null,"Another method you have access to on the Redux ",Object(r.mdx)("inlineCode",{parentName:"p"},"store")," object is ",Object(r.mdx)("inlineCode",{parentName:"p"},"store.subscribe()"),". This allows you to subscribe listener functions to the store, which are called whenever an action is dispatched against the store. One simple use for this method is to subscribe a function to your store that simply logs a message every time an action is received and the store is updated."),Object(r.mdx)("hr",null),Object(r.mdx)("p",null,"Write a callback function that increments the global variable ",Object(r.mdx)("inlineCode",{parentName:"p"},"count")," every time the store receives an action, and pass this function in to the ",Object(r.mdx)("inlineCode",{parentName:"p"},"store.subscribe()")," method. You'll see that ",Object(r.mdx)("inlineCode",{parentName:"p"},"store.dispatch()")," is called three times in a row, each time directly passing in an action object. Watch the console output between the action dispatches to see the updates take place."),Object(r.mdx)("blockquote",null,Object(r.mdx)("p",{parentName:"blockquote"},"Dispatching the ",Object(r.mdx)("inlineCode",{parentName:"p"},"ADD")," action on the store should increment the state by ",Object(r.mdx)("inlineCode",{parentName:"p"},"1"),".\nThere should be a listener function subscribed to the store using ",Object(r.mdx)("inlineCode",{parentName:"p"},"store.subscribe"),".\nThe callback to ",Object(r.mdx)("inlineCode",{parentName:"p"},"store.subscribe")," should also increment the global ",Object(r.mdx)("inlineCode",{parentName:"p"},"count")," variable as the store is updated.")),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const ADD = 'ADD';\n\nconst reducer = (state = 0, action) => {\n  switch(action.type) {\n    case ADD:\n      return state + 1;\n    default:\n      return state;\n  }\n};\n\nconst store = Redux.createStore(reducer);\n\n// Global count variable:\nlet count = 0;\n\n// Change code below this line\nconst callBack = () => (count += 1);\nstore.subscribe(callBack);\n// Change code above this line\n\nstore.dispatch({type: ADD});\nconsole.log(count); // 1\nstore.dispatch({type: ADD});\nconsole.log(count); // 2\nstore.dispatch({type: ADD});\nconsole.log(count); // 3\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"10-combine-multiple-reducers"},"10. Combine Multiple Reducers"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/redux/combine-multiple-reducers"}),"Learn Redux: Combine Multiple Reducers | freeCodeCamp.org")),Object(r.mdx)("p",null,"When the state of your app begins to grow more complex, it may be tempting to divide state into multiple pieces. Instead, remember the first principle of Redux: all app state is held in a single state object in the store. Therefore, Redux provides reducer composition as a solution for a complex state model. You define multiple reducers to handle different pieces of your application's state, then compose these reducers together into one root reducer. The root reducer is then passed into the Redux ",Object(r.mdx)("inlineCode",{parentName:"p"},"createStore()")," method.\nIn order to let us combine multiple reducers together, Redux provides the ",Object(r.mdx)("inlineCode",{parentName:"p"},"combineReducers()")," method. This method accepts an object as an argument in which you define properties which associate keys to specific reducer functions. The name you give to the keys will be used by Redux as the name for the associated piece of state.\nTypically, it is a good practice to create a reducer for each piece of application state when they are distinct or unique in some way. For example, in a note-taking app with user authentication, one reducer could handle authentication while another handles the text and notes that the user is submitting. For such an application, we might write the ",Object(r.mdx)("inlineCode",{parentName:"p"},"combineReducers()")," method like this:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const rootReducer = Redux.combineReducers({\n  auth: authenticationReducer,\n  notes: notesReducer\n});\n")),Object(r.mdx)("p",null,"Now, the key ",Object(r.mdx)("inlineCode",{parentName:"p"},"notes")," will contain all of the state associated with our notes and handled by our ",Object(r.mdx)("inlineCode",{parentName:"p"},"notesReducer"),". This is how multiple reducers can be composed to manage more complex application state. In this example, the state held in the Redux store would then be a single object containing ",Object(r.mdx)("inlineCode",{parentName:"p"},"auth")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"notes")," properties."),Object(r.mdx)("hr",null),Object(r.mdx)("p",null,"There are ",Object(r.mdx)("inlineCode",{parentName:"p"},"counterReducer()")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"authReducer()")," functions provided in the code editor, along with a Redux store. Finish writing the ",Object(r.mdx)("inlineCode",{parentName:"p"},"rootReducer()")," function using the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Redux.combineReducers()")," method. Assign ",Object(r.mdx)("inlineCode",{parentName:"p"},"counterReducer")," to a key called ",Object(r.mdx)("inlineCode",{parentName:"p"},"count")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"authReducer")," to a key called ",Object(r.mdx)("inlineCode",{parentName:"p"},"auth"),"."),Object(r.mdx)("blockquote",null,Object(r.mdx)("p",{parentName:"blockquote"},"The ",Object(r.mdx)("inlineCode",{parentName:"p"},"counterReducer")," should increment and decrement the ",Object(r.mdx)("inlineCode",{parentName:"p"},"state"),".\nThe ",Object(r.mdx)("inlineCode",{parentName:"p"},"authReducer")," should toggle the ",Object(r.mdx)("inlineCode",{parentName:"p"},"state")," of ",Object(r.mdx)("inlineCode",{parentName:"p"},"authenticated")," between ",Object(r.mdx)("inlineCode",{parentName:"p"},"true")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"false"),".\nThe store ",Object(r.mdx)("inlineCode",{parentName:"p"},"state")," should have two keys: ",Object(r.mdx)("inlineCode",{parentName:"p"},"count"),", which holds a number, and ",Object(r.mdx)("inlineCode",{parentName:"p"},"auth"),", which holds an object. The ",Object(r.mdx)("inlineCode",{parentName:"p"},"auth")," object should have a property of ",Object(r.mdx)("inlineCode",{parentName:"p"},"authenticated"),", which holds a boolean.\nThe ",Object(r.mdx)("inlineCode",{parentName:"p"},"rootReducer")," should be a function that combines the ",Object(r.mdx)("inlineCode",{parentName:"p"},"counterReducer")," and the ",Object(r.mdx)("inlineCode",{parentName:"p"},"authReducer"),".")),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const INCREMENT = 'INCREMENT';\nconst DECREMENT = 'DECREMENT';\n\nconst counterReducer = (state = 0, action) => {\n  switch(action.type) {\n    case INCREMENT:\n      return state + 1;\n    case DECREMENT:\n      return state - 1;\n    default:\n      return state;\n  }\n};\n\nconst LOGIN = 'LOGIN';\nconst LOGOUT = 'LOGOUT';\n\nconst authReducer = (state = {authenticated: false}, action) => {\n  switch(action.type) {\n    case LOGIN:\n      return {\n        authenticated: true\n      }\n    case LOGOUT:\n      return {\n        authenticated: false\n      }\n    default:\n      return state;\n  }\n};\n\n// Define the root reducer here\nconst rootReducer = Redux.combineReducers({\n  auth: authReducer,\n  count: counterReducer\n});\n\nconst store = Redux.createStore(rootReducer);\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"11-send-action-data-to-the-store"},"11. Send Action Data to the Store"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/redux/send-action-data-to-the-store"}),"Learn Redux: Send Action Data to the Store | freeCodeCamp.org")),Object(r.mdx)("p",null,"By now you've learned how to dispatch actions to the Redux store, but so far these actions have not contained any information other than a ",Object(r.mdx)("inlineCode",{parentName:"p"},"type"),". You can also send specific data along with your actions. In fact, this is very common because actions usually originate from some user interaction and tend to carry some data with them. The Redux store often needs to know about this data."),Object(r.mdx)("hr",null),Object(r.mdx)("p",null,"There's a basic ",Object(r.mdx)("inlineCode",{parentName:"p"},"notesReducer()")," and an ",Object(r.mdx)("inlineCode",{parentName:"p"},"addNoteText()")," action creator defined in the code editor. Finish the body of the ",Object(r.mdx)("inlineCode",{parentName:"p"},"addNoteText()")," function so that it returns an ",Object(r.mdx)("inlineCode",{parentName:"p"},"action")," object. The object should include a ",Object(r.mdx)("inlineCode",{parentName:"p"},"type")," property with a value of ",Object(r.mdx)("inlineCode",{parentName:"p"},"ADD_NOTE"),", and also a ",Object(r.mdx)("inlineCode",{parentName:"p"},"text")," property set to the ",Object(r.mdx)("inlineCode",{parentName:"p"},"note")," data that's passed into the action creator. When you call the action creator, you'll pass in specific note information that you can access for the object.\nNext, finish writing the ",Object(r.mdx)("inlineCode",{parentName:"p"},"switch")," statement in the ",Object(r.mdx)("inlineCode",{parentName:"p"},"notesReducer()"),". You need to add a case that handles the ",Object(r.mdx)("inlineCode",{parentName:"p"},"addNoteText()")," actions. This case should be triggered whenever there is an action of type ",Object(r.mdx)("inlineCode",{parentName:"p"},"ADD_NOTE")," and it should return the ",Object(r.mdx)("inlineCode",{parentName:"p"},"text")," property on the incoming ",Object(r.mdx)("inlineCode",{parentName:"p"},"action")," as the new ",Object(r.mdx)("inlineCode",{parentName:"p"},"state"),".\nThe action is dispatched at the bottom of the code. Once you're finished, run the code and watch the console. That's all it takes to send action-specific data to the store and use it when you update store ",Object(r.mdx)("inlineCode",{parentName:"p"},"state"),"."),Object(r.mdx)("blockquote",null,Object(r.mdx)("p",{parentName:"blockquote"},"The action creator ",Object(r.mdx)("inlineCode",{parentName:"p"},"addNoteText")," should return an object with keys ",Object(r.mdx)("inlineCode",{parentName:"p"},"type")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"text"),".\nDispatching an action of type ",Object(r.mdx)("inlineCode",{parentName:"p"},"ADD_NOTE")," with the ",Object(r.mdx)("inlineCode",{parentName:"p"},"addNoteText")," action creator should update the ",Object(r.mdx)("inlineCode",{parentName:"p"},"state")," to the string passed to the action creator.")),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const ADD_NOTE = 'ADD_NOTE';\n\nconst notesReducer = (state = 'Initial State', action) => {\n  switch(action.type) {\n    // Change code below this line\n    case ADD_NOTE:\n      return action.text;\n    // Change code above this line\n    default:\n      return state;\n  }\n};\n\nconst addNoteText = (note) => {\n  // Change code below this line\n  return {\n    type: ADD_NOTE,\n    text: note\n  };\n  // Change code above this line\n};\n\nconst store = Redux.createStore(notesReducer);\n\nconsole.log(store.getState()); // Initial State\nstore.dispatch(addNoteText('Hello!'));\nconsole.log(store.getState()); // Hello!\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"12-use-middleware-to-handle-asynchronous-actions"},"12. Use Middleware to Handle Asynchronous Actions"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/redux/use-middleware-to-handle-asynchronous-actions"}),"Learn Redux: Use Middleware to Handle Asynchronous Actions | freeCodeCamp.org")),Object(r.mdx)("p",null,"So far these challenges have avoided discussing asynchronous actions, but they are an unavoidable part of web development. At some point you'll need to call asynchronous endpoints in your Redux app, so how do you handle these types of requests? Redux provides middleware designed specifically for this purpose, called Redux Thunk middleware. Here's a brief description how to use this with Redux.\nTo include Redux Thunk middleware, you pass it as an argument to ",Object(r.mdx)("inlineCode",{parentName:"p"},"Redux.applyMiddleware()"),". This statement is then provided as a second optional parameter to the ",Object(r.mdx)("inlineCode",{parentName:"p"},"createStore()")," function. Take a look at the code at the bottom of the editor to see this. Then, to create an asynchronous action, you return a function in the action creator that takes ",Object(r.mdx)("inlineCode",{parentName:"p"},"dispatch")," as an argument. Within this function, you can dispatch actions and perform asynchronous requests.\nIn this example, an asynchronous request is simulated with a ",Object(r.mdx)("inlineCode",{parentName:"p"},"setTimeout()")," call. It's common to dispatch an action before initiating any asynchronous behavior so that your application state knows that some data is being requested (this state could display a loading icon, for instance). Then, once you receive the data, you dispatch another action which carries the data as a payload along with information that the action is completed.\nRemember that you're passing ",Object(r.mdx)("inlineCode",{parentName:"p"},"dispatch")," as a parameter to this special action creator. This is what you'll use to dispatch your actions, you simply pass the action directly to dispatch and the middleware takes care of the rest."),Object(r.mdx)("hr",null),Object(r.mdx)("p",null,"Write both dispatches in the ",Object(r.mdx)("inlineCode",{parentName:"p"},"handleAsync()")," action creator. Dispatch ",Object(r.mdx)("inlineCode",{parentName:"p"},"requestingData()")," before the ",Object(r.mdx)("inlineCode",{parentName:"p"},"setTimeout()")," (the simulated API call). Then, after you receive the (pretend) data, dispatch the ",Object(r.mdx)("inlineCode",{parentName:"p"},"receivedData()")," action, passing in this data. Now you know how to handle asynchronous actions in Redux. Everything else continues to behave as before."),Object(r.mdx)("blockquote",null,Object(r.mdx)("p",{parentName:"blockquote"},"The ",Object(r.mdx)("inlineCode",{parentName:"p"},"requestingData")," action creator should return an object of type equal to the value of ",Object(r.mdx)("inlineCode",{parentName:"p"},"REQUESTING_DATA"),".\nThe ",Object(r.mdx)("inlineCode",{parentName:"p"},"receivedData")," action creator should return an object of type equal to the value of ",Object(r.mdx)("inlineCode",{parentName:"p"},"RECEIVED_DATA"),".\n",Object(r.mdx)("inlineCode",{parentName:"p"},"asyncDataReducer")," should be a function.\nDispatching the requestingData action creator should update the store ",Object(r.mdx)("inlineCode",{parentName:"p"},"state")," property of fetching to ",Object(r.mdx)("inlineCode",{parentName:"p"},"true"),".\nDispatching ",Object(r.mdx)("inlineCode",{parentName:"p"},"handleAsync")," should dispatch the data request action and then dispatch the received data action after a delay.")),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const REQUESTING_DATA = 'REQUESTING_DATA'\nconst RECEIVED_DATA = 'RECEIVED_DATA'\n\nconst requestingData = () => { return {type: REQUESTING_DATA} }\nconst receivedData = (data) => { return {type: RECEIVED_DATA, users: data.users} }\n\nconst handleAsync = () => {\n  return function(dispatch) {\n    // Dispatch request action here\n    dispatch(requestingData());\n    setTimeout(function() {\n      let data = {\n        users: ['Jeff', 'William', 'Alice']\n      }\n      // Dispatch received data action here\n      dispatch(receivedData(data));\n    }, 2500);\n  }\n};\n\nconst defaultState = {\n  fetching: false,\n  users: []\n};\n\nconst asyncDataReducer = (state = defaultState, action) => {\n  switch(action.type) {\n    case REQUESTING_DATA:\n      return {\n        fetching: true,\n        users: []\n      }\n    case RECEIVED_DATA:\n      return {\n        fetching: false,\n        users: action.users\n      }\n    default:\n      return state;\n  }\n};\n\nconst store = Redux.createStore(\n  asyncDataReducer,\n  Redux.applyMiddleware(ReduxThunk.default)\n);\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"13-write-a-counter-with-redux"},"13. Write a Counter with Redux"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/redux/write-a-counter-with-redux"}),"Learn Redux: Write a Counter with Redux | freeCodeCamp.org")),Object(r.mdx)("p",null,"Now you've learned all the core principles of Redux! You've seen how to create actions and action creators, create a Redux store, dispatch your actions against the store, and design state updates with pure reducers. You've even seen how to manage complex state with reducer composition and handle asynchronous actions. These examples are simplistic, but these concepts are the core principles of Redux. If you understand them well, you're ready to start building your own Redux app. The next challenges cover some of the details regarding ",Object(r.mdx)("inlineCode",{parentName:"p"},"state")," immutability, but first, here's a review of everything you've learned so far."),Object(r.mdx)("hr",null),Object(r.mdx)("p",null,"In this lesson, you'll implement a simple counter with Redux from scratch. The basics are provided in the code editor, but you'll have to fill in the details! Use the names that are provided and define ",Object(r.mdx)("inlineCode",{parentName:"p"},"incAction")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"decAction")," action creators, the ",Object(r.mdx)("inlineCode",{parentName:"p"},"counterReducer()"),", ",Object(r.mdx)("inlineCode",{parentName:"p"},"INCREMENT")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"DECREMENT")," action types, and finally the Redux ",Object(r.mdx)("inlineCode",{parentName:"p"},"store"),". Once you're finished you should be able to dispatch ",Object(r.mdx)("inlineCode",{parentName:"p"},"INCREMENT")," or ",Object(r.mdx)("inlineCode",{parentName:"p"},"DECREMENT")," actions to increment or decrement the state held in the ",Object(r.mdx)("inlineCode",{parentName:"p"},"store"),". Good luck building your first Redux app!"),Object(r.mdx)("blockquote",null,Object(r.mdx)("p",{parentName:"blockquote"},"The action creator ",Object(r.mdx)("inlineCode",{parentName:"p"},"incAction")," should return an action object with ",Object(r.mdx)("inlineCode",{parentName:"p"},"type")," equal to the value of ",Object(r.mdx)("inlineCode",{parentName:"p"},"INCREMENT"),".\nThe action creator ",Object(r.mdx)("inlineCode",{parentName:"p"},"decAction")," should return an action object with ",Object(r.mdx)("inlineCode",{parentName:"p"},"type")," equal to the value of ",Object(r.mdx)("inlineCode",{parentName:"p"},"DECREMENT"),".\nThe Redux store should initialize with a ",Object(r.mdx)("inlineCode",{parentName:"p"},"state")," of 0.\nDispatching ",Object(r.mdx)("inlineCode",{parentName:"p"},"incAction")," on the Redux store should increment the ",Object(r.mdx)("inlineCode",{parentName:"p"},"state")," by 1.\nDispatching ",Object(r.mdx)("inlineCode",{parentName:"p"},"decAction")," on the Redux store should decrement the ",Object(r.mdx)("inlineCode",{parentName:"p"},"state")," by 1.\n",Object(r.mdx)("inlineCode",{parentName:"p"},"counterReducer")," should be a function.")),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const INCREMENT = 'INCREMENT';\nconst DECREMENT = 'DECREMENT';\n\nconst counterReducer = (state = 0, action) => {\n  switch(action.type) {\n    case INCREMENT:\n      return state + 1;\n    case DECREMENT:\n      return state - 1;\n    default:\n      return state;\n  }\n};\n\nconst incAction = () => {\n  return {\n    type: INCREMENT\n  };\n};\n\nconst decAction = () => {\n  return {\n    type: DECREMENT\n  };\n};\n\nconst store = Redux.createStore(counterReducer);\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"14-never-mutate-state"},"14. Never Mutate State"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/redux/never-mutate-state"}),"Learn Redux: Never Mutate State | freeCodeCamp.org")),Object(r.mdx)("p",null,"These final challenges describe several methods of enforcing the key principle of state immutability in Redux. Immutable state means that you never modify state directly, instead, you return a new copy of state.\nIf you took a snapshot of the state of a Redux app over time, you would see something like ",Object(r.mdx)("inlineCode",{parentName:"p"},"state 1"),", ",Object(r.mdx)("inlineCode",{parentName:"p"},"state 2"),", ",Object(r.mdx)("inlineCode",{parentName:"p"},"state 3"),",",Object(r.mdx)("inlineCode",{parentName:"p"},"state 4"),", ",Object(r.mdx)("inlineCode",{parentName:"p"},"...")," and so on where each state may be similar to the last, but each is a distinct piece of data. This immutability, in fact, is what provides such features as time-travel debugging that you may have heard about.\nRedux does not actively enforce state immutability in its store or reducers, that responsibility falls on the programmer. Fortunately, JavaScript (especially ES6) provides several useful tools you can use to enforce the immutability of your state, whether it is a ",Object(r.mdx)("inlineCode",{parentName:"p"},"string"),", ",Object(r.mdx)("inlineCode",{parentName:"p"},"number"),", ",Object(r.mdx)("inlineCode",{parentName:"p"},"array"),", or ",Object(r.mdx)("inlineCode",{parentName:"p"},"object"),". Note that strings and numbers are primitive values and are immutable by nature. In other words, 3 is always 3. You cannot change the value of the number 3. An ",Object(r.mdx)("inlineCode",{parentName:"p"},"array")," or ",Object(r.mdx)("inlineCode",{parentName:"p"},"object"),", however, is mutable. In practice, your state will probably consist of an ",Object(r.mdx)("inlineCode",{parentName:"p"},"array")," or ",Object(r.mdx)("inlineCode",{parentName:"p"},"object"),", as these are useful data structures for representing many types of information."),Object(r.mdx)("hr",null),Object(r.mdx)("p",null,"There is a ",Object(r.mdx)("inlineCode",{parentName:"p"},"store")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"reducer")," in the code editor for managing to-do items. Finish writing the ",Object(r.mdx)("inlineCode",{parentName:"p"},"ADD_TO_DO")," case in the reducer to append a new to-do to the state. There are a few ways to accomplish this with standard JavaScript or ES6. See if you can find a way to return a new array with the item from ",Object(r.mdx)("inlineCode",{parentName:"p"},"action.todo")," appended to the end."),Object(r.mdx)("blockquote",null,Object(r.mdx)("p",{parentName:"blockquote"},"The Redux store should exist and initialize with a state equal to the ",Object(r.mdx)("inlineCode",{parentName:"p"},"todos")," array in the code editor.\n",Object(r.mdx)("inlineCode",{parentName:"p"},"addToDo")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"immutableReducer")," both should be functions.\nDispatching an action of type ",Object(r.mdx)("inlineCode",{parentName:"p"},"ADD_TO_DO")," on the Redux store should add a ",Object(r.mdx)("inlineCode",{parentName:"p"},"todo")," item and should NOT mutate state.")),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const ADD_TO_DO = 'ADD_TO_DO';\n\n// A list of strings representing tasks to do:\nconst todos = [\n  'Go to the store',\n  'Clean the house',\n  'Cook dinner',\n  'Learn to code',\n];\n\nconst immutableReducer = (state = todos, action) => {\n  switch(action.type) {\n    case ADD_TO_DO:\n      // Don't mutate state here or the tests will fail\n      return state.concat(action.todo);\n    default:\n      return state;\n  }\n};\n\nconst addToDo = (todo) => {\n  return {\n    type: ADD_TO_DO,\n    todo\n  }\n}\n\nconst store = Redux.createStore(immutableReducer);\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"15-use-the-spread-operator-on-arrays"},"15. Use the Spread Operator on Arrays"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/redux/use-the-spread-operator-on-arrays"}),"Learn Redux: Use the Spread Operator on Arrays | freeCodeCamp.org")),Object(r.mdx)("p",null,"One solution from ES6 to help enforce state immutability in Redux is the spread operator: ",Object(r.mdx)("inlineCode",{parentName:"p"},"..."),". The spread operator has a variety of applications, one of which is well-suited to the previous challenge of producing a new array from an existing array. This is relatively new, but commonly used syntax. For example, if you have an array ",Object(r.mdx)("inlineCode",{parentName:"p"},"myArray")," and write:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let newArray = [...myArray];\n")),Object(r.mdx)("p",null,Object(r.mdx)("inlineCode",{parentName:"p"},"newArray")," is now a clone of ",Object(r.mdx)("inlineCode",{parentName:"p"},"myArray"),". Both arrays still exist separately in memory. If you perform a mutation like ",Object(r.mdx)("inlineCode",{parentName:"p"},"newArray.push(5)"),", ",Object(r.mdx)("inlineCode",{parentName:"p"},"myArray")," doesn't change. The ",Object(r.mdx)("inlineCode",{parentName:"p"},"...")," effectively ",Object(r.mdx)("em",{parentName:"p"},"spreads")," out the values in ",Object(r.mdx)("inlineCode",{parentName:"p"},"myArray")," into a new array. To clone an array but add additional values in the new array, you could write ",Object(r.mdx)("inlineCode",{parentName:"p"},"[...myArray, 'new value']"),". This would return a new array composed of the values in ",Object(r.mdx)("inlineCode",{parentName:"p"},"myArray")," and the string ",Object(r.mdx)("inlineCode",{parentName:"p"},"'new value'")," as the last value. The spread syntax can be used multiple times in array composition like this, but it's important to note that it only makes a shallow copy of the array. That is to say, it only provides immutable array operations for one-dimensional arrays."),Object(r.mdx)("hr",null),Object(r.mdx)("p",null,"Use the spread operator to return a new copy of state when a to-do is added."),Object(r.mdx)("blockquote",null,Object(r.mdx)("p",{parentName:"blockquote"},"The Redux store should exist and initialize with a state equal to ",Object(r.mdx)("inlineCode",{parentName:"p"},"[Do not mutate state!]"),".\n",Object(r.mdx)("inlineCode",{parentName:"p"},"addToDo")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"immutableReducer")," both should be functions.\nDispatching an action of type ",Object(r.mdx)("inlineCode",{parentName:"p"},"ADD_TO_DO")," on the Redux store should add a ",Object(r.mdx)("inlineCode",{parentName:"p"},"todo")," item and should NOT mutate state.\nThe spread operator should be used to return new state.")),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const immutableReducer = (state = ['Do not mutate state!'], action) => {\n  switch(action.type) {\n    case 'ADD_TO_DO':\n      // Don't mutate state here or the tests will fail\n      let arr = [...state, action.todo];\n      return arr;\n    default:\n      return state;\n  }\n};\n\nconst addToDo = (todo) => {\n  return {\n    type: 'ADD_TO_DO',\n    todo\n  }\n}\n\nconst store = Redux.createStore(immutableReducer);\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"16-remove-an-item-from-an-array"},"16. Remove an Item from an Array"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/redux/remove-an-item-from-an-array"}),"Learn Redux: Remove an Item from an Array | freeCodeCamp.org")),Object(r.mdx)("p",null,"Time to practice removing items from an array. The spread operator can be used here as well. Other useful JavaScript methods include ",Object(r.mdx)("inlineCode",{parentName:"p"},"slice()")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"concat()"),"."),Object(r.mdx)("hr",null),Object(r.mdx)("p",null,"The reducer and action creator were modified to remove an item from an array based on the index of the item. Finish writing the reducer so a new state array is returned with the item at the specific index removed."),Object(r.mdx)("blockquote",null,Object(r.mdx)("p",{parentName:"blockquote"},"The Redux store should exist and initialize with a state equal to ",Object(r.mdx)("inlineCode",{parentName:"p"},"[0,1,2,3,4,5]"),".\n",Object(r.mdx)("inlineCode",{parentName:"p"},"removeItem")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"immutableReducer")," both should be functions.\nDispatching the ",Object(r.mdx)("inlineCode",{parentName:"p"},"removeItem")," action creator should remove items from the state and should NOT mutate state.")),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const immutableReducer = (state = [0,1,2,3,4,5], action) => {\n  switch(action.type) {\n    case 'REMOVE_ITEM':\n      // Don't mutate state here or the tests will fail\n      return [\n        ...state.slice(0, action.index),\n        ...state.slice(action.index + 1, state.length)\n      ];\n      // or return state.slice(0, action.index).concat(state.slice(action.index + 1, state.length));\n    default:\n      return state;\n  }\n};\n\nconst removeItem = index => {\n  return {\n    type: \"REMOVE_ITEM\",\n    index\n  };\n};\n\nconst store = Redux.createStore(immutableReducer);\n")),Object(r.mdx)("hr",null),Object(r.mdx)("h2",{id:"17-copy-an-object-with-objectassign"},"17. Copy an Object with Object.assign"),Object(r.mdx)("p",null,Object(r.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/redux/copy-an-object-with-object-assign"}),"Learn Redux: Copy an Object with Object.assign | freeCodeCamp.org")),Object(r.mdx)("p",null,"The last several challenges worked with arrays, but there are ways to help enforce state immutability when state is an ",Object(r.mdx)("inlineCode",{parentName:"p"},"object"),", too. A useful tool for handling objects is the ",Object(r.mdx)("inlineCode",{parentName:"p"},"Object.assign()")," utility. ",Object(r.mdx)("inlineCode",{parentName:"p"},"Object.assign()")," takes a target object and source objects and maps properties from the source objects to the target object. Any matching properties are overwritten by properties in the source objects. This behavior is commonly used to make shallow copies of objects by passing an empty object as the first argument followed by the object(s) you want to copy. Here's an example:"),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const newObject = Object.assign({}, obj1, obj2);\n")),Object(r.mdx)("p",null,"This creates ",Object(r.mdx)("inlineCode",{parentName:"p"},"newObject")," as a new ",Object(r.mdx)("inlineCode",{parentName:"p"},"object"),", which contains the properties that currently exist in ",Object(r.mdx)("inlineCode",{parentName:"p"},"obj1")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"obj2"),"."),Object(r.mdx)("hr",null),Object(r.mdx)("p",null,"The Redux state and actions were modified to handle an ",Object(r.mdx)("inlineCode",{parentName:"p"},"object")," for the ",Object(r.mdx)("inlineCode",{parentName:"p"},"state"),". Edit the code to return a new ",Object(r.mdx)("inlineCode",{parentName:"p"},"state")," object for actions with type ",Object(r.mdx)("inlineCode",{parentName:"p"},"ONLINE"),", which set the ",Object(r.mdx)("inlineCode",{parentName:"p"},"status")," property to the string ",Object(r.mdx)("inlineCode",{parentName:"p"},"online"),". Try to use ",Object(r.mdx)("inlineCode",{parentName:"p"},"Object.assign()")," to complete the challenge."),Object(r.mdx)("blockquote",null,Object(r.mdx)("p",{parentName:"blockquote"},"The Redux store should exist and initialize with a state that is equivalent to the ",Object(r.mdx)("inlineCode",{parentName:"p"},"defaultState")," object declared on line 1.\n",Object(r.mdx)("inlineCode",{parentName:"p"},"wakeUp")," and ",Object(r.mdx)("inlineCode",{parentName:"p"},"immutableReducer")," both should be functions.\nDispatching an action of type ",Object(r.mdx)("inlineCode",{parentName:"p"},"ONLINE")," should update the property ",Object(r.mdx)("inlineCode",{parentName:"p"},"status")," in state to ",Object(r.mdx)("inlineCode",{parentName:"p"},"online")," and should NOT mutate state.\n",Object(r.mdx)("inlineCode",{parentName:"p"},"Object.assign")," should be used to return new state.")),Object(r.mdx)("pre",null,Object(r.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const defaultState = {\n  user: 'CamperBot',\n  status: 'offline',\n  friends: '732,982',\n  community: 'freeCodeCamp'\n};\n\nconst immutableReducer = (state = defaultState, action) => {\n  switch(action.type) {\n    case 'ONLINE':\n      // Don't mutate state here or the tests will fail\n      return Object.assign({}, state, { status: \"online\" });\n    default:\n      return state;\n  }\n};\n\nconst wakeUp = () => {\n  return {\n    type: 'ONLINE'\n  }\n};\n\nconst store = Redux.createStore(immutableReducer);\n")))}l.isMDXComponent=!0},214:function(e,t,n){"use strict";n.r(t),n.d(t,"MDXContext",(function(){return l})),n.d(t,"MDXProvider",(function(){return u})),n.d(t,"mdx",(function(){return x})),n.d(t,"useMDXComponents",(function(){return m})),n.d(t,"withMDXComponents",(function(){return p}));var a=n(0),o=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function d(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?d(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):d(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=o.a.createContext({}),p=function(e){return function(t){var n=m(t.components);return o.a.createElement(e,i({},t,{components:n}))}},m=function(e){var t=o.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=m(e.components);return o.a.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),l=m(n),p=a,u=l["".concat(i,".").concat(p)]||l[p]||h[p]||r;return n?o.a.createElement(u,c(c({ref:t},d),{},{components:n})):o.a.createElement(u,c({ref:t},d))}));function x(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=b;var d={};for(var c in t)hasOwnProperty.call(t,c)&&(d[c]=t[c]);d.originalType=e,d.mdxType="string"==typeof e?e:a,i[1]=d;for(var s=2;s<r;s++)i[s]=n[s];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{212:function(e,t,n){"use strict";n.r(t),n.d(t,"MDXContext",(function(){return l})),n.d(t,"MDXProvider",(function(){return h})),n.d(t,"mdx",(function(){return x})),n.d(t,"useMDXComponents",(function(){return m})),n.d(t,"withMDXComponents",(function(){return c}));var a=n(0),o=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function d(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?d(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):d(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=o.a.createContext({}),c=function(e){return function(t){var n=m(t.components);return o.a.createElement(e,r({},t,{components:n}))}},m=function(e){var t=o.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},h=function(e){var t=m(e.components);return o.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=o.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,r=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),l=m(n),c=a,h=l["".concat(r,".").concat(c)]||l[c]||u[c]||i;return n?o.a.createElement(h,p(p({ref:t},d),{},{components:n})):o.a.createElement(h,p({ref:t},d))}));function x(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=b;var d={};for(var p in t)hasOwnProperty.call(t,p)&&(d[p]=t[p]);d.originalType=e,d.mdxType="string"==typeof e?e:a,r[1]=d;for(var s=2;s<i;s++)r[s]=n[s];return o.a.createElement.apply(null,r)}return o.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},96:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return d})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return l}));var a=n(3),o=n(7),i=(n(0),n(212)),r={id:"freeCodeCamp-React",title:"React"},d={unversionedId:"freeCodeCamp/freeCodeCamp-React",id:"freeCodeCamp/freeCodeCamp-React",isDocsHomePage:!1,title:"React",description:"Introduction to the React Challenges",source:"@site/docs/freeCodeCamp/freeCodeCamp-React.md",slug:"/freeCodeCamp/freeCodeCamp-React",permalink:"/docs/freeCodeCamp/freeCodeCamp-React",editUrl:"https://github.com/gylgyl2000/laloutre.github.io/edit/main/docs/freeCodeCamp/freeCodeCamp-React.md",version:"current"},p=[{value:"Introduction to the React Challenges",id:"introduction-to-the-react-challenges",children:[]},{value:"1. Create a Simple JSX Element",id:"1-create-a-simple-jsx-element",children:[]},{value:"2. Create a Complex JSX Element",id:"2-create-a-complex-jsx-element",children:[]},{value:"3. Add Comments in JSX",id:"3-add-comments-in-jsx",children:[]},{value:"4. Render HTML Elements to the DOM",id:"4-render-html-elements-to-the-dom",children:[]},{value:"5. Define an HTML Class in JSX",id:"5-define-an-html-class-in-jsx",children:[]},{value:"6. Learn About Self-Closing JSX Tags",id:"6-learn-about-self-closing-jsx-tags",children:[]},{value:"7. Create a Stateless Functional Component",id:"7-create-a-stateless-functional-component",children:[]},{value:"8. Create a React Component",id:"8-create-a-react-component",children:[]},{value:"9. Create a Component with Composition",id:"9-create-a-component-with-composition",children:[]},{value:"10. Use React to Render Nested Components",id:"10-use-react-to-render-nested-components",children:[]},{value:"11. Compose React Components",id:"11-compose-react-components",children:[]},{value:"12. Render a Class Component to the DOM",id:"12-render-a-class-component-to-the-dom",children:[]},{value:"13. Write a React Component from Scratch",id:"13-write-a-react-component-from-scratch",children:[]},{value:"14. Pass Props to a Stateless Functional Component",id:"14-pass-props-to-a-stateless-functional-component",children:[]},{value:"15. Pass an Array as Props",id:"15-pass-an-array-as-props",children:[]},{value:"16. Use Default Props",id:"16-use-default-props",children:[]},{value:"17. Override Default Props",id:"17-override-default-props",children:[]},{value:"18. Use PropTypes to Define the Props You Expect",id:"18-use-proptypes-to-define-the-props-you-expect",children:[]},{value:"19. Access Props Using this.props",id:"19-access-props-using-thisprops",children:[]},{value:"20. Review Using Props with Stateless Functional Components",id:"20-review-using-props-with-stateless-functional-components",children:[]},{value:"21. Create a Stateful Component",id:"21-create-a-stateful-component",children:[]},{value:"22. Render State in the User Interface",id:"22-render-state-in-the-user-interface",children:[]},{value:"23. Render State in the User Interface Another Way",id:"23-render-state-in-the-user-interface-another-way",children:[]},{value:"24. Set State with <code>this.setState</code>",id:"24-set-state-with-thissetstate",children:[]},{value:"25. Bind &#39;this&#39; to a Class Method",id:"25-bind-this-to-a-class-method",children:[]},{value:"26. Use State to Toggle an Element",id:"26-use-state-to-toggle-an-element",children:[]},{value:"27. Write a Simple Counter",id:"27-write-a-simple-counter",children:[]},{value:"28. Create a Controlled Input",id:"28-create-a-controlled-input",children:[]},{value:"29. Create a Controlled Form",id:"29-create-a-controlled-form",children:[]},{value:"30. Pass State as Props to Child Components",id:"30-pass-state-as-props-to-child-components",children:[]},{value:"31. Pass a Callback as Props",id:"31-pass-a-callback-as-props",children:[]},{value:"32. Use the Lifecycle Method componentWillMount",id:"32-use-the-lifecycle-method-componentwillmount",children:[]},{value:"33. Use the Lifecycle Method componentDidMount",id:"33-use-the-lifecycle-method-componentdidmount",children:[]},{value:"34. Add Event Listeners",id:"34-add-event-listeners",children:[]},{value:"35. Optimize Re-Renders with shouldComponentUpdate",id:"35-optimize-re-renders-with-shouldcomponentupdate",children:[]},{value:"36. Introducing Inline Styles",id:"36-introducing-inline-styles",children:[]},{value:"37. Add Inline Styles in React",id:"37-add-inline-styles-in-react",children:[]},{value:"38. Use Advanced JavaScript in React Render Method",id:"38-use-advanced-javascript-in-react-render-method",children:[]},{value:"39. Render with an If-Else Condition",id:"39-render-with-an-if-else-condition",children:[]},{value:"40. Use &amp;&amp; for a More Concise Conditional",id:"40-use--for-a-more-concise-conditional",children:[]},{value:"41. Use a Ternary Expression for Conditional Rendering",id:"41-use-a-ternary-expression-for-conditional-rendering",children:[]},{value:"42. Render Conditionally from Props",id:"42-render-conditionally-from-props",children:[]},{value:"43. Change Inline CSS Conditionally Based on Component State",id:"43-change-inline-css-conditionally-based-on-component-state",children:[]},{value:"44. Use Array.map() to Dynamically Render Elements",id:"44-use-arraymap-to-dynamically-render-elements",children:[]},{value:"45. Give Sibling Elements a Unique Key Attribute",id:"45-give-sibling-elements-a-unique-key-attribute",children:[]},{value:"46. Use Array.filter() to Dynamically Filter an Array",id:"46-use-arrayfilter-to-dynamically-filter-an-array",children:[]},{value:"47. Render React on the Server with renderToString",id:"47-render-react-on-the-server-with-rendertostring",children:[]}],s={rightToc:p};function l(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(i.mdx)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.mdx)("h2",{id:"introduction-to-the-react-challenges"},"Introduction to the React Challenges"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/"}),"React | freeCodeCamp.org")),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://reactjs.org/"}),"React"),", created by Facebook, is an open-source JavaScript library for building user interfaces. It is used to create components, handle state and props, utilize event listeners and certain life cycle methods to update data as it changes. "),Object(i.mdx)("p",null,"React combines HTML with JavaScript functionality to create its own markup language, JSX. This section will introduce you to all of these concepts and how to implement them for use with your own projects."),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"1-create-a-simple-jsx-element"},"1. Create a Simple JSX Element"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/create-a-simple-jsx-element"}),"Learn React: Create a Simple JSX Element | freeCodeCamp.org")),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"Intro:")," React is an Open Source view library created and maintained by Facebook. It's a great tool to render the User Interface (UI) of modern web applications."),Object(i.mdx)("p",null,"React uses a syntax extension of JavaScript called JSX that allows you to write HTML directly within JavaScript. This has several benefits. It lets you use the full programmatic power of JavaScript within HTML, and helps to keep your code readable. For the most part, JSX is similar to the HTML that you have already learned, however there are a few key differences that will be covered throughout these challenges."),Object(i.mdx)("p",null,"For instance, because JSX is a syntactic extension of JavaScript, you can actually write JavaScript directly within JSX. To do this, you simply include the code you want to be treated as JavaScript within curly braces: ",Object(i.mdx)("inlineCode",{parentName:"p"},"{ 'this is treated as JavaScript code' }"),". Keep this in mind, since it's used in several future challenges."),Object(i.mdx)("p",null,"However, because JSX is not valid JavaScript, JSX code must be compiled into JavaScript. The transpiler Babel is a popular tool for this process. For your convenience, it's already added behind the scenes for these challenges. If you happen to write syntactically invalid JSX, you will see the first test in these challenges fail."),Object(i.mdx)("p",null,"It's worth noting that under the hood the challenges are calling ",Object(i.mdx)("inlineCode",{parentName:"p"},"ReactDOM.render(JSX, document.getElementById('root'))"),". This function call is what places your JSX into React's own lightweight representation of the DOM. React then uses snapshots of its own DOM to optimize updating only specific parts of the actual DOM."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"Instructions:")," The current code uses JSX to assign a ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," element to the constant ",Object(i.mdx)("inlineCode",{parentName:"p"},"JSX"),". Replace the ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," with an ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," element and add the text ",Object(i.mdx)("inlineCode",{parentName:"p"},"Hello JSX!")," inside it."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"The constant ",Object(i.mdx)("inlineCode",{parentName:"p"},"JSX")," should return an ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," element.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," tag should include the text ",Object(i.mdx)("inlineCode",{parentName:"p"},"Hello JSX!"))),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"const JSX = <div></div>;\n")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"const JSX = <h1>Hello JSX!</h1>;\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"2-create-a-complex-jsx-element"},"2. Create a Complex JSX Element"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/create-a-complex-jsx-element"}),"Learn React: Create a Complex JSX Element | freeCodeCamp.org")),Object(i.mdx)("p",null,"The last challenge was a simple example of JSX, but JSX can represent more complex HTML as well.\nOne important thing to know about nested JSX is that it must return a single element.\nThis one parent element would wrap all of the other levels of nested elements.\nFor instance, several JSX elements written as siblings with no parent wrapper element will not transpile.\nHere's an example:"),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"Valid JSX:")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"<div>\n  <p>Paragraph One</p>\n  <p>Paragraph Two</p>\n  <p>Paragraph Three</p>\n</div>\n")),Object(i.mdx)("p",null,Object(i.mdx)("strong",{parentName:"p"},"Invalid JSX:")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"<p>Paragraph One</p>\n<p>Paragraph Two</p>\n<p>Paragraph Three</p>\n")),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"Define a new constant ",Object(i.mdx)("inlineCode",{parentName:"p"},"JSX")," that renders a ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," which contains the following elements in order:\nAn ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1"),", a ",Object(i.mdx)("inlineCode",{parentName:"p"},"p"),", and an unordered list that contains three ",Object(i.mdx)("inlineCode",{parentName:"p"},"li")," items. You can include any text you want within each element.\n",Object(i.mdx)("strong",{parentName:"p"},"Note:")," When rendering multiple elements like this, you can wrap them all in parentheses, but it's not strictly required. Also notice this challenge uses a ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," tag to wrap all the child elements within a single parent element. If you remove the ",Object(i.mdx)("inlineCode",{parentName:"p"},"div"),", the JSX will no longer transpile. Keep this in mind, since it will also apply when you return JSX elements in React components."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"The constant ",Object(i.mdx)("inlineCode",{parentName:"p"},"JSX")," should return a ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," element.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," should contain an ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," tag as the first element.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," should contain a ",Object(i.mdx)("inlineCode",{parentName:"p"},"p")," tag as the second element.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," should contain a ",Object(i.mdx)("inlineCode",{parentName:"p"},"ul")," tag as the third element.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"ul")," should contain three ",Object(i.mdx)("inlineCode",{parentName:"p"},"li")," elements.")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"const JSX = <div>\n  <h1>Animaux</h1>\n  <p>Mammif\xe8res</p>\n <ul>\n  <li>Chat</li>\n  <li>Chien</li>\n  <li>Cheval</li>\n</ul>\n</div>;\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"3-add-comments-in-jsx"},"3. Add Comments in JSX"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/add-comments-in-jsx"}),"Learn React: Add Comments in JSX | freeCodeCamp.org")),Object(i.mdx)("p",null,"JSX is a syntax that gets compiled into valid JavaScript. Sometimes, for readability, you might need to add comments to your code. Like most programming languages, JSX has its own way to do this.\nTo put comments inside JSX, you use the syntax ",Object(i.mdx)("inlineCode",{parentName:"p"},"{/* */}")," to wrap around the comment text."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"The code editor has a JSX element similar to what you created in the last challenge. Add a comment somewhere within the provided ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," element, without modifying the existing ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," or ",Object(i.mdx)("inlineCode",{parentName:"p"},"p")," elements."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"The constant ",Object(i.mdx)("inlineCode",{parentName:"p"},"JSX")," should return a ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," element.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," should contain an ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," tag as the first element.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," should contain a ",Object(i.mdx)("inlineCode",{parentName:"p"},"p")," tag as the second element.\nThe existing ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," and ",Object(i.mdx)("inlineCode",{parentName:"p"},"p")," elements should not be modified.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"JSX")," should use valid comment syntax.")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"const JSX = (\n  <div>\n  {/* A big comment */}\n    <h1>This is a block of JSX</h1>\n    <p>Here's a subtitle</p>\n  </div>\n);\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"4-render-html-elements-to-the-dom"},"4. Render HTML Elements to the DOM"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/render-html-elements-to-the-dom"}),"Learn React: Render HTML Elements to the DOM | freeCodeCamp.org")),Object(i.mdx)("p",null,"So far, you've learned that JSX is a convenient tool to write readable HTML within JavaScript. With React, we can render this JSX directly to the HTML DOM using React's rendering API known as ReactDOM.\nReactDOM offers a simple method to render React elements to the DOM which looks like this: ",Object(i.mdx)("inlineCode",{parentName:"p"},"ReactDOM.render(componentToRender, targetNode)"),", where the first argument is the React element or component that you want to render, and the second argument is the DOM node that you want to render the component to.\nAs you would expect, ",Object(i.mdx)("inlineCode",{parentName:"p"},"ReactDOM.render()")," must be called after the JSX element declarations, just like how you must declare variables before using them."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"The code editor has a simple JSX component. Use the ",Object(i.mdx)("inlineCode",{parentName:"p"},"ReactDOM.render()")," method to render this component to the page. You can pass defined JSX elements directly in as the first argument and use ",Object(i.mdx)("inlineCode",{parentName:"p"},"document.getElementById()")," to select the DOM node to render them to. There is a ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," with ",Object(i.mdx)("inlineCode",{parentName:"p"},"id='challenge-node'")," available for you to use. Make sure you don't change the ",Object(i.mdx)("inlineCode",{parentName:"p"},"JSX")," constant."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"The constant ",Object(i.mdx)("inlineCode",{parentName:"p"},"JSX")," should return a ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," element.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," should contain an ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," tag as the first element.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," should contain a ",Object(i.mdx)("inlineCode",{parentName:"p"},"p")," tag as the second element.\nThe provided JSX element should render to the DOM node with id ",Object(i.mdx)("inlineCode",{parentName:"p"},"challenge-node"),".")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"const JSX = (\n  <div>\n    <h1>Hello World</h1>\n    <p>Lets render this to the DOM</p>\n  </div>\n);\n\nReactDOM.render(JSX, document.getElementById('challenge-node'));\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"5-define-an-html-class-in-jsx"},"5. Define an HTML Class in JSX"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/define-an-html-class-in-jsx"}),"Learn React: Define an HTML Class in JSX | freeCodeCamp.org")),Object(i.mdx)("p",null,"Now that you're getting comfortable writing JSX, you may be wondering how it differs from HTML.\nSo far, it may seem that HTML and JSX are exactly the same.\nOne key difference in JSX is that you can no longer use the word ",Object(i.mdx)("inlineCode",{parentName:"p"},"class")," to define HTML classes. This is because ",Object(i.mdx)("inlineCode",{parentName:"p"},"class")," is a reserved word in JavaScript. Instead, JSX uses ",Object(i.mdx)("inlineCode",{parentName:"p"},"className"),".\nIn fact, the naming convention for all HTML attributes and event references in JSX become camelCase. For example, a click event in JSX is ",Object(i.mdx)("inlineCode",{parentName:"p"},"onClick"),", instead of ",Object(i.mdx)("inlineCode",{parentName:"p"},"onclick"),". Likewise, ",Object(i.mdx)("inlineCode",{parentName:"p"},"onchange")," becomes ",Object(i.mdx)("inlineCode",{parentName:"p"},"onChange"),". While this is a subtle difference, it is an important one to keep in mind moving forward."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"Apply a class of ",Object(i.mdx)("inlineCode",{parentName:"p"},"myDiv")," to the ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," provided in the JSX code."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"The constant ",Object(i.mdx)("inlineCode",{parentName:"p"},"JSX")," should return a ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," element.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," should have a class of ",Object(i.mdx)("inlineCode",{parentName:"p"},"myDiv"),".")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'const JSX = (\n  <div className="myDiv">\n    <h1>Add a class to this div</h1>\n  </div>\n);\n')),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"6-learn-about-self-closing-jsx-tags"},"6. Learn About Self-Closing JSX Tags"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/learn-about-self-closing-jsx-tags"}),"Learn React: Learn About Self-Closing JSX Tags | freeCodeCamp.org")),Object(i.mdx)("p",null,"So far, you\u2019ve seen how JSX differs from HTML in a key way with the use of ",Object(i.mdx)("inlineCode",{parentName:"p"},"className")," vs. ",Object(i.mdx)("inlineCode",{parentName:"p"},"class")," for defining HTML classes.\nAnother important way in which JSX differs from HTML is in the idea of the self-closing tag.\nIn HTML, almost all tags have both an opening and closing tag: ",Object(i.mdx)("inlineCode",{parentName:"p"},"<div></div>"),"; the closing tag always has a forward slash before the tag name that you are closing. However, there are special instances in HTML called \u201cself-closing tags\u201d, or tags that don\u2019t require both an opening and closing tag before another tag can start.\nFor example the line-break tag can be written as ",Object(i.mdx)("inlineCode",{parentName:"p"},"<br>")," or as ",Object(i.mdx)("inlineCode",{parentName:"p"},"<br />"),", but should never be written as ",Object(i.mdx)("inlineCode",{parentName:"p"},"<br></br>"),", since it doesn't contain any content.\nIn JSX, the rules are a little different. Any JSX element can be written with a self-closing tag, and every element must be closed. The line-break tag, for example, must always be written as ",Object(i.mdx)("inlineCode",{parentName:"p"},"<br />")," in order to be valid JSX that can be transpiled. A ",Object(i.mdx)("inlineCode",{parentName:"p"},"<div>"),", on the other hand, can be written as ",Object(i.mdx)("inlineCode",{parentName:"p"},"<div />")," or ",Object(i.mdx)("inlineCode",{parentName:"p"},"<div></div>"),". The difference is that in the first syntax version there is no way to include anything in the ",Object(i.mdx)("inlineCode",{parentName:"p"},"<div />"),". You will see in later challenges that this syntax is useful when rendering React components."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"Fix the errors in the code editor so that it is valid JSX and successfully transpiles. Make sure you don't change any of the content - you only need to close tags where they are needed."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"const JSX = (\n  <div>\n    <h2>Welcome to React!</h2> <br >\n    <p>Be sure to close all tags!</p>\n    <hr >\n  </div>\n);\n")),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"The constant ",Object(i.mdx)("inlineCode",{parentName:"p"},"JSX")," should return a ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," element.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," should contain a ",Object(i.mdx)("inlineCode",{parentName:"p"},"br")," tag.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," should contain an ",Object(i.mdx)("inlineCode",{parentName:"p"},"hr")," tag.")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"const JSX = (\n  <div>\n    <h2>Welcome to React!</h2> <br />\n    <p>Be sure to close all tags!</p>\n    <hr />\n  </div>\n);\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"7-create-a-stateless-functional-component"},"7. Create a Stateless Functional Component"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/create-a-stateless-functional-component"}),"Learn React: Create a Stateless Functional Component | freeCodeCamp.org")),Object(i.mdx)("p",null,"Components are the core of React. Everything in React is a component and here you will learn how to create one.\nThere are two ways to create a React component. The first way is to use a JavaScript function. Defining a component in this way creates a ",Object(i.mdx)("em",{parentName:"p"},"stateless functional component"),". The concept of state in an application will be covered in later challenges. For now, think of a stateless component as one that can receive data and render it, but does not manage or track changes to that data. (We'll cover the second way to create a React component in the next challenge.)\nTo create a component with a function, you simply write a JavaScript function that returns either JSX or ",Object(i.mdx)("inlineCode",{parentName:"p"},"null"),". One important thing to note is that React requires your function name to begin with a capital letter. Here's an example of a stateless functional component that assigns an HTML class in JSX:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"// After being transpiled, the <div> will have a CSS class of 'customClass'\nconst DemoComponent = function() {\n  return (\n    <div className='customClass' />\n  );\n};\n")),Object(i.mdx)("p",null,"Because a JSX component represents HTML, you could put several components together to create a more complex HTML page. This is one of the key advantages of the component architecture React provides. It allows you to compose your UI from many separate, isolated components. This makes it easier to build and maintain complex user interfaces."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"The code editor has a function called ",Object(i.mdx)("inlineCode",{parentName:"p"},"MyComponent"),". Complete this function so it returns a single ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," element which contains some string of text.\n",Object(i.mdx)("strong",{parentName:"p"},"Note:")," The text is considered a child of the ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," element, so you will not be able to use a self-closing tag."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},Object(i.mdx)("inlineCode",{parentName:"p"},"MyComponent")," should return JSX.\n",Object(i.mdx)("inlineCode",{parentName:"p"},"MyComponent")," should return a ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," element.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," element should contain a string of text.")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"const MyComponent = function() {\n  return (\n    <div>Hello JSX!</div>\n  )\n};\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"8-create-a-react-component"},"8. Create a React Component"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/create-a-react-component"}),"Learn React: Create a React Component | freeCodeCamp.org")),Object(i.mdx)("p",null,"The other way to define a React component is with the ES6 ",Object(i.mdx)("inlineCode",{parentName:"p"},"class")," syntax. In the following example, ",Object(i.mdx)("inlineCode",{parentName:"p"},"Kitten")," extends ",Object(i.mdx)("inlineCode",{parentName:"p"},"React.Component"),":"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"class Kitten extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <h1>Hi</h1>\n    );\n  }\n}\n")),Object(i.mdx)("p",null,"This creates an ES6 class ",Object(i.mdx)("inlineCode",{parentName:"p"},"Kitten")," which extends the ",Object(i.mdx)("inlineCode",{parentName:"p"},"React.Component")," class. So the ",Object(i.mdx)("inlineCode",{parentName:"p"},"Kitten")," class now has access to many useful React features, such as local state and lifecycle hooks. Don't worry if you aren't familiar with these terms yet, they will be covered in greater detail in later challenges. Also notice the ",Object(i.mdx)("inlineCode",{parentName:"p"},"Kitten")," class has a ",Object(i.mdx)("inlineCode",{parentName:"p"},"constructor")," defined within it that calls ",Object(i.mdx)("inlineCode",{parentName:"p"},"super()"),". It uses ",Object(i.mdx)("inlineCode",{parentName:"p"},"super()")," to call the constructor of the parent class, in this case ",Object(i.mdx)("inlineCode",{parentName:"p"},"React.Component"),". The constructor is a special method used during the initialization of objects that are created with the ",Object(i.mdx)("inlineCode",{parentName:"p"},"class")," keyword. It is best practice to call a component's ",Object(i.mdx)("inlineCode",{parentName:"p"},"constructor")," with ",Object(i.mdx)("inlineCode",{parentName:"p"},"super"),", and pass ",Object(i.mdx)("inlineCode",{parentName:"p"},"props")," to both. This makes sure the component is initialized properly. For now, know that it is standard for this code to be included. Soon you will see other uses for the constructor as well as ",Object(i.mdx)("inlineCode",{parentName:"p"},"props"),"."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,Object(i.mdx)("inlineCode",{parentName:"p"},"MyComponent")," is defined in the code editor using class syntax. Finish writing the ",Object(i.mdx)("inlineCode",{parentName:"p"},"render")," method so it returns a ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," element that contains an ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," with the text ",Object(i.mdx)("inlineCode",{parentName:"p"},"Hello React!"),"."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"The React component should return a ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," element.\nThe returned ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," should render an ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," header within it.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," header should contain the string ",Object(i.mdx)("inlineCode",{parentName:"p"},"Hello React!"),".")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return(\n      <div>\n        <h1>Hello React!</h1>\n      </div>\n    )\n  }\n};\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"9-create-a-component-with-composition"},"9. Create a Component with Composition"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/create-a-component-with-composition"}),"Learn React: Create a Component with Composition | freeCodeCamp.org")),Object(i.mdx)("p",null,"Now we will look at how we can compose multiple React components together. Imagine you are building an App and have created three components, a ",Object(i.mdx)("inlineCode",{parentName:"p"},"Navbar"),", ",Object(i.mdx)("inlineCode",{parentName:"p"},"Dashboard"),", and ",Object(i.mdx)("inlineCode",{parentName:"p"},"Footer"),".\nTo compose these components together, you could create an ",Object(i.mdx)("inlineCode",{parentName:"p"},"App")," ",Object(i.mdx)("em",{parentName:"p"},"parent")," component which renders each of these three components as ",Object(i.mdx)("em",{parentName:"p"},"children"),". To render a component as a child in a React component, you include the component name written as a custom HTML tag in the JSX. For example, in the ",Object(i.mdx)("inlineCode",{parentName:"p"},"render")," method you could write:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"return (\n <App>\n  <Navbar />\n  <Dashboard />\n  <Footer />\n </App>\n)\n")),Object(i.mdx)("p",null,"When React encounters a custom HTML tag that references another component (a component name wrapped in ",Object(i.mdx)("inlineCode",{parentName:"p"},"< />")," like in this example), it renders the markup for that component in the location of the tag. This should illustrate the parent/child relationship between the ",Object(i.mdx)("inlineCode",{parentName:"p"},"App")," component and the ",Object(i.mdx)("inlineCode",{parentName:"p"},"Navbar"),", ",Object(i.mdx)("inlineCode",{parentName:"p"},"Dashboard"),", and ",Object(i.mdx)("inlineCode",{parentName:"p"},"Footer"),"."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"In the code editor, there is a simple functional component called ",Object(i.mdx)("inlineCode",{parentName:"p"},"ChildComponent")," and a class component called ",Object(i.mdx)("inlineCode",{parentName:"p"},"ParentComponent"),". Compose the two together by rendering the ",Object(i.mdx)("inlineCode",{parentName:"p"},"ChildComponent")," within the ",Object(i.mdx)("inlineCode",{parentName:"p"},"ParentComponent"),". Make sure to close the ",Object(i.mdx)("inlineCode",{parentName:"p"},"ChildComponent")," tag with a forward slash.\n",Object(i.mdx)("strong",{parentName:"p"},"Note:")," ",Object(i.mdx)("inlineCode",{parentName:"p"},"ChildComponent")," is defined with an ES6 arrow function because this is a very common practice when using React. However, know that this is just a function. If you aren't familiar with the arrow function syntax, please refer to the JavaScript section."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"The React component should return a single ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," element.\nThe component should return two nested elements.\nThe component should return the ChildComponent as its second child.")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"const ChildComponent = () => {\n  return (\n    <div>\n      <p>I am the child</p>\n    </div>\n  );\n};\n\nclass ParentComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>I am the parent</h1>\n        <ChildComponent />\n      </div>\n    );\n  }\n};\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"10-use-react-to-render-nested-components"},"10. Use React to Render Nested Components"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/use-react-to-render-nested-components"}),"Learn React: Use React to Render Nested Components | freeCodeCamp.org")),Object(i.mdx)("p",null,"The last challenge showed a simple way to compose two components, but there are many different ways you can compose components with React.\nComponent composition is one of React's powerful features. When you work with React, it is important to start thinking about your user interface in terms of components like the App example in the last challenge. You break down your UI into its basic building blocks, and those pieces become the components. This helps to separate the code responsible for the UI from the code responsible for handling your application logic. It can greatly simplify the development and maintenance of complex projects."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"There are two functional components defined in the code editor, called ",Object(i.mdx)("inlineCode",{parentName:"p"},"TypesOfFruit")," and ",Object(i.mdx)("inlineCode",{parentName:"p"},"Fruits"),". Take the ",Object(i.mdx)("inlineCode",{parentName:"p"},"TypesOfFruit")," component and compose it, or ",Object(i.mdx)("em",{parentName:"p"},"nest")," it, within the ",Object(i.mdx)("inlineCode",{parentName:"p"},"Fruits")," component. Then take the ",Object(i.mdx)("inlineCode",{parentName:"p"},"Fruits")," component and nest it within the ",Object(i.mdx)("inlineCode",{parentName:"p"},"TypesOfFood")," component. The result should be a child component, nested within a parent component, which is nested within a parent component of its own!"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"const TypesOfFruit = () => {\n  return (\n    <div>\n      <h2>Fruits:</h2>\n      <ul>\n        <li>Apples</li>\n        <li>Blueberries</li>\n        <li>Strawberries</li>\n        <li>Bananas</li>\n      </ul>\n    </div>\n  );\n};\n\nconst Fruits = () => {\n  return (\n    <div>\n      { /* Change code below this line */ }\n\n      { /* Change code above this line */ }\n    </div>\n  );\n};\n\nclass TypesOfFood extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Types of Food:</h1>\n        { /* Change code below this line */ }\n\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};\n")),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"The ",Object(i.mdx)("inlineCode",{parentName:"p"},"TypesOfFood")," component should return a single ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," element.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"TypesOfFood")," component should return the ",Object(i.mdx)("inlineCode",{parentName:"p"},"Fruits")," component.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"Fruits")," component should return the ",Object(i.mdx)("inlineCode",{parentName:"p"},"TypesOfFruit")," component.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"TypesOfFruit")," component should return the ",Object(i.mdx)("inlineCode",{parentName:"p"},"h2")," and ",Object(i.mdx)("inlineCode",{parentName:"p"},"ul")," elements.")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"const TypesOfFruit = () => {\n  return (\n    <div>\n      <h2>Fruits:</h2>\n      <ul>\n        <li>Apples</li>\n        <li>Blueberries</li>\n        <li>Strawberries</li>\n        <li>Bananas</li>\n      </ul>\n    </div>\n  );\n};\n\nconst Fruits = () => {\n  return (\n    <div>\n      <TypesOfFruit />\n    </div>\n  );\n};\n\nclass TypesOfFood extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Types of Food:</h1>\n        <Fruits />\n      </div>\n    );\n  }\n};\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"11-compose-react-components"},"11. Compose React Components"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/compose-react-components"}),"Learn React: Compose React Components | freeCodeCamp.org")),Object(i.mdx)("p",null,"As the challenges continue to use more complex compositions with React components and JSX, there is one important point to note. Rendering ES6 style class components within other components is no different than rendering the simple components you used in the last few challenges. You can render JSX elements, stateless functional components, and ES6 class components within other components."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"In the code editor, the ",Object(i.mdx)("inlineCode",{parentName:"p"},"TypesOfFood")," component is already rendering a component called ",Object(i.mdx)("inlineCode",{parentName:"p"},"Vegetables"),". Also, there is the ",Object(i.mdx)("inlineCode",{parentName:"p"},"Fruits")," component from the last challenge.\nNest two components inside of ",Object(i.mdx)("inlineCode",{parentName:"p"},"Fruits")," \u2014 first ",Object(i.mdx)("inlineCode",{parentName:"p"},"NonCitrus"),", and then ",Object(i.mdx)("inlineCode",{parentName:"p"},"Citrus"),". Both of these components are provided for you behind the scenes. Next, nest the ",Object(i.mdx)("inlineCode",{parentName:"p"},"Fruits")," class component into the ",Object(i.mdx)("inlineCode",{parentName:"p"},"TypesOfFood")," component, below the ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," header and above ",Object(i.mdx)("inlineCode",{parentName:"p"},"Vegetables"),". The result should be a series of nested components, which uses two different component types."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"class Fruits extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h2>Fruits:</h2>\n        { /* Change code below this line */ }\n\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};\n\nclass TypesOfFood extends React.Component {\n  constructor(props) {\n     super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>Types of Food:</h1>\n        { /* Change code below this line */ }\n\n        { /* Change code above this line */ }\n        <Vegetables />\n      </div>\n    );\n  }\n};\n")),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"The ",Object(i.mdx)("inlineCode",{parentName:"p"},"TypesOfFood")," component should return a single ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," element.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"TypesOfFood")," component should return the ",Object(i.mdx)("inlineCode",{parentName:"p"},"Fruits")," component.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"Fruits")," component should return the ",Object(i.mdx)("inlineCode",{parentName:"p"},"NonCitrus")," component and the ",Object(i.mdx)("inlineCode",{parentName:"p"},"Citrus")," component.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"TypesOfFood")," component should return the ",Object(i.mdx)("inlineCode",{parentName:"p"},"Vegetables")," component below the ",Object(i.mdx)("inlineCode",{parentName:"p"},"Fruits")," component.")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"class Fruits extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h2>Fruits:</h2>\n        <NonCitrus />\n        <Citrus />\n      </div>\n    );\n  }\n};\n\nclass TypesOfFood extends React.Component {\n  constructor(props) {\n     super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>Types of Food:</h1>\n        <Fruits />\n        <Vegetables />\n      </div>\n    );\n  }\n};\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"12-render-a-class-component-to-the-dom"},"12. Render a Class Component to the DOM"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/render-a-class-component-to-the-dom"}),"Learn React: Render a Class Component to the DOM | freeCodeCamp.org")),Object(i.mdx)("p",null,"You may remember using the ReactDOM API in an earlier challenge to render JSX elements to the DOM. The process for rendering React components will look very similar. The past few challenges focused on components and composition, so the rendering was done for you behind the scenes. However, none of the React code you write will render to the DOM without making a call to the ReactDOM API.\nHere's a refresher on the syntax: ",Object(i.mdx)("inlineCode",{parentName:"p"},"ReactDOM.render(componentToRender, targetNode)"),". The first argument is the React component that you want to render. The second argument is the DOM node that you want to render that component within.\nReact components are passed into ",Object(i.mdx)("inlineCode",{parentName:"p"},"ReactDOM.render()")," a little differently than JSX elements. For JSX elements, you pass in the name of the element that you want to render. However, for React components, you need to use the same syntax as if you were rendering a nested component, for example ",Object(i.mdx)("inlineCode",{parentName:"p"},"ReactDOM.render(<ComponentToRender />, targetNode)"),". You use this syntax for both ES6 class components and functional components."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"Both the ",Object(i.mdx)("inlineCode",{parentName:"p"},"Fruits")," and ",Object(i.mdx)("inlineCode",{parentName:"p"},"Vegetables")," components are defined for you behind the scenes. Render both components as children of the ",Object(i.mdx)("inlineCode",{parentName:"p"},"TypesOfFood")," component, then render ",Object(i.mdx)("inlineCode",{parentName:"p"},"TypesOfFood")," to the DOM. There is a ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," with ",Object(i.mdx)("inlineCode",{parentName:"p"},"id='challenge-node'")," available for you to use."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"class TypesOfFood extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>Types of Food:</h1>\n        {/* Change code below this line */}\n\n        {/* Change code above this line */}\n      </div>\n    );\n  }\n};\n\n// Change code below this line\n")),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"The ",Object(i.mdx)("inlineCode",{parentName:"p"},"TypesOfFood")," component should return a single ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," element.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"TypesOfFood")," component should render the ",Object(i.mdx)("inlineCode",{parentName:"p"},"Fruits")," component after the ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," element.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"TypesOfFood")," component should render the ",Object(i.mdx)("inlineCode",{parentName:"p"},"Vegetables")," component after ",Object(i.mdx)("inlineCode",{parentName:"p"},"Fruits"),".\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"TypesOfFood")," component should render to the DOM within the ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," with the id ",Object(i.mdx)("inlineCode",{parentName:"p"},"challenge-node"),".")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"class TypesOfFood extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>Types of Food:</h1>\n        <Fruits />\n        <Vegetables />\n      </div>\n    );\n  }\n};\n\nReactDOM.render(<TypesOfFood />, document.getElementById('challenge-node'))\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"13-write-a-react-component-from-scratch"},"13. Write a React Component from Scratch"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/write-a-react-component-from-scratch"}),"Learn React: Write a React Component from Scratch | freeCodeCamp.org")),Object(i.mdx)("p",null,"Now that you've learned the basics of JSX and React components, it's time to write a component on your own. React components are the core building blocks of React applications so it's important to become very familiar with writing them. Remember, a typical React component is an ES6 ",Object(i.mdx)("inlineCode",{parentName:"p"},"class")," which extends ",Object(i.mdx)("inlineCode",{parentName:"p"},"React.Component"),". It has a render method that returns HTML (from JSX) or ",Object(i.mdx)("inlineCode",{parentName:"p"},"null"),". This is the basic form of a React component. Once you understand this well, you will be prepared to start building more complex React projects."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"Define a class ",Object(i.mdx)("inlineCode",{parentName:"p"},"MyComponent")," that extends ",Object(i.mdx)("inlineCode",{parentName:"p"},"React.Component"),". Its render method should return a ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," that contains an ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," tag with the text: ",Object(i.mdx)("inlineCode",{parentName:"p"},"My First React Component!")," in it. Use this text exactly, the case and punctuation matter. Make sure to call the constructor for your component, too.\nRender this component to the DOM using ",Object(i.mdx)("inlineCode",{parentName:"p"},"ReactDOM.render()"),". There is a ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," with ",Object(i.mdx)("inlineCode",{parentName:"p"},"id='challenge-node'")," available for you to use."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"There should be a React component called ",Object(i.mdx)("inlineCode",{parentName:"p"},"MyComponent"),".\n",Object(i.mdx)("inlineCode",{parentName:"p"},"MyComponent")," should contain an ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," tag with text ",Object(i.mdx)("inlineCode",{parentName:"p"},"My First React Component!")," Case and punctuation matter.\n",Object(i.mdx)("inlineCode",{parentName:"p"},"MyComponent")," should render to the DOM.\n",Object(i.mdx)("inlineCode",{parentName:"p"},"MyComponent")," should have a constructor calling ",Object(i.mdx)("inlineCode",{parentName:"p"},"super")," with ",Object(i.mdx)("inlineCode",{parentName:"p"},"props"),".")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"class MyComponent extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return (\n            <div id=\"challenge-node\">\n                <h1>My First React Component!</h1>\n            </div>\n        )\n    }\n};\nReactDOM.render(< MyComponent />, document.getElementById('challenge-node'));\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"14-pass-props-to-a-stateless-functional-component"},"14. Pass Props to a Stateless Functional Component"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/pass-props-to-a-stateless-functional-component"}),"Learn React: Pass Props to a Stateless Functional Component | freeCodeCamp.org")),Object(i.mdx)("p",null,"The previous challenges covered a lot about creating and composing JSX elements, functional components, and ES6 style class components in React. With this foundation, it's time to look at another feature very common in React: ",Object(i.mdx)("strong",{parentName:"p"},"props"),". In React, you can pass props, or properties, to child components. Say you have an ",Object(i.mdx)("inlineCode",{parentName:"p"},"App")," component which renders a child component called ",Object(i.mdx)("inlineCode",{parentName:"p"},"Welcome")," which is a stateless functional component. You can pass ",Object(i.mdx)("inlineCode",{parentName:"p"},"Welcome")," a ",Object(i.mdx)("inlineCode",{parentName:"p"},"user")," property by writing:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"<App>\n  <Welcome user='Mark' />\n</App>\n")),Object(i.mdx)("p",null,"You use ",Object(i.mdx)("strong",{parentName:"p"},"custom HTML attributes")," created by you and supported by React to be passed to the component. In this case, the created property ",Object(i.mdx)("inlineCode",{parentName:"p"},"user")," is passed to the component ",Object(i.mdx)("inlineCode",{parentName:"p"},"Welcome"),". Since ",Object(i.mdx)("inlineCode",{parentName:"p"},"Welcome")," is a stateless functional component, it has access to this value like so:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"const Welcome = (props) => <h1>Hello, {props.user}!</h1>\n")),Object(i.mdx)("p",null,"It is standard to call this value ",Object(i.mdx)("inlineCode",{parentName:"p"},"props")," and when dealing with stateless functional components, you basically consider it as an argument to a function which returns JSX. You can access the value of the argument in the function body. With class components, you will see this is a little different."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"There are ",Object(i.mdx)("inlineCode",{parentName:"p"},"Calendar")," and ",Object(i.mdx)("inlineCode",{parentName:"p"},"CurrentDate")," components in the code editor. When rendering ",Object(i.mdx)("inlineCode",{parentName:"p"},"CurrentDate")," from the ",Object(i.mdx)("inlineCode",{parentName:"p"},"Calendar")," component, pass in a property of ",Object(i.mdx)("inlineCode",{parentName:"p"},"date")," assigned to the current date from JavaScript's ",Object(i.mdx)("inlineCode",{parentName:"p"},"Date")," object. Then access this ",Object(i.mdx)("inlineCode",{parentName:"p"},"prop")," in the ",Object(i.mdx)("inlineCode",{parentName:"p"},"CurrentDate")," component, showing its value within the ",Object(i.mdx)("inlineCode",{parentName:"p"},"p")," tags. Note that for ",Object(i.mdx)("inlineCode",{parentName:"p"},"prop")," values to be evaluated as JavaScript, they must be enclosed in curly brackets, for instance ",Object(i.mdx)("inlineCode",{parentName:"p"},"date={Date()}"),"."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"const CurrentDate = (props) => {\n  return (\n    <div>\n      { /* Change code below this line */ }\n      <p>The current date is: </p>\n      { /* Change code above this line */ }\n    </div>\n  );\n};\n\nclass Calendar extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h3>What date is it?</h3>\n        { /* Change code below this line */ }\n        <CurrentDate/>\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};\n")),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"The ",Object(i.mdx)("inlineCode",{parentName:"p"},"Calendar")," component should return a single ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," element.\nThe second child of the ",Object(i.mdx)("inlineCode",{parentName:"p"},"Calendar")," component should be the ",Object(i.mdx)("inlineCode",{parentName:"p"},"CurrentDate")," component.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"CurrentDate")," component should have a prop called ",Object(i.mdx)("inlineCode",{parentName:"p"},"date"),".\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"date")," prop of the ",Object(i.mdx)("inlineCode",{parentName:"p"},"CurrentDate")," should contain a string of text.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"date")," prop should be generated by calling ",Object(i.mdx)("inlineCode",{parentName:"p"},"Date()"),".\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"CurrentDate")," component should render the value from the ",Object(i.mdx)("inlineCode",{parentName:"p"},"date")," prop in the ",Object(i.mdx)("inlineCode",{parentName:"p"},"p")," tag.")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"const CurrentDate = (props) => {\n  return (\n    <div>\n      <p>The current date is: {props.date}</p>\n    </div>\n  );\n};\n\nclass Calendar extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h3>What date is it?</h3>\n        <CurrentDate date={Date()} />\n      </div>\n    );\n  }\n};\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"15-pass-an-array-as-props"},"15. Pass an Array as Props"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/pass-an-array-as-props"}),"Learn React: Pass an Array as Props | freeCodeCamp.org")),Object(i.mdx)("p",null,"The last challenge demonstrated how to pass information from a parent component to a child component as ",Object(i.mdx)("inlineCode",{parentName:"p"},"props")," or properties. This challenge looks at how arrays can be passed as ",Object(i.mdx)("inlineCode",{parentName:"p"},"props"),". To pass an array to a JSX element, it must be treated as JavaScript and wrapped in curly braces."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'<ParentComponent>\n  <ChildComponent colors={["green", "blue", "red"]} />\n</ParentComponent>\n')),Object(i.mdx)("p",null,"The child component then has access to the array property ",Object(i.mdx)("inlineCode",{parentName:"p"},"colors"),". Array methods such as ",Object(i.mdx)("inlineCode",{parentName:"p"},"join()")," can be used when accessing the property. ",Object(i.mdx)("inlineCode",{parentName:"p"},"const ChildComponent = (props) => <p>{props.colors.join(', ')}</p>")," This will join all ",Object(i.mdx)("inlineCode",{parentName:"p"},"colors")," array items into a comma separated string and produce: ",Object(i.mdx)("inlineCode",{parentName:"p"},"<p>green, blue, red</p>")," Later, we will learn about other common methods to render arrays of data in React."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"There are ",Object(i.mdx)("inlineCode",{parentName:"p"},"List")," and ",Object(i.mdx)("inlineCode",{parentName:"p"},"ToDo")," components in the code editor. When rendering each ",Object(i.mdx)("inlineCode",{parentName:"p"},"List")," from the ",Object(i.mdx)("inlineCode",{parentName:"p"},"ToDo")," component, pass in a ",Object(i.mdx)("inlineCode",{parentName:"p"},"tasks")," property assigned to an array of to-do tasks, for example ",Object(i.mdx)("inlineCode",{parentName:"p"},'["walk dog", "workout"]'),". Then access this ",Object(i.mdx)("inlineCode",{parentName:"p"},"tasks")," array in the ",Object(i.mdx)("inlineCode",{parentName:"p"},"List")," component, showing its value within the ",Object(i.mdx)("inlineCode",{parentName:"p"},"p")," element. Use ",Object(i.mdx)("inlineCode",{parentName:"p"},'join(", ")')," to display the ",Object(i.mdx)("inlineCode",{parentName:"p"},"props.tasks"),"array in the ",Object(i.mdx)("inlineCode",{parentName:"p"},"p")," element as a comma separated list. Today's list should have at least 2 tasks and tomorrow's should have at least 3 tasks."),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"const List = (props) => {\n  { /* Change code below this line */ }\n  return <p>{}</p>\n  { /* Change code above this line */ }\n};\n\nclass ToDo extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>To Do Lists</h1>\n        <h2>Today</h2>\n        { /* Change code below this line */ }\n        <List/>\n        <h2>Tomorrow</h2>\n        <List/>\n        { /* Change code above this line */ }\n      </div>\n    );\n  }\n};\n")),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"The ",Object(i.mdx)("inlineCode",{parentName:"p"},"ToDo")," component should return a single outer ",Object(i.mdx)("inlineCode",{parentName:"p"},"div"),".\nThe third child of the ",Object(i.mdx)("inlineCode",{parentName:"p"},"ToDo")," component should be an instance of the ",Object(i.mdx)("inlineCode",{parentName:"p"},"List")," component.\nThe fifth child of the ",Object(i.mdx)("inlineCode",{parentName:"p"},"ToDo")," component should be an instance of the ",Object(i.mdx)("inlineCode",{parentName:"p"},"List")," component.\nBoth instances of the ",Object(i.mdx)("inlineCode",{parentName:"p"},"List")," component should have a property called ",Object(i.mdx)("inlineCode",{parentName:"p"},"tasks")," and ",Object(i.mdx)("inlineCode",{parentName:"p"},"tasks")," should be of type array.\nThe first ",Object(i.mdx)("inlineCode",{parentName:"p"},"List")," component representing the tasks for today should have 2 or more items.\nThe second ",Object(i.mdx)("inlineCode",{parentName:"p"},"List")," component representing the tasks for tomorrow should have 3 or more items.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"List")," component should render the value from the ",Object(i.mdx)("inlineCode",{parentName:"p"},"tasks")," prop in the ",Object(i.mdx)("inlineCode",{parentName:"p"},"p")," tag.")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'const List = (props) => {\n  return <p>{props.tasks.join(", ")}</p>\n};\n\nclass ToDo extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h1>To Do Lists</h1>\n        <h2>Today</h2>\n        <List tasks={["Walk", "Cook"]}/>\n        <h2>Tomorrow</h2>\n        <List tasks={["Study", "Code", "Eat"]}/>\n      </div>\n    );\n  }\n};\n')),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"16-use-default-props"},"16. Use Default Props"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/use-default-props"}),"Learn React: Use Default Props | freeCodeCamp.org")),Object(i.mdx)("p",null,"React also has an option to set default props. You can assign default props to a component as a property on the component itself and React assigns the default prop if necessary. This allows you to specify what a prop value should be if no value is explicitly provided. For example, if you declare ",Object(i.mdx)("inlineCode",{parentName:"p"},"MyComponent.defaultProps = { location: 'San Francisco' }"),", you have defined a location prop that's set to the string ",Object(i.mdx)("inlineCode",{parentName:"p"},"San Francisco"),", unless you specify otherwise. React assigns default props if props are undefined, but if you pass ",Object(i.mdx)("inlineCode",{parentName:"p"},"null")," as the value for a prop, it will remain ",Object(i.mdx)("inlineCode",{parentName:"p"},"null"),"."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"The code editor shows a ",Object(i.mdx)("inlineCode",{parentName:"p"},"ShoppingCart")," component. Define default props on this component which specify a prop ",Object(i.mdx)("inlineCode",{parentName:"p"},"items")," with a value of ",Object(i.mdx)("inlineCode",{parentName:"p"},"0"),"."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"The ",Object(i.mdx)("inlineCode",{parentName:"p"},"ShoppingCart")," component should render.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"ShoppingCart")," component should have a default prop of ",Object(i.mdx)("inlineCode",{parentName:"p"},"{ items: 0 }"),".")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"const ShoppingCart = (props) => {\n  return (\n    <div>\n      <h1>Shopping Cart Component</h1>\n    </div>\n  )\n};\nShoppingCart.defaultProps = {items: 0};\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"17-override-default-props"},"17. Override Default Props"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/override-default-props"}),"Learn React: Override Default Props | freeCodeCamp.org")),Object(i.mdx)("p",null,"The ability to set default props is a useful feature in React. The way to override the default props is to explicitly set the prop values for a component."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"The ",Object(i.mdx)("inlineCode",{parentName:"p"},"ShoppingCart")," component now renders a child component ",Object(i.mdx)("inlineCode",{parentName:"p"},"Items"),". This ",Object(i.mdx)("inlineCode",{parentName:"p"},"Items")," component has a default prop ",Object(i.mdx)("inlineCode",{parentName:"p"},"quantity")," set to the integer ",Object(i.mdx)("inlineCode",{parentName:"p"},"0"),". Override the default prop by passing in a value of ",Object(i.mdx)("inlineCode",{parentName:"p"},"10")," for ",Object(i.mdx)("inlineCode",{parentName:"p"},"quantity"),".\n",Object(i.mdx)("strong",{parentName:"p"},"Note:")," Remember that the syntax to add a prop to a component looks similar to how you add HTML attributes. However, since the value for ",Object(i.mdx)("inlineCode",{parentName:"p"},"quantity")," is an integer, it won't go in quotes but it should be wrapped in curly braces. For example, ",Object(i.mdx)("inlineCode",{parentName:"p"},"{100}"),". This syntax tells JSX to interpret the value within the braces directly as JavaScript."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"The component ",Object(i.mdx)("inlineCode",{parentName:"p"},"ShoppingCart")," should render.\nThe component ",Object(i.mdx)("inlineCode",{parentName:"p"},"Items")," should render.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"Items")," component should have a prop of ",Object(i.mdx)("inlineCode",{parentName:"p"},"{ quantity: 10 }")," passed from the ",Object(i.mdx)("inlineCode",{parentName:"p"},"ShoppingCart")," component.")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"const Items = (props) => {\n  return <h1>Current Quantity of Items in Cart: {props.quantity}</h1>\n}\n\nItems.defaultProps = {\n  quantity: 0\n}\n\nclass ShoppingCart extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return <Items quantity = {10} />\n  }\n};\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"18-use-proptypes-to-define-the-props-you-expect"},"18. Use PropTypes to Define the Props You Expect"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/use-proptypes-to-define-the-props-you-expect"}),"Learn React: Use PropTypes to Define the Props You Expect | freeCodeCamp.org")),Object(i.mdx)("p",null,"React provides useful type-checking features to verify that components receive props of the correct type. For example, your application makes an API call to retrieve data that you expect to be in an array, which is then passed to a component as a prop. You can set ",Object(i.mdx)("inlineCode",{parentName:"p"},"propTypes")," on your component to require the data to be of type ",Object(i.mdx)("inlineCode",{parentName:"p"},"array"),". This will throw a useful warning when the data is of any other type.\nIt's considered a best practice to set ",Object(i.mdx)("inlineCode",{parentName:"p"},"propTypes")," when you know the type of a prop ahead of time. You can define a ",Object(i.mdx)("inlineCode",{parentName:"p"},"propTypes")," property for a component in the same way you defined ",Object(i.mdx)("inlineCode",{parentName:"p"},"defaultProps"),". Doing this will check that props of a given key are present with a given type. Here's an example to require the type ",Object(i.mdx)("inlineCode",{parentName:"p"},"function")," for a prop called ",Object(i.mdx)("inlineCode",{parentName:"p"},"handleClick"),":"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"MyComponent.propTypes = { handleClick: PropTypes.func.isRequired }\n")),Object(i.mdx)("p",null,"In the example above, the ",Object(i.mdx)("inlineCode",{parentName:"p"},"PropTypes.func")," part checks that ",Object(i.mdx)("inlineCode",{parentName:"p"},"handleClick")," is a function. Adding ",Object(i.mdx)("inlineCode",{parentName:"p"},"isRequired")," tells React that ",Object(i.mdx)("inlineCode",{parentName:"p"},"handleClick")," is a required property for that component. You will see a warning if that prop isn't provided. Also notice that ",Object(i.mdx)("inlineCode",{parentName:"p"},"func")," represents ",Object(i.mdx)("inlineCode",{parentName:"p"},"function"),". Among the seven JavaScript primitive types, ",Object(i.mdx)("inlineCode",{parentName:"p"},"function")," and ",Object(i.mdx)("inlineCode",{parentName:"p"},"boolean")," (written as ",Object(i.mdx)("inlineCode",{parentName:"p"},"bool"),") are the only two that use unusual spelling. In addition to the primitive types, there are other types available. For example, you can check that a prop is a React element. Please refer to the ",Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://reactjs.org/docs/jsx-in-depth.html#specifying-the-react-element-type"}),"documentation")," for all of the options.\n",Object(i.mdx)("strong",{parentName:"p"},"Note:")," As of React v15.5.0, ",Object(i.mdx)("inlineCode",{parentName:"p"},"PropTypes")," is imported independently from React, like this: ",Object(i.mdx)("inlineCode",{parentName:"p"},"import PropTypes from 'prop-types';")),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"Define ",Object(i.mdx)("inlineCode",{parentName:"p"},"propTypes")," for the ",Object(i.mdx)("inlineCode",{parentName:"p"},"Items")," component to require ",Object(i.mdx)("inlineCode",{parentName:"p"},"quantity")," as a prop and verify that it is of type ",Object(i.mdx)("inlineCode",{parentName:"p"},"number"),"."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"The ",Object(i.mdx)("inlineCode",{parentName:"p"},"ShoppingCart")," component should render.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"Items")," component should render.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"Items")," component should include a ",Object(i.mdx)("inlineCode",{parentName:"p"},"propTypes")," check to require a value for ",Object(i.mdx)("inlineCode",{parentName:"p"},"quantity")," and ensure that its value is a number.")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"const Items = (props) => {\n  return <h1>Current Quantity of Items in Cart: {props.quantity}</h1>\n};\n\nItems.propTypes = {\n  quantity: PropTypes.number.isRequired\n  }\n\nItems.defaultProps = {\n  quantity: 0\n};\n\nclass ShoppingCart extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return <Items />\n  }\n};\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"19-access-props-using-thisprops"},"19. Access Props Using this.props"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/access-props-using-this-props"}),"Learn React: Access Props Using this.props | freeCodeCamp.org")),Object(i.mdx)("p",null,"The last several challenges covered the basic ways to pass props to child components. But what if the child component that you're passing a prop to is an ES6 class component, rather than a stateless functional component? The ES6 class component uses a slightly different convention to access props.\nAnytime you refer to a class component within itself, you use the ",Object(i.mdx)("inlineCode",{parentName:"p"},"this")," keyword. To access props within a class component, you preface the code that you use to access it with ",Object(i.mdx)("inlineCode",{parentName:"p"},"this"),". For example, if an ES6 class component has a prop called ",Object(i.mdx)("inlineCode",{parentName:"p"},"data"),", you write ",Object(i.mdx)("inlineCode",{parentName:"p"},"{this.props.data}")," in JSX."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"Render an instance of the ",Object(i.mdx)("inlineCode",{parentName:"p"},"ReturnTempPassword")," component in the parent component ",Object(i.mdx)("inlineCode",{parentName:"p"},"ResetPassword"),". Here, give ",Object(i.mdx)("inlineCode",{parentName:"p"},"ReturnTempPassword")," a prop of ",Object(i.mdx)("inlineCode",{parentName:"p"},"tempPassword")," and assign it a value of a string that is at least 8 characters long. Within the child, ",Object(i.mdx)("inlineCode",{parentName:"p"},"ReturnTempPassword"),", access the ",Object(i.mdx)("inlineCode",{parentName:"p"},"tempPassword")," prop within the ",Object(i.mdx)("inlineCode",{parentName:"p"},"strong")," tags to make sure the user sees the temporary password."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"The ",Object(i.mdx)("inlineCode",{parentName:"p"},"ResetPassword")," component should return a single ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," element.\nThe fourth child of ",Object(i.mdx)("inlineCode",{parentName:"p"},"ResetPassword")," should be the ",Object(i.mdx)("inlineCode",{parentName:"p"},"ReturnTempPassword")," component.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"ReturnTempPassword")," component should have a prop called ",Object(i.mdx)("inlineCode",{parentName:"p"},"tempPassword"),".\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"tempPassword")," prop of ",Object(i.mdx)("inlineCode",{parentName:"p"},"ReturnTempPassword")," should be equal to a string of at least ",Object(i.mdx)("inlineCode",{parentName:"p"},"8")," characters.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"ReturnTempPassword")," component should display the password you create as the ",Object(i.mdx)("inlineCode",{parentName:"p"},"tempPassword")," prop within ",Object(i.mdx)("inlineCode",{parentName:"p"},"strong")," tags.")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'class ReturnTempPassword extends React.Component {\n  constructor(props) {\n    super(props);\n\n  }\n  render() {\n    return (\n        <div>\n            <p>Your temporary password is: <strong>{this.props.tempPassword}</strong></p>\n        </div>\n    );\n  }\n};\n\nclass ResetPassword extends React.Component {\n  constructor(props) {\n    super(props);\n\n  }\n  render() {\n    return (\n        <div>\n          <h2>Reset Password</h2>\n          <h3>We\'ve generated a new temporary password for you.</h3>\n          <h3>Please reset this password from your account settings ASAP.</h3>\n\n          <ReturnTempPassword tempPassword="0123456789" />\n\n        </div>\n    );\n  }\n};\n')),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"20-review-using-props-with-stateless-functional-components"},"20. Review Using Props with Stateless Functional Components"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/review-using-props-with-stateless-functional-components"}),"Learn React: Review Using Props with Stateless Functional Components | freeCodeCamp.org")),Object(i.mdx)("p",null,"Except for the last challenge, you've been passing props to stateless functional components. These components act like pure functions. They accept props as input and return the same view every time they are passed the same props. You may be wondering what state is, and the next challenge will cover it in more detail. Before that, here's a review of the terminology for components.\nA ",Object(i.mdx)("em",{parentName:"p"},"stateless functional component")," is any function you write which accepts props and returns JSX. A ",Object(i.mdx)("em",{parentName:"p"},"stateless component"),", on the other hand, is a class that extends ",Object(i.mdx)("inlineCode",{parentName:"p"},"React.Component"),", but does not use internal state (covered in the next challenge). Finally, a ",Object(i.mdx)("em",{parentName:"p"},"stateful component")," is a class component that does maintain its own internal state. You may see stateful components referred to simply as components or React components.\nA common pattern is to try to minimize statefulness and to create stateless functional components wherever possible. This helps contain your state management to a specific area of your application. In turn, this improves development and maintenance of your app by making it easier to follow how changes to state affect its behavior."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"The code editor has a ",Object(i.mdx)("inlineCode",{parentName:"p"},"CampSite")," component that renders a ",Object(i.mdx)("inlineCode",{parentName:"p"},"Camper")," component as a child. Define the ",Object(i.mdx)("inlineCode",{parentName:"p"},"Camper")," component and assign it default props of ",Object(i.mdx)("inlineCode",{parentName:"p"},"{ name: 'CamperBot' }"),". Inside the ",Object(i.mdx)("inlineCode",{parentName:"p"},"Camper")," component, render any code that you want, but make sure to have one ",Object(i.mdx)("inlineCode",{parentName:"p"},"p")," element that includes only the ",Object(i.mdx)("inlineCode",{parentName:"p"},"name")," value that is passed in as a ",Object(i.mdx)("inlineCode",{parentName:"p"},"prop"),". Finally, define ",Object(i.mdx)("inlineCode",{parentName:"p"},"propTypes")," on the ",Object(i.mdx)("inlineCode",{parentName:"p"},"Camper")," component to require ",Object(i.mdx)("inlineCode",{parentName:"p"},"name")," to be provided as a prop and verify that it is of type ",Object(i.mdx)("inlineCode",{parentName:"p"},"string"),"."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"The ",Object(i.mdx)("inlineCode",{parentName:"p"},"CampSite")," component should render.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"Camper")," component should render.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"Camper")," component should include default props which assign the string ",Object(i.mdx)("inlineCode",{parentName:"p"},"CamperBot")," to the key ",Object(i.mdx)("inlineCode",{parentName:"p"},"name"),".\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"Camper")," component should include prop types which require the ",Object(i.mdx)("inlineCode",{parentName:"p"},"name")," prop to be of type ",Object(i.mdx)("inlineCode",{parentName:"p"},"string"),".\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"Camper")," component should contain a ",Object(i.mdx)("inlineCode",{parentName:"p"},"p")," element with only the text from the ",Object(i.mdx)("inlineCode",{parentName:"p"},"name")," prop.")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'class CampSite extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <Camper/>\n      </div>\n    );\n  }\n};\n\nconst Camper = props => <p>{props.name}</p>;\n\nCamper.defaultProps = {\n  name: "CamperBot"\n};\n\nCamper.propTypes = {\n  name: PropTypes.string.isRequired\n};\n')),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"21-create-a-stateful-component"},"21. Create a Stateful Component"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/create-a-stateful-component"}),"Learn React: Create a Stateful Component | freeCodeCamp.org")),Object(i.mdx)("p",null,"One of the most important topics in React is ",Object(i.mdx)("inlineCode",{parentName:"p"},"state"),". State consists of any data your application needs to know about, that can change over time. You want your apps to respond to state changes and present an updated UI when necessary. React offers a nice solution for the state management of modern web applications.\nYou create state in a React component by declaring a ",Object(i.mdx)("inlineCode",{parentName:"p"},"state")," property on the component class in its ",Object(i.mdx)("inlineCode",{parentName:"p"},"constructor"),". This initializes the component with ",Object(i.mdx)("inlineCode",{parentName:"p"},"state")," when it is created. The ",Object(i.mdx)("inlineCode",{parentName:"p"},"state")," property must be set to a JavaScript ",Object(i.mdx)("inlineCode",{parentName:"p"},"object"),". Declaring it looks like this:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"this.state = {\n  // describe your state here\n}\n")),Object(i.mdx)("p",null,"You have access to the ",Object(i.mdx)("inlineCode",{parentName:"p"},"state")," object throughout the life of your component. You can update it, render it in your UI, and pass it as props to child components. The ",Object(i.mdx)("inlineCode",{parentName:"p"},"state")," object can be as complex or as simple as you need it to be. Note that you must create a class component by extending ",Object(i.mdx)("inlineCode",{parentName:"p"},"React.Component")," in order to create ",Object(i.mdx)("inlineCode",{parentName:"p"},"state")," like this."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"There is a component in the code editor that is trying to render a ",Object(i.mdx)("inlineCode",{parentName:"p"},"name")," property from its ",Object(i.mdx)("inlineCode",{parentName:"p"},"state"),". However, there is no ",Object(i.mdx)("inlineCode",{parentName:"p"},"state")," defined. Initialize the component with ",Object(i.mdx)("inlineCode",{parentName:"p"},"state")," in the ",Object(i.mdx)("inlineCode",{parentName:"p"},"constructor")," and assign your name to a property of ",Object(i.mdx)("inlineCode",{parentName:"p"},"name"),"."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},Object(i.mdx)("inlineCode",{parentName:"p"},"StatefulComponent")," should exist and render.\n",Object(i.mdx)("inlineCode",{parentName:"p"},"StatefulComponent")," should render a ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," and an ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," element.\nThe state of ",Object(i.mdx)("inlineCode",{parentName:"p"},"StatefulComponent")," should be initialized with a property ",Object(i.mdx)("inlineCode",{parentName:"p"},"name")," set to a string.\nThe property ",Object(i.mdx)("inlineCode",{parentName:"p"},"name")," in the state of ",Object(i.mdx)("inlineCode",{parentName:"p"},"StatefulComponent")," should render in the ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," element.")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'class StatefulComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name : "myName"\n    }\n\n  }\n  render() {\n    return (\n      <div>\n        <h1>{this.state.name}</h1>\n      </div>\n    );\n  }\n};\n')),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"22-render-state-in-the-user-interface"},"22. Render State in the User Interface"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/render-state-in-the-user-interface"}),"Learn React: Render State in the User Interface | freeCodeCamp.org")),Object(i.mdx)("p",null,"Once you define a component's initial state, you can display any part of it in the UI that is rendered. If a component is stateful, it will always have access to the data in ",Object(i.mdx)("inlineCode",{parentName:"p"},"state")," in its ",Object(i.mdx)("inlineCode",{parentName:"p"},"render()")," method. You can access the data with ",Object(i.mdx)("inlineCode",{parentName:"p"},"this.state"),".\nIf you want to access a state value within the ",Object(i.mdx)("inlineCode",{parentName:"p"},"return")," of the render method, you have to enclose the value in curly braces.\n",Object(i.mdx)("inlineCode",{parentName:"p"},"State")," is one of the most powerful features of components in React. It allows you to track important data in your app and render a UI in response to changes in this data. If your data changes, your UI will change. React uses what is called a virtual DOM, to keep track of changes behind the scenes. When state data updates, it triggers a re-render of the components using that data - including child components that received the data as a prop. React updates the actual DOM, but only where necessary. This means you don't have to worry about changing the DOM. You simply declare what the UI should look like.\nNote that if you make a component stateful, no other components are aware of its ",Object(i.mdx)("inlineCode",{parentName:"p"},"state"),". Its ",Object(i.mdx)("inlineCode",{parentName:"p"},"state")," is completely encapsulated, or local to that component, unless you pass state data to a child component as ",Object(i.mdx)("inlineCode",{parentName:"p"},"props"),". This notion of encapsulated ",Object(i.mdx)("inlineCode",{parentName:"p"},"state")," is very important because it allows you to write certain logic, then have that logic contained and isolated in one place in your code."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"In the code editor, ",Object(i.mdx)("inlineCode",{parentName:"p"},"MyComponent")," is already stateful. Define an ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," tag in the component's render method which renders the value of ",Object(i.mdx)("inlineCode",{parentName:"p"},"name")," from the component's state.\n",Object(i.mdx)("strong",{parentName:"p"},"Note:")," The ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," should only render the value from ",Object(i.mdx)("inlineCode",{parentName:"p"},"state")," and nothing else. In JSX, any code you write with curly braces ",Object(i.mdx)("inlineCode",{parentName:"p"},"{ }")," will be treated as JavaScript. So to access the value from ",Object(i.mdx)("inlineCode",{parentName:"p"},"state")," just enclose the reference in curly braces."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},Object(i.mdx)("inlineCode",{parentName:"p"},"MyComponent")," should have a key ",Object(i.mdx)("inlineCode",{parentName:"p"},"name")," with value ",Object(i.mdx)("inlineCode",{parentName:"p"},"freeCodeCamp")," stored in its state.\n",Object(i.mdx)("inlineCode",{parentName:"p"},"MyComponent")," should render an ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," header enclosed in a single ",Object(i.mdx)("inlineCode",{parentName:"p"},"div"),".\nThe rendered ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," header should contain text rendered from the component's state.")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'freeCodeCamp'\n    }\n  }\n  render() {\n    return (\n      <div>\n\n        <h1>{this.state.name}</h1>\n\n      </div>\n    );\n  }\n};\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"23-render-state-in-the-user-interface-another-way"},"23. Render State in the User Interface Another Way"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/render-state-in-the-user-interface-another-way"}),"Learn React: Render State in the User Interface Another Way | freeCodeCamp.org")),Object(i.mdx)("p",null,"There is another way to access ",Object(i.mdx)("inlineCode",{parentName:"p"},"state")," in a component. In the ",Object(i.mdx)("inlineCode",{parentName:"p"},"render()")," method, before the ",Object(i.mdx)("inlineCode",{parentName:"p"},"return")," statement, you can write JavaScript directly. For example, you could declare functions, access data from ",Object(i.mdx)("inlineCode",{parentName:"p"},"state")," or ",Object(i.mdx)("inlineCode",{parentName:"p"},"props"),", perform computations on this data, and so on. Then, you can assign any data to variables, which you have access to in the ",Object(i.mdx)("inlineCode",{parentName:"p"},"return")," statement."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"In the ",Object(i.mdx)("inlineCode",{parentName:"p"},"MyComponent")," render method, define a ",Object(i.mdx)("inlineCode",{parentName:"p"},"const")," called ",Object(i.mdx)("inlineCode",{parentName:"p"},"name")," and set it equal to the name value in the component's ",Object(i.mdx)("inlineCode",{parentName:"p"},"state"),". Because you can write JavaScript directly in this part of the code, you don't have to enclose this reference in curly braces.\nNext, in the return statement, render this value in an ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," tag using the variable ",Object(i.mdx)("inlineCode",{parentName:"p"},"name"),". Remember, you need to use the JSX syntax (curly braces for JavaScript) in the return statement."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},Object(i.mdx)("inlineCode",{parentName:"p"},"MyComponent")," should have a key ",Object(i.mdx)("inlineCode",{parentName:"p"},"name")," with value ",Object(i.mdx)("inlineCode",{parentName:"p"},"freeCodeCamp")," stored in its state.\n",Object(i.mdx)("inlineCode",{parentName:"p"},"MyComponent")," should render an ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," header enclosed in a single ",Object(i.mdx)("inlineCode",{parentName:"p"},"div"),".\nThe rendered ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," tag should include a reference to ",Object(i.mdx)("inlineCode",{parentName:"p"},"{name}"),".\nThe rendered ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," header should contain text rendered from the component's state.")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'freeCodeCamp'\n    }\n  }\n  render() {\n\n    const name = this.state.name;\n\n    return (\n      <div>\n\n        <h1>{name}</h1>\n\n      </div>\n    );\n  }\n};\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"24-set-state-with-thissetstate"},"24. Set State with ",Object(i.mdx)("inlineCode",{parentName:"h2"},"this.setState")),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/set-state-with-this-setstate"}),"Learn React: Set State with this.setState | freeCodeCamp.org")),Object(i.mdx)("p",null,"The previous challenges covered component ",Object(i.mdx)("inlineCode",{parentName:"p"},"state")," and how to initialize state in the ",Object(i.mdx)("inlineCode",{parentName:"p"},"constructor"),". There is also a way to change the component's ",Object(i.mdx)("inlineCode",{parentName:"p"},"state"),". React provides a method for updating component ",Object(i.mdx)("inlineCode",{parentName:"p"},"state")," called ",Object(i.mdx)("inlineCode",{parentName:"p"},"setState"),". You call the ",Object(i.mdx)("inlineCode",{parentName:"p"},"setState")," method within your component class like so: ",Object(i.mdx)("inlineCode",{parentName:"p"},"this.setState()"),", passing in an object with key-value pairs. The keys are your state properties and the values are the updated state data. For instance, if we were storing a ",Object(i.mdx)("inlineCode",{parentName:"p"},"username")," in state and wanted to update it, it would look like this:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"this.setState({\n  username: 'Lewis'\n});\n")),Object(i.mdx)("p",null,"React expects you to never modify ",Object(i.mdx)("inlineCode",{parentName:"p"},"state")," directly, instead always use ",Object(i.mdx)("inlineCode",{parentName:"p"},"this.setState()")," when state changes occur. Also, you should note that React may batch multiple state updates in order to improve performance. What this means is that state updates through the ",Object(i.mdx)("inlineCode",{parentName:"p"},"setState")," method can be asynchronous. There is an alternative syntax for the ",Object(i.mdx)("inlineCode",{parentName:"p"},"setState")," method which provides a way around this problem. This is rarely needed but it's good to keep it in mind! Please consult the ",Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://facebook.github.io/react/docs/state-and-lifecycle.html"}),"React documentation")," for further details."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"There is a ",Object(i.mdx)("inlineCode",{parentName:"p"},"button")," element in the code editor which has an ",Object(i.mdx)("inlineCode",{parentName:"p"},"onClick()")," handler. This handler is triggered when the ",Object(i.mdx)("inlineCode",{parentName:"p"},"button")," receives a click event in the browser, and runs the ",Object(i.mdx)("inlineCode",{parentName:"p"},"handleClick")," method defined on ",Object(i.mdx)("inlineCode",{parentName:"p"},"MyComponent"),". Within the ",Object(i.mdx)("inlineCode",{parentName:"p"},"handleClick")," method, update the component ",Object(i.mdx)("inlineCode",{parentName:"p"},"state")," using ",Object(i.mdx)("inlineCode",{parentName:"p"},"this.setState()"),". Set the ",Object(i.mdx)("inlineCode",{parentName:"p"},"name")," property in ",Object(i.mdx)("inlineCode",{parentName:"p"},"state")," to equal the string ",Object(i.mdx)("inlineCode",{parentName:"p"},"React Rocks!"),".\nClick the button and watch the rendered state update. Don't worry if you don't fully understand how the click handler code works at this point. It's covered in upcoming challenges."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"The state of ",Object(i.mdx)("inlineCode",{parentName:"p"},"MyComponent")," should initialize with the key value pair ",Object(i.mdx)("inlineCode",{parentName:"p"},"{ name: Initial State }"),".\n",Object(i.mdx)("inlineCode",{parentName:"p"},"MyComponent")," should render an ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," header.\nThe rendered ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," header should contain text rendered from the component's state.\nCalling the ",Object(i.mdx)("inlineCode",{parentName:"p"},"handleClick")," method on ",Object(i.mdx)("inlineCode",{parentName:"p"},"MyComponent")," should set the name property in state to equal ",Object(i.mdx)("inlineCode",{parentName:"p"},"React Rocks!"),".")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'Initial State'\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n\n    this.setState({\n      name: 'React Rocks!'\n    })\n\n  }\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleClick}>Click Me</button>\n        <h1>{this.state.name}</h1>\n      </div>\n    );\n  }\n};\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"25-bind-this-to-a-class-method"},"25. Bind 'this' to a Class Method"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/bind-this-to-a-class-method"}),"Learn React: Bind 'this' to a Class Method | freeCodeCamp.org")),Object(i.mdx)("p",null,"In addition to setting and updating ",Object(i.mdx)("inlineCode",{parentName:"p"},"state"),", you can also define methods for your component class. A class method typically needs to use the ",Object(i.mdx)("inlineCode",{parentName:"p"},"this")," keyword so it can access properties on the class (such as ",Object(i.mdx)("inlineCode",{parentName:"p"},"state")," and ",Object(i.mdx)("inlineCode",{parentName:"p"},"props"),") inside the scope of the method. There are a few ways to allow your class methods to access ",Object(i.mdx)("inlineCode",{parentName:"p"},"this"),".\nOne common way is to explicitly bind ",Object(i.mdx)("inlineCode",{parentName:"p"},"this")," in the constructor so ",Object(i.mdx)("inlineCode",{parentName:"p"},"this")," becomes bound to the class methods when the component is initialized. You may have noticed the last challenge used ",Object(i.mdx)("inlineCode",{parentName:"p"},"this.handleClick = this.handleClick.bind(this)")," for its ",Object(i.mdx)("inlineCode",{parentName:"p"},"handleClick")," method in the constructor. Then, when you call a function like ",Object(i.mdx)("inlineCode",{parentName:"p"},"this.setState()")," within your class method, ",Object(i.mdx)("inlineCode",{parentName:"p"},"this")," refers to the class and will not be ",Object(i.mdx)("inlineCode",{parentName:"p"},"undefined"),".\n",Object(i.mdx)("strong",{parentName:"p"},"Note:")," The ",Object(i.mdx)("inlineCode",{parentName:"p"},"this")," keyword is one of the most confusing aspects of JavaScript but it plays an important role in React. Although its behavior here is totally normal, these lessons aren't the place for an in-depth review of ",Object(i.mdx)("inlineCode",{parentName:"p"},"this")," so please refer to other lessons if the above is confusing!"),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"The code editor has a component with a ",Object(i.mdx)("inlineCode",{parentName:"p"},"state")," that keeps track of the text. It also has a method which allows you to set the text to ",Object(i.mdx)("inlineCode",{parentName:"p"},'"You clicked!"'),". However, the method doesn't work because it's using the ",Object(i.mdx)("inlineCode",{parentName:"p"},"this")," keyword that is undefined. Fix it by explicitly binding ",Object(i.mdx)("inlineCode",{parentName:"p"},"this")," to the ",Object(i.mdx)("inlineCode",{parentName:"p"},"handleClick()")," method in the component's constructor.\nNext, add a click handler to the ",Object(i.mdx)("inlineCode",{parentName:"p"},"button")," element in the render method. It should trigger the ",Object(i.mdx)("inlineCode",{parentName:"p"},"handleClick()")," method when the button receives a click event. Remember that the method you pass to the ",Object(i.mdx)("inlineCode",{parentName:"p"},"onClick")," handler needs curly braces because it should be interpreted directly as JavaScript.\nOnce you complete the above steps you should be able to click the button and see ",Object(i.mdx)("inlineCode",{parentName:"p"},"You clicked!"),"."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},Object(i.mdx)("inlineCode",{parentName:"p"},"MyComponent")," should return a ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," element which wraps two elements, a button and an ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," element, in that order.\nThe state of ",Object(i.mdx)("inlineCode",{parentName:"p"},"MyComponent")," should initialize with the key value pair ",Object(i.mdx)("inlineCode",{parentName:"p"},'{ text: "Hello" }'),".\nClicking the ",Object(i.mdx)("inlineCode",{parentName:"p"},"button")," element should run the ",Object(i.mdx)("inlineCode",{parentName:"p"},"handleClick")," method and set the state ",Object(i.mdx)("inlineCode",{parentName:"p"},"text")," to ",Object(i.mdx)("inlineCode",{parentName:"p"},'"You clicked!"'),".")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: "Hello"\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n\n  }\n  handleClick() {\n    this.setState({\n      text: "You clicked!"\n    });\n  }\n  render() {\n    return (\n      <div>\n\n        <button onClick={this.handleClick}>Click Me</button>\n\n        <h1>{this.state.text}</h1>\n      </div>\n    );\n  }\n};\n')),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"26-use-state-to-toggle-an-element"},"26. Use State to Toggle an Element"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/use-state-to-toggle-an-element"}),"Learn React: Use State to Toggle an Element | freeCodeCamp.org")),Object(i.mdx)("p",null,"Sometimes you might need to know the previous state when updating the state. However, state updates may be asynchronous - this means React may batch multiple ",Object(i.mdx)("inlineCode",{parentName:"p"},"setState()")," calls into a single update. This means you can't rely on the previous value of ",Object(i.mdx)("inlineCode",{parentName:"p"},"this.state")," or ",Object(i.mdx)("inlineCode",{parentName:"p"},"this.props")," when calculating the next value. So, you should not use code like this:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"this.setState({\n  counter: this.state.counter + this.props.increment\n});\n")),Object(i.mdx)("p",null,"Instead, you should pass ",Object(i.mdx)("inlineCode",{parentName:"p"},"setState")," a function that allows you to access state and props. Using a function with ",Object(i.mdx)("inlineCode",{parentName:"p"},"setState")," guarantees you are working with the most current values of state and props. This means that the above should be rewritten as:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"this.setState((state, props) => ({\n  counter: state.counter + props.increment\n}));\n")),Object(i.mdx)("p",null,"You can also use a form without ",Object(i.mdx)("inlineCode",{parentName:"p"},"props")," if you need only the ",Object(i.mdx)("inlineCode",{parentName:"p"},"state"),":"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"this.setState(state => ({\n  counter: state.counter + 1\n}));\n")),Object(i.mdx)("p",null,"Note that you have to wrap the object literal in parentheses, otherwise JavaScript thinks it's a block of code."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,Object(i.mdx)("inlineCode",{parentName:"p"},"MyComponent")," has a ",Object(i.mdx)("inlineCode",{parentName:"p"},"visibility")," property which is initialized to ",Object(i.mdx)("inlineCode",{parentName:"p"},"false"),". The render method returns one view if the value of ",Object(i.mdx)("inlineCode",{parentName:"p"},"visibility")," is true, and a different view if it is false.\nCurrently, there is no way of updating the ",Object(i.mdx)("inlineCode",{parentName:"p"},"visibility")," property in the component's ",Object(i.mdx)("inlineCode",{parentName:"p"},"state"),". The value should toggle back and forth between true and false. There is a click handler on the button which triggers a class method called ",Object(i.mdx)("inlineCode",{parentName:"p"},"toggleVisibility()"),". Pass a function to ",Object(i.mdx)("inlineCode",{parentName:"p"},"setState")," to define this method so that the ",Object(i.mdx)("inlineCode",{parentName:"p"},"state")," of ",Object(i.mdx)("inlineCode",{parentName:"p"},"visibility")," toggles to the opposite value when the method is called. If ",Object(i.mdx)("inlineCode",{parentName:"p"},"visibility")," is ",Object(i.mdx)("inlineCode",{parentName:"p"},"false"),", the method sets it to ",Object(i.mdx)("inlineCode",{parentName:"p"},"true"),", and vice versa.\nFinally, click the button to see the conditional rendering of the component based on its ",Object(i.mdx)("inlineCode",{parentName:"p"},"state"),".\n",Object(i.mdx)("strong",{parentName:"p"},"Hint:")," Don't forget to bind the ",Object(i.mdx)("inlineCode",{parentName:"p"},"this")," keyword to the method in the constructor!"),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},Object(i.mdx)("inlineCode",{parentName:"p"},"MyComponent")," should return a ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," element which contains a ",Object(i.mdx)("inlineCode",{parentName:"p"},"button"),".\nThe state of ",Object(i.mdx)("inlineCode",{parentName:"p"},"MyComponent")," should initialize with a ",Object(i.mdx)("inlineCode",{parentName:"p"},"visibility")," property set to ",Object(i.mdx)("inlineCode",{parentName:"p"},"false"),".\nClicking the button element should toggle the ",Object(i.mdx)("inlineCode",{parentName:"p"},"visibility")," property in state between ",Object(i.mdx)("inlineCode",{parentName:"p"},"true")," and ",Object(i.mdx)("inlineCode",{parentName:"p"},"false"),".\nAn anonymous function should be passed to ",Object(i.mdx)("inlineCode",{parentName:"p"},"setState"),".\n",Object(i.mdx)("inlineCode",{parentName:"p"},"this")," should not be used inside ",Object(i.mdx)("inlineCode",{parentName:"p"},"setState"),".")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visibility: false\n    };\n\n    this.toggleVisibility = this.toggleVisibility.bind(this);\n\n  }\n\n  toggleVisibility() {\n    this.setState(state => {\n      if (state.visibility === true) {\n         return { visibility: false };\n       } else {\n         return { visibility: true };\n      }\n    });\n  }\n\n  render() {\n    if (this.state.visibility) {\n      return (\n        <div>\n          <button onClick={this.toggleVisibility}>Click Me</button>\n          <h1>Now you see me!</h1>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <button onClick={this.toggleVisibility}>Click Me</button>\n        </div>\n      );\n    }\n  }\n}\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"27-write-a-simple-counter"},"27. Write a Simple Counter"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/write-a-simple-counter"}),"Learn React: Write a Simple Counter | freeCodeCamp.org")),Object(i.mdx)("p",null,"You can design a more complex stateful component by combining the concepts covered so far. These include initializing ",Object(i.mdx)("inlineCode",{parentName:"p"},"state"),", writing methods that set ",Object(i.mdx)("inlineCode",{parentName:"p"},"state"),", and assigning click handlers to trigger these methods."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"The ",Object(i.mdx)("inlineCode",{parentName:"p"},"Counter")," component keeps track of a ",Object(i.mdx)("inlineCode",{parentName:"p"},"count")," value in ",Object(i.mdx)("inlineCode",{parentName:"p"},"state"),". There are two buttons which call methods ",Object(i.mdx)("inlineCode",{parentName:"p"},"increment()")," and ",Object(i.mdx)("inlineCode",{parentName:"p"},"decrement()"),". Write these methods so the counter value is incremented or decremented by 1 when the appropriate button is clicked. Also, create a ",Object(i.mdx)("inlineCode",{parentName:"p"},"reset()")," method so when the reset button is clicked, the count is set to 0.\n",Object(i.mdx)("strong",{parentName:"p"},"Note:")," Make sure you don't modify the ",Object(i.mdx)("inlineCode",{parentName:"p"},"classNames")," of the buttons. Also, remember to add the necessary bindings for the newly-created methods in the constructor."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},Object(i.mdx)("inlineCode",{parentName:"p"},"Counter")," should return a ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," element which contains three buttons with text content in this order ",Object(i.mdx)("inlineCode",{parentName:"p"},"Increment!"),", ",Object(i.mdx)("inlineCode",{parentName:"p"},"Decrement!"),", ",Object(i.mdx)("inlineCode",{parentName:"p"},"Reset"),".\nThe state of ",Object(i.mdx)("inlineCode",{parentName:"p"},"Counter")," should initialize with a ",Object(i.mdx)("inlineCode",{parentName:"p"},"count")," property set to ",Object(i.mdx)("inlineCode",{parentName:"p"},"0"),".\nClicking the increment button should increment the count by ",Object(i.mdx)("inlineCode",{parentName:"p"},"1"),".\nClicking the decrement button should decrement the count by ",Object(i.mdx)("inlineCode",{parentName:"p"},"1"),".\nClicking the reset button should reset the count to ",Object(i.mdx)("inlineCode",{parentName:"p"},"0"),".")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"class Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n\n    this.increment = this.increment.bind(this);\n    this.decrement = this.decrement.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n\n  increment() {\n    this.setState(state => ({ count: state.count + 1\n    }));\n  };\n  decrement() {\n    this.setState(state => ({ count: state.count - 1\n    }));\n  };\n  reset() {\n    this.setState({\n      count: 0\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <button className='inc' onClick={this.increment}>Increment!</button>\n        <button className='dec' onClick={this.decrement}>Decrement!</button>\n        <button className='reset' onClick={this.reset}>Reset</button>\n        <h1>Current Count: {this.state.count}</h1>\n      </div>\n    );\n  }\n};\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"28-create-a-controlled-input"},"28. Create a Controlled Input"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/create-a-controlled-input"}),"Learn React: Create a Controlled Input | freeCodeCamp.org")),Object(i.mdx)("p",null,"Your application may have more complex interactions between ",Object(i.mdx)("inlineCode",{parentName:"p"},"state")," and the rendered UI. For example, form control elements for text input, such as ",Object(i.mdx)("inlineCode",{parentName:"p"},"input")," and ",Object(i.mdx)("inlineCode",{parentName:"p"},"textarea"),", maintain their own state in the DOM as the user types. With React, you can move this mutable state into a React component's ",Object(i.mdx)("inlineCode",{parentName:"p"},"state"),". The user's input becomes part of the application ",Object(i.mdx)("inlineCode",{parentName:"p"},"state"),", so React controls the value of that input field. Typically, if you have React components with input fields the user can type into, it will be a controlled input form."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"The code editor has the skeleton of a component called ",Object(i.mdx)("inlineCode",{parentName:"p"},"ControlledInput")," to create a controlled ",Object(i.mdx)("inlineCode",{parentName:"p"},"input")," element. The component's ",Object(i.mdx)("inlineCode",{parentName:"p"},"state")," is already initialized with an ",Object(i.mdx)("inlineCode",{parentName:"p"},"input")," property that holds an empty string. This value represents the text a user types into the ",Object(i.mdx)("inlineCode",{parentName:"p"},"input")," field.\nFirst, create a method called ",Object(i.mdx)("inlineCode",{parentName:"p"},"handleChange()")," that has a parameter called ",Object(i.mdx)("inlineCode",{parentName:"p"},"event"),". When the method is called, it receives an ",Object(i.mdx)("inlineCode",{parentName:"p"},"event")," object that contains a string of text from the ",Object(i.mdx)("inlineCode",{parentName:"p"},"input")," element. You can access this string with ",Object(i.mdx)("inlineCode",{parentName:"p"},"event.target.value")," inside the method. Update the ",Object(i.mdx)("inlineCode",{parentName:"p"},"input")," property of the component's ",Object(i.mdx)("inlineCode",{parentName:"p"},"state")," with this new string.\nIn the render method, create the ",Object(i.mdx)("inlineCode",{parentName:"p"},"input")," element above the ",Object(i.mdx)("inlineCode",{parentName:"p"},"h4")," tag. Add a ",Object(i.mdx)("inlineCode",{parentName:"p"},"value")," attribute which is equal to the ",Object(i.mdx)("inlineCode",{parentName:"p"},"input")," property of the component's ",Object(i.mdx)("inlineCode",{parentName:"p"},"state"),". Then add an ",Object(i.mdx)("inlineCode",{parentName:"p"},"onChange()")," event handler set to the ",Object(i.mdx)("inlineCode",{parentName:"p"},"handleChange()")," method.\nWhen you type in the input box, that text is processed by the ",Object(i.mdx)("inlineCode",{parentName:"p"},"handleChange()")," method, set as the ",Object(i.mdx)("inlineCode",{parentName:"p"},"input")," property in the local ",Object(i.mdx)("inlineCode",{parentName:"p"},"state"),", and rendered as the value in the ",Object(i.mdx)("inlineCode",{parentName:"p"},"input")," box on the page. The component ",Object(i.mdx)("inlineCode",{parentName:"p"},"state")," is the single source of truth regarding the input data.\nLast but not least, don't forget to add the necessary bindings in the constructor."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},Object(i.mdx)("inlineCode",{parentName:"p"},"ControlledInput")," should return a ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," element which contains an ",Object(i.mdx)("inlineCode",{parentName:"p"},"input")," and a ",Object(i.mdx)("inlineCode",{parentName:"p"},"p")," tag.\nThe state of ",Object(i.mdx)("inlineCode",{parentName:"p"},"ControlledInput")," should initialize with an ",Object(i.mdx)("inlineCode",{parentName:"p"},"input")," property set to an empty string.\nTyping in the input element should update the state and the value of the input, and the ",Object(i.mdx)("inlineCode",{parentName:"p"},"p")," element should render this state as you type.")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"class ControlledInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: ''\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n\n  render() {\n    return (\n      <div>\n\n        <input value={this.state.input} onChange={this.handleChange}/>\n\n        <h4>Controlled Input:</h4>\n        <p>{this.state.input}</p>\n      </div>\n    );\n  }\n};\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"29-create-a-controlled-form"},"29. Create a Controlled Form"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/create-a-controlled-form"}),"Learn React: Create a Controlled Form | freeCodeCamp.org")),Object(i.mdx)("p",null,"The last challenge showed that React can control the internal state for certain elements like ",Object(i.mdx)("inlineCode",{parentName:"p"},"input")," and ",Object(i.mdx)("inlineCode",{parentName:"p"},"textarea"),", which makes them controlled components. This applies to other form elements as well, including the regular HTML ",Object(i.mdx)("inlineCode",{parentName:"p"},"form")," element."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"The ",Object(i.mdx)("inlineCode",{parentName:"p"},"MyForm")," component is set up with an empty ",Object(i.mdx)("inlineCode",{parentName:"p"},"form")," with a submit handler. The submit handler will be called when the form is submitted.\nWe've added a button which submits the form. You can see it has the ",Object(i.mdx)("inlineCode",{parentName:"p"},"type")," set to ",Object(i.mdx)("inlineCode",{parentName:"p"},"submit")," indicating it is the button controlling the form. Add the ",Object(i.mdx)("inlineCode",{parentName:"p"},"input")," element in the ",Object(i.mdx)("inlineCode",{parentName:"p"},"form")," and set its ",Object(i.mdx)("inlineCode",{parentName:"p"},"value")," and ",Object(i.mdx)("inlineCode",{parentName:"p"},"onChange()")," attributes like the last challenge. You should then complete the ",Object(i.mdx)("inlineCode",{parentName:"p"},"handleSubmit")," method so that it sets the component state property ",Object(i.mdx)("inlineCode",{parentName:"p"},"submit")," to the current input value in the local ",Object(i.mdx)("inlineCode",{parentName:"p"},"state"),".\n",Object(i.mdx)("strong",{parentName:"p"},"Note:")," You also must call ",Object(i.mdx)("inlineCode",{parentName:"p"},"event.preventDefault()")," in the submit handler, to prevent the default form submit behavior which will refresh the web page.\nFinally, create an ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," tag after the ",Object(i.mdx)("inlineCode",{parentName:"p"},"form")," which renders the ",Object(i.mdx)("inlineCode",{parentName:"p"},"submit")," value from the component's ",Object(i.mdx)("inlineCode",{parentName:"p"},"state"),". You can then type in the form and click the button (or press enter), and you should see your input rendered to the page."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},Object(i.mdx)("inlineCode",{parentName:"p"},"MyForm")," should return a ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," element which contains a ",Object(i.mdx)("inlineCode",{parentName:"p"},"form")," and an ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," tag. The form should include an ",Object(i.mdx)("inlineCode",{parentName:"p"},"input")," and a ",Object(i.mdx)("inlineCode",{parentName:"p"},"button"),".\nThe state of ",Object(i.mdx)("inlineCode",{parentName:"p"},"MyForm")," should initialize with ",Object(i.mdx)("inlineCode",{parentName:"p"},"input")," and ",Object(i.mdx)("inlineCode",{parentName:"p"},"submit")," properties, both set to empty strings.\nTyping in the ",Object(i.mdx)("inlineCode",{parentName:"p"},"input")," element should update the ",Object(i.mdx)("inlineCode",{parentName:"p"},"input")," property of the component's state.\nSubmitting the form should run ",Object(i.mdx)("inlineCode",{parentName:"p"},"handleSubmit")," which should set the ",Object(i.mdx)("inlineCode",{parentName:"p"},"submit")," property in state equal to the current input.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," header should render the value of the ",Object(i.mdx)("inlineCode",{parentName:"p"},"submit")," field from the component's state.")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"class MyForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      submit: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n  handleSubmit(event) {\n    event.preventDefault()\n    this.setState({\n      submit: this.state.input\n    });\n  }\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <input value={this.state.input} onChange={this.handleChange}/>\n          <button type='submit'>Submit!</button>\n        </form>\n      <h1>{this.state.submit}</h1>\n      </div>\n    );\n  }\n}\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"30-pass-state-as-props-to-child-components"},"30. Pass State as Props to Child Components"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/pass-state-as-props-to-child-components"}),"Learn React: Pass State as Props to Child Components | freeCodeCamp.org")),Object(i.mdx)("p",null,"You saw a lot of examples that passed props to child JSX elements and child React components in previous challenges. You may be wondering where those props come from. A common pattern is to have a stateful component containing the ",Object(i.mdx)("inlineCode",{parentName:"p"},"state")," important to your app, that then renders child components. You want these components to have access to some pieces of that ",Object(i.mdx)("inlineCode",{parentName:"p"},"state"),", which are passed in as props.\nFor example, maybe you have an ",Object(i.mdx)("inlineCode",{parentName:"p"},"App")," component that renders a ",Object(i.mdx)("inlineCode",{parentName:"p"},"Navbar"),", among other components. In your ",Object(i.mdx)("inlineCode",{parentName:"p"},"App"),", you have ",Object(i.mdx)("inlineCode",{parentName:"p"},"state")," that contains a lot of user information, but the ",Object(i.mdx)("inlineCode",{parentName:"p"},"Navbar")," only needs access to the user's username so it can display it. You pass that piece of ",Object(i.mdx)("inlineCode",{parentName:"p"},"state")," to the ",Object(i.mdx)("inlineCode",{parentName:"p"},"Navbar")," component as a prop.\nThis pattern illustrates some important paradigms in React. The first is ",Object(i.mdx)("em",{parentName:"p"},"unidirectional data flow"),". State flows in one direction down the tree of your application's components, from the stateful parent component to child components. The child components only receive the state data they need. The second is that complex stateful apps can be broken down into just a few, or maybe a single, stateful component. The rest of your components simply receive state from the parent as props, and render a UI from that state. It begins to create a separation where state management is handled in one part of code and UI rendering in another. This principle of separating state logic from UI logic is one of React's key principles. When it's used correctly, it makes the design of complex, stateful applications much easier to manage."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"The ",Object(i.mdx)("inlineCode",{parentName:"p"},"MyApp")," component is stateful and renders a ",Object(i.mdx)("inlineCode",{parentName:"p"},"Navbar")," component as a child. Pass the ",Object(i.mdx)("inlineCode",{parentName:"p"},"name")," property in its ",Object(i.mdx)("inlineCode",{parentName:"p"},"state")," down to the child component, then show the ",Object(i.mdx)("inlineCode",{parentName:"p"},"name")," in the ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," tag that's part of the ",Object(i.mdx)("inlineCode",{parentName:"p"},"Navbar")," render method. ",Object(i.mdx)("inlineCode",{parentName:"p"},"name")," should appear after the text ",Object(i.mdx)("inlineCode",{parentName:"p"},"Hello, my name is:"),"."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"The ",Object(i.mdx)("inlineCode",{parentName:"p"},"MyApp")," component should render with a ",Object(i.mdx)("inlineCode",{parentName:"p"},"Navbar")," component inside.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"Navbar")," component should receive the ",Object(i.mdx)("inlineCode",{parentName:"p"},"MyApp")," state property ",Object(i.mdx)("inlineCode",{parentName:"p"},"name")," as props.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," element in ",Object(i.mdx)("inlineCode",{parentName:"p"},"Navbar")," should render the ",Object(i.mdx)("inlineCode",{parentName:"p"},"name")," prop.")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"class MyApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'CamperBot'\n    }\n  }\n  render() {\n    return (\n       <div>\n         <Navbar name={this.state.name}/>\n       </div>\n    );\n  }\n};\n\nclass Navbar extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n    <div>\n      <h1>Hello, my name is: {this.props.name}</h1>\n    </div>\n    );\n  }\n};\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"31-pass-a-callback-as-props"},"31. Pass a Callback as Props"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/pass-a-callback-as-props"}),"Learn React: Pass a Callback as Props | freeCodeCamp.org")),Object(i.mdx)("p",null,"You can pass ",Object(i.mdx)("inlineCode",{parentName:"p"},"state")," as props to child components, but you're not limited to passing data. You can also pass handler functions or any method that's defined on a React component to a child component. This is how you allow child components to interact with their parent components. You pass methods to a child just like a regular prop. It's assigned a name and you have access to that method name under ",Object(i.mdx)("inlineCode",{parentName:"p"},"this.props")," in the child component."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"There are three components outlined in the code editor. The ",Object(i.mdx)("inlineCode",{parentName:"p"},"MyApp")," component is the parent that will render the ",Object(i.mdx)("inlineCode",{parentName:"p"},"GetInput")," and ",Object(i.mdx)("inlineCode",{parentName:"p"},"RenderInput")," child components. Add the ",Object(i.mdx)("inlineCode",{parentName:"p"},"GetInput")," component to the render method in ",Object(i.mdx)("inlineCode",{parentName:"p"},"MyApp"),", then pass it a prop called ",Object(i.mdx)("inlineCode",{parentName:"p"},"input")," assigned to ",Object(i.mdx)("inlineCode",{parentName:"p"},"inputValue")," from ",Object(i.mdx)("inlineCode",{parentName:"p"},"MyApp"),"'s ",Object(i.mdx)("inlineCode",{parentName:"p"},"state"),". Also create a prop called ",Object(i.mdx)("inlineCode",{parentName:"p"},"handleChange")," and pass the input handler ",Object(i.mdx)("inlineCode",{parentName:"p"},"handleChange")," to it.\nNext, add ",Object(i.mdx)("inlineCode",{parentName:"p"},"RenderInput")," to the render method in ",Object(i.mdx)("inlineCode",{parentName:"p"},"MyApp"),", then create a prop called ",Object(i.mdx)("inlineCode",{parentName:"p"},"input")," and pass the ",Object(i.mdx)("inlineCode",{parentName:"p"},"inputValue")," from ",Object(i.mdx)("inlineCode",{parentName:"p"},"state")," to it. Once you are finished you will be able to type in the ",Object(i.mdx)("inlineCode",{parentName:"p"},"input")," field in the ",Object(i.mdx)("inlineCode",{parentName:"p"},"GetInput")," component, which then calls the handler method in its parent via props. This updates the input in the ",Object(i.mdx)("inlineCode",{parentName:"p"},"state")," of the parent, which is passed as props to both children. Observe how the data flows between the components and how the single source of truth remains the ",Object(i.mdx)("inlineCode",{parentName:"p"},"state")," of the parent component. Admittedly, this example is a bit contrived, but should serve to illustrate how data and callbacks can be passed between React components."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"The ",Object(i.mdx)("inlineCode",{parentName:"p"},"MyApp")," component should render.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"GetInput")," component should render.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"RenderInput")," component should render.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"GetInput")," component should receive the ",Object(i.mdx)("inlineCode",{parentName:"p"},"MyApp")," state property ",Object(i.mdx)("inlineCode",{parentName:"p"},"inputValue")," as props and contain an ",Object(i.mdx)("inlineCode",{parentName:"p"},"input")," element which modifies ",Object(i.mdx)("inlineCode",{parentName:"p"},"MyApp")," state.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"RenderInput")," component should receive the ",Object(i.mdx)("inlineCode",{parentName:"p"},"MyApp")," state property ",Object(i.mdx)("inlineCode",{parentName:"p"},"inputValue")," as props.")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"class MyApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: ''\n    }\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      inputValue: event.target.value\n    });\n  }\n  render() {\n    return (\n       <div>\n        <GetInput\n        input={this.state.inputValue}\n        handleChange={this.handleChange}/>\n        <RenderInput\n        input={this.state.inputValue}/>\n       </div>\n    );\n  }\n};\n\nclass GetInput extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h3>Get Input:</h3>\n        <input\n          value={this.props.input}\n          onChange={this.props.handleChange}/>\n      </div>\n    );\n  }\n};\n\nclass RenderInput extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <div>\n        <h3>Input Render:</h3>\n        <p>{this.props.input}</p>\n      </div>\n    );\n  }\n};\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"32-use-the-lifecycle-method-componentwillmount"},"32. Use the Lifecycle Method componentWillMount"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/use-the-lifecycle-method-componentwillmount"}),"Learn React: Use the Lifecycle Method componentWillMount | freeCodeCamp.org")),Object(i.mdx)("p",null,"React components have several special methods that provide opportunities to perform actions at specific points in the lifecycle of a component. These are called lifecycle methods, or lifecycle hooks, and allow you to catch components at certain points in time. This can be before they are rendered, before they update, before they receive props, before they unmount, and so on. Here is a list of some of the main lifecycle methods: ",Object(i.mdx)("inlineCode",{parentName:"p"},"componentWillMount()")," ",Object(i.mdx)("inlineCode",{parentName:"p"},"componentDidMount()")," ",Object(i.mdx)("inlineCode",{parentName:"p"},"shouldComponentUpdate()")," ",Object(i.mdx)("inlineCode",{parentName:"p"},"componentDidUpdate()")," ",Object(i.mdx)("inlineCode",{parentName:"p"},"componentWillUnmount()")," The next several lessons will cover some of the basic use cases for these lifecycle methods.\n",Object(i.mdx)("strong",{parentName:"p"},"Note:")," The ",Object(i.mdx)("inlineCode",{parentName:"p"},"componentWillMount")," Lifecycle method will be deprecated in a future version of 16.X and removed in version 17. ",Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html"}),"(Source)")),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"The ",Object(i.mdx)("inlineCode",{parentName:"p"},"componentWillMount()")," method is called before the ",Object(i.mdx)("inlineCode",{parentName:"p"},"render()")," method when a component is being mounted to the DOM. Log something to the console within ",Object(i.mdx)("inlineCode",{parentName:"p"},"componentWillMount()")," - you may want to have your browser console open to see the output."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},Object(i.mdx)("inlineCode",{parentName:"p"},"MyComponent")," should render a ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," element.\n",Object(i.mdx)("inlineCode",{parentName:"p"},"console.log")," should be called in ",Object(i.mdx)("inlineCode",{parentName:"p"},"componentWillMount"),".")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  componentWillMount() {\n    console.log('something');\n  }\n  render() {\n    return <div />\n  }\n};\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"33-use-the-lifecycle-method-componentdidmount"},"33. Use the Lifecycle Method componentDidMount"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/use-the-lifecycle-method-componentdidmount"}),"Learn React: Use the Lifecycle Method componentDidMount | freeCodeCamp.org")),Object(i.mdx)("p",null,"Most web developers, at some point, need to call an API endpoint to retrieve data. If you're working with React, it's important to know where to perform this action.\nThe best practice with React is to place API calls or any calls to your server in the lifecycle method ",Object(i.mdx)("inlineCode",{parentName:"p"},"componentDidMount()"),". This method is called after a component is mounted to the DOM. Any calls to ",Object(i.mdx)("inlineCode",{parentName:"p"},"setState()")," here will trigger a re-rendering of your component. When you call an API in this method, and set your state with the data that the API returns, it will automatically trigger an update once you receive the data."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"There is a mock API call in ",Object(i.mdx)("inlineCode",{parentName:"p"},"componentDidMount()"),". It sets state after 2.5 seconds to simulate calling a server to retrieve data. This example requests the current total active users for a site. In the render method, render the value of ",Object(i.mdx)("inlineCode",{parentName:"p"},"activeUsers")," in the ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," after the text ",Object(i.mdx)("inlineCode",{parentName:"p"},"Active Users:"),". Watch what happens in the preview, and feel free to change the timeout to see the different effects."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},Object(i.mdx)("inlineCode",{parentName:"p"},"MyComponent")," should render a ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," element which wraps an ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," tag.\nComponent state should be updated with a timeout function in ",Object(i.mdx)("inlineCode",{parentName:"p"},"componentDidMount"),".\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," tag should render the ",Object(i.mdx)("inlineCode",{parentName:"p"},"activeUsers")," value from ",Object(i.mdx)("inlineCode",{parentName:"p"},"MyComponent"),"'s state.")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeUsers: null\n    };\n  }\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({\n        activeUsers: 1273\n      });\n    }, 2500);\n  }\n  render() {\n    return (\n      <div>\n        <h1>Active Users: {this.state.activeUsers}</h1>\n      </div>\n    );\n  }\n}\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"34-add-event-listeners"},"34. Add Event Listeners"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/add-event-listeners"}),"Learn React: Add Event Listeners | freeCodeCamp.org")),Object(i.mdx)("p",null,"The ",Object(i.mdx)("inlineCode",{parentName:"p"},"componentDidMount()")," method is also the best place to attach any event listeners you need to add for specific functionality. React provides a synthetic event system which wraps the native event system present in browsers. This means that the synthetic event system behaves exactly the same regardless of the user's browser - even if the native events may behave differently between different browsers.\nYou've already been using some of these synthetic event handlers such as ",Object(i.mdx)("inlineCode",{parentName:"p"},"onClick()"),". React's synthetic event system is great to use for most interactions you'll manage on DOM elements. However, if you want to attach an event handler to the document or window objects, you have to do this directly."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"Attach an event listener in the ",Object(i.mdx)("inlineCode",{parentName:"p"},"componentDidMount()")," method for ",Object(i.mdx)("inlineCode",{parentName:"p"},"keydown")," events and have these events trigger the callback ",Object(i.mdx)("inlineCode",{parentName:"p"},"handleKeyPress()"),". You can use ",Object(i.mdx)("inlineCode",{parentName:"p"},"document.addEventListener()")," which takes the event (in quotes) as the first argument and the callback as the second argument.\nThen, in ",Object(i.mdx)("inlineCode",{parentName:"p"},"componentWillUnmount()"),", remove this same event listener. You can pass the same arguments to ",Object(i.mdx)("inlineCode",{parentName:"p"},"document.removeEventListener()"),". It's good practice to use this lifecycle method to do any clean up on React components before they are unmounted and destroyed. Removing event listeners is an example of one such clean up action."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},Object(i.mdx)("inlineCode",{parentName:"p"},"MyComponent")," should render a ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," element which wraps an ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," tag.\nA keydown listener should be attached to the document in ",Object(i.mdx)("inlineCode",{parentName:"p"},"componentDidMount"),".\nThe keydown listener should be removed from the document in ",Object(i.mdx)("inlineCode",{parentName:"p"},"componentWillUnmount"),".\nOnce the component has mounted, pressing ",Object(i.mdx)("inlineCode",{parentName:"p"},"enter")," should update its state and the rendered ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," tag.")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: ''\n    };\n    this.handleEnter = this.handleEnter.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleKeyPress);\n  }\n  \n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleKeyPress);\n  }\n\n  handleEnter() {\n    this.setState((state) => ({\n      message: state.message + 'You pressed the enter key! '\n    }));\n  }\n  handleKeyPress(event) {\n    if (event.keyCode === 13) {\n      this.handleEnter();\n    }\n  }\n  render() {\n    return (\n      <div>\n        <h1>{this.state.message}</h1>\n      </div>\n    );\n  }\n};\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"35-optimize-re-renders-with-shouldcomponentupdate"},"35. Optimize Re-Renders with shouldComponentUpdate"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/optimize-re-renders-with-shouldcomponentupdate"}),"Learn React: Optimize Re-Renders with shouldComponentUpdate | freeCodeCamp.org")),Object(i.mdx)("p",null,"So far, if any component receives new ",Object(i.mdx)("inlineCode",{parentName:"p"},"state")," or new ",Object(i.mdx)("inlineCode",{parentName:"p"},"props"),", it re-renders itself and all its children. This is usually okay. But React provides a lifecycle method you can call when child components receive new ",Object(i.mdx)("inlineCode",{parentName:"p"},"state")," or ",Object(i.mdx)("inlineCode",{parentName:"p"},"props"),", and declare specifically if the components should update or not. The method is ",Object(i.mdx)("inlineCode",{parentName:"p"},"shouldComponentUpdate()"),", and it takes ",Object(i.mdx)("inlineCode",{parentName:"p"},"nextProps")," and ",Object(i.mdx)("inlineCode",{parentName:"p"},"nextState")," as parameters.\nThis method is a useful way to optimize performance. For example, the default behavior is that your component re-renders when it receives new ",Object(i.mdx)("inlineCode",{parentName:"p"},"props"),", even if the ",Object(i.mdx)("inlineCode",{parentName:"p"},"props")," haven't changed. You can use ",Object(i.mdx)("inlineCode",{parentName:"p"},"shouldComponentUpdate()")," to prevent this by comparing the ",Object(i.mdx)("inlineCode",{parentName:"p"},"props"),". The method must return a ",Object(i.mdx)("inlineCode",{parentName:"p"},"boolean")," value that tells React whether or not to update the component. You can compare the current props (",Object(i.mdx)("inlineCode",{parentName:"p"},"this.props"),") to the next props (",Object(i.mdx)("inlineCode",{parentName:"p"},"nextProps"),") to determine if you need to update or not, and return ",Object(i.mdx)("inlineCode",{parentName:"p"},"true")," or ",Object(i.mdx)("inlineCode",{parentName:"p"},"false")," accordingly."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"The ",Object(i.mdx)("inlineCode",{parentName:"p"},"shouldComponentUpdate()")," method is added in a component called ",Object(i.mdx)("inlineCode",{parentName:"p"},"OnlyEvens"),". Currently, this method returns ",Object(i.mdx)("inlineCode",{parentName:"p"},"true")," so ",Object(i.mdx)("inlineCode",{parentName:"p"},"OnlyEvens")," re-renders every time it receives new ",Object(i.mdx)("inlineCode",{parentName:"p"},"props"),". Modify the method so ",Object(i.mdx)("inlineCode",{parentName:"p"},"OnlyEvens")," updates only if the ",Object(i.mdx)("inlineCode",{parentName:"p"},"value")," of its new props is even. Click the ",Object(i.mdx)("inlineCode",{parentName:"p"},"Add")," button and watch the order of events in your browser's console as the lifecycle hooks are triggered."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"The ",Object(i.mdx)("inlineCode",{parentName:"p"},"Controller")," component should render the ",Object(i.mdx)("inlineCode",{parentName:"p"},"OnlyEvens")," component as a child.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"shouldComponentUpdate")," method should be defined on the ",Object(i.mdx)("inlineCode",{parentName:"p"},"OnlyEvens")," component.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"OnlyEvens")," component should return an ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," tag which renders the value of ",Object(i.mdx)("inlineCode",{parentName:"p"},"this.props.value"),".\n",Object(i.mdx)("inlineCode",{parentName:"p"},"OnlyEvens")," should re-render only when ",Object(i.mdx)("inlineCode",{parentName:"p"},"nextProps.value")," is even.")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"class OnlyEvens extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log('Should I update?');\n\n    return nextProps.value % 2 ? false : true;\n\n  }\n  componentDidUpdate() {\n    console.log('Component re-rendered.');\n  }\n  render() {\n    return <h1>{this.props.value}</h1>;\n  }\n}\n\nclass Controller extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 0\n    };\n    this.addValue = this.addValue.bind(this);\n  }\n  addValue() {\n    this.setState(state => ({\n      value: state.value + 1\n    }));\n  }\n  render() {\n    return (\n      <div>\n        <button onClick={this.addValue}>Add</button>\n        <OnlyEvens value={this.state.value} />\n      </div>\n    );\n  }\n}\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"36-introducing-inline-styles"},"36. Introducing Inline Styles"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/introducing-inline-styles"}),"Learn React: Introducing Inline Styles | freeCodeCamp.org")),Object(i.mdx)("p",null,"There are other complex concepts that add powerful capabilities to your React code. But you may be wondering about the more simple problem of how to style those JSX elements you create in React. You likely know that it won't be exactly the same as working with HTML because of ",Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/define-an-html-class-in-jsx"}),"the way you apply classes to JSX elements"),".\nIf you import styles from a stylesheet, it isn't much different at all. You apply a class to your JSX element using the ",Object(i.mdx)("inlineCode",{parentName:"p"},"className")," attribute, and apply styles to the class in your stylesheet. Another option is to apply inline styles, which are very common in ReactJS development.\nYou apply inline styles to JSX elements similar to how you do it in HTML, but with a few JSX differences. Here's an example of an inline style in HTML:"),Object(i.mdx)("p",null,Object(i.mdx)("inlineCode",{parentName:"p"},'<div style="color: yellow; font-size: 16px">Mellow Yellow</div>')),Object(i.mdx)("p",null,"JSX elements use the ",Object(i.mdx)("inlineCode",{parentName:"p"},"style")," attribute, but because of the way JSX is transpiled, you can't set the value to a ",Object(i.mdx)("inlineCode",{parentName:"p"},"string"),". Instead, you set it equal to a JavaScript ",Object(i.mdx)("inlineCode",{parentName:"p"},"object"),". Here's an example:"),Object(i.mdx)("p",null,Object(i.mdx)("inlineCode",{parentName:"p"},'<div style={{color: "yellow", fontSize: 16}}>Mellow Yellow</div>')),Object(i.mdx)("p",null,'Notice how we camelCase the "fontSize" property? This is because React will not accept kebab-case keys in the style object. React will apply the correct property name for us in the HTML.'),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"Add a ",Object(i.mdx)("inlineCode",{parentName:"p"},"style")," attribute to the ",Object(i.mdx)("inlineCode",{parentName:"p"},"div"),' in the code editor to give the text a color of red and font size of 72px.\nNote that you can optionally set the font size to be a number, omitting the units "px", or write it as "72px".'),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"The component should render a ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," element.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," element should have a color of ",Object(i.mdx)("inlineCode",{parentName:"p"},"red"),".\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," element should have a font size of ",Object(i.mdx)("inlineCode",{parentName:"p"},"72px"),".")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'class Colorful extends React.Component {\n  render() {\n    return (\n      <div style={{color: "red", fontSize: "72px"}}>Big Red</div>\n    );\n  }\n};\n')),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"37-add-inline-styles-in-react"},"37. Add Inline Styles in React"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/add-inline-styles-in-react"}),"Learn React: Add Inline Styles in React | freeCodeCamp.org")),Object(i.mdx)("p",null,"You may have noticed in the last challenge that there were several other syntax differences from HTML inline styles in addition to the ",Object(i.mdx)("inlineCode",{parentName:"p"},"style")," attribute set to a JavaScript object. First, the names of certain CSS style properties use camel case. For example, the last challenge set the size of the font with ",Object(i.mdx)("inlineCode",{parentName:"p"},"fontSize")," instead of ",Object(i.mdx)("inlineCode",{parentName:"p"},"font-size"),". Hyphenated words like ",Object(i.mdx)("inlineCode",{parentName:"p"},"font-size")," are invalid syntax for JavaScript object properties, so React uses camel case. As a rule, any hyphenated style properties are written using camel case in JSX.\nAll property value length units (like ",Object(i.mdx)("inlineCode",{parentName:"p"},"height"),", ",Object(i.mdx)("inlineCode",{parentName:"p"},"width"),", and ",Object(i.mdx)("inlineCode",{parentName:"p"},"fontSize"),") are assumed to be in ",Object(i.mdx)("inlineCode",{parentName:"p"},"px")," unless otherwise specified. If you want to use ",Object(i.mdx)("inlineCode",{parentName:"p"},"em"),", for example, you wrap the value and the units in quotes, like ",Object(i.mdx)("inlineCode",{parentName:"p"},'{fontSize: "4em"}'),". Other than the length values that default to ",Object(i.mdx)("inlineCode",{parentName:"p"},"px"),", all other property values should be wrapped in quotes."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"If you have a large set of styles, you can assign a style ",Object(i.mdx)("inlineCode",{parentName:"p"},"object")," to a constant to keep your code organized. Initialize a ",Object(i.mdx)("inlineCode",{parentName:"p"},"styles")," constant and assign an ",Object(i.mdx)("inlineCode",{parentName:"p"},"object")," with three style properties and their values to it. Give the ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," a color of ",Object(i.mdx)("inlineCode",{parentName:"p"},'"purple"'),", a font-size of ",Object(i.mdx)("inlineCode",{parentName:"p"},"40"),", and a border of ",Object(i.mdx)("inlineCode",{parentName:"p"},'"2px solid purple"'),". Then set the ",Object(i.mdx)("inlineCode",{parentName:"p"},"style")," attribute equal to the ",Object(i.mdx)("inlineCode",{parentName:"p"},"styles")," constant."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"The ",Object(i.mdx)("inlineCode",{parentName:"p"},"styles")," variable should be an ",Object(i.mdx)("inlineCode",{parentName:"p"},"object")," with three properties.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"styles")," variable should have a ",Object(i.mdx)("inlineCode",{parentName:"p"},"color")," property set to a value of ",Object(i.mdx)("inlineCode",{parentName:"p"},"purple"),".\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"styles")," variable should have a ",Object(i.mdx)("inlineCode",{parentName:"p"},"fontSize")," property set to a value of ",Object(i.mdx)("inlineCode",{parentName:"p"},"40"),".\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"styles")," variable should have a ",Object(i.mdx)("inlineCode",{parentName:"p"},"border")," property set to a value of ",Object(i.mdx)("inlineCode",{parentName:"p"},"2px solid purple"),".\nThe component should render a ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," element.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," element should have its styles defined by the ",Object(i.mdx)("inlineCode",{parentName:"p"},"styles")," object.")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"const styles = {\n  color: 'purple',\n  fontSize: 40,\n  border: \"2px solid purple\",\n};\n\nclass Colorful extends React.Component {\n  render() {\n    return (\n      <div style={styles}>Style Me!</div>\n    );\n  }\n};\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"38-use-advanced-javascript-in-react-render-method"},"38. Use Advanced JavaScript in React Render Method"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/use-advanced-javascript-in-react-render-method"}),"Learn React: Use Advanced JavaScript in React Render Method | freeCodeCamp.org")),Object(i.mdx)("p",null,"In previous challenges, you learned how to inject JavaScript code into JSX code using curly braces, ",Object(i.mdx)("inlineCode",{parentName:"p"},"{ }"),", for tasks like accessing props, passing props, accessing state, inserting comments into your code, and most recently, styling your components. These are all common use cases to put JavaScript in JSX, but they aren't the only way that you can utilize JavaScript code in your React components.\nYou can also write JavaScript directly in your ",Object(i.mdx)("inlineCode",{parentName:"p"},"render")," methods, before the ",Object(i.mdx)("inlineCode",{parentName:"p"},"return")," statement, ",Object(i.mdx)("strong",{parentName:"p"},Object(i.mdx)("em",{parentName:"strong"},"without"))," inserting it inside of curly braces. This is because it is not yet within the JSX code. When you want to use a variable later in the JSX code ",Object(i.mdx)("em",{parentName:"p"},"inside")," the ",Object(i.mdx)("inlineCode",{parentName:"p"},"return")," statement, you place the variable name inside curly braces."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"In the code provided, the ",Object(i.mdx)("inlineCode",{parentName:"p"},"render")," method has an array that contains 20 phrases to represent the answers found in the classic 1980's Magic Eight Ball toy. The button click event is bound to the ",Object(i.mdx)("inlineCode",{parentName:"p"},"ask")," method, so each time the button is clicked a random number will be generated and stored as the ",Object(i.mdx)("inlineCode",{parentName:"p"},"randomIndex")," in state. On line 52, delete the string ",Object(i.mdx)("inlineCode",{parentName:"p"},'"change me!"')," and reassign the ",Object(i.mdx)("inlineCode",{parentName:"p"},"answer")," const so your code randomly accesses a different index of the ",Object(i.mdx)("inlineCode",{parentName:"p"},"possibleAnswers")," array each time the component updates. Finally, insert the ",Object(i.mdx)("inlineCode",{parentName:"p"},"answer")," const inside the ",Object(i.mdx)("inlineCode",{parentName:"p"},"p")," tags."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"The ",Object(i.mdx)("inlineCode",{parentName:"p"},"MagicEightBall")," component should exist and should render to the page.\n",Object(i.mdx)("inlineCode",{parentName:"p"},"MagicEightBall"),"'s first child should be an ",Object(i.mdx)("inlineCode",{parentName:"p"},"input")," element.\n",Object(i.mdx)("inlineCode",{parentName:"p"},"MagicEightBall"),"'s third child should be a ",Object(i.mdx)("inlineCode",{parentName:"p"},"button")," element.\n",Object(i.mdx)("inlineCode",{parentName:"p"},"MagicEightBall"),"'s state should be initialized with a property of ",Object(i.mdx)("inlineCode",{parentName:"p"},"userInput")," and a property of ",Object(i.mdx)("inlineCode",{parentName:"p"},"randomIndex")," both set to a value of an empty string.\nWhen ",Object(i.mdx)("inlineCode",{parentName:"p"},"MagicEightBall")," is first mounted to the DOM, it should return an empty ",Object(i.mdx)("inlineCode",{parentName:"p"},"p")," element.\nWhen text is entered into the ",Object(i.mdx)("inlineCode",{parentName:"p"},"input")," element and the button is clicked, the ",Object(i.mdx)("inlineCode",{parentName:"p"},"MagicEightBall")," component should return a ",Object(i.mdx)("inlineCode",{parentName:"p"},"p")," element that contains a random element from the ",Object(i.mdx)("inlineCode",{parentName:"p"},"possibleAnswers")," array.")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"const inputStyle = {\n  width: 235,\n  margin: 5\n};\n\nclass MagicEightBall extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userInput: '',\n      randomIndex: ''\n    };\n    this.ask = this.ask.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  ask() {\n    if (this.state.userInput) {\n      this.setState({\n        randomIndex: Math.floor(Math.random() * 20),\n        userInput: ''\n      });\n    }\n  }\n  handleChange(event) {\n    this.setState({\n      userInput: event.target.value\n    });\n  }\n  render() {\n    const possibleAnswers = [\n      'It is certain',\n      'It is decidedly so',\n      'Without a doubt',\n      'Yes, definitely',\n      'You may rely on it',\n      'As I see it, yes',\n      'Outlook good',\n      'Yes',\n      'Signs point to yes',\n      'Reply hazy try again',\n      'Ask again later',\n      'Better not tell you now',\n      'Cannot predict now',\n      'Concentrate and ask again',\n      \"Don't count on it\",\n      'My reply is no',\n      'My sources say no',\n      'Most likely',\n      'Outlook not so good',\n      'Very doubtful'\n    ];\n    const answer = possibleAnswers[this.state.randomIndex];\n    return (\n      <div>\n        <input\n          type='text'\n          value={this.state.userInput}\n          onChange={this.handleChange}\n          style={inputStyle}\n        />\n        <br />\n        <button onClick={this.ask}>Ask the Magic Eight Ball!</button>\n        <br />\n        <h3>Answer:</h3>\n        <p>\n          {answer}\n        </p>\n      </div>\n    );\n  }\n}\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"39-render-with-an-if-else-condition"},"39. Render with an If-Else Condition"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/render-with-an-if-else-condition"}),"Learn React: Render with an If-Else Condition | freeCodeCamp.org")),Object(i.mdx)("p",null,"Another application of using JavaScript to control your rendered view is to tie the elements that are rendered to a condition. When the condition is true, one view renders. When it's false, it's a different view. You can do this with a standard ",Object(i.mdx)("inlineCode",{parentName:"p"},"if/else")," statement in the ",Object(i.mdx)("inlineCode",{parentName:"p"},"render()")," method of a React component."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"MyComponent contains a ",Object(i.mdx)("inlineCode",{parentName:"p"},"boolean")," in its state which tracks whether you want to display some element in the UI or not. The ",Object(i.mdx)("inlineCode",{parentName:"p"},"button")," toggles the state of this value. Currently, it renders the same UI every time. Rewrite the ",Object(i.mdx)("inlineCode",{parentName:"p"},"render()")," method with an ",Object(i.mdx)("inlineCode",{parentName:"p"},"if/else")," statement so that if ",Object(i.mdx)("inlineCode",{parentName:"p"},"display")," is ",Object(i.mdx)("inlineCode",{parentName:"p"},"true"),", you return the current markup. Otherwise, return the markup without the ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," element.\n",Object(i.mdx)("strong",{parentName:"p"},"Note:")," You must write an ",Object(i.mdx)("inlineCode",{parentName:"p"},"if/else")," to pass the tests. Use of the ternary operator will not pass here."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},Object(i.mdx)("inlineCode",{parentName:"p"},"MyComponent")," should exist and render.\nWhen ",Object(i.mdx)("inlineCode",{parentName:"p"},"display")," is set to ",Object(i.mdx)("inlineCode",{parentName:"p"},"true"),", a ",Object(i.mdx)("inlineCode",{parentName:"p"},"div"),", ",Object(i.mdx)("inlineCode",{parentName:"p"},"button"),", and ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," should render.\nWhen ",Object(i.mdx)("inlineCode",{parentName:"p"},"display")," is set to ",Object(i.mdx)("inlineCode",{parentName:"p"},"false"),", only a ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," and ",Object(i.mdx)("inlineCode",{parentName:"p"},"button")," should render.\nThe render method should use an ",Object(i.mdx)("inlineCode",{parentName:"p"},"if/else")," statement to check the condition of ",Object(i.mdx)("inlineCode",{parentName:"p"},"this.state.display"),".")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: true\n    }\n    this.toggleDisplay = this.toggleDisplay.bind(this);\n  }\n  toggleDisplay() {\n    this.setState((state) => ({\n      display: !state.display\n    }));\n  }\n  render() {\n    if (this.state.display) {\n      return (\n        <div>\n          <button onClick={this.toggleDisplay}>Toggle Display</button>\n          <h1>Displayed!</h1>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <button onClick={this.toggleDisplay}>Toggle Display</button>\n        </div>\n      )\n    }\n  }\n};\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"40-use--for-a-more-concise-conditional"},"40. Use && for a More Concise Conditional"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/use--for-a-more-concise-conditional"}),"Learn React: Use && for a More Concise Conditional | freeCodeCamp.org")),Object(i.mdx)("p",null,"The if/else statements worked in the last challenge, but there's a more concise way to achieve the same result. Imagine that you are tracking several conditions in a component and you want different elements to render depending on each of these conditions. If you write a lot of ",Object(i.mdx)("inlineCode",{parentName:"p"},"else if")," statements to return slightly different UIs, you may repeat code which leaves room for error. Instead, you can use the ",Object(i.mdx)("inlineCode",{parentName:"p"},"&&")," logical operator to perform conditional logic in a more concise way. This is possible because you want to check if a condition is ",Object(i.mdx)("inlineCode",{parentName:"p"},"true"),", and if it is, return some markup. Here's an example:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"{condition && <p>markup</p>}\n")),Object(i.mdx)("p",null,"If the ",Object(i.mdx)("inlineCode",{parentName:"p"},"condition")," is ",Object(i.mdx)("inlineCode",{parentName:"p"},"true"),", the markup will be returned. If the condition is ",Object(i.mdx)("inlineCode",{parentName:"p"},"false"),", the operation will immediately return ",Object(i.mdx)("inlineCode",{parentName:"p"},"false")," after evaluating the ",Object(i.mdx)("inlineCode",{parentName:"p"},"condition")," and return nothing. You can include these statements directly in your JSX and string multiple conditions together by writing ",Object(i.mdx)("inlineCode",{parentName:"p"},"&&")," after each one. This allows you to handle more complex conditional logic in your ",Object(i.mdx)("inlineCode",{parentName:"p"},"render()")," method without repeating a lot of code."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"Solve the previous example again, so the ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," only renders if ",Object(i.mdx)("inlineCode",{parentName:"p"},"display")," is ",Object(i.mdx)("inlineCode",{parentName:"p"},"true"),", but use the ",Object(i.mdx)("inlineCode",{parentName:"p"},"&&")," logical operator instead of an ",Object(i.mdx)("inlineCode",{parentName:"p"},"if/else")," statement."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},Object(i.mdx)("inlineCode",{parentName:"p"},"MyComponent")," should exist and render.\nWhen ",Object(i.mdx)("inlineCode",{parentName:"p"},"display")," is set to ",Object(i.mdx)("inlineCode",{parentName:"p"},"true"),", a ",Object(i.mdx)("inlineCode",{parentName:"p"},"div"),", ",Object(i.mdx)("inlineCode",{parentName:"p"},"button"),", and ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," should render.\nWhen ",Object(i.mdx)("inlineCode",{parentName:"p"},"display")," is set to ",Object(i.mdx)("inlineCode",{parentName:"p"},"false"),", only a ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," and ",Object(i.mdx)("inlineCode",{parentName:"p"},"button")," should render.\nThe render method should use the && logical operator to check the condition of this.state.display.")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: true\n    }\n    this.toggleDisplay = this.toggleDisplay.bind(this);\n  }\n  toggleDisplay() {\n    this.setState(state => ({\n      display: !state.display\n    }));\n  }\n  render() {\n    return (\n       <div>\n         <button onClick={this.toggleDisplay}>Toggle Display</button>\n         {this.state.display && <h1>Displayed!</h1>}\n       </div>\n    );\n  }\n};\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"41-use-a-ternary-expression-for-conditional-rendering"},"41. Use a Ternary Expression for Conditional Rendering"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/use-a-ternary-expression-for-conditional-rendering"}),"Learn React: Use a Ternary Expression for Conditional Rendering | freeCodeCamp.org")),Object(i.mdx)("p",null,"Before moving on to dynamic rendering techniques, there's one last way to use built-in JavaScript conditionals to render what you want: the ternary operator. The ternary operator is often utilized as a shortcut for ",Object(i.mdx)("inlineCode",{parentName:"p"},"if/else")," statements in JavaScript. They're not quite as robust as traditional ",Object(i.mdx)("inlineCode",{parentName:"p"},"if/else")," statements, but they are very popular among React developers. One reason for this is because of how JSX is compiled, ",Object(i.mdx)("inlineCode",{parentName:"p"},"if/else")," statements can't be inserted directly into JSX code. You might have noticed this a couple challenges ago \u2014 when an ",Object(i.mdx)("inlineCode",{parentName:"p"},"if/else")," statement was required, it was always ",Object(i.mdx)("em",{parentName:"p"},"outside")," the ",Object(i.mdx)("inlineCode",{parentName:"p"},"return")," statement. Ternary expressions can be an excellent alternative if you want to implement conditional logic within your JSX. Recall that a ternary operator has three parts, but you can combine several ternary expressions together. Here's the basic syntax:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"condition ? expressionIfTrue : expressionIfFalse;\n")),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"The code editor has three constants defined within the ",Object(i.mdx)("inlineCode",{parentName:"p"},"CheckUserAge")," component's ",Object(i.mdx)("inlineCode",{parentName:"p"},"render()")," method. They are called ",Object(i.mdx)("inlineCode",{parentName:"p"},"buttonOne"),", ",Object(i.mdx)("inlineCode",{parentName:"p"},"buttonTwo"),", and ",Object(i.mdx)("inlineCode",{parentName:"p"},"buttonThree"),". Each of these is assigned a simple JSX expression representing a button element. First, initialize the state of ",Object(i.mdx)("inlineCode",{parentName:"p"},"CheckUserAge")," with ",Object(i.mdx)("inlineCode",{parentName:"p"},"input")," and ",Object(i.mdx)("inlineCode",{parentName:"p"},"userAge")," both set to values of an empty string.\nOnce the component is rendering information to the page, users should have a way to interact with it. Within the component's ",Object(i.mdx)("inlineCode",{parentName:"p"},"return")," statement, set up a ternary expression that implements the following logic: when the page first loads, render the submit button, ",Object(i.mdx)("inlineCode",{parentName:"p"},"buttonOne"),", to the page. Then, when a user enters their age and clicks the button, render a different button based on the age. If a user enters a number less than ",Object(i.mdx)("inlineCode",{parentName:"p"},"18"),", render ",Object(i.mdx)("inlineCode",{parentName:"p"},"buttonThree"),". If a user enters a number greater than or equal to ",Object(i.mdx)("inlineCode",{parentName:"p"},"18"),", render ",Object(i.mdx)("inlineCode",{parentName:"p"},"buttonTwo"),"."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"The ",Object(i.mdx)("inlineCode",{parentName:"p"},"CheckUserAge")," component should render with a single ",Object(i.mdx)("inlineCode",{parentName:"p"},"input")," element and a single ",Object(i.mdx)("inlineCode",{parentName:"p"},"button")," element.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"CheckUserAge")," component's state should be initialized with a property of ",Object(i.mdx)("inlineCode",{parentName:"p"},"userAge")," and a property of ",Object(i.mdx)("inlineCode",{parentName:"p"},"input"),", both set to a value of an empty string.\nWhen the ",Object(i.mdx)("inlineCode",{parentName:"p"},"CheckUserAge")," component is first rendered to the DOM, the ",Object(i.mdx)("inlineCode",{parentName:"p"},"button"),"'s inner text should be Submit.\nWhen a number of less than 18 is entered into the ",Object(i.mdx)("inlineCode",{parentName:"p"},"input")," element and the ",Object(i.mdx)("inlineCode",{parentName:"p"},"button")," is clicked, the ",Object(i.mdx)("inlineCode",{parentName:"p"},"button"),"'s inner text should read ",Object(i.mdx)("inlineCode",{parentName:"p"},"You Shall Not Pass"),".\nWhen a number greater than or equal to 18 is entered into the ",Object(i.mdx)("inlineCode",{parentName:"p"},"input")," element and the ",Object(i.mdx)("inlineCode",{parentName:"p"},"button")," is clicked, the ",Object(i.mdx)("inlineCode",{parentName:"p"},"button"),"'s inner text should read ",Object(i.mdx)("inlineCode",{parentName:"p"},"You May Enter"),".\nOnce a number has been submitted, and the value of the ",Object(i.mdx)("inlineCode",{parentName:"p"},"input")," is once again changed, the ",Object(i.mdx)("inlineCode",{parentName:"p"},"button")," should return to reading ",Object(i.mdx)("inlineCode",{parentName:"p"},"Submit"),".\nYour code should not contain any ",Object(i.mdx)("inlineCode",{parentName:"p"},"if/else")," statements.")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"const inputStyle = {\n  width: 235,\n  margin: 5\n};\n\nclass CheckUserAge extends React.Component {\n  constructor(props) {\n    super(props);\n    // Change code below this line\n    this.state = {\n      userAge: '',\n      input: ''\n    }\n    // Change code above this line\n    this.submit = this.submit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(e) {\n    this.setState({\n      input: e.target.value,\n      userAge: ''\n    });\n  }\n  submit() {\n    this.setState(state => ({\n      userAge: state.input\n    }));\n  }\n  render() {\n    const buttonOne = <button onClick={this.submit}>Submit</button>;\n    const buttonTwo = <button>You May Enter</button>;\n    const buttonThree = <button>You Shall Not Pass</button>;\n    return (\n      <div>\n        <h3>Enter Your Age to Continue</h3>\n        <input\n          style={inputStyle}\n          type='number'\n          value={this.state.input}\n          onChange={this.handleChange}\n        />\n        <br />\n        {/* Change code below this line */}\n        {\n        this.state.userAge === ''\n          ? buttonOne\n          : this.state.userAge >= 18\n            ? buttonTwo\n            : buttonThree\n        }\n        {/* Change code above this line */}\n      </div>\n    );\n  }\n}\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"42-render-conditionally-from-props"},"42. Render Conditionally from Props"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/render-conditionally-from-props"}),"Learn React: Render Conditionally from Props | freeCodeCamp.org")),Object(i.mdx)("p",null,"So far, you've seen how to use ",Object(i.mdx)("inlineCode",{parentName:"p"},"if/else"),", ",Object(i.mdx)("inlineCode",{parentName:"p"},"&&,")," ",Object(i.mdx)("inlineCode",{parentName:"p"},"null")," and the ternary operator (",Object(i.mdx)("inlineCode",{parentName:"p"},"condition ? expressionIfTrue : expressionIfFalse"),") to make conditional decisions about what to render and when. However, there's one important topic left to discuss that lets you combine any or all of these concepts with another powerful React feature: props. Using props to conditionally render code is very common with React developers \u2014 that is, they use the value of a given prop to automatically make decisions about what to render.\nIn this challenge, you'll set up a child component to make rendering decisions based on props. You'll also use the ternary operator, but you can see how several of the other concepts that were covered in the last few challenges might be just as useful in this context."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"The code editor has two components that are partially defined for you: a parent called ",Object(i.mdx)("inlineCode",{parentName:"p"},"GameOfChance"),", and a child called ",Object(i.mdx)("inlineCode",{parentName:"p"},"Results"),". They are used to create a simple game where the user presses a button to see if they win or lose.\nFirst, you'll need a simple expression that randomly returns a different value every time it is run. You can use ",Object(i.mdx)("inlineCode",{parentName:"p"},"Math.random()"),". This method returns a value between ",Object(i.mdx)("inlineCode",{parentName:"p"},"0")," (inclusive) and ",Object(i.mdx)("inlineCode",{parentName:"p"},"1")," (exclusive) each time it is called. So for 50/50 odds, use ",Object(i.mdx)("inlineCode",{parentName:"p"},"Math.random() >= .5")," in your expression. Statistically speaking, this expression will return ",Object(i.mdx)("inlineCode",{parentName:"p"},"true")," 50% of the time, and ",Object(i.mdx)("inlineCode",{parentName:"p"},"false")," the other 50%. In the render method, replace ",Object(i.mdx)("inlineCode",{parentName:"p"},"null")," with the above expression to complete the variable declaration.\nNow you have an expression that you can use to make a randomized decision in the code. Next you need to implement this. Render the ",Object(i.mdx)("inlineCode",{parentName:"p"},"Results")," component as a child of ",Object(i.mdx)("inlineCode",{parentName:"p"},"GameOfChance"),", and pass in ",Object(i.mdx)("inlineCode",{parentName:"p"},"expression")," as a prop called ",Object(i.mdx)("inlineCode",{parentName:"p"},"fiftyFifty"),". In the ",Object(i.mdx)("inlineCode",{parentName:"p"},"Results")," component, write a ternary expression to render the ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," element with the text ",Object(i.mdx)("inlineCode",{parentName:"p"},'"You Win!"')," or ",Object(i.mdx)("inlineCode",{parentName:"p"},'"You Lose!"')," based on the ",Object(i.mdx)("inlineCode",{parentName:"p"},"fiftyFifty")," prop that's being passed in from ",Object(i.mdx)("inlineCode",{parentName:"p"},"GameOfChance"),". Finally, make sure the ",Object(i.mdx)("inlineCode",{parentName:"p"},"handleClick()")," method is correctly counting each turn so the user knows how many times they've played. This also serves to let the user know the component has actually updated in case they win or lose twice in a row."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"The ",Object(i.mdx)("inlineCode",{parentName:"p"},"GameOfChance")," component should exist and render to the page.\n",Object(i.mdx)("inlineCode",{parentName:"p"},"GameOfChance")," should return a single ",Object(i.mdx)("inlineCode",{parentName:"p"},"button")," element.\n",Object(i.mdx)("inlineCode",{parentName:"p"},"GameOfChance")," should return a single instance of the ",Object(i.mdx)("inlineCode",{parentName:"p"},"Results")," component, which has a prop called ",Object(i.mdx)("inlineCode",{parentName:"p"},"fiftyFifty"),".\n",Object(i.mdx)("inlineCode",{parentName:"p"},"GameOfChance")," state should be initialized with a property of ",Object(i.mdx)("inlineCode",{parentName:"p"},"counter")," set to a value of ",Object(i.mdx)("inlineCode",{parentName:"p"},"1"),".\nWhen the ",Object(i.mdx)("inlineCode",{parentName:"p"},"GameOfChance")," component is first rendered to the DOM, a ",Object(i.mdx)("inlineCode",{parentName:"p"},"p")," element should be returned with the inner text of ",Object(i.mdx)("inlineCode",{parentName:"p"},"Turn: 1"),".\nEach time the button is clicked, the counter state should be incremented by a value of 1, and a single ",Object(i.mdx)("inlineCode",{parentName:"p"},"p"),' element should be rendered to the DOM that contains the text "Turn: N", where N is the value of the counter state.\nWhen the ',Object(i.mdx)("inlineCode",{parentName:"p"},"GameOfChance")," component is first mounted to the DOM and each time the button is clicked thereafter, a single ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," element should be returned that randomly renders either ",Object(i.mdx)("inlineCode",{parentName:"p"},"You Win!")," or ",Object(i.mdx)("inlineCode",{parentName:"p"},"You Lose!"),".")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'class Results extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    {/* Change code below this line */}\n    return (\n      <h1>\n      {this.props.fiftyFifty ? "You Win!" : "You Lose!"}\n      </h1>)\n    {/* Change code above this line */}\n  }\n}\n\nclass GameOfChance extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      counter: 1\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    this.setState({\n      counter: this.state.counter + 1 // Change this line\n    });\n  }\n  render() {\n    const expression = Math.random() >= 0.5 ? true : false // Change this line\n    return (\n      <div>\n        <button onClick={this.handleClick}>Play Again</button>\n        {/* Change code below this line */}\n        <Results fiftyFifty={expression} />\n        {/* Change code above this line */}\n        <p>{\'Turn: \' + this.state.counter}</p>\n      </div>\n    );\n  }\n}\n')),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"43-change-inline-css-conditionally-based-on-component-state"},"43. Change Inline CSS Conditionally Based on Component State"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/change-inline-css-conditionally-based-on-component-state"}),"Learn React: Change Inline CSS Conditionally Based on Component State | freeCodeCamp.org")),Object(i.mdx)("p",null,"At this point, you've seen several applications of conditional rendering and the use of inline styles. Here's one more example that combines both of these topics. You can also render CSS conditionally based on the state of a React component. To do this, you check for a condition, and if that condition is met, you modify the styles object that's assigned to the JSX elements in the render method.\nThis paradigm is important to understand because it is a dramatic shift from the more traditional approach of applying styles by modifying DOM elements directly (which is very common with jQuery, for example). In that approach, you must keep track of when elements change and also handle the actual manipulation directly. It can become difficult to keep track of changes, potentially making your UI unpredictable. When you set a style object based on a condition, you describe how the UI should look as a function of the application's state. There is a clear flow of information that only moves in one direction. This is the preferred method when writing applications with React."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"The code editor has a simple controlled input component with a styled border. You want to style this border red if the user types more than 15 characters of text in the input box. Add a condition to check for this and, if the condition is valid, set the input border style to ",Object(i.mdx)("inlineCode",{parentName:"p"},"3px solid red"),". You can try it out by entering text in the input."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"The ",Object(i.mdx)("inlineCode",{parentName:"p"},"GateKeeper")," component should render a ",Object(i.mdx)("inlineCode",{parentName:"p"},"div")," element.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"GateKeeper")," component should be initialized with a state key ",Object(i.mdx)("inlineCode",{parentName:"p"},"input")," set to an empty string.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"GateKeeper")," component should render an ",Object(i.mdx)("inlineCode",{parentName:"p"},"h3")," tag and an ",Object(i.mdx)("inlineCode",{parentName:"p"},"input")," tag.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"input")," tag should initially have a style of ",Object(i.mdx)("inlineCode",{parentName:"p"},"1px solid black")," for the ",Object(i.mdx)("inlineCode",{parentName:"p"},"border")," property.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"input")," tag should be styled with a border of ",Object(i.mdx)("inlineCode",{parentName:"p"},"3px solid red")," if the input value in state is longer than 15 characters.")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"class GateKeeper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(event) {\n    this.setState({ input: event.target.value })\n  }\n  render() {\n    let inputStyle = {\n      border: '1px solid black'\n    };\n    // Change code below this line\n    if (this.state.input.length > 15 ) {\n      inputStyle = {\n      border: '3px solid red'\n      }\n    };\n    // ou inputStyle.border = '3px solid red';\n    // Change code above this line\n    return (\n      <div>\n        <h3>Don't Type Too Much:</h3>\n        <input\n          type=\"text\"\n          style={inputStyle}\n          value={this.state.input}\n          onChange={this.handleChange} />\n      </div>\n    );\n  }\n};\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"44-use-arraymap-to-dynamically-render-elements"},"44. Use Array.map() to Dynamically Render Elements"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/use-array-map-to-dynamically-render-elements"}),"Learn React: Use Array.map() to Dynamically Render Elements | freeCodeCamp.org")),Object(i.mdx)("p",null,"Conditional rendering is useful, but you may need your components to render an unknown number of elements. Often in reactive programming, a programmer has no way to know what the state of an application is until runtime, because so much depends on a user's interaction with that program. Programmers need to write their code to correctly handle that unknown state ahead of time. Using ",Object(i.mdx)("inlineCode",{parentName:"p"},"Array.map()"),' in React illustrates this concept.\nFor example, you create a simple "To Do List" app. As the programmer, you have no way of knowing how many items a user might have on their list. You need to set up your component to dynamically render the correct number of list elements long before someone using the program decides that today is laundry day.'),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"The code editor has most of the ",Object(i.mdx)("inlineCode",{parentName:"p"},"MyToDoList")," component set up. Some of this code should look familiar if you completed the controlled form challenge. You'll notice a ",Object(i.mdx)("inlineCode",{parentName:"p"},"textarea")," and a ",Object(i.mdx)("inlineCode",{parentName:"p"},"button"),", along with a couple of methods that track their states, but nothing is rendered to the page yet.\nInside the ",Object(i.mdx)("inlineCode",{parentName:"p"},"constructor"),", create a ",Object(i.mdx)("inlineCode",{parentName:"p"},"this.state")," object and define two states: ",Object(i.mdx)("inlineCode",{parentName:"p"},"userInput")," should be initialized as an empty string, and ",Object(i.mdx)("inlineCode",{parentName:"p"},"toDoList")," should be initialized as an empty array. Next, delete the comment in the ",Object(i.mdx)("inlineCode",{parentName:"p"},"render()")," method next to the ",Object(i.mdx)("inlineCode",{parentName:"p"},"items")," variable. In its place, map over the ",Object(i.mdx)("inlineCode",{parentName:"p"},"toDoList")," array stored in the component's internal state and dynamically render a ",Object(i.mdx)("inlineCode",{parentName:"p"},"li")," for each item. Try entering the string ",Object(i.mdx)("inlineCode",{parentName:"p"},"eat, code, sleep, repeat")," into the ",Object(i.mdx)("inlineCode",{parentName:"p"},"textarea"),", then click the button and see what happens.\n",Object(i.mdx)("strong",{parentName:"p"},"Note:")," You may know that all sibling child elements created by a mapping operation like this do need to be supplied with a unique ",Object(i.mdx)("inlineCode",{parentName:"p"},"key")," attribute. Don't worry, this is the topic of the next challenge."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"The MyToDoList component should exist and render to the page.\nThe first child of ",Object(i.mdx)("inlineCode",{parentName:"p"},"MyToDoList")," should be a ",Object(i.mdx)("inlineCode",{parentName:"p"},"textarea")," element.\nThe second child of ",Object(i.mdx)("inlineCode",{parentName:"p"},"MyToDoList")," should be a ",Object(i.mdx)("inlineCode",{parentName:"p"},"br")," element.\nThe third child of ",Object(i.mdx)("inlineCode",{parentName:"p"},"MyToDoList")," should be a ",Object(i.mdx)("inlineCode",{parentName:"p"},"button")," element.\nThe state of ",Object(i.mdx)("inlineCode",{parentName:"p"},"MyToDoList")," should be initialized with ",Object(i.mdx)("inlineCode",{parentName:"p"},"toDoList")," as an empty array.\nThe state of ",Object(i.mdx)("inlineCode",{parentName:"p"},"MyToDoList")," should be initialized with ",Object(i.mdx)("inlineCode",{parentName:"p"},"userInput")," as an empty string.\nWhen the ",Object(i.mdx)("inlineCode",{parentName:"p"},"Create List")," button is clicked, the ",Object(i.mdx)("inlineCode",{parentName:"p"},"MyToDoList")," component should dynamically return an unordered list that contains a list item element for every item of a comma-separated list entered into the ",Object(i.mdx)("inlineCode",{parentName:"p"},"textarea")," element.")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"const textAreaStyles = {\n  width: 235,\n  margin: 5\n};\n\nclass MyToDoList extends React.Component {\n  constructor(props) {\n    super(props);\n    // Change code below this line\n    this.state = {\n      userInput: '',\n      toDoList: []\n    }\n    // Change code above this line\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleSubmit() {\n    const itemsArray = this.state.userInput.split(',');\n    this.setState({\n      toDoList: itemsArray\n    });\n  }\n  handleChange(e) {\n    this.setState({\n      userInput: e.target.value\n    });\n  }\n  render() {\n    const items = this.state.toDoList.map(i => <li>{i}</li>); // Change this line\n    return (\n      <div>\n        <textarea\n          onChange={this.handleChange}\n          value={this.state.userInput}\n          style={textAreaStyles}\n          placeholder='Separate Items With Commas'\n        />\n        <br />\n        <button onClick={this.handleSubmit}>Create List</button>\n        <h1>My \"To Do\" List:</h1>\n        <ul>{items}</ul>\n      </div>\n    );\n  }\n}\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"45-give-sibling-elements-a-unique-key-attribute"},"45. Give Sibling Elements a Unique Key Attribute"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/give-sibling-elements-a-unique-key-attribute"}),"Learn React: Give Sibling Elements a Unique Key Attribute | freeCodeCamp.org")),Object(i.mdx)("p",null,"The last challenge showed how the ",Object(i.mdx)("inlineCode",{parentName:"p"},"map")," method is used to dynamically render a number of elements based on user input. However, there was an important piece missing from that example. When you create an array of elements, each one needs a ",Object(i.mdx)("inlineCode",{parentName:"p"},"key")," attribute set to a unique value. React uses these keys to keep track of which items are added, changed, or removed. This helps make the re-rendering process more efficient when the list is modified in any way.\n",Object(i.mdx)("strong",{parentName:"p"},"Note:")," Keys only need to be unique between sibling elements, they don't need to be globally unique in your application."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"The code editor has an array with some front end frameworks and a stateless functional component named ",Object(i.mdx)("inlineCode",{parentName:"p"},"Frameworks()"),". ",Object(i.mdx)("inlineCode",{parentName:"p"},"Frameworks()")," needs to map the array to an unordered list, much like in the last challenge. Finish writing the ",Object(i.mdx)("inlineCode",{parentName:"p"},"map")," callback to return an ",Object(i.mdx)("inlineCode",{parentName:"p"},"li")," element for each framework in the ",Object(i.mdx)("inlineCode",{parentName:"p"},"frontEndFrameworks")," array. This time, make sure to give each ",Object(i.mdx)("inlineCode",{parentName:"p"},"li")," a ",Object(i.mdx)("inlineCode",{parentName:"p"},"key")," attribute, set to a unique value. The ",Object(i.mdx)("inlineCode",{parentName:"p"},"li")," elements should also contain text from ",Object(i.mdx)("inlineCode",{parentName:"p"},"frontEndFrameworks"),".\nNormally, you want to make the key something that uniquely identifies the element being rendered. As a last resort the array index may be used, but typically you should try to use a unique identification."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"The ",Object(i.mdx)("inlineCode",{parentName:"p"},"Frameworks")," component should exist and render to the page.\n",Object(i.mdx)("inlineCode",{parentName:"p"},"Frameworks")," should render an ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1")," element.\n",Object(i.mdx)("inlineCode",{parentName:"p"},"Frameworks")," should render a ",Object(i.mdx)("inlineCode",{parentName:"p"},"ul")," element.\nThe ",Object(i.mdx)("inlineCode",{parentName:"p"},"ul")," tag should render 6 child ",Object(i.mdx)("inlineCode",{parentName:"p"},"li")," elements.\nEach list item element should have a unique ",Object(i.mdx)("inlineCode",{parentName:"p"},"key")," attribute.\nEach list item element should contain text from ",Object(i.mdx)("inlineCode",{parentName:"p"},"frontEndFrameworks"),".")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"const frontEndFrameworks = [\n  'React',\n  'Angular',\n  'Ember',\n  'Knockout',\n  'Backbone',\n  'Vue'\n];\n\nfunction Frameworks() {\n  const renderFrameworks = frontEndFrameworks.map(i => <li key={i+1}>{i}</li>); // Change this line\n  return (\n    <div>\n      <h1>Popular Front End JavaScript Frameworks</h1>\n      <ul>\n        {renderFrameworks}\n      </ul>\n    </div>\n  );\n};\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"46-use-arrayfilter-to-dynamically-filter-an-array"},"46. Use Array.filter() to Dynamically Filter an Array"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/use-array-filter-to-dynamically-filter-an-array"}),"Learn React: Use Array.filter() to Dynamically Filter an Array | freeCodeCamp.org")),Object(i.mdx)("p",null,"The ",Object(i.mdx)("inlineCode",{parentName:"p"},"map")," array method is a powerful tool that you will use often when working with React. Another method related to ",Object(i.mdx)("inlineCode",{parentName:"p"},"map")," is ",Object(i.mdx)("inlineCode",{parentName:"p"},"filter"),", which filters the contents of an array based on a condition, then returns a new array. For example, if you have an array of users that all have a property ",Object(i.mdx)("inlineCode",{parentName:"p"},"online")," which can be set to ",Object(i.mdx)("inlineCode",{parentName:"p"},"true")," or ",Object(i.mdx)("inlineCode",{parentName:"p"},"false"),", you can filter only those users that are online by writing:"),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"let onlineUsers = users.filter(user => user.online);\n")),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"In the code editor, ",Object(i.mdx)("inlineCode",{parentName:"p"},"MyComponent"),"'s ",Object(i.mdx)("inlineCode",{parentName:"p"},"state")," is initialized with an array of users. Some users are online and some aren't. Filter the array so you see only the users who are online. To do this, first use ",Object(i.mdx)("inlineCode",{parentName:"p"},"filter")," to return a new array containing only the users whose ",Object(i.mdx)("inlineCode",{parentName:"p"},"online")," property is ",Object(i.mdx)("inlineCode",{parentName:"p"},"true"),". Then, in the ",Object(i.mdx)("inlineCode",{parentName:"p"},"renderOnline")," variable, map over the filtered array, and return a ",Object(i.mdx)("inlineCode",{parentName:"p"},"li")," element for each user that contains the text of their ",Object(i.mdx)("inlineCode",{parentName:"p"},"username"),". Be sure to include a unique ",Object(i.mdx)("inlineCode",{parentName:"p"},"key")," as well, like in the last challenges."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},Object(i.mdx)("inlineCode",{parentName:"p"},"MyComponent")," should exist and render to the page.\n",Object(i.mdx)("inlineCode",{parentName:"p"},"MyComponent"),"'s state should be initialized to an array of six users.\n",Object(i.mdx)("inlineCode",{parentName:"p"},"MyComponent")," should return a ",Object(i.mdx)("inlineCode",{parentName:"p"},"div"),", an ",Object(i.mdx)("inlineCode",{parentName:"p"},"h1"),", and then an unordered list containing ",Object(i.mdx)("inlineCode",{parentName:"p"},"li")," elements for every user whose online status is set to ",Object(i.mdx)("inlineCode",{parentName:"p"},"true"),".\n",Object(i.mdx)("inlineCode",{parentName:"p"},"MyComponent")," should render ",Object(i.mdx)("inlineCode",{parentName:"p"},"li")," elements that contain the username of each online user.\nEach list item element should have a unique ",Object(i.mdx)("inlineCode",{parentName:"p"},"key")," attribute.")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      users: [\n        {\n          username: 'Jeff',\n          online: true\n        },\n        {\n          username: 'Alan',\n          online: false\n        },\n        {\n          username: 'Mary',\n          online: true\n        },\n        {\n          username: 'Jim',\n          online: false\n        },\n        {\n          username: 'Sara',\n          online: true\n        },\n        {\n          username: 'Laura',\n          online: true\n        }\n      ]\n    };\n  }\n  render() {\n    const usersOnline = this.state.users.filter(i => i.online == true); // Change this line\n    const renderOnline = usersOnline.map((i) => <li key={i.username + 1}>{i.username}</li>); // Change this line\n    return (\n      <div>\n        <h1>Current Online Users:</h1>\n        <ul>{renderOnline}</ul>\n      </div>\n    );\n  }\n}\n")),Object(i.mdx)("hr",null),Object(i.mdx)("h2",{id:"47-render-react-on-the-server-with-rendertostring"},"47. Render React on the Server with renderToString"),Object(i.mdx)("p",null,Object(i.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/front-end-libraries/react/render-react-on-the-server-with-rendertostring"}),"Learn React: Render React on the Server with renderToString | freeCodeCamp.org")),Object(i.mdx)("p",null,"So far, you have been rendering React components on the client. Normally, this is what you will always do. However, there are some use cases where it makes sense to render a React component on the server. Since React is a JavaScript view library and you can run JavaScript on the server with Node, this is possible. In fact, React provides a ",Object(i.mdx)("inlineCode",{parentName:"p"},"renderToString()")," method you can use for this purpose.\nThere are two key reasons why rendering on the server may be used in a real world app. First, without doing this, your React apps would consist of a relatively empty HTML file and a large bundle of JavaScript when it's initially loaded to the browser. This may not be ideal for search engines that are trying to index the content of your pages so people can find you. If you render the initial HTML markup on the server and send this to the client, the initial page load contains all of the page's markup which can be crawled by search engines. Second, this creates a faster initial page load experience because the rendered HTML is smaller than the JavaScript code of the entire app. React will still be able to recognize your app and manage it after the initial load."),Object(i.mdx)("hr",null),Object(i.mdx)("p",null,"The ",Object(i.mdx)("inlineCode",{parentName:"p"},"renderToString()")," method is provided on ",Object(i.mdx)("inlineCode",{parentName:"p"},"ReactDOMServer"),", which is available here as a global object. The method takes one argument which is a React element. Use this to render ",Object(i.mdx)("inlineCode",{parentName:"p"},"App")," to a string."),Object(i.mdx)("blockquote",null,Object(i.mdx)("p",{parentName:"blockquote"},"The ",Object(i.mdx)("inlineCode",{parentName:"p"},"App")," component should render to a string using ",Object(i.mdx)("inlineCode",{parentName:"p"},"ReactDOMServer.renderToString"),".")),Object(i.mdx)("pre",null,Object(i.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"class App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return <div/>\n  }\n};\n\n// Change code below this line\nReactDOMServer.renderToString(<App />)\n")))}l.isMDXComponent=!0}}]);
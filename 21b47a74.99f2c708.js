(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{212:function(e,n,t){"use strict";t.r(n),t.d(n,"MDXContext",(function(){return c})),t.d(n,"MDXProvider",(function(){return m})),t.d(n,"mdx",(function(){return f})),t.d(n,"useMDXComponents",(function(){return p})),t.d(n,"withMDXComponents",(function(){return d}));var r=t(0),a=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(){return(l=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=a.a.createContext({}),d=function(e){return function(n){var t=p(n.components);return a.a.createElement(e,l({},n,{components:t}))}},p=function(e){var n=a.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},m=function(e){var n=p(e.components);return a.a.createElement(c.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},g=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,i=u(e,["components","mdxType","originalType","parentName"]),c=p(t),d=r,m=c["".concat(l,".").concat(d)]||c[d]||b[d]||o;return t?a.a.createElement(m,s(s({ref:n},i),{},{components:t})):a.a.createElement(m,s({ref:n},i))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=g;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var u=2;u<o;u++)l[u]=t[u];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},92:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return c}));var r=t(3),a=t(7),o=(t(0),t(212)),l={id:"freeCodeCamp-Debugging-fr",title:"D\xe9bogage"},i={unversionedId:"freeCodeCamp/freeCodeCamp-Debugging-fr",id:"freeCodeCamp/freeCodeCamp-Debugging-fr",isDocsHomePage:!1,title:"D\xe9bogage",description:"Introduction aux d\xe9fis du d\xe9bogage",source:"@site/docs/freeCodeCamp/freeCodeCamp-Debugging-fr.md",slug:"/freeCodeCamp/freeCodeCamp-Debugging-fr",permalink:"/docs/freeCodeCamp/freeCodeCamp-Debugging-fr",editUrl:"https://github.com/gylgyl2000/laloutre.github.io/edit/main/docs/freeCodeCamp/freeCodeCamp-Debugging-fr.md",version:"current",sidebar:"docs",previous:{title:"Expressions r\xe9guli\xe8res",permalink:"/docs/freeCodeCamp/freeCodeCamp-Regular_Expressions-fr"},next:{title:"Structures de donn\xe9es de base",permalink:"/docs/freeCodeCamp/freeCodeCamp-Basic_Data_Structures-fr"}},s=[{value:"Introduction aux d\xe9fis du d\xe9bogage",id:"introduction-aux-d\xe9fis-du-d\xe9bogage",children:[]},{value:"1. Utilisez la console JavaScript pour v\xe9rifier la valeur d&#39;une variable",id:"1-utilisez-la-console-javascript-pour-v\xe9rifier-la-valeur-dune-variable",children:[]},{value:"2. Comprendre les diff\xe9rences entre freeCodeCamp et la console du navigateur",id:"2-comprendre-les-diff\xe9rences-entre-freecodecamp-et-la-console-du-navigateur",children:[]},{value:"3. Utilisez <code>typeof</code> pour v\xe9rifier le type d&#39;une variable",id:"3-utilisez-typeof-pour-v\xe9rifier-le-type-dune-variable",children:[]},{value:"4. Rep\xe9rer les noms de variables et de fonctions mal orthographi\xe9s",id:"4-rep\xe9rer-les-noms-de-variables-et-de-fonctions-mal-orthographi\xe9s",children:[]},{value:"5. Rep\xe9rez les parenth\xe8ses, crochets, accolades et guillemets non ferm\xe9s",id:"5-rep\xe9rez-les-parenth\xe8ses-crochets-accolades-et-guillemets-non-ferm\xe9s",children:[]},{value:"6. Rep\xe9rer l&#39;utilisation mixte de citations simples et doubles",id:"6-rep\xe9rer-lutilisation-mixte-de-citations-simples-et-doubles",children:[]},{value:"7. Rep\xe9rer l&#39;utilisation de l&#39;op\xe9rateur d&#39;affectation au lieu de l&#39;op\xe9rateur d&#39;\xe9galit\xe9",id:"7-rep\xe9rer-lutilisation-de-lop\xe9rateur-daffectation-au-lieu-de-lop\xe9rateur-d\xe9galit\xe9",children:[]},{value:"8. Rep\xe9rer les parenth\xe8ses ouvertes et fermantes manquantes apr\xe8s un appel de fonction",id:"8-rep\xe9rer-les-parenth\xe8ses-ouvertes-et-fermantes-manquantes-apr\xe8s-un-appel-de-fonction",children:[]},{value:"9. Rep\xe9rer les arguments d&#39;interception pass\xe9s dans le mauvais ordre lors de l&#39;appel d&#39;une fonction",id:"9-rep\xe9rer-les-arguments-dinterception-pass\xe9s-dans-le-mauvais-ordre-lors-de-lappel-dune-fonction",children:[]},{value:"10. Rep\xe9rer une erreur off-by-one lors de l&#39;utilisation de l&#39;indexation",id:"10-rep\xe9rer-une-erreur-off-by-one-lors-de-lutilisation-de-lindexation",children:[]},{value:"11. Soyez prudent lors de la r\xe9initialisation de variables \xe0 l&#39;int\xe9rieur d&#39;une boucle",id:"11-soyez-prudent-lors-de-la-r\xe9initialisation-de-variables-\xe0-lint\xe9rieur-dune-boucle",children:[]},{value:"12. Emp\xeacher les boucles infinies avec une condition de terminal valide",id:"12-emp\xeacher-les-boucles-infinies-avec-une-condition-de-terminal-valide",children:[]}],u={rightToc:s};function c(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.mdx)("wrapper",Object(r.a)({},u,t,{components:n,mdxType:"MDXLayout"}),Object(o.mdx)("h2",{id:"introduction-aux-d\xe9fis-du-d\xe9bogage"},"Introduction aux d\xe9fis du d\xe9bogage"),Object(o.mdx)("p",null,"Le d\xe9bogage est un outil  pr\xe9cieux et (malheureusement) n\xe9cessaire pour les programmeurs. Il suit  la phase de test consistant \xe0 v\xe9rifier si votre code fonctionne comme  pr\xe9vu et \xe0 le d\xe9couvrir s'il ne fonctionne pas. Le d\xe9bogage consiste \xe0 trouver exactement  ce qui ne fonctionne pas et \xe0 le r\xe9parer. Apr\xe8s avoir pass\xe9 du temps \xe0  cr\xe9er un bloc de code brillant, il est difficile de se rendre compte  qu'il peut contenir des erreurs. Ces probl\xe8mes se pr\xe9sentent  g\xe9n\xe9ralement sous trois formes :"),Object(o.mdx)("ol",null,Object(o.mdx)("li",{parentName:"ol"},"erreurs de syntaxe qui emp\xeachent un programme de s'ex\xe9cuter"),Object(o.mdx)("li",{parentName:"ol"},"erreurs d'ex\xe9cution lorsque le code ne s'ex\xe9cute pas ou a un comportement inattendu"),Object(o.mdx)("li",{parentName:"ol"},"erreurs s\xe9mantiques (ou logiques) lorsque le code ne fait pas ce qu'il est cens\xe9 faire.")),Object(o.mdx)("p",null,"Les \xe9diteurs de code modernes (et l'exp\xe9rience) peuvent aider \xe0 identifier  les erreurs de syntaxe. Les erreurs s\xe9mantiques et d'ex\xe9cution sont plus difficiles \xe0 trouver. Ils peuvent provoquer le plantage de votre  programme, le faire fonctionner pour toujours ou donner une sortie  incorrecte. Consid\xe9rez le d\xe9bogage comme une tentative de comprendre  pourquoi votre code se comporte comme il est. Exemple d'erreur de  syntaxe - souvent d\xe9tect\xe9e par l'\xe9diteur de code :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'funtcion willNotWork( \n  console.log("Yuck");\n}\n// Le mot-cl\xe9 "function" est mal orthographi\xe9 et il manque une parenth\xe8se\n')),Object(o.mdx)("p",null,"Voici un exemple d'erreur d'ex\xe9cution - souvent d\xe9tect\xe9e pendant l'ex\xe9cution du programme :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'function loopy() {\n  while(true) {\n    console.log("Hello, world!");\n  }\n}\n// L\'appel de loopy d\xe9marre une boucle infinie, ce qui peut planter votre navigateur\n')),Object(o.mdx)("p",null,"Exemple d'erreur s\xe9mantique - souvent d\xe9tect\xe9e apr\xe8s avoir test\xe9 la sortie du code :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"function calcAreaOfRect(w, h) {\n  return w + h; // Cela devrait \xeatre w * h\n}\nlet myRectArea = calcAreaOfRect(2, 3);\n// Corriger la syntaxe et le programme s'ex\xe9cute, mais cela donne la mauvaise r\xe9ponse\n")),Object(o.mdx)("p",null,"Le d\xe9bogage est frustrant, mais il permet de d\xe9velopper (et de suivre) une approche \xe9tape par \xe9tape pour r\xe9viser votre code. Cela signifie  v\xe9rifier les valeurs interm\xe9diaires et les types de variables pour voir  si elles sont ce qu'elles devraient \xeatre. Vous pouvez commencer par un  simple processus d'\xe9limination."),Object(o.mdx)("p",null,"Par exemple, si la fonction A  fonctionne et renvoie ce qu'elle est cens\xe9e faire, alors la fonction B  peut avoir le probl\xe8me. Ou commencez \xe0 v\xe9rifier les valeurs dans un bloc de code \xe0 partir du milieu pour essayer de r\xe9duire de moiti\xe9 l'espace  de recherche. Un probl\xe8me \xe0 un endroit indique un bogue dans la premi\xe8re moiti\xe9 du code. Sinon, c'est probablement dans le second."),Object(o.mdx)("p",null,"Cette  section couvrira quelques outils utiles pour trouver des bogues et  certaines des formes courantes qu'ils prennent. Heureusement, le  d\xe9bogage est une comp\xe9tence d'apprentissage qui n\xe9cessite juste un peu  de patience et de pratique pour \xeatre ma\xeetris\xe9e."),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"1-utilisez-la-console-javascript-pour-v\xe9rifier-la-valeur-dune-variable"},"1. Utilisez la console JavaScript pour v\xe9rifier la valeur d'une variable"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/debugging/use-the-javascript-console-to-check-the-value-of-a-variable"}),"Learn Debugging: Use the JavaScript Console to Check the Value of a Variable | freeCodeCamp.org")),Object(o.mdx)("p",null,"Chrome et Firefox ont tous deux d'excellentes consoles JavaScript, \xe9galement appel\xe9es DevTools, pour d\xe9boguer votre JavaScript.\nVous pouvez trouver des outils de d\xe9veloppement dans le menu de votre Chrome ou dans la console Web du menu de Firefox. Si vous utilisez un autre  navigateur ou un t\xe9l\xe9phone mobile, nous vous recommandons vivement de  passer \xe0 Firefox ou Chrome pour ordinateur.\nLa m\xe9thode ",Object(o.mdx)("inlineCode",{parentName:"p"},"console.log()"),", qui \xab imprime \xbb la sortie de ce qui est entre ses  parenth\xe8ses sur la console, sera probablement l'outil de d\xe9bogage le  plus utile. Le placer \xe0 des points strat\xe9giques de votre code peut vous  montrer les valeurs interm\xe9diaires des variables. C'est une bonne  pratique d'avoir une id\xe9e de ce que devrait \xeatre la sortie avant de  regarder de quoi il s'agit. Avoir des points de contr\xf4le pour voir  l'\xe9tat de vos calculs tout au long de votre code vous aidera \xe0  identifier le probl\xe8me.\nVoici un exemple pour imprimer 'Hello world!' \xe0 la console :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"console.log('Hello world!');\n")),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Utilisez la m\xe9thode ",Object(o.mdx)("inlineCode",{parentName:"p"},"console.log()")," pour afficher la valeur de la variable a \xe0 l'endroit indiqu\xe9 dans le code."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"Votre code doit utiliser ",Object(o.mdx)("inlineCode",{parentName:"p"},"console.log()")," pour v\xe9rifier la valeur de la variable a.")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"let a = 5;\nlet b = 1;\na++;\n// Only change code below this line\nlet sumAB = a + b;\nconsole.log(sumAB);\n")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"let a = 5;\nlet b = 1;\na++;\nconsole.log(a);\nlet sumAB = a + b;\nconsole.log(sumAB);\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"2-comprendre-les-diff\xe9rences-entre-freecodecamp-et-la-console-du-navigateur"},"2. Comprendre les diff\xe9rences entre freeCodeCamp et la console du navigateur"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/debugging/understanding-the-differences-between-the-freecodecamp-and-browser-console"}),"Learn Debugging: Understanding the Differences between the freeCodeCamp and Browser Console | freeCodeCamp.org")),Object(o.mdx)("p",null,"Vous avez peut-\xeatre remarqu\xe9 que certains d\xe9fis JavaScript de  freeCodeCamp incluent leur propre console. Cette console se comporte un  peu diff\xe9remment de la console du navigateur que vous avez utilis\xe9e lors du dernier d\xe9fi.\nLe d\xe9fi suivant vise \xe0 mettre en \xe9vidence la  principale diff\xe9rence entre la console freeCodeCamp et la console de  votre navigateur.\nLorsque vous ex\xe9cutez du JavaScript ordinaire,  la console du navigateur affiche vos instructions ",Object(o.mdx)("inlineCode",{parentName:"p"},"console.log()")," le  nombre exact de fois o\xf9 elles sont appel\xe9es.\nLa console  freeCodeCamp imprimera vos instructions ",Object(o.mdx)("inlineCode",{parentName:"p"},"console.log()")," peu de temps  apr\xe8s que l'\xe9diteur ait d\xe9tect\xe9 un changement dans le script, ainsi que  pendant les tests.\nLa console freeCodeCamp est effac\xe9e avant  l'ex\xe9cution des tests et, pour \xe9viter le spam, n'imprime les journaux  que lors du premier test (voir la note ci-dessous pour les exceptions).\nSi vous souhaitez voir chaque journal pour chaque test, ex\xe9cutez les tests et ouvrez la console du navigateur. Si vous pr\xe9f\xe9rez utiliser la  console du navigateur et souhaitez qu'elle imite la console freeCodeCamp, placez ",Object(o.mdx)("inlineCode",{parentName:"p"},"console.clear()")," avant tout autre appel de ",Object(o.mdx)("inlineCode",{parentName:"p"},"console"),", pour effacer la console du navigateur.\n",Object(o.mdx)("strong",{parentName:"p"},"Remarque :")," les ",Object(o.mdx)("inlineCode",{parentName:"p"},"console.log")," \xe0 l'int\xe9rieur des fonctions sont imprim\xe9es sur la console freeCodeCamp chaque fois que ces fonctions sont appel\xe9es, cela peut  aider \xe0 d\xe9boguer les fonctions qui sont appel\xe9es pendant les tests."),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Tout d'abord, utilisez ",Object(o.mdx)("inlineCode",{parentName:"p"},"console.log")," pour consigner la variable ",Object(o.mdx)("inlineCode",{parentName:"p"},"output"),".  Ensuite, utilisez ",Object(o.mdx)("inlineCode",{parentName:"p"},"console.clear")," pour effacer la console du navigateur."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"Vous devez utiliser ",Object(o.mdx)("inlineCode",{parentName:"p"},"console.clear()")," pour effacer la console du navigateur.\nVous devez utiliser ",Object(o.mdx)("inlineCode",{parentName:"p"},"console.log()")," pour imprimer la variable ",Object(o.mdx)("inlineCode",{parentName:"p"},"output"),".")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'// Ouvrez la console de votre navigateur.\nlet output = "Get this to log once in the freeCodeCamp console and twice in the browser console";\n// Utilisez console.log() pour imprimer la variable de sortie.\n// Ex\xe9cutez les tests pour voir la diff\xe9rence entre les deux consoles.\n// Maintenant, ajoutez console.clear() avant votre console.log() pour effacer la console du navigateur et passez les tests.\n')),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'let output = "Get this to log once in the freeCodeCamp console and twice in the browser console";\nconsole.clear();\nconsole.log(output); // Get this to log once in the freeCodeCamp console and twice in the browser console\n')),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"3-utilisez-typeof-pour-v\xe9rifier-le-type-dune-variable"},"3. Utilisez ",Object(o.mdx)("inlineCode",{parentName:"h2"},"typeof")," pour v\xe9rifier le type d'une variable"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/debugging/use-typeof-to-check-the-type-of-a-variable"}),"Learn Debugging: Use typeof to Check the Type of a Variable | freeCodeCamp.org")),Object(o.mdx)("p",null,"Vous pouvez utiliser ",Object(o.mdx)("inlineCode",{parentName:"p"},"typeof")," pour v\xe9rifier la structure de donn\xe9es, ou le type, d'une variable. Ceci est utile pour le d\xe9bogage lorsque vous  travaillez avec plusieurs types de donn\xe9es. Si vous pensez ajouter deux  nombres, mais que l'un est en fait une cha\xeene, les r\xe9sultats peuvent  \xeatre inattendus. Les erreurs de type peuvent se cacher dans les calculs  ou les appels de fonction. Faites attention en particulier lorsque vous  acc\xe9dez et travaillez avec des donn\xe9es externes sous la forme d'un objet JavaScript Object Notation (JSON).\nVoici quelques exemples utilisant ",Object(o.mdx)("inlineCode",{parentName:"p"},"typeof")," :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'console.log(typeof ""); // outputs "string"\nconsole.log(typeof 0); // outputs "number"\nconsole.log(typeof []); // outputs "object"\nconsole.log(typeof {}); // outputs "object"\n')),Object(o.mdx)("p",null,"JavaScript reconna\xeet six types de donn\xe9es primitifs (immuables) : ",Object(o.mdx)("inlineCode",{parentName:"p"},"Boolean"),", ",Object(o.mdx)("inlineCode",{parentName:"p"},"Null"),", ",Object(o.mdx)("inlineCode",{parentName:"p"},"Undefined"),", ",Object(o.mdx)("inlineCode",{parentName:"p"},"Number"),", ",Object(o.mdx)("inlineCode",{parentName:"p"},"String"),", et ",Object(o.mdx)("inlineCode",{parentName:"p"},"Symbol")," (nouveau avec ES6) et un type pour  les \xe9l\xe9ments mutables : ",Object(o.mdx)("inlineCode",{parentName:"p"},"Object"),". Notez qu'en JavaScript, les tableaux sont techniquement un type d'objet."),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Ajoutez deux instructions ",Object(o.mdx)("inlineCode",{parentName:"p"},"console.log()")," pour v\xe9rifier le type de chacune des deux variables ",Object(o.mdx)("inlineCode",{parentName:"p"},"seven")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"three")," dans le code."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"Votre code doit utiliser ",Object(o.mdx)("inlineCode",{parentName:"p"},"typeof")," dans deux instructions ",Object(o.mdx)("inlineCode",{parentName:"p"},"console.log()")," pour v\xe9rifier le type des variables.\nVotre code doit utiliser ",Object(o.mdx)("inlineCode",{parentName:"p"},"typeof")," pour v\xe9rifier le type de la variable ",Object(o.mdx)("inlineCode",{parentName:"p"},"seven"),".\nVotre code doit utiliser ",Object(o.mdx)("inlineCode",{parentName:"p"},"typeof")," pour v\xe9rifier le type de la variable ",Object(o.mdx)("inlineCode",{parentName:"p"},"three"),".")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'let seven = 7;\nlet three = "3";\nconsole.log(seven + three);\n// Changer uniquement le code en dessous de cette ligne\n')),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'let seven = 7;\nlet three = "3";\nconsole.log(seven + three); //73\nconsole.log(typeof seven); //number\nconsole.log(typeof three); // string\n')),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"4-rep\xe9rer-les-noms-de-variables-et-de-fonctions-mal-orthographi\xe9s"},"4. Rep\xe9rer les noms de variables et de fonctions mal orthographi\xe9s"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/debugging/catch-misspelled-variable-and-function-names"}),"Learn Debugging: Catch Misspelled Variable and Function Names | freeCodeCamp.org")),Object(o.mdx)("p",null,"Les m\xe9thodes ",Object(o.mdx)("inlineCode",{parentName:"p"},"console.log()")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"typeof")," sont les deux principaux moyens de v\xe9rifier les valeurs interm\xe9diaires et les types de sortie du  programme. Il est maintenant temps de se familiariser avec les formes courantes que prennent les bogues. Un probl\xe8me au niveau de la syntaxe  avec lequel les dactylographes rapides peuvent compatir est l'humble  erreur d'orthographe.\nLes caract\xe8res transpos\xe9s, manquants ou mal mis en majuscules dans un nom de variable ou de fonction obligeront le  navigateur \xe0 rechercher un objet qui n'existe pas - et \xe0 se plaindre  sous la forme d'une erreur de r\xe9f\xe9rence. Les noms de variables et de  fonctions JavaScript sont sensibles \xe0 la casse."),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Corrigez les deux fautes d'orthographe dans le code pour que le calcul ",Object(o.mdx)("inlineCode",{parentName:"p"},"netWorkingCapital")," fonctionne."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"V\xe9rifiez l'orthographe des deux variables utilis\xe9es dans le calcul ",Object(o.mdx)("inlineCode",{parentName:"p"},"netWorkingCapital"),", la sortie de la console doit indiquer que ",Object(o.mdx)("inlineCode",{parentName:"p"},'"Net working capital is: 2"'),".\nIl ne doit y avoir aucune instance de variables mal orthographi\xe9es dans le code.\nLa variable ",Object(o.mdx)("inlineCode",{parentName:"p"},"receivables")," doit \xeatre d\xe9clar\xe9e et utilis\xe9e correctement dans le code.\nIl ne doit y avoir aucune instance de variables mal orthographi\xe9es dans le code.\nLa variable ",Object(o.mdx)("inlineCode",{parentName:"p"},"payables")," doit \xeatre d\xe9clar\xe9e et utilis\xe9e correctement dans le code.")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"let receivables = 10;\nlet payables = 8;\nlet netWorkingCapital = recievables - payable;\nconsole.log(`Net working capital is: ${netWorkingCapital}`); // ReferenceError: recievables is not defined\n")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"let receivables = 10;\nlet payables = 8;\nlet netWorkingCapital = receivables - payables;\nconsole.log(`Net working capital is: ${netWorkingCapital}`); // Net working capital is: 2\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"5-rep\xe9rez-les-parenth\xe8ses-crochets-accolades-et-guillemets-non-ferm\xe9s"},"5. Rep\xe9rez les parenth\xe8ses, crochets, accolades et guillemets non ferm\xe9s"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/debugging/catch-unclosed-parentheses-brackets-braces-and-quotes"}),"Learn Debugging: Catch Unclosed Parentheses, Brackets, Braces and Quotes | freeCodeCamp.org")),Object(o.mdx)("p",null,"Une autre erreur de syntaxe \xe0 prendre en compte est que toutes les  parenth\xe8ses ouvrantes, crochets, accolades et guillemets ont une paire  de fermeture. L'oubli d'un \xe9l\xe9ment a tendance \xe0 se produire lorsque vous modifiez du code existant et que vous ins\xe9rez des \xe9l\xe9ments avec l'un  des types de paires. Faites \xe9galement attention lorsque vous imbriquez  des blocs de code dans d'autres, par exemple en ajoutant une fonction de rappel en tant qu'argument \xe0 une m\xe9thode.\nUne fa\xe7on d'\xe9viter  cette erreur est d\xe8s que le caract\xe8re d'ouverture est tap\xe9, d'inclure  imm\xe9diatement la correspondance de fermeture, puis de d\xe9placer le  curseur entre eux et de continuer le codage. Heureusement, la plupart  des \xe9diteurs de code modernes g\xe9n\xe8rent automatiquement la seconde moiti\xe9 de la paire."),Object(o.mdx)("p",null,"Corrigez les erreurs de deux paires dans le code."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"Votre code devrait corriger la partie manquante du tableau.\nVotre code devrait corriger la partie manquante de la m\xe9thode ",Object(o.mdx)("inlineCode",{parentName:"p"},".reduce()"),". La  sortie de la console doit indiquer que ",Object(o.mdx)("inlineCode",{parentName:"p"},'"Sum of array values is: 6"'),".")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'let myArray = [1, 2, 3;\nlet arraySum = myArray.reduce((previous, current =>  previous + current);\nconsole.log(`Sum of array values is: ${arraySum}`); // Erreur de syntaxe: inconnu: Jeton inattendu, attendu "," (1:22)\n')),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"let myArray = [1, 2, 3];\nlet arraySum = myArray.reduce((previous, current) =>  (previous + current));\nconsole.log(`Sum of array values is: ${arraySum}`); // Sum of array values is: 6\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"6-rep\xe9rer-lutilisation-mixte-de-citations-simples-et-doubles"},"6. Rep\xe9rer l'utilisation mixte de citations simples et doubles"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/debugging/catch-mixed-usage-of-single-and-double-quotes"}),"Learn Debugging: Catch Mixed Usage of Single and Double Quotes | freeCodeCamp.org")),Object(o.mdx)("p",null,"JavaScript permet l'utilisation de guillemets simples (",Object(o.mdx)("inlineCode",{parentName:"p"},"'"),") et doubles (",Object(o.mdx)("inlineCode",{parentName:"p"},'"'),") pour d\xe9clarer une cha\xeene. D\xe9cider lequel utiliser se r\xe9sume  g\xe9n\xe9ralement \xe0 des pr\xe9f\xe9rences personnelles, \xe0 quelques exceptions pr\xe8s.\nAvoir deux choix est id\xe9al lorsqu'une cha\xeene a des contractions ou un autre  texte entre guillemets. Veillez simplement \xe0 ne pas fermer la cha\xeene  trop t\xf4t, ce qui provoque une erreur de syntaxe.\nVoici quelques exemples de m\xe9lange de citations :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"// Ceux-ci sont corrects:\nconst grouchoContraction = \"I've had a perfectly wonderful evening, but this wasn't it.\";\nconst quoteInString = \"Groucho Marx once said 'Quote me as saying I was mis-quoted.'\";\n// Ceci est une erreur:\nconst uhOhGroucho = 'I've had a perfectly wonderful evening, but this wasn't it.';\n")),Object(o.mdx)("p",null,"Bien s\xfbr, il est acceptable d'utiliser un seul style de guillemets. Vous  pouvez \xe9chapper les guillemets \xe0 l'int\xe9rieur de la cha\xeene en utilisant  le caract\xe8re d'\xe9chappement (",Object(o.mdx)("inlineCode",{parentName:"p"},"\\"),") :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"// Utilisation correcte des m\xeames guillemets:\nconst allSameQuotes = 'I\\'ve had a perfectly wonderful evening, but this wasn\\'t it.';\n")),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Corrigez la cha\xeene afin qu'elle utilise des guillemets diff\xe9rents pour la valeur ",Object(o.mdx)("inlineCode",{parentName:"p"},"href")," ou \xe9chappe les guillemets existants. Gardez les guillemets doubles autour de toute la cha\xeene."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"Votre code doit corriger les guillemets autour de la valeur ",Object(o.mdx)("inlineCode",{parentName:"p"},"href")," ",Object(o.mdx)("inlineCode",{parentName:"p"},'"#Home"')," en les modifiant ou en les \xe9chappant.\nVotre code doit conserver les guillemets doubles autour de la cha\xeene enti\xe8re.")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'let innerHtml = "<p>Click here to <a href="#Home">return home</a></p>";\nconsole.log(innerHtml); // SyntaxError: unknown: Unexpected token, expected ";" (1:43)\n')),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'let innerHtml = "<p>Click here to <a href=\\"#Home\\">return home</a></p>";\nconsole.log(innerHtml); // <p>Click here to <a href="#Home">return home</a></p>\n// ou\nlet innerHtml = "<p>Click here to <a href=\'#Home\'>return home</a></p>";\nconsole.log(innerHtml); // <p>Click here to <a href="#Home">return home</a></p>\n')),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"7-rep\xe9rer-lutilisation-de-lop\xe9rateur-daffectation-au-lieu-de-lop\xe9rateur-d\xe9galit\xe9"},"7. Rep\xe9rer l'utilisation de l'op\xe9rateur d'affectation au lieu de l'op\xe9rateur d'\xe9galit\xe9"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/debugging/catch-use-of-assignment-operator-instead-of-equality-operator"}),"Learn Debugging: Catch Use of Assignment Operator Instead of Equality Operator | freeCodeCamp.org")),Object(o.mdx)("p",null,"Les programmes de branchement, c'est-\xe0-dire ceux qui font des choses  diff\xe9rentes si certaines conditions sont remplies, reposent sur des  instructions ",Object(o.mdx)("inlineCode",{parentName:"p"},"if"),", ",Object(o.mdx)("inlineCode",{parentName:"p"},"else if")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"else")," en JavaScript. La condition prend  parfois la forme de test si un r\xe9sultat est \xe9gal \xe0 une valeur.\nCette logique est parl\xe9e (du moins en anglais) comme \xab si x est \xe9gal \xe0 y, alors... \xbb qui peut litt\xe9ralement se traduire en code \xe0 l'aide de  ",Object(o.mdx)("inlineCode",{parentName:"p"},"="),", ou op\xe9rateur d'affectation. Cela conduit \xe0 un flux de contr\xf4le  inattendu dans votre programme.\nComme indiqu\xe9 dans les d\xe9fis  pr\xe9c\xe9dents, l'op\xe9rateur d'affectation (",Object(o.mdx)("inlineCode",{parentName:"p"},"="),") dans JavaScript attribue une  valeur \xe0 un nom de variable. Et les op\xe9rateurs ",Object(o.mdx)("inlineCode",{parentName:"p"},"==")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"===")," v\xe9rifient l'\xe9galit\xe9 (le triple ",Object(o.mdx)("inlineCode",{parentName:"p"},"===")," teste l'\xe9galit\xe9 stricte, ce qui signifie que la valeur et le type sont identiques).\nLe code ci-dessous attribue \xe0 ",Object(o.mdx)("inlineCode",{parentName:"p"},"x")," la valeur 2, ce qui est \xe9valu\xe9 comme vrai. Presque chaque valeur seule en JavaScript est \xe9valu\xe9e \xe0 ",Object(o.mdx)("inlineCode",{parentName:"p"},"true"),", \xe0 l'exception de ce que l'on  appelle les valeurs \"fausses\" : ",Object(o.mdx)("inlineCode",{parentName:"p"},"false"),", ",Object(o.mdx)("inlineCode",{parentName:"p"},"0"),", ",Object(o.mdx)("inlineCode",{parentName:"p"},'""')," (une cha\xeene vide), ",Object(o.mdx)("inlineCode",{parentName:"p"},"NaN"),",  ",Object(o.mdx)("inlineCode",{parentName:"p"},"undefined")," et ",Object(o.mdx)("inlineCode",{parentName:"p"},"null"),"."),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"let x = 1;\nlet y = 2;\nif (x = y) {\n  // ce bloc de code fonctionnera pour n'importe quelle valeur de y (sauf si y a \xe9t\xe9 initialement d\xe9fini comme faux)\n} else {\n  // ce bloc de code est ce qui devrait s'ex\xe9cuter (mais ne le fera pas) dans cet exemple\n}\n")),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Corrigez la condition pour que le programme ex\xe9cute la bonne branche et que la valeur appropri\xe9e soit affect\xe9e \xe0 ",Object(o.mdx)("inlineCode",{parentName:"p"},"result"),"."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"Votre code doit corriger la condition afin de v\xe9rifier l'\xe9galit\xe9, au lieu d'utiliser l'affectation.\nLa condition doit utiliser ",Object(o.mdx)("inlineCode",{parentName:"p"},"==")," ou ",Object(o.mdx)("inlineCode",{parentName:"p"},"===")," pour tester l'\xe9galit\xe9.")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'let x = 7;\nlet y = 9;\nlet result = "to come";\nif(x = y) {\n  result = "Equal!";\n} else {\n  result = "Not equal!";\n}\nconsole.log(result); // Equal!\n')),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'let x = 7;\nlet y = 9;\nlet result = "to come";\nif(x == y) {\n  result = "Equal!";\n} else {\n  result = "Not equal!";\n}\nconsole.log(result); // Not equal!\n')),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"8-rep\xe9rer-les-parenth\xe8ses-ouvertes-et-fermantes-manquantes-apr\xe8s-un-appel-de-fonction"},"8. Rep\xe9rer les parenth\xe8ses ouvertes et fermantes manquantes apr\xe8s un appel de fonction"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/debugging/catch-missing-open-and-closing-parenthesis-after-a-function-call"}),"Learn Debugging: Catch Missing Open and Closing Parenthesis After a Function Call | freeCodeCamp.org")),Object(o.mdx)("p",null,"Lorsqu'une fonction ou une m\xe9thode ne prend aucun argument, vous pouvez  oublier d'inclure les parenth\xe8ses d'ouverture et de fermeture (vides)  lors de son appel. Souvent, le r\xe9sultat d'un appel de fonction est  enregistr\xe9 dans une variable pour une autre utilisation dans votre code. Cette erreur peut \xeatre d\xe9tect\xe9e en enregistrant les valeurs des  variables (ou leurs types) dans la console et en voyant que l'une est  d\xe9finie sur une r\xe9f\xe9rence de fonction, au lieu de la valeur attendue  renvoy\xe9e par la fonction.\nLes variables de l'exemple suivant sont diff\xe9rentes :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"function myFunction() {\n  return \"You rock!\";\n}\nlet varOne = myFunction; // d\xe9fini pour \xe9galer une fonction\nlet varTwo = myFunction(); // d\xe9fini pour \xeatre \xe9gal \xe0 la cha\xeene 'You rock!'\n")),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Corrigez le code afin que la variable ",Object(o.mdx)("inlineCode",{parentName:"p"},"result")," soit d\xe9fini sur la valeur renvoy\xe9e par l'appel de la fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"getNine"),"."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"Votre code doit corriger la variable ",Object(o.mdx)("inlineCode",{parentName:"p"},"result")," afin qu'il soit d\xe9fini sur le nombre renvoy\xe9 par la fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"getNine"),".\nVotre code doit appeler la fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"getNine"),".")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"function getNine() {\n  let x = 6;\n  let y = 3;\n  return x + y;\n}\nlet result = getNine;\nconsole.log(result); // [Function: getNine]\n")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"function getNine() {\n  let x = 6;\n  let y = 3;\n  return x + y;\n}\nlet result = getNine();\nconsole.log(result); // 9\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"9-rep\xe9rer-les-arguments-dinterception-pass\xe9s-dans-le-mauvais-ordre-lors-de-lappel-dune-fonction"},"9. Rep\xe9rer les arguments d'interception pass\xe9s dans le mauvais ordre lors de l'appel d'une fonction"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/debugging/catch-arguments-passed-in-the-wrong-order-when-calling-a-function"}),"Learn Debugging: Catch Arguments Passed in the Wrong Order When Calling a Function | freeCodeCamp.org")),Object(o.mdx)("p",null,"Poursuivant la discussion sur l'appel des fonctions, le prochain bogue \xe0 surveiller est lorsque les arguments d'une fonction sont fournis dans  un ordre incorrect. Si les arguments sont de types diff\xe9rents, comme une fonction attend un tableau et un entier, cela g\xe9n\xe9rera probablement une erreur d'ex\xe9cution. Si les arguments sont du m\xeame type (tous les  nombres entiers, par exemple), alors la logique du code n'a pas de sens. Assurez-vous de fournir tous les arguments requis, dans le bon ordre  pour \xe9viter ces probl\xe8mes."),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"La fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"riseToPower")," \xe9l\xe8ve une base \xe0 un exposant. Malheureusement, il n'est pas appel\xe9 correctement - corrigez le code pour que la valeur de ",Object(o.mdx)("inlineCode",{parentName:"p"},"power"),"  attendue soit 8."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"Votre code doit fixer la variable ",Object(o.mdx)("inlineCode",{parentName:"p"},"power")," de sorte qu'elle \xe9quivaut \xe0 2  \xe9lev\xe9 \xe0 la 3\xe8me puissance, et non 3 \xe0 la 2\xe8me puissance.\nVotre code doit utiliser l'ordre correct des arguments pour l'appel de la fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"riseToPower"),".")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"function raiseToPower(b, e) {\n  return Math.pow(b, e);\n}\nlet base = 2;\nlet exp = 3;\nlet power = raiseToPower(exp, base);\nconsole.log(power); // 9\n")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"function raiseToPower(b, e) {\n  return Math.pow(b, e);\n}\nlet base = 2;\nlet exp = 3;\nlet power = raiseToPower(base, exp);\nconsole.log(power); // 8\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"10-rep\xe9rer-une-erreur-off-by-one-lors-de-lutilisation-de-lindexation"},"10. Rep\xe9rer une erreur off-by-one lors de l'utilisation de l'indexation"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/debugging/catch-off-by-one-errors-when-using-indexing"}),"Learn Debugging: Catch Off By One Errors When Using Indexing | freeCodeCamp.org")),Object(o.mdx)("p",null,Object(o.mdx)("em",{parentName:"p"},"Des erreurs off-by-one")," (parfois appel\xe9es OBOE, \xab erreur de d\xe9calage unitaire \xbb) surviennent lorsque vous essayez de  cibler un index sp\xe9cifique d'une cha\xeene ou d'un tableau (pour d\xe9couper  ou acc\xe9der \xe0 un segment), ou lorsque vous bouclez sur les index de  ceux-ci. L'indexation JavaScript commence \xe0 z\xe9ro, pas \xe0 un, ce qui  signifie que le dernier index est toujours un de moins que la longueur  de l'\xe9l\xe9ment. Si vous essayez d'acc\xe9der \xe0 un index \xe9gal \xe0 la longueur,  le programme peut lancer une erreur de r\xe9f\xe9rence \xab index hors limites \xbb (\"index out of range\") ou imprimer ",Object(o.mdx)("inlineCode",{parentName:"p"},"undefined"),".\nLorsque vous utilisez des m\xe9thodes de cha\xeene ou de tableau qui prennent des plages d'index comme arguments, il est  utile de lire la documentation et de comprendre si elles sont inclusives (l'\xe9l\xe9ment \xe0 l'index donn\xe9 fait partie de ce qui est retourn\xe9) ou non.  Voici quelques exemples d'erreurs off by one :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\nlet len = alphabet.length;\nfor (let i = 0; i <= len; i++) {\n  // fait une boucle de trop \xe0 la fin\n  console.log(alphabet[i]);\n}\nfor (let j = 1; j < len; j++) {\n  // fait une boucle trop souvent et manque le premier caract\xe8re \xe0 l'index 0\n  console.log(alphabet[j]);\n}\nfor (let k = 0; k < len; k++) {\n  // Boucle d'or approuve - c'est parfait\n  console.log(alphabet[k]);\n}\n")),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"Corrigez les deux erreurs d'indexation dans la fonction suivante afin que tous les nombres 1 \xe0 5 soient imprim\xe9s sur la console."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"Votre code doit d\xe9finir la condition initiale de la boucle afin qu'elle commence au premier index.\nVotre code doit corriger la condition initiale de la boucle afin que l'index commence \xe0 0.\nVotre code doit d\xe9finir la condition terminale de la boucle afin qu'elle s'arr\xeate au dernier index.\nVotre code doit fixer la condition terminale de la boucle afin qu'elle s'arr\xeate \xe0 1 avant la longueur.")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'function countToFive() {\n  let firstFive = "12345";\n  let len = firstFive.length;\n  // Changer uniquement le code en dessous de cette ligne\n  for (let i = 1; i <= len; i++) {\n  // Ne changez le code qu\'au-dessus de cette ligne\n    console.log(firstFive[i]); // 2 3 4 5 undefined\n  }\n}\ncountToFive();\n')),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'function countToFive() {\n  let firstFive = "12345";\n  let len = firstFive.length;\n  for (let i = 0; i < len; i++) {\n    console.log(firstFive[i]); // 1 2 3 4 5\n  }\n}\ncountToFive();\n')),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"11-soyez-prudent-lors-de-la-r\xe9initialisation-de-variables-\xe0-lint\xe9rieur-dune-boucle"},"11. Soyez prudent lors de la r\xe9initialisation de variables \xe0 l'int\xe9rieur d'une boucle"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/debugging/use-caution-when-reinitializing-variables-inside-a-loop"}),"Learn Debugging: Use Caution When Reinitializing Variables Inside a Loop | freeCodeCamp.org")),Object(o.mdx)("p",null,"Parfois, il est n\xe9cessaire d'enregistrer des informations, d'incr\xe9menter des  compteurs ou de r\xe9initialiser des variables dans une boucle. Un probl\xe8me potentiel est lorsque les variables doivent \xeatre r\xe9initialis\xe9es et ne  le sont pas, ou vice versa. Ceci est particuli\xe8rement dangereux si vous  r\xe9initialisez accidentellement la variable utilis\xe9e pour la condition  terminale, provoquant une boucle infinie.\nL'impression de valeurs de variable \xe0 chaque cycle de votre boucle \xe0 l'aide de ",Object(o.mdx)("inlineCode",{parentName:"p"},"console.log()")," peut d\xe9couvrir un comportement bogu\xe9 li\xe9 \xe0 la r\xe9initialisation ou \xe0  l'\xe9chec de la r\xe9initialisation d'une variable."),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"La fonction  suivante est cens\xe9e cr\xe9er un tableau \xe0 deux dimensions avec ",Object(o.mdx)("inlineCode",{parentName:"p"},"m")," lignes et ",Object(o.mdx)("inlineCode",{parentName:"p"},"n")," colonnes de z\xe9ros. Malheureusement, il ne produit pas la sortie  attendue car la variable de ligne n'est pas en cours de r\xe9initialisation (remise \xe0 un tableau vide) dans la boucle externe. Corrigez le code  pour qu'il renvoie un tableau 3x2 correct de z\xe9ros, qui ressemble \xe0 ",Object(o.mdx)("inlineCode",{parentName:"p"},"[[0, 0], [0, 0], [0, 0]]"),"."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"Votre code doit d\xe9finir la variable ",Object(o.mdx)("inlineCode",{parentName:"p"},"matrix")," sur un tableau contenant 3 lignes de 2 colonnes de z\xe9ros chacune.\nLa variable ",Object(o.mdx)("inlineCode",{parentName:"p"},"matrix")," doit avoir 3 lignes.\nLa variable ",Object(o.mdx)("inlineCode",{parentName:"p"},"matrix")," doit avoir 2 colonnes dans chaque ligne.")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"function zeroArray(m, n) {\n  // Cr\xe9e un tableau 2D avec m lignes et n colonnes de z\xe9ros\n  let newArray = [];\n  let row = [];\n  for (let i = 0; i < m; i++) {\n    // Ajoute la m-i\xe8me ligne dans newArray\n    for (let j = 0; j < n; j++) {\n      // Pousse n z\xe9ros dans la ligne courante pour cr\xe9er les colonnes\n      row.push(0);\n    }\n    // Pousse la ligne actuelle, qui contient maintenant n z\xe9ros, vers le tableau\n    newArray.push(row);\n  }\n  return newArray;\n}\nlet matrix = zeroArray(3, 2);\nconsole.log(matrix);\n// [ [ 0, 0, 0, 0, 0, 0 ],\n//   [ 0, 0, 0, 0, 0, 0 ],\n//   [ 0, 0, 0, 0, 0, 0 ] ]\n")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"function zeroArray(m, n) {\n  let newArray = [];\n  for (let i = 0; i < m; i++) {\n    let row = []; // row a \xe9t\xe9 d\xe9clar\xe9e \xe0 l'int\xe9rieur de la boucle externe. Maintenant, une nouvelle ligne sera initialis\xe9e \xe0 chaque it\xe9ration de la boucle externe permettant pour la matrice souhait\xe9e.\n    for (let j = 0; j < n; j++) {\n      row.push(0);\n    }\n    newArray.push(row);\n  }\n  return newArray;\n}\nlet matrix = zeroArray(3, 2);\nconsole.log(matrix);\n// [ [ 0, 0 ], [ 0, 0 ], [ 0, 0 ] ]\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"12-emp\xeacher-les-boucles-infinies-avec-une-condition-de-terminal-valide"},"12. Emp\xeacher les boucles infinies avec une condition de terminal valide"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/debugging/prevent-infinite-loops-with-a-valid-terminal-condition"}),"Learn Debugging: Prevent Infinite Loops with a Valid Terminal Condition | freeCodeCamp.org")),Object(o.mdx)("p",null,"Le dernier sujet est la redoutable boucle infinie. Les boucles sont  d'excellents outils lorsque vous avez besoin que votre programme ex\xe9cute un bloc de code un certain nombre de fois ou jusqu'\xe0 ce qu'une  condition soit remplie, mais elles ont besoin d'une condition terminale  qui met fin \xe0 la boucle. Les boucles infinies sont susceptibles de geler ou de planter le navigateur et de provoquer un chaos g\xe9n\xe9ral dans  l'ex\xe9cution du programme, ce dont personne ne veut.\nIl y avait un exemple de boucle infinie dans l'introduction de cette section - il n'y avait pas de condition terminale pour sortir de la boucle ",Object(o.mdx)("inlineCode",{parentName:"p"},"while")," dans  ",Object(o.mdx)("inlineCode",{parentName:"p"},"loopy()"),". N'appelez PAS cette fonction !"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'function loopy() {\n  while(true) {\n    console.log("Hello, world!");\n  }\n}\n')),Object(o.mdx)("p",null,"C'est le travail du programmeur de s'assurer que la condition du terminal,  qui indique au programme quand sortir du code de boucle, est finalement  atteinte. Une erreur est l'incr\xe9mentation ou la d\xe9cr\xe9mentation d'une  variable de compteur dans le mauvais sens \xe0 partir de l'\xe9tat terminal.  Un autre consiste \xe0 r\xe9initialiser accidentellement un compteur ou une  variable d'index dans le code de la boucle, au lieu de l'incr\xe9menter ou  de le d\xe9cr\xe9menter."),Object(o.mdx)("hr",null),Object(o.mdx)("p",null,"La fonction ",Object(o.mdx)("inlineCode",{parentName:"p"},"myFunc()")," contient une boucle  infinie car la condition terminale ",Object(o.mdx)("inlineCode",{parentName:"p"},"i != 4")," ne sera jamais \xe9valu\xe9e \xe0 ",Object(o.mdx)("inlineCode",{parentName:"p"},"false")," (et interrompra la boucle) - ",Object(o.mdx)("inlineCode",{parentName:"p"},"i")," sera  incr\xe9menter de 2 \xe0 chaque passage et sautera juste au-dessus 4 car ",Object(o.mdx)("inlineCode",{parentName:"p"},"i")," est impair pour commencer. Corrigez l'op\xe9rateur de comparaison dans la condition terminale pour que la  boucle ne s'ex\xe9cute que pour ",Object(o.mdx)("inlineCode",{parentName:"p"},"i")," inf\xe9rieur ou \xe9gal \xe0 4."),Object(o.mdx)("blockquote",null,Object(o.mdx)("p",{parentName:"blockquote"},"Votre code doit changer l'op\xe9rateur de comparaison dans la condition terminale (la partie m\xe9diane) de la boucle ",Object(o.mdx)("inlineCode",{parentName:"p"},"for"),".\nVotre code doit fixer l'op\xe9rateur de comparaison dans l'\xe9tat terminal de la boucle.")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'function myFunc() {\n  for (let i = 1; i != 4; i += 2) {\n    console.log("Still going!");\n  }\n}\n')),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'function myFunc() {\n  for (let i = 1; i <= 4; i += 2) {\n    console.log("Still going!");\n  }\n}\nmyFunc();\n// Still going!\n// Still going!\n')))}c.isMDXComponent=!0}}]);
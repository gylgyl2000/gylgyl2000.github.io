(window.webpackJsonp=window.webpackJsonp||[]).push([[108],{178:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return r})),t.d(n,"rightToc",(function(){return d})),t.d(n,"default",(function(){return s}));var a=t(3),o=t(7),l=(t(0),t(214)),i={id:"freeCodeCamp-Basic_CSS",title:"Basic CSS"},r={unversionedId:"freeCodeCamp/freeCodeCamp-Basic_CSS",id:"freeCodeCamp/freeCodeCamp-Basic_CSS",isDocsHomePage:!1,title:"Basic CSS",description:"Introduction to Basic CSS",source:"@site/docs/freeCodeCamp/freeCodeCamp-Basic_CSS.md",slug:"/freeCodeCamp/freeCodeCamp-Basic_CSS",permalink:"/docs/freeCodeCamp/freeCodeCamp-Basic_CSS",editUrl:"https://github.com/gylgyl2000/laloutre.github.io/edit/main/docs/freeCodeCamp/freeCodeCamp-Basic_CSS.md",version:"current"},d=[{value:"Introduction to Basic CSS",id:"introduction-to-basic-css",children:[]},{value:"1. Change the Color of Text",id:"1-change-the-color-of-text",children:[]},{value:"2. CSS Selectors to Style Elements",id:"2-css-selectors-to-style-elements",children:[]},{value:"3. Use a CSS Class to Style an Element",id:"3-use-a-css-class-to-style-an-element",children:[]},{value:"4. Style Multiple Elements with a CSS Class",id:"4-style-multiple-elements-with-a-css-class",children:[]},{value:"5. Change the Font Size of an Element",id:"5-change-the-font-size-of-an-element",children:[]},{value:"6. Set the Font Family of an Element",id:"6-set-the-font-family-of-an-element",children:[]},{value:"7. Import a Google Font",id:"7-import-a-google-font",children:[]},{value:"8. Specify How Fonts Should Degrade",id:"8-specify-how-fonts-should-degrade",children:[]},{value:"9. Size Your Images",id:"9-size-your-images",children:[]},{value:"10. Add Borders Around Your Elements",id:"10-add-borders-around-your-elements",children:[]},{value:"11. Add Rounded Corners with border-radius",id:"11-add-rounded-corners-with-border-radius",children:[]},{value:"12. Make Circular Images with a border-radius",id:"12-make-circular-images-with-a-border-radius",children:[]},{value:"13. Give a Background Color to a div Element",id:"13-give-a-background-color-to-a-div-element",children:[]},{value:"14. Set the id of an Element",id:"14-set-the-id-of-an-element",children:[]},{value:"15. Use an id Attribute to Style an Element",id:"15-use-an-id-attribute-to-style-an-element",children:[]},{value:"16. Adjust the Padding of an Element",id:"16-adjust-the-padding-of-an-element",children:[]},{value:"17. Adjust the Margin of an Element",id:"17-adjust-the-margin-of-an-element",children:[]},{value:"18. Add a Negative Margin to an Element",id:"18-add-a-negative-margin-to-an-element",children:[]},{value:"19. Add Different Padding to Each Side of an Element",id:"19-add-different-padding-to-each-side-of-an-element",children:[]},{value:"20. Add Different Margins to Each Side of an Element",id:"20-add-different-margins-to-each-side-of-an-element",children:[]},{value:"21. Use Clockwise Notation to Specify the Padding of an Element",id:"21-use-clockwise-notation-to-specify-the-padding-of-an-element",children:[]},{value:"22. Use Clockwise Notation to Specify the Margin of an Element",id:"22-use-clockwise-notation-to-specify-the-margin-of-an-element",children:[]},{value:"23. Use Attribute Selectors to Style Elements",id:"23-use-attribute-selectors-to-style-elements",children:[]},{value:"24. Understand Absolute versus Relative Units",id:"24-understand-absolute-versus-relative-units",children:[]},{value:"25. Style the HTML Body Element",id:"25-style-the-html-body-element",children:[]},{value:"26. Inherit Styles from the Body Element",id:"26-inherit-styles-from-the-body-element",children:[]},{value:"27. Prioritize One Style Over Another",id:"27-prioritize-one-style-over-another",children:[]},{value:"28. Override Styles in Subsequent CSS",id:"28-override-styles-in-subsequent-css",children:[]},{value:"29. Override Class Declarations by Styling ID Attributes",id:"29-override-class-declarations-by-styling-id-attributes",children:[]},{value:"30. Override Class Declarations with Inline Styles",id:"30-override-class-declarations-with-inline-styles",children:[]},{value:"31. Override All Other Styles by using Important",id:"31-override-all-other-styles-by-using-important",children:[]},{value:"32. Use Hex Code for Specific Colors",id:"32-use-hex-code-for-specific-colors",children:[]},{value:"33. Use Hex Code to Mix Colors",id:"33-use-hex-code-to-mix-colors",children:[]},{value:"34. Use Abbreviated Hex Code",id:"34-use-abbreviated-hex-code",children:[]},{value:"35. Use RGB values to Color Elements",id:"35-use-rgb-values-to-color-elements",children:[]},{value:"36. Use RGB to Mix Colors",id:"36-use-rgb-to-mix-colors",children:[]},{value:"37. Use CSS Variables to change several elements at once",id:"37-use-css-variables-to-change-several-elements-at-once",children:[]},{value:"38. Create a custom CSS Variable",id:"38-create-a-custom-css-variable",children:[]},{value:"39. Use a custom CSS Variable",id:"39-use-a-custom-css-variable",children:[]},{value:"40. Attach a Fallback value to a CSS Variable",id:"40-attach-a-fallback-value-to-a-css-variable",children:[]},{value:"41. Improve Compatibility with Browser Fallbacks",id:"41-improve-compatibility-with-browser-fallbacks",children:[]},{value:"42. Inherit CSS Variables",id:"42-inherit-css-variables",children:[]},{value:"43. Change a variable for a specific area",id:"43-change-a-variable-for-a-specific-area",children:[]},{value:"44. Use a media query to change a variable",id:"44-use-a-media-query-to-change-a-variable",children:[]}],c={rightToc:d};function s(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(l.mdx)("wrapper",Object(a.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(l.mdx)("h2",{id:"introduction-to-basic-css"},"Introduction to Basic CSS"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/"}),"Basic CSS | freeCodeCamp.org")),Object(l.mdx)("p",null,"Cascading Style Sheets (CSS) tell the browser how to display the text and other content that you write in HTML.\nNote that CSS is case-sensitive so be careful with your capitalization.\nCSS has been adopted by all major browsers and allows you to control :"),Object(l.mdx)("ul",null,Object(l.mdx)("li",{parentName:"ul"},"color"),Object(l.mdx)("li",{parentName:"ul"},"fonts"),Object(l.mdx)("li",{parentName:"ul"},"positioning"),Object(l.mdx)("li",{parentName:"ul"},"spacing"),Object(l.mdx)("li",{parentName:"ul"},"sizing"),Object(l.mdx)("li",{parentName:"ul"},"decorations"),Object(l.mdx)("li",{parentName:"ul"},"transitions")),Object(l.mdx)("p",null,"There are three main ways to apply CSS styling. You can apply inline styles directly to HTML elements with the ",Object(l.mdx)("inlineCode",{parentName:"p"},"style")," attribute. Alternatively, you can place CSS rules within ",Object(l.mdx)("inlineCode",{parentName:"p"},"style")," tags in an HTML document. Finally, you can write CSS rules in an external style sheet, then reference that file in the HTML document. Even though the first two options have their use cases, most developers prefer external style sheets because they keep the styles separate from the HTML elements. This improves the readability and reusability of your code."),Object(l.mdx)("p",null,"The idea behind CSS is that you can use a selector to target an HTML element in the DOM (Document Object Model) and then apply a variety of attributes to that element to change the way it is displayed on the page."),Object(l.mdx)("p",null,"In this section, you'll see how adding CSS styles to the elements of your CatPhotoApp can change it from simple text to something more."),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"1-change-the-color-of-text"},"1. Change the Color of Text"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/change-the-color-of-text"}),"Learn Basic CSS: Change the Color of Text | freeCodeCamp.org")),Object(l.mdx)("p",null,"Now let's change the color of some of our text.\nWe can do this by changing the ",Object(l.mdx)("inlineCode",{parentName:"p"},"style")," of your ",Object(l.mdx)("inlineCode",{parentName:"p"},"h2")," element.\nThe property that is responsible for the color of an element's text is the ",Object(l.mdx)("inlineCode",{parentName:"p"},"color")," style property.\nHere's how you would set your ",Object(l.mdx)("inlineCode",{parentName:"p"},"h2")," element's text color to blue :"),Object(l.mdx)("p",null,Object(l.mdx)("inlineCode",{parentName:"p"},'<h2 style="color: blue;">CatPhotoApp</h2>')),Object(l.mdx)("p",null,"Note that it is a good practice to end inline ",Object(l.mdx)("inlineCode",{parentName:"p"},"style")," declarations with a ",Object(l.mdx)("inlineCode",{parentName:"p"},";")," ."),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"Change your ",Object(l.mdx)("inlineCode",{parentName:"p"},"h2")," element's style so that its text color is red."),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},"Your ",Object(l.mdx)("inlineCode",{parentName:"p"},"h2")," element should have a ",Object(l.mdx)("inlineCode",{parentName:"p"},"style")," declaration.\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"h2")," element should have color set to ",Object(l.mdx)("inlineCode",{parentName:"p"},"red"),".\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"style")," declaration should end with a ",Object(l.mdx)("inlineCode",{parentName:"p"},";")," .")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),'<h2 style="color: red;">CatPhotoApp</h2>\n')),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"2-css-selectors-to-style-elements"},"2. CSS Selectors to Style Elements"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/use-css-selectors-to-style-elements"}),"Learn Basic CSS: Use CSS Selectors to Style Elements | freeCodeCamp.org")),Object(l.mdx)("p",null,"With CSS, there are hundreds of CSS properties that you can use to change the way an element looks on your page.\nWhen you entered ",Object(l.mdx)("inlineCode",{parentName:"p"},'<h2 style="color: red;">CatPhotoApp</h2>'),", you were styling that individual ",Object(l.mdx)("inlineCode",{parentName:"p"},"h2")," element with inline CSS, which stands for Cascading Style Sheets.\nThat's one way to specify the style of an element, but there's a better way to apply CSS.\nAt the top of your code, create a ",Object(l.mdx)("inlineCode",{parentName:"p"},"style")," block like this :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),"<style>\n</style>\n")),Object(l.mdx)("p",null,"Inside that style block, you can create a CSS selector for all ",Object(l.mdx)("inlineCode",{parentName:"p"},"h2")," elements. For example, if you wanted all ",Object(l.mdx)("inlineCode",{parentName:"p"},"h2")," elements to be red, you would add a style rule that looks like this:"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),"<style>\n  h2 {\n    color: red;\n  }\n</style>\n")),Object(l.mdx)("p",null,"Note that it's important to have both opening and closing curly braces (",Object(l.mdx)("inlineCode",{parentName:"p"},"{")," and ",Object(l.mdx)("inlineCode",{parentName:"p"},"}"),") around each element's style rule(s). You also need to make sure that your element's style definition is between the opening and closing style tags. Finally, be sure to add a semicolon to the end of each of your element's style rules."),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"Delete your ",Object(l.mdx)("inlineCode",{parentName:"p"},"h2")," element's style attribute, and instead create a CSS ",Object(l.mdx)("inlineCode",{parentName:"p"},"style")," block. Add the necessary CSS to turn all ",Object(l.mdx)("inlineCode",{parentName:"p"},"h2")," elements blue."),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},"The style attribute should be removed from your ",Object(l.mdx)("inlineCode",{parentName:"p"},"h2")," element.\nYou should create a ",Object(l.mdx)("inlineCode",{parentName:"p"},"style")," element.\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"h2")," element should be blue.\nYour stylesheet ",Object(l.mdx)("inlineCode",{parentName:"p"},"h2")," declaration should be valid with a semicolon and closing brace.\nAll your ",Object(l.mdx)("inlineCode",{parentName:"p"},"style")," elements should be valid and have closing tags.")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),"<style>\n  h2 {\n    color: blue;\n  }\n</style>\n")),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"3-use-a-css-class-to-style-an-element"},"3. Use a CSS Class to Style an Element"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/use-a-css-class-to-style-an-element"}),"Learn Basic CSS: Use a CSS Class to Style an Element | freeCodeCamp.org")),Object(l.mdx)("p",null,"Classes are reusable styles that can be added to HTML elements.\nHere's an example CSS class declaration :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),"<style>\n  .blue-text {\n    color: blue;\n  }\n</style>\n")),Object(l.mdx)("p",null,"You can see that we've created a CSS class called ",Object(l.mdx)("inlineCode",{parentName:"p"},"blue-text")," within the ",Object(l.mdx)("inlineCode",{parentName:"p"},"<style>")," tag. You can apply a class to an HTML element like this : ",Object(l.mdx)("inlineCode",{parentName:"p"},'<h2 class="blue-text">CatPhotoApp</h2>'),". Note that in your CSS ",Object(l.mdx)("inlineCode",{parentName:"p"},"style")," element, class names start with a period. In your HTML elements' class attribute, the class name does not include the period."),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"Inside your ",Object(l.mdx)("inlineCode",{parentName:"p"},"style")," element, change the ",Object(l.mdx)("inlineCode",{parentName:"p"},"h2")," selector to ",Object(l.mdx)("inlineCode",{parentName:"p"},".red-text")," and update the color's value from ",Object(l.mdx)("inlineCode",{parentName:"p"},"blue")," to ",Object(l.mdx)("inlineCode",{parentName:"p"},"red"),".\nGive your ",Object(l.mdx)("inlineCode",{parentName:"p"},"h2")," element the ",Object(l.mdx)("inlineCode",{parentName:"p"},"class")," attribute with a value of ",Object(l.mdx)("inlineCode",{parentName:"p"},"'red-text'"),"."),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},"Your ",Object(l.mdx)("inlineCode",{parentName:"p"},"h2")," element should be red.\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"h2")," element should have the class ",Object(l.mdx)("inlineCode",{parentName:"p"},"red-text"),".\nYour stylesheet should declare a ",Object(l.mdx)("inlineCode",{parentName:"p"},"red-text")," class and have its color set to red.\nYou should not use inline style declarations like ",Object(l.mdx)("inlineCode",{parentName:"p"},'style="color: red"')," in your ",Object(l.mdx)("inlineCode",{parentName:"p"},"h2")," element.")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),'<style>\n  .red-text {\n    color: red;\n  }\n</style>\n<h2 class="red-text">CatPhotoApp</h2>\n')),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"4-style-multiple-elements-with-a-css-class"},"4. Style Multiple Elements with a CSS Class"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/style-multiple-elements-with-a-css-class"}),"Learn Basic CSS: Style Multiple Elements with a CSS Class | freeCodeCamp.org")),Object(l.mdx)("p",null,"Classes allow you to use the same CSS styles on multiple HTML elements. You can see this by applying your ",Object(l.mdx)("inlineCode",{parentName:"p"},"red-text")," class to the first ",Object(l.mdx)("inlineCode",{parentName:"p"},"p")," element."),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},"Your ",Object(l.mdx)("inlineCode",{parentName:"p"},"h2")," element should be red.\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"h2")," element should have the class ",Object(l.mdx)("inlineCode",{parentName:"p"},"red-text"),".\nYour first ",Object(l.mdx)("inlineCode",{parentName:"p"},"p")," element should be red.\nYour second and third ",Object(l.mdx)("inlineCode",{parentName:"p"},"p")," elements should not be red.\nYour first ",Object(l.mdx)("inlineCode",{parentName:"p"},"p")," element should have the class ",Object(l.mdx)("inlineCode",{parentName:"p"},"red-text"),".")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),'<style>\n  .red-text {\n    color: red;\n  }\n</style>\n<h2 class="red-text">CatPhotoApp</h2>\n<main>\n  <p class="red-text">Click here to view more <a href="#">cat photos</a>.</p>\n')),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"5-change-the-font-size-of-an-element"},"5. Change the Font Size of an Element"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/change-the-font-size-of-an-element"}),"Learn Basic CSS: Change the Font Size of an Element | freeCodeCamp.org")),Object(l.mdx)("p",null,"Font size is controlled by the ",Object(l.mdx)("inlineCode",{parentName:"p"},"font-size")," CSS property, like this :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-css"}),"h1 {\n  font-size: 30px;\n}\n")),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"Inside the same ",Object(l.mdx)("inlineCode",{parentName:"p"},"<style>")," tag that contains your ",Object(l.mdx)("inlineCode",{parentName:"p"},"red-text")," class, create an entry for ",Object(l.mdx)("inlineCode",{parentName:"p"},"p")," elements and set the ",Object(l.mdx)("inlineCode",{parentName:"p"},"font-size")," to 16 pixels (",Object(l.mdx)("inlineCode",{parentName:"p"},"16px"),")."),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},"Between the ",Object(l.mdx)("inlineCode",{parentName:"p"},"style")," tags, give the ",Object(l.mdx)("inlineCode",{parentName:"p"},"p")," elements ",Object(l.mdx)("inlineCode",{parentName:"p"},"font-size")," of ",Object(l.mdx)("inlineCode",{parentName:"p"},"16px"),". Browser and Text zoom should be at 100%.")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),"<style>\n  .red-text {\n    color: red;\n  }\n  p {\n    font-size: 16px;\n  }\n</style>\n")),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"6-set-the-font-family-of-an-element"},"6. Set the Font Family of an Element"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/set-the-font-family-of-an-element"}),"Learn Basic CSS: Set the Font Family of an Element | freeCodeCamp.org")),Object(l.mdx)("p",null,"You can set which font an element should use, by using the ",Object(l.mdx)("inlineCode",{parentName:"p"},"font-family")," property.\nFor example, if you wanted to set your ",Object(l.mdx)("inlineCode",{parentName:"p"},"h2")," element's font to ",Object(l.mdx)("inlineCode",{parentName:"p"},"sans-serif"),", you would use the following CSS :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-css"}),"h2 {\n  font-family: sans-serif;\n}\n")),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"Make all of your ",Object(l.mdx)("inlineCode",{parentName:"p"},"p")," elements use the ",Object(l.mdx)("inlineCode",{parentName:"p"},"monospace")," font."),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},"Your ",Object(l.mdx)("inlineCode",{parentName:"p"},"p")," elements should use the font ",Object(l.mdx)("inlineCode",{parentName:"p"},"monospace"),".")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-css"}),"p {\n  font-size: 16px;\n  font-family: monospace;\n}\n")),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"7-import-a-google-font"},"7. Import a Google Font"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/import-a-google-font"}),"Learn Basic CSS: Import a Google Font | freeCodeCamp.org")),Object(l.mdx)("p",null,"In addition to specifying common fonts that are found on most operating systems, we can also specify non-standard, custom web fonts for use on our website. There are many sources for web fonts on the Internet. For this example we will focus on the Google Fonts library."),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://fonts.google.com/"}),"Google Fonts")," is a free library of web fonts that you can use in your CSS by referencing the font's URL."),Object(l.mdx)("p",null,"So, let's go ahead and import and apply a Google font (note that if Google is blocked in your country, you will need to skip this challenge)."),Object(l.mdx)("p",null,"To import a Google Font, you can copy the font(s) URL from the Google Fonts library and then paste it in your HTML. For this challenge, we'll import the ",Object(l.mdx)("inlineCode",{parentName:"p"},"Lobster")," font. To do this, copy the following code snippet and paste it into the top of your code editor (before the opening ",Object(l.mdx)("inlineCode",{parentName:"p"},"style")," element) :"),Object(l.mdx)("p",null,Object(l.mdx)("inlineCode",{parentName:"p"},'<link href="https://fonts.googleapis.com/css?family=Lobster" rel="stylesheet" type="text/css">')),Object(l.mdx)("p",null,"Now you can use the ",Object(l.mdx)("inlineCode",{parentName:"p"},"Lobster")," font in your CSS by using ",Object(l.mdx)("inlineCode",{parentName:"p"},"Lobster")," as the FAMILY_NAME as in the following example :\n",Object(l.mdx)("inlineCode",{parentName:"p"},"font-family: FAMILY_NAME, GENERIC_NAME;"),"."),Object(l.mdx)("p",null,"The GENERIC_NAME is optional, and is a fallback font in case the other specified font is not available. This is covered in the next challenge."),Object(l.mdx)("p",null,"Family names are case-sensitive and need to be wrapped in quotes if there is a space in the name. For example, you need quotes to use the ",Object(l.mdx)("inlineCode",{parentName:"p"},'"Open Sans"')," font, but not to use the ",Object(l.mdx)("inlineCode",{parentName:"p"},"Lobster")," font."),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"Create a ",Object(l.mdx)("inlineCode",{parentName:"p"},"font-family")," CSS rule that uses the ",Object(l.mdx)("inlineCode",{parentName:"p"},"Lobster")," font, and ensure that it will be applied to your ",Object(l.mdx)("inlineCode",{parentName:"p"},"h2")," element."),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},"You should import the ",Object(l.mdx)("inlineCode",{parentName:"p"},"Lobster")," font.\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"h2")," element should use the font ",Object(l.mdx)("inlineCode",{parentName:"p"},"Lobster"),".\nYou should use an ",Object(l.mdx)("inlineCode",{parentName:"p"},"h2")," CSS selector to change the font.\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"p")," element should still use the font ",Object(l.mdx)("inlineCode",{parentName:"p"},"monospace"),".")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),'<link href="https://fonts.googleapis.com/css?family=Lobster" rel="stylesheet" type="text/css">\n<style>\n  h2 {\n    font-family: Lobster, GENERIC_NAME;\n  }\n  .red-text {\n    color: red;\n  }\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n</style>\n')),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"8-specify-how-fonts-should-degrade"},"8. Specify How Fonts Should Degrade"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/specify-how-fonts-should-degrade"}),"Learn Basic CSS: Specify How Fonts Should Degrade | freeCodeCamp.org")),Object(l.mdx)("p",null,"There are several default fonts that are available in all browsers. These generic font families include ",Object(l.mdx)("inlineCode",{parentName:"p"},"monospace"),", ",Object(l.mdx)("inlineCode",{parentName:"p"},"serif")," and ",Object(l.mdx)("inlineCode",{parentName:"p"},"sans-serif"),'.\nWhen one font isn\'t available, you can tell the browser to "degrade" to another font.\nFor example, if you wanted an element to use the ',Object(l.mdx)("inlineCode",{parentName:"p"},"Helvetica")," font, but degrade to the ",Object(l.mdx)("inlineCode",{parentName:"p"},"sans-serif")," font when ",Object(l.mdx)("inlineCode",{parentName:"p"},"Helvetica")," isn't available, you will specify it as follows :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-css"}),"p {\n  font-family: Helvetica, sans-serif;\n}\n")),Object(l.mdx)("p",null,"Generic font family names are not case-sensitive. Also, they do not need quotes because they are CSS keywords."),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"To begin, apply the ",Object(l.mdx)("inlineCode",{parentName:"p"},"monospace")," font to the ",Object(l.mdx)("inlineCode",{parentName:"p"},"h2")," element, so that it now has two fonts - ",Object(l.mdx)("inlineCode",{parentName:"p"},"Lobster")," and ",Object(l.mdx)("inlineCode",{parentName:"p"},"monospace"),".\nIn the last challenge, you imported the ",Object(l.mdx)("inlineCode",{parentName:"p"},"Lobster")," font using the ",Object(l.mdx)("inlineCode",{parentName:"p"},"link")," tag. Now comment out that import of the ",Object(l.mdx)("inlineCode",{parentName:"p"},"Lobster")," font (using the HTML comments you learned before) from Google Fonts so that it isn't available anymore. Notice how your ",Object(l.mdx)("inlineCode",{parentName:"p"},"h2")," element degrades to the ",Object(l.mdx)("inlineCode",{parentName:"p"},"monospace")," font.\n",Object(l.mdx)("strong",{parentName:"p"},"Note :")," If you have the Lobster font installed on your computer, you won't see the degradation because your browser is able to find the font."),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},"Your ",Object(l.mdx)("inlineCode",{parentName:"p"},"h2")," element should use the font ",Object(l.mdx)("inlineCode",{parentName:"p"},"Lobster"),".\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"h2")," element should degrade to the font ",Object(l.mdx)("inlineCode",{parentName:"p"},"monospace")," when ",Object(l.mdx)("inlineCode",{parentName:"p"},"Lobster")," is not available.\nYou should comment out your call to Google for the ",Object(l.mdx)("inlineCode",{parentName:"p"},"Lobster")," font by putting ",Object(l.mdx)("inlineCode",{parentName:"p"},"\x3c!--")," in front of it.\nYou should close your comment by adding ",Object(l.mdx)("inlineCode",{parentName:"p"},"--\x3e"),".")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),'\x3c!-- <link href="https://fonts.googleapis.com/css?family=Lobster" rel="stylesheet" type="text/css"> --\x3e\n<style>\n  .red-text {\n    color: red;\n  }\n  h2 {\n    font-family: Lobster, monospace;\n  }\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n</style>\n')),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"9-size-your-images"},"9. Size Your Images"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/size-your-images"}),"Learn Basic CSS: Size Your Images | freeCodeCamp.org")),Object(l.mdx)("p",null,"CSS has a property called ",Object(l.mdx)("inlineCode",{parentName:"p"},"width")," that controls an element's width. Just like with fonts, we'll use ",Object(l.mdx)("inlineCode",{parentName:"p"},"px")," (pixels) to specify the image's width.\nFor example, if we wanted to create a CSS class called ",Object(l.mdx)("inlineCode",{parentName:"p"},"larger-image")," that gave HTML elements a width of 500 pixels, we'd use :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),"<style>\n  .larger-image {\n    width: 500px;\n  }\n</style>\n")),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"Create a class called ",Object(l.mdx)("inlineCode",{parentName:"p"},"smaller-image")," and use it to resize the image so that it's only 100 pixels wide.\n",Object(l.mdx)("strong",{parentName:"p"},"Note :")," Due to browser implementation differences, you may need to be at 100% zoom to pass the tests on this challenge."),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},"Your ",Object(l.mdx)("inlineCode",{parentName:"p"},"img")," element should have the class ",Object(l.mdx)("inlineCode",{parentName:"p"},"smaller-image"),".\nYour image should be 100 pixels wide. Browser zoom should be at 100%.")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),'<link href="https://fonts.googleapis.com/css?family=Lobster" rel="stylesheet" type="text/css">\n<style>\n  .red-text {\n    color: red;\n  }\n  h2 {\n    font-family: Lobster, monospace;\n  }\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n<h2 class="red-text">CatPhotoApp</h2>\n<main>\n  <p class="red-text">Click here to view more <a href="#">cat photos</a>.</p>\n  <a href="#"><img class="smaller-image" src="https://bit.ly/fcc-relaxing-cat" alt="A cute orange cat lying on its back."></a>\n')),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"10-add-borders-around-your-elements"},"10. Add Borders Around Your Elements"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/add-borders-around-your-elements"}),"Learn Basic CSS: Add Borders Around Your Elements | freeCodeCamp.org")),Object(l.mdx)("p",null,"CSS borders have properties like ",Object(l.mdx)("inlineCode",{parentName:"p"},"style"),", ",Object(l.mdx)("inlineCode",{parentName:"p"},"color")," and ",Object(l.mdx)("inlineCode",{parentName:"p"},"width"),".\nFor example, if we wanted to create a red, 5 pixel border around an HTML element, we could use this class :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),"<style>\n  .thin-red-border {\n    border-color: red;\n    border-width: 5px;\n    border-style: solid;\n  }\n</style>\n")),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"Create a class called ",Object(l.mdx)("inlineCode",{parentName:"p"},"thick-green-border"),". This class should add a 10px, solid, green border around an HTML element. Apply the class to your cat photo.\nRemember that you can apply multiple classes to an element using its ",Object(l.mdx)("inlineCode",{parentName:"p"},"class")," attribute, by separating each class name with a space. For example : ",Object(l.mdx)("inlineCode",{parentName:"p"},'<img class="class1 class2">'),"."),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},"Your ",Object(l.mdx)("inlineCode",{parentName:"p"},"img")," element should have the class ",Object(l.mdx)("inlineCode",{parentName:"p"},"smaller-image"),".\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"img")," element should have the class ",Object(l.mdx)("inlineCode",{parentName:"p"},"thick-green-border"),".\nYour image should have a border width of ",Object(l.mdx)("inlineCode",{parentName:"p"},"10px"),".\nYour image should have a border style of ",Object(l.mdx)("inlineCode",{parentName:"p"},"solid"),".\nThe border around your ",Object(l.mdx)("inlineCode",{parentName:"p"},"img")," element should be green.")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),'<link href="https://fonts.googleapis.com/css?family=Lobster" rel="stylesheet" type="text/css">\n<style>\n  .red-text {\n    color: red;\n  }\n  h2 {\n    font-family: Lobster, monospace;\n  }\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n  .smaller-image {\n    width: 100px;\n  }\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n  }\n</style>\n<h2 class="red-text">CatPhotoApp</h2>\n<main>\n  <p class="red-text">Click here to view more <a href="#">cat photos</a>.</p>\n  <a href="#"><img class="smaller-image thick-green-border" src="https://bit.ly/fcc-relaxing-cat" alt="A cute orange cat lying on its back."></a>\n')),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"11-add-rounded-corners-with-border-radius"},"11. Add Rounded Corners with border-radius"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/add-rounded-corners-with-border-radius"}),"Learn Basic CSS: Add Rounded Corners with border-radius | freeCodeCamp.org")),Object(l.mdx)("p",null,"Your cat photo currently has sharp corners. We can round out those corners with a CSS property called ",Object(l.mdx)("inlineCode",{parentName:"p"},"border-radius"),"."),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"You can specify a ",Object(l.mdx)("inlineCode",{parentName:"p"},"border-radius")," with pixels. Give your cat photo a ",Object(l.mdx)("inlineCode",{parentName:"p"},"border-radius")," of ",Object(l.mdx)("inlineCode",{parentName:"p"},"10px"),".\n",Object(l.mdx)("strong",{parentName:"p"},"Note :")," This challenge allows for multiple possible solutions. For example, you may add ",Object(l.mdx)("inlineCode",{parentName:"p"},"border-radius")," to either the ",Object(l.mdx)("inlineCode",{parentName:"p"},".thick-green-border")," class or the ",Object(l.mdx)("inlineCode",{parentName:"p"},".smaller-image")," class."),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},'Your image element should have the class "thick-green-border".\nYour image should have a border radius of ',Object(l.mdx)("inlineCode",{parentName:"p"},"10px"),".")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),'<link href="https://fonts.googleapis.com/css?family=Lobster" rel="stylesheet" type="text/css">\n<style>\n  .red-text {\n    color: red;\n  }\n  h2 {\n    font-family: Lobster, monospace;\n  }\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 10px;\n  }\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n')),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"12-make-circular-images-with-a-border-radius"},"12. Make Circular Images with a border-radius"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/make-circular-images-with-a-border-radius"}),"Learn Basic CSS: Make Circular Images with a border-radius | freeCodeCamp.org")),Object(l.mdx)("p",null,"In addition to pixels, you can also specify the ",Object(l.mdx)("inlineCode",{parentName:"p"},"border-radius")," using a percentage."),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"Give your cat photo a ",Object(l.mdx)("inlineCode",{parentName:"p"},"border-radius")," of ",Object(l.mdx)("inlineCode",{parentName:"p"},"50%"),"."),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},"Your image should have a border radius of ",Object(l.mdx)("inlineCode",{parentName:"p"},"50%"),", making it perfectly circular.\nThe ",Object(l.mdx)("inlineCode",{parentName:"p"},"border-radius")," value should use a percentage value of ",Object(l.mdx)("inlineCode",{parentName:"p"},"50%"),".")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),'<link href="https://fonts.googleapis.com/css?family=Lobster" rel="stylesheet" type="text/css">\n<style>\n  .red-text {\n    color: red;\n  }\n  h2 {\n    font-family: Lobster, monospace;\n  }\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n  .smaller-image {\n    width: 100px;\n  }\n</style>\n')),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"13-give-a-background-color-to-a-div-element"},"13. Give a Background Color to a div Element"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/give-a-background-color-to-a-div-element"}),"Learn Basic CSS: Give a Background Color to a div Element | freeCodeCamp.org")),Object(l.mdx)("p",null,"You can set an element's background color with the ",Object(l.mdx)("inlineCode",{parentName:"p"},"background-color")," property.\nFor example, if you wanted an element's background color to be ",Object(l.mdx)("inlineCode",{parentName:"p"},"green"),", you'd put this within your ",Object(l.mdx)("inlineCode",{parentName:"p"},"style")," element :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-css"}),".green-background {\n  background-color: green;\n}\n")),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"Create a class called ",Object(l.mdx)("inlineCode",{parentName:"p"},"silver-background")," with the ",Object(l.mdx)("inlineCode",{parentName:"p"},"background-color")," of silver. Assign this class to your ",Object(l.mdx)("inlineCode",{parentName:"p"},"div")," element."),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},"Your",Object(l.mdx)("inlineCode",{parentName:"p"},"div")," element should have the class ",Object(l.mdx)("inlineCode",{parentName:"p"},"silver-background"),".\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"div")," element should have a silver background.\nA class named ",Object(l.mdx)("inlineCode",{parentName:"p"},"silver-background")," should be defined within the ",Object(l.mdx)("inlineCode",{parentName:"p"},"style")," element and the value of ",Object(l.mdx)("inlineCode",{parentName:"p"},"silver")," should be assigned to he ",Object(l.mdx)("inlineCode",{parentName:"p"},"background-color")," property.")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),'<link href="https://fonts.googleapis.com/css?family=Lobster" rel="stylesheet" type="text/css">\n<style>\n  .red-text {\n    color: red;\n  }\n  h2 {\n    font-family: Lobster, monospace;\n  }\n  p {\n    font-size: 16px;\n    font-family: monospace;\n  }\n  .thick-green-border {\n    border-color: green;\n    border-width: 10px;\n    border-style: solid;\n    border-radius: 50%;\n  }\n  .smaller-image {\n    width: 100px;\n  }\n  .silver-background {\n    background-color: silver;\n  }\n</style>\n<h2 class="red-text">CatPhotoApp</h2>\n<main>\n  <p class="red-text">Click here to view more <a href="#">cat photos</a>.</p>\n  <a href="#"><img class="smaller-image thick-green-border" src="https://bit.ly/fcc-relaxing-cat" alt="A cute orange cat lying on its back."></a>\n  <div class="silver-background">\n    <p>Things cats love:</p>\n    <ul>\n      <li>cat nip</li>\n      <li>laser pointers</li>\n      <li>lasagna</li>\n    </ul>\n    <p>Top 3 things cats hate:</p>\n    <ol>\n      <li>flea treatment</li>\n      <li>thunder</li>\n      <li>other cats</li>\n    </ol>\n  </div>\n')),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"14-set-the-id-of-an-element"},"14. Set the id of an Element"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/set-the-id-of-an-element"}),"Learn Basic CSS: Set the id of an Element | freeCodeCamp.org")),Object(l.mdx)("p",null,"In addition to classes, each HTML element can also have an ",Object(l.mdx)("inlineCode",{parentName:"p"},"id")," attribute.\nThere are several benefits to using ",Object(l.mdx)("inlineCode",{parentName:"p"},"id")," attributes : You can use an ",Object(l.mdx)("inlineCode",{parentName:"p"},"id")," to style a single element and later you'll learn that you can use them to select and modify specific elements with JavaScript.\n",Object(l.mdx)("inlineCode",{parentName:"p"},"id")," attributes should be unique. Browsers won't enforce this, but it is a widely agreed upon best practice. So please don't give more than one element the same ",Object(l.mdx)("inlineCode",{parentName:"p"},"id")," attribute.\nHere's an example of how you give your ",Object(l.mdx)("inlineCode",{parentName:"p"},"h2")," element the id of ",Object(l.mdx)("inlineCode",{parentName:"p"},"cat-photo-app"),":"),Object(l.mdx)("p",null,Object(l.mdx)("inlineCode",{parentName:"p"},'<h2 id="cat-photo-app">')),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"Give your ",Object(l.mdx)("inlineCode",{parentName:"p"},"form")," element the id ",Object(l.mdx)("inlineCode",{parentName:"p"},"cat-photo-form"),"."),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},"Your ",Object(l.mdx)("inlineCode",{parentName:"p"},"form")," element should have the id of ",Object(l.mdx)("inlineCode",{parentName:"p"},"cat-photo-form"),".")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),'<form action="https://freecatphotoapp.com/submit-cat-photo" id="cat-photo-form">\n')),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"15-use-an-id-attribute-to-style-an-element"},"15. Use an id Attribute to Style an Element"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/use-an-id-attribute-to-style-an-element"}),"Learn Basic CSS: Use an id Attribute to Style an Element | freeCodeCamp.org")),Object(l.mdx)("p",null,"One cool thing about ",Object(l.mdx)("inlineCode",{parentName:"p"},"id")," attributes is that, like classes, you can style them using CSS.\nHowever, an ",Object(l.mdx)("inlineCode",{parentName:"p"},"id")," is not reusable and should only be applied to one element. An ",Object(l.mdx)("inlineCode",{parentName:"p"},"id")," also has a higher specificity (importance) than a class so if both are applied to the same element and have conflicting styles, the styles of the ",Object(l.mdx)("inlineCode",{parentName:"p"},"id")," will be applied.\nHere's an example of how you can take your element with the ",Object(l.mdx)("inlineCode",{parentName:"p"},"id")," attribute of ",Object(l.mdx)("inlineCode",{parentName:"p"},"cat-photo-element")," and give it the background color of green. In your ",Object(l.mdx)("inlineCode",{parentName:"p"},"style")," element :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-css"}),"#cat-photo-element {\n  background-color: green;\n}\n")),Object(l.mdx)("p",null,"Note that inside your ",Object(l.mdx)("inlineCode",{parentName:"p"},"style")," element, you always reference classes by putting a ",Object(l.mdx)("inlineCode",{parentName:"p"},".")," in front of their names. You always reference ids by putting a ",Object(l.mdx)("inlineCode",{parentName:"p"},"#")," in front of their names."),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"Try giving your form, which now has the ",Object(l.mdx)("inlineCode",{parentName:"p"},"id")," attribute of ",Object(l.mdx)("inlineCode",{parentName:"p"},"cat-photo-form"),", a green background."),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},"Your ",Object(l.mdx)("inlineCode",{parentName:"p"},"form")," element should have the id of ",Object(l.mdx)("inlineCode",{parentName:"p"},"cat-photo-form"),".\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"form")," element should have the ",Object(l.mdx)("inlineCode",{parentName:"p"},"background-color")," of green.\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"form")," element should have an ",Object(l.mdx)("inlineCode",{parentName:"p"},"id")," attribute.\nYou should not give your ",Object(l.mdx)("inlineCode",{parentName:"p"},"form")," any ",Object(l.mdx)("inlineCode",{parentName:"p"},"class")," or ",Object(l.mdx)("inlineCode",{parentName:"p"},"style")," attributes.")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-css"}),"#cat-photo-form {\n  background-color: green;\n}\n")),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"16-adjust-the-padding-of-an-element"},"16. Adjust the Padding of an Element"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/adjust-the-padding-of-an-element"}),"Learn Basic CSS: Adjust the Padding of an Element | freeCodeCamp.org")),Object(l.mdx)("p",null,"Now let's put our Cat Photo App away for a little while and learn more about styling HTML.\nYou may have already noticed this, but all HTML elements are essentially little rectangles.\nThree important properties control the space that surrounds each HTML element : ",Object(l.mdx)("inlineCode",{parentName:"p"},"padding"),", ",Object(l.mdx)("inlineCode",{parentName:"p"},"margin"),", and ",Object(l.mdx)("inlineCode",{parentName:"p"},"border"),".\nAn element's ",Object(l.mdx)("inlineCode",{parentName:"p"},"padding")," controls the amount of space between the element's content and its ",Object(l.mdx)("inlineCode",{parentName:"p"},"border"),".\nHere, we can see that the blue box and the red box are nested within the yellow box. Note that the red box has more ",Object(l.mdx)("inlineCode",{parentName:"p"},"padding")," than the blue box.\nWhen you increase the blue box's ",Object(l.mdx)("inlineCode",{parentName:"p"},"padding"),", it will increase the distance (",Object(l.mdx)("inlineCode",{parentName:"p"},"padding"),") between the text and the border around it."),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"Change the ",Object(l.mdx)("inlineCode",{parentName:"p"},"padding")," of your blue box to match that of your red box."),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),'<style>\n  .injected-text {\n    margin-bottom: -25px;\n    text-align: center;\n  }\n  .box {\n    border-style: solid;\n    border-color: black;\n    border-width: 5px;\n    text-align: center;\n  }\n  .yellow-box {\n    background-color: yellow;\n    padding: 10px;\n  }\n  .red-box {\n    background-color: crimson;\n    color: #fff;\n    padding: 20px;\n  }\n  .blue-box {\n    background-color: blue;\n    color: #fff;\n    padding: 10px;\n  }\n</style>\n<h5 class="injected-text">margin</h5>\n<div class="box yellow-box">\n  <h5 class="box red-box">padding</h5>\n  <h5 class="box blue-box">padding</h5>\n</div>\n')),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},"Your ",Object(l.mdx)("inlineCode",{parentName:"p"},"blue-box")," class should give elements ",Object(l.mdx)("inlineCode",{parentName:"p"},"20px")," of ",Object(l.mdx)("inlineCode",{parentName:"p"},"padding"),".")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-css"}),".blue-box {\n  background-color: blue;\n  color: #fff;\n  padding: 20px;\n}\n")),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"17-adjust-the-margin-of-an-element"},"17. Adjust the Margin of an Element"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/adjust-the-margin-of-an-element"}),"Learn Basic CSS: Adjust the Margin of an Element | freeCodeCamp.org")),Object(l.mdx)("p",null,"An element's ",Object(l.mdx)("inlineCode",{parentName:"p"},"margin")," controls the amount of space between an element's ",Object(l.mdx)("inlineCode",{parentName:"p"},"border")," and surrounding elements.\nHere, we can see that the blue box and the red box are nested within the yellow box. Note that the red box has a bigger ",Object(l.mdx)("inlineCode",{parentName:"p"},"margin")," than the blue box, making it appear smaller.\nWhen you increase the blue box's ",Object(l.mdx)("inlineCode",{parentName:"p"},"margin"),", it will increase the distance between its border and surrounding elements."),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"Change the ",Object(l.mdx)("inlineCode",{parentName:"p"},"margin")," of the blue box to match that of the red box."),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},"Your ",Object(l.mdx)("inlineCode",{parentName:"p"},"blue-box")," class should give elements ",Object(l.mdx)("inlineCode",{parentName:"p"},"20px")," of ",Object(l.mdx)("inlineCode",{parentName:"p"},"margin"),".")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-css"}),".blue-box {\n  background-color: blue;\n  color: #fff;\n  padding: 20px;\n  margin: 20px;\n}\n")),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"18-add-a-negative-margin-to-an-element"},"18. Add a Negative Margin to an Element"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/add-a-negative-margin-to-an-element"}),"Learn Basic CSS: Add a Negative Margin to an Element | freeCodeCamp.org")),Object(l.mdx)("p",null,"An element's ",Object(l.mdx)("inlineCode",{parentName:"p"},"margin")," controls the amount of space between an element's ",Object(l.mdx)("inlineCode",{parentName:"p"},"border")," and surrounding elements.\nIf you set an element's ",Object(l.mdx)("inlineCode",{parentName:"p"},"margin")," to a negative value, the element will grow larger."),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"Try to set the ",Object(l.mdx)("inlineCode",{parentName:"p"},"margin")," to a negative value like the one for the red box.\nChange the ",Object(l.mdx)("inlineCode",{parentName:"p"},"margin")," of the blue box to ",Object(l.mdx)("inlineCode",{parentName:"p"},"-15px"),", so it fills the entire horizontal width of the yellow box around it."),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},"Your ",Object(l.mdx)("inlineCode",{parentName:"p"},"blue-box")," class should give elements ",Object(l.mdx)("inlineCode",{parentName:"p"},"-15px")," of ",Object(l.mdx)("inlineCode",{parentName:"p"},"margin"),".")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-css"}),".blue-box {\n  background-color: blue;\n  color: #fff;\n  padding: 20px;\n  margin: -15px;\n}\n")),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"19-add-different-padding-to-each-side-of-an-element"},"19. Add Different Padding to Each Side of an Element"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/add-different-padding-to-each-side-of-an-element"}),"Learn Basic CSS: Add Different Padding to Each Side of an Element | freeCodeCamp.org")),Object(l.mdx)("p",null,"Sometimes you will want to customize an element so that it has different amounts of ",Object(l.mdx)("inlineCode",{parentName:"p"},"padding")," on each of its sides.\nCSS allows you to control the ",Object(l.mdx)("inlineCode",{parentName:"p"},"padding")," of all four individual sides of an element with the ",Object(l.mdx)("inlineCode",{parentName:"p"},"padding-top"),", ",Object(l.mdx)("inlineCode",{parentName:"p"},"padding-right"),", ",Object(l.mdx)("inlineCode",{parentName:"p"},"padding-bottom"),", and ",Object(l.mdx)("inlineCode",{parentName:"p"},"padding-left")," properties."),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"Give the ",Object(l.mdx)("inlineCode",{parentName:"p"},"blue-box")," a ",Object(l.mdx)("inlineCode",{parentName:"p"},"padding")," of ",Object(l.mdx)("inlineCode",{parentName:"p"},"40px")," on its top and left side, but only ",Object(l.mdx)("inlineCode",{parentName:"p"},"20px")," on its bottom and right side."),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},"Your ",Object(l.mdx)("inlineCode",{parentName:"p"},"blue-box")," class should give the top of the elements ",Object(l.mdx)("inlineCode",{parentName:"p"},"40px")," of ",Object(l.mdx)("inlineCode",{parentName:"p"},"padding"),".\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"blue-box")," class should give the right of the elements ",Object(l.mdx)("inlineCode",{parentName:"p"},"20px")," of ",Object(l.mdx)("inlineCode",{parentName:"p"},"padding"),".\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"blue-box")," class should give the bottom of the elements ",Object(l.mdx)("inlineCode",{parentName:"p"},"20px")," of ",Object(l.mdx)("inlineCode",{parentName:"p"},"padding"),".\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"blue-box")," class should give the left of the elements ",Object(l.mdx)("inlineCode",{parentName:"p"},"40px")," of ",Object(l.mdx)("inlineCode",{parentName:"p"},"padding"),".")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-css"}),".blue-box {\n  background-color: blue;\n  color: #fff;\n  padding-top: 40px;\n  padding-right: 20px;\n  padding-bottom: 20px;\n  padding-left: 40px;\n}\n")),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"20-add-different-margins-to-each-side-of-an-element"},"20. Add Different Margins to Each Side of an Element"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/add-different-margins-to-each-side-of-an-element"}),"Learn Basic CSS: Add Different Margins to Each Side of an Element | freeCodeCamp.org")),Object(l.mdx)("p",null,"Sometimes you will want to customize an element so that it has a different ",Object(l.mdx)("inlineCode",{parentName:"p"},"margin")," on each of its sides.\nCSS allows you to control the ",Object(l.mdx)("inlineCode",{parentName:"p"},"margin")," of all four individual sides of an element with the ",Object(l.mdx)("inlineCode",{parentName:"p"},"margin-top"),", ",Object(l.mdx)("inlineCode",{parentName:"p"},"margin-right"),", ",Object(l.mdx)("inlineCode",{parentName:"p"},"margin-bottom"),", and ",Object(l.mdx)("inlineCode",{parentName:"p"},"margin-left")," properties."),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"Give the blue box a ",Object(l.mdx)("inlineCode",{parentName:"p"},"margin")," of ",Object(l.mdx)("inlineCode",{parentName:"p"},"40px")," on its top and left side, but only ",Object(l.mdx)("inlineCode",{parentName:"p"},"20px")," on its bottom and right side."),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},"Your ",Object(l.mdx)("inlineCode",{parentName:"p"},"blue-box")," class should give the top of elements ",Object(l.mdx)("inlineCode",{parentName:"p"},"40px")," of ",Object(l.mdx)("inlineCode",{parentName:"p"},"margin"),".\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"blue-box")," class should give the right of elements ",Object(l.mdx)("inlineCode",{parentName:"p"},"20px")," of ",Object(l.mdx)("inlineCode",{parentName:"p"},"margin"),".\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"blue-box")," class should give the bottom of elements ",Object(l.mdx)("inlineCode",{parentName:"p"},"20px")," of ",Object(l.mdx)("inlineCode",{parentName:"p"},"margin"),".\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"blue-box")," class should give the left of elements ",Object(l.mdx)("inlineCode",{parentName:"p"},"40px")," of ",Object(l.mdx)("inlineCode",{parentName:"p"},"margin"),".")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-css"}),".blue-box {\n  background-color: blue;\n  color: #fff;\n  margin-top: 40px;\n  margin-right: 20px;\n  margin-bottom: 20px;\n  margin-left: 40px;\n}\n")),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"21-use-clockwise-notation-to-specify-the-padding-of-an-element"},"21. Use Clockwise Notation to Specify the Padding of an Element"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/use-clockwise-notation-to-specify-the-padding-of-an-element"}),"Learn Basic CSS: Use Clockwise Notation to Specify the Padding of an Element | freeCodeCamp.org")),Object(l.mdx)("p",null,"Instead of specifying an element's ",Object(l.mdx)("inlineCode",{parentName:"p"},"padding-top"),", ",Object(l.mdx)("inlineCode",{parentName:"p"},"padding-right"),", ",Object(l.mdx)("inlineCode",{parentName:"p"},"padding-bottom"),", and ",Object(l.mdx)("inlineCode",{parentName:"p"},"padding-left")," properties individually, you can specify them all in one line, like this :"),Object(l.mdx)("p",null,Object(l.mdx)("inlineCode",{parentName:"p"},"padding: 10px 20px 10px 20px;")),Object(l.mdx)("p",null,"These four values work like a clock : top, right, bottom, left, and will produce the exact same result as using the side-specific padding instructions."),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,'Use Clockwise Notation to give the ".blue-box" class a ',Object(l.mdx)("inlineCode",{parentName:"p"},"padding")," of ",Object(l.mdx)("inlineCode",{parentName:"p"},"40px")," on its top and left side, but only ",Object(l.mdx)("inlineCode",{parentName:"p"},"20px")," on its bottom and right side."),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},"Your ",Object(l.mdx)("inlineCode",{parentName:"p"},"blue-box")," class should give the top of elements ",Object(l.mdx)("inlineCode",{parentName:"p"},"40px")," of ",Object(l.mdx)("inlineCode",{parentName:"p"},"padding"),".\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"blue-box")," class should give the right of elements ",Object(l.mdx)("inlineCode",{parentName:"p"},"20px")," of ",Object(l.mdx)("inlineCode",{parentName:"p"},"padding"),".\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"blue-box")," class should give the bottom of elements ",Object(l.mdx)("inlineCode",{parentName:"p"},"20px")," of ",Object(l.mdx)("inlineCode",{parentName:"p"},"padding"),".\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"blue-box")," class should give the left of elements ",Object(l.mdx)("inlineCode",{parentName:"p"},"40px")," of ",Object(l.mdx)("inlineCode",{parentName:"p"},"padding"),".\nYou should use the clockwise notation to set the padding of ",Object(l.mdx)("inlineCode",{parentName:"p"},"blue-box")," class.")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-css"}),".blue-box {\n  background-color: blue;\n  color: #fff;\n  padding: 40px 20px 20px 40px;\n}\n")),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"22-use-clockwise-notation-to-specify-the-margin-of-an-element"},"22. Use Clockwise Notation to Specify the Margin of an Element"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/use-clockwise-notation-to-specify-the-margin-of-an-element"}),"Learn Basic CSS: Use Clockwise Notation to Specify the Margin of an Element | freeCodeCamp.org")),Object(l.mdx)("p",null,"Let's try this again, but with ",Object(l.mdx)("inlineCode",{parentName:"p"},"margin")," this time.\nInstead of specifying an element's ",Object(l.mdx)("inlineCode",{parentName:"p"},"margin-top"),", ",Object(l.mdx)("inlineCode",{parentName:"p"},"margin-right"),", ",Object(l.mdx)("inlineCode",{parentName:"p"},"margin-bottom"),", and ",Object(l.mdx)("inlineCode",{parentName:"p"},"margin-left")," properties individually, you can specify them all in one line, like this :"),Object(l.mdx)("p",null,Object(l.mdx)("inlineCode",{parentName:"p"},"margin: 10px 20px 10px 20px;")),Object(l.mdx)("p",null,"These four values work like a clock : top, right, bottom, left, and will produce the exact same result as using the side-specific margin instructions."),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"Use Clockwise Notation to give the element with the ",Object(l.mdx)("inlineCode",{parentName:"p"},"blue-box")," class a ",Object(l.mdx)("inlineCode",{parentName:"p"},"margin")," of ",Object(l.mdx)("inlineCode",{parentName:"p"},"40px")," on its top and left side, but only ",Object(l.mdx)("inlineCode",{parentName:"p"},"20px")," on its bottom and right side."),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},"Your ",Object(l.mdx)("inlineCode",{parentName:"p"},"blue-box")," class should give the top of elements ",Object(l.mdx)("inlineCode",{parentName:"p"},"40px")," of ",Object(l.mdx)("inlineCode",{parentName:"p"},"margin"),".\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"blue-box")," class should give the right of elements ",Object(l.mdx)("inlineCode",{parentName:"p"},"20px")," of ",Object(l.mdx)("inlineCode",{parentName:"p"},"margin"),".\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"blue-box")," class should give the bottom of elements ",Object(l.mdx)("inlineCode",{parentName:"p"},"20px")," of ",Object(l.mdx)("inlineCode",{parentName:"p"},"margin"),".\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"blue-box")," class should give the left of elements ",Object(l.mdx)("inlineCode",{parentName:"p"},"40px")," of ",Object(l.mdx)("inlineCode",{parentName:"p"},"margin"),".\nYou should use the clockwise notation to set the margin of ",Object(l.mdx)("inlineCode",{parentName:"p"},"blue-box")," class.")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-css"}),".blue-box {\n  background-color: blue;\n  color: #fff;\n  margin: 40px 20px 20px 40px;\n}\n")),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"23-use-attribute-selectors-to-style-elements"},"23. Use Attribute Selectors to Style Elements"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/use-attribute-selectors-to-style-elements"}),"Learn Basic CSS: Use Attribute Selectors to Style Elements | freeCodeCamp.org")),Object(l.mdx)("p",null,"You have been adding ",Object(l.mdx)("inlineCode",{parentName:"p"},"id")," or ",Object(l.mdx)("inlineCode",{parentName:"p"},"class")," attributes to elements that you wish to specifically style. These are known as ID and class selectors. There are other CSS Selectors you can use to select custom groups of elements to style.\nLet's bring out CatPhotoApp again to practice using CSS Selectors.\nFor this challenge, you will use the ",Object(l.mdx)("inlineCode",{parentName:"p"},"[attr=value]")," attribute selector to style the checkboxes in CatPhotoApp. This selector matches and styles elements with a specific attribute value. For example, the below code changes the margins of all elements with the attribute ",Object(l.mdx)("inlineCode",{parentName:"p"},"type")," and a corresponding value of ",Object(l.mdx)("inlineCode",{parentName:"p"},"radio")," :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-css"}),"[type='radio'] {\n  margin: 20px 0px 20px 0px;\n}\n")),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"Using the ",Object(l.mdx)("inlineCode",{parentName:"p"},"type")," attribute selector, try to give the checkboxes in CatPhotoApp a top margin of 10px and a bottom margin of 15px."),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},"The ",Object(l.mdx)("inlineCode",{parentName:"p"},"type")," attribute selector should be used to select the checkboxes.\nThe top margins of the checkboxes should be 10px.\nThe bottom margins of the checkboxes should be 15px.")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-css"}),"[type='checkbox'] {\n  margin: 10px 0px 15px 0px;\n}\n")),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"24-understand-absolute-versus-relative-units"},"24. Understand Absolute versus Relative Units"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/understand-absolute-versus-relative-units"}),"Learn Basic CSS: Understand Absolute versus Relative Units | freeCodeCamp.org")),Object(l.mdx)("p",null,"The last several challenges all set an element's margin or padding with pixels (",Object(l.mdx)("inlineCode",{parentName:"p"},"px"),"). Pixels are a type of length unit, which is what tells the browser how to size or space an item. In addition to ",Object(l.mdx)("inlineCode",{parentName:"p"},"px"),", CSS has a number of different length unit options that you can use."),Object(l.mdx)("p",null,"The two main types of length units are absolute and relative. Absolute units tie to physical units of length. For example, ",Object(l.mdx)("inlineCode",{parentName:"p"},"in")," and ",Object(l.mdx)("inlineCode",{parentName:"p"},"mm")," refer to inches and millimeters, respectively. Absolute length units approximate the actual measurement on a screen, but there are some differences depending on a screen's resolution."),Object(l.mdx)("p",null,"Relative units, such as ",Object(l.mdx)("inlineCode",{parentName:"p"},"em")," or ",Object(l.mdx)("inlineCode",{parentName:"p"},"rem"),", are relative to another length value. For example, ",Object(l.mdx)("inlineCode",{parentName:"p"},"em")," is based on the size of an element's font. If you use it to set the ",Object(l.mdx)("inlineCode",{parentName:"p"},"font-size")," property itself, it's relative to the parent's ",Object(l.mdx)("inlineCode",{parentName:"p"},"font-size"),"."),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"Note :")," There are several relative unit options that are tied to the size of the viewport. They are covered in the Responsive Web Design Principles section."),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"Add a ",Object(l.mdx)("inlineCode",{parentName:"p"},"padding")," property to the element with class ",Object(l.mdx)("inlineCode",{parentName:"p"},"red-box")," and set it to ",Object(l.mdx)("inlineCode",{parentName:"p"},"1.5em"),"."),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},"Your ",Object(l.mdx)("inlineCode",{parentName:"p"},"red-box")," class should have a ",Object(l.mdx)("inlineCode",{parentName:"p"},"padding")," property.\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"red-box")," class should give elements ",Object(l.mdx)("inlineCode",{parentName:"p"},"1.5em")," of ",Object(l.mdx)("inlineCode",{parentName:"p"},"padding"),".")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-css"}),".red-box {\n  background-color: red;\n  margin: 20px 40px 20px 40px;\n  padding: 1.5em;\n}\n")),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"25-style-the-html-body-element"},"25. Style the HTML Body Element"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/style-the-html-body-element"}),"Learn Basic CSS: Style the HTML Body Element | freeCodeCamp.org")),Object(l.mdx)("p",null,"Now let's start fresh and talk about CSS inheritance.\nEvery HTML page has a ",Object(l.mdx)("inlineCode",{parentName:"p"},"body")," element."),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"We can prove that the ",Object(l.mdx)("inlineCode",{parentName:"p"},"body")," element exists here by giving it a ",Object(l.mdx)("inlineCode",{parentName:"p"},"background-color")," of black.\nWe can do this by adding the following to our ",Object(l.mdx)("inlineCode",{parentName:"p"},"style")," element :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-css"}),"body {\n  background-color: black;\n}\n")),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},"Your ",Object(l.mdx)("inlineCode",{parentName:"p"},"body")," element should have the ",Object(l.mdx)("inlineCode",{parentName:"p"},"background-color")," of black.\nYour CSS rule should be properly formatted with both opening and closing curly brackets.\nYour CSS rule should end with a semi-colon.")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-css"}),"<style>\n  body {\n    background-color: black;\n  }\n</style>\n")),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"26-inherit-styles-from-the-body-element"},"26. Inherit Styles from the Body Element"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/inherit-styles-from-the-body-element"}),"Learn Basic CSS: Inherit Styles from the Body Element | freeCodeCamp.org")),Object(l.mdx)("p",null,"Now we've proven that every HTML page has a ",Object(l.mdx)("inlineCode",{parentName:"p"},"body")," element, and that its ",Object(l.mdx)("inlineCode",{parentName:"p"},"body")," element can also be styled with CSS.\nRemember, you can style your ",Object(l.mdx)("inlineCode",{parentName:"p"},"body")," element just like any other HTML element, and all your other elements will inherit your ",Object(l.mdx)("inlineCode",{parentName:"p"},"body")," element's styles."),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"First, create a ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element with the text ",Object(l.mdx)("inlineCode",{parentName:"p"},"Hello World"),".\nThen, let's give all elements on your page the color of ",Object(l.mdx)("inlineCode",{parentName:"p"},"green")," by adding ",Object(l.mdx)("inlineCode",{parentName:"p"},"color: green;")," to your ",Object(l.mdx)("inlineCode",{parentName:"p"},"body")," element's style declaration.\nFinally, give your ",Object(l.mdx)("inlineCode",{parentName:"p"},"body")," element the font-family of ",Object(l.mdx)("inlineCode",{parentName:"p"},"monospace")," by adding ",Object(l.mdx)("inlineCode",{parentName:"p"},"font-family: monospace;")," to your ",Object(l.mdx)("inlineCode",{parentName:"p"},"body")," element's style declaration."),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},"You should create an ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element.\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element should have the text ",Object(l.mdx)("inlineCode",{parentName:"p"},"Hello World"),".\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element should have a closing tag.\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"body")," element should have the ",Object(l.mdx)("inlineCode",{parentName:"p"},"color")," property of ",Object(l.mdx)("inlineCode",{parentName:"p"},"green"),".\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"body")," element should have the ",Object(l.mdx)("inlineCode",{parentName:"p"},"font-family")," property of ",Object(l.mdx)("inlineCode",{parentName:"p"},"monospace"),".\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element should inherit the font ",Object(l.mdx)("inlineCode",{parentName:"p"},"monospace")," from your ",Object(l.mdx)("inlineCode",{parentName:"p"},"body")," element.\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element should inherit the color green from your ",Object(l.mdx)("inlineCode",{parentName:"p"},"body")," element.")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-css"}),"<style>\n  body {\n    background-color: black;\n    color: green;\n    font-family: monospace;\n  }\n</style>\n<h1>Hello World</h1>\n")),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"27-prioritize-one-style-over-another"},"27. Prioritize One Style Over Another"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/prioritize-one-style-over-another"}),"Learn Basic CSS: Prioritize One Style Over Another | freeCodeCamp.org")),Object(l.mdx)("p",null,"Sometimes your HTML elements will receive multiple styles that conflict with one another.\nFor example, your ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element can't be both green and pink at the same time.\nLet's see what happens when we create a class that makes text pink, then apply it to an element. Will our class ",Object(l.mdx)("em",{parentName:"p"},"override")," the ",Object(l.mdx)("inlineCode",{parentName:"p"},"body")," element's ",Object(l.mdx)("inlineCode",{parentName:"p"},"color: green;")," CSS property ?"),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"Create a CSS class called ",Object(l.mdx)("inlineCode",{parentName:"p"},"pink-text")," that gives an element the color pink.\nGive your ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element the class of ",Object(l.mdx)("inlineCode",{parentName:"p"},"pink-text"),"."),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},"Your ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element should have the class ",Object(l.mdx)("inlineCode",{parentName:"p"},"pink-text"),".\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"<style>")," should have a ",Object(l.mdx)("inlineCode",{parentName:"p"},"pink-text")," CSS class that changes the ",Object(l.mdx)("inlineCode",{parentName:"p"},"color"),".\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element should be pink.")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),'<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n  .pink-text {\n    color: pink;\n  }\n</style>\n<h1 class="pink-text">Hello World!</h1>\n')),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"28-override-styles-in-subsequent-css"},"28. Override Styles in Subsequent CSS"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/override-styles-in-subsequent-css"}),"Learn Basic CSS: Override Styles in Subsequent CSS | freeCodeCamp.org")),Object(l.mdx)("p",null,'Our "pink-text" class overrode our ',Object(l.mdx)("inlineCode",{parentName:"p"},"body")," element's CSS declaration !\nWe just proved that our classes will override the ",Object(l.mdx)("inlineCode",{parentName:"p"},"body")," element's CSS. So the next logical question is, what can we do to override our ",Object(l.mdx)("inlineCode",{parentName:"p"},"pink-text")," class ?"),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"Create an additional CSS class called ",Object(l.mdx)("inlineCode",{parentName:"p"},"blue-text")," that gives an element the color blue. Make sure it's below your ",Object(l.mdx)("inlineCode",{parentName:"p"},"pink-text")," class declaration.\nApply the ",Object(l.mdx)("inlineCode",{parentName:"p"},"blue-text")," class to your ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element in addition to your ",Object(l.mdx)("inlineCode",{parentName:"p"},"pink-text")," class, and let's see which one wins.\nApplying multiple class attributes to a HTML element is done with a space between them like this :"),Object(l.mdx)("p",null,Object(l.mdx)("inlineCode",{parentName:"p"},'class="class1 class2"')),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"Note :")," It doesn't matter which order the classes are listed in the HTML element.\nHowever, the order of the ",Object(l.mdx)("inlineCode",{parentName:"p"},"class")," declarations in the ",Object(l.mdx)("inlineCode",{parentName:"p"},"<style>")," section is what is important. The second declaration will always take precedence over the first. Because ",Object(l.mdx)("inlineCode",{parentName:"p"},".blue-text")," is declared second, it overrides the attributes of ",Object(l.mdx)("inlineCode",{parentName:"p"},".pink-text"),"."),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},"Your ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element should have the class ",Object(l.mdx)("inlineCode",{parentName:"p"},"pink-text"),".\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element should have the class ",Object(l.mdx)("inlineCode",{parentName:"p"},"blue-text"),".\nBoth ",Object(l.mdx)("inlineCode",{parentName:"p"},"blue-text")," and ",Object(l.mdx)("inlineCode",{parentName:"p"},"pink-text")," should belong to the same ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element.\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element should be blue.")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),'<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n  .pink-text {\n    color: pink;\n  }\n  .blue-text {\n    color: blue;\n  }\n</style>\n<h1 class="pink-text blue-text">Hello World!</h1>\n')),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"29-override-class-declarations-by-styling-id-attributes"},"29. Override Class Declarations by Styling ID Attributes"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/override-class-declarations-by-styling-id-attributes"}),"Learn Basic CSS: Override Class Declarations by Styling ID Attributes | freeCodeCamp.org")),Object(l.mdx)("p",null,"We just proved that browsers read CSS from top to bottom in order of their declaration. That means that, in the event of a conflict, the browser will use whichever CSS declaration came last. Notice that if we even had put ",Object(l.mdx)("inlineCode",{parentName:"p"},"blue-text")," before ",Object(l.mdx)("inlineCode",{parentName:"p"},"pink-text")," in our ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element's classes, it would still look at the declaration order and not the order of their use !\nBut we're not done yet. There are other ways that you can override CSS. Do you remember id attributes ?\nLet's override your ",Object(l.mdx)("inlineCode",{parentName:"p"},"pink-text")," and ",Object(l.mdx)("inlineCode",{parentName:"p"},"blue-text")," classes, and make your ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element orange, by giving the ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element an id and then styling that id."),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"Give your ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element the ",Object(l.mdx)("inlineCode",{parentName:"p"},"id")," attribute of ",Object(l.mdx)("inlineCode",{parentName:"p"},"orange-text"),". Remember, id styles look like this :"),Object(l.mdx)("p",null,Object(l.mdx)("inlineCode",{parentName:"p"},'<h1 id="orange-text">')),Object(l.mdx)("p",null,"Leave the ",Object(l.mdx)("inlineCode",{parentName:"p"},"blue-text")," and ",Object(l.mdx)("inlineCode",{parentName:"p"},"pink-text")," classes on your ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element.\nCreate a CSS declaration for your ",Object(l.mdx)("inlineCode",{parentName:"p"},"orange-text")," id in your ",Object(l.mdx)("inlineCode",{parentName:"p"},"style")," element. Here's an example of what this looks like :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-css"}),"#brown-text {\n  color: brown;\n}\n")),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"Note :")," It doesn't matter whether you declare this CSS above or below pink-text class, since id attribute will always take precedence."),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},"Your ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element should have the class ",Object(l.mdx)("inlineCode",{parentName:"p"},"pink-text"),".\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element should have the class ",Object(l.mdx)("inlineCode",{parentName:"p"},"blue-text"),".\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element should have the id of ",Object(l.mdx)("inlineCode",{parentName:"p"},"orange-text"),".\nThere should be only one ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element.\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"orange-text")," id should have a CSS declaration.\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," should not have any ",Object(l.mdx)("inlineCode",{parentName:"p"},"style")," attributes.\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element should be orange.")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),'<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n  #orange-text {\n  color: orange;\n}\n  .pink-text {\n    color: pink;\n  }\n  .blue-text {\n    color: blue;\n  }\n</style>\n<h1 id="orange-text" class="pink-text blue-text">Hello World!</h1>\n')),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"30-override-class-declarations-with-inline-styles"},"30. Override Class Declarations with Inline Styles"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/override-class-declarations-with-inline-styles"}),"Learn Basic CSS: Override Class Declarations with Inline Styles | freeCodeCamp.org")),Object(l.mdx)("p",null,"So we've proven that id declarations override class declarations, regardless of where they are declared in your ",Object(l.mdx)("inlineCode",{parentName:"p"},"style")," element CSS.\nThere are other ways that you can override CSS. Do you remember inline styles ?"),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"Use an inline style to try to make our ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element white. Remember, in line styles look like this :"),Object(l.mdx)("p",null,Object(l.mdx)("inlineCode",{parentName:"p"},'<h1 style="color: green;">')),Object(l.mdx)("p",null,"Leave the ",Object(l.mdx)("inlineCode",{parentName:"p"},"blue-text")," and ",Object(l.mdx)("inlineCode",{parentName:"p"},"pink-text")," classes on your ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element."),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},"Your ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element should have the class ",Object(l.mdx)("inlineCode",{parentName:"p"},"pink-text"),".\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element should have the class ",Object(l.mdx)("inlineCode",{parentName:"p"},"blue-text"),".\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element should have the id of ",Object(l.mdx)("inlineCode",{parentName:"p"},"orange-text"),".\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element should have an inline style.\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element should be white.")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),'<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n  #orange-text {\n    color: orange;\n  }\n  .pink-text {\n    color: pink;\n  }\n  .blue-text {\n    color: blue;\n  }\n</style>\n<h1 id="orange-text" class="pink-text blue-text" style="color: white;" >Hello World!</h1>\n')),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"31-override-all-other-styles-by-using-important"},"31. Override All Other Styles by using Important"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/override-all-other-styles-by-using-important"}),"Learn Basic CSS: Override All Other Styles by using Important | freeCodeCamp.org")),Object(l.mdx)("p",null,"Yay ! We just proved that inline styles will override all the CSS declarations in your ",Object(l.mdx)("inlineCode",{parentName:"p"},"style")," element.\nBut wait. There's one last way to override CSS. This is the most powerful method of all. But before we do it, let's talk about why you would ever want to override CSS.\nIn many situations, you will use CSS libraries. These may accidentally override your own CSS. So when you absolutely need to be sure that an element has specific CSS, you can use ",Object(l.mdx)("inlineCode",{parentName:"p"},"!important"),".\nLet's go all the way back to our ",Object(l.mdx)("inlineCode",{parentName:"p"},"pink-text")," class declaration. Remember that our ",Object(l.mdx)("inlineCode",{parentName:"p"},"pink-text")," class was overridden by subsequent class declarations, id declarations, and inline styles."),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"Let's add the keyword ",Object(l.mdx)("inlineCode",{parentName:"p"},"!important")," to your pink-text element's color declaration to make 100% sure that your ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element will be pink.\nAn example of how to do this is :"),Object(l.mdx)("p",null,Object(l.mdx)("inlineCode",{parentName:"p"},"color: red !important;")),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},"Your ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element should have the class ",Object(l.mdx)("inlineCode",{parentName:"p"},"pink-text"),".\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element should have the class ",Object(l.mdx)("inlineCode",{parentName:"p"},"blue-text"),".\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element should have the id of ",Object(l.mdx)("inlineCode",{parentName:"p"},"orange-text"),".\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element should have the inline style of ",Object(l.mdx)("inlineCode",{parentName:"p"},"color: white"),".\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"pink-text")," class declaration should have the ",Object(l.mdx)("inlineCode",{parentName:"p"},"!important")," keyword to override all other declarations.\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element should be pink.")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),'<style>\n  body {\n    background-color: black;\n    font-family: monospace;\n    color: green;\n  }\n  #orange-text {\n    color: orange;\n  }\n  .pink-text {\n    color: pink !important;\n  }\n  .blue-text {\n    color: blue;\n  }\n</style>\n<h1 id="orange-text" class="pink-text blue-text" style="color: white">Hello World!</h1>\n')),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"32-use-hex-code-for-specific-colors"},"32. Use Hex Code for Specific Colors"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/use-hex-code-for-specific-colors"}),"Learn Basic CSS: Use Hex Code for Specific Colors | freeCodeCamp.org")),Object(l.mdx)("p",null,"Did you know there are other ways to represent colors in CSS ? One of these ways is called hexadecimal code, or hex code for short.\nWe usually use decimals, or base 10 numbers, which use the symbols 0 to 9 for each digit. Hexadecimals (or hex) are base 16 numbers. This means it uses sixteen distinct symbols. Like decimals, the symbols 0-9 represent the values zero to nine. Then A,B,C,D,E,F represent the values ten to fifteen. Altogether, 0 to F can represent a digit in hexadecimal, giving us 16 total possible values. You can find more information about ",Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/Hexadecimal"}),"hexadecimal numbers here"),".\nIn CSS, we can use 6 hexadecimal digits to represent colors, two each for the red (R), green (G), and blue (B) components. For example, ",Object(l.mdx)("inlineCode",{parentName:"p"},"#000000")," is black and is also the lowest possible value. You can find more information about the ",Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/RGB_color_model"}),"RGB color system here"),"."),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-css"}),"body {\n  color: #000000;\n}\n")),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"Replace the word ",Object(l.mdx)("inlineCode",{parentName:"p"},"black")," in our ",Object(l.mdx)("inlineCode",{parentName:"p"},"body")," element's ",Object(l.mdx)("inlineCode",{parentName:"p"},"background-color")," with its hex code representation, ",Object(l.mdx)("inlineCode",{parentName:"p"},"#000000"),"."),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},"Your ",Object(l.mdx)("inlineCode",{parentName:"p"},"body")," element should have the ",Object(l.mdx)("inlineCode",{parentName:"p"},"background-color")," of black.\nThe ",Object(l.mdx)("inlineCode",{parentName:"p"},"hex code")," for the color black should be used instead of the word ",Object(l.mdx)("inlineCode",{parentName:"p"},"black"),".")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),"<style>\n  body {\n    background-color: #000000;\n  }\n</style>\n")),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"33-use-hex-code-to-mix-colors"},"33. Use Hex Code to Mix Colors"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/use-hex-code-to-mix-colors"}),"Learn Basic CSS: Use Hex Code to Mix Colors | freeCodeCamp.org")),Object(l.mdx)("p",null,"To review, hex codes use 6 hexadecimal digits to represent colors, two each for red (R), green (G), and blue (B) components.\nFrom these three pure colors (red, green, and blue), we can vary the amounts of each to create over 16 million other colors !\nFor example, orange is pure red, mixed with some green, and no blue. In hex code, this translates to being ",Object(l.mdx)("inlineCode",{parentName:"p"},"#FFA500"),".\nThe digit ",Object(l.mdx)("inlineCode",{parentName:"p"},"0")," is the lowest number in hex code, and represents a complete absence of color.\nThe digit ",Object(l.mdx)("inlineCode",{parentName:"p"},"F")," is the highest number in hex code, and represents the maximum possible brightness."),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"Replace the color words in our ",Object(l.mdx)("inlineCode",{parentName:"p"},"style")," element with their correct hex codes."),Object(l.mdx)("table",null,Object(l.mdx)("thead",{parentName:"table"},Object(l.mdx)("tr",{parentName:"thead"},Object(l.mdx)("th",Object(a.a)({parentName:"tr"},{align:null}),"Color"),Object(l.mdx)("th",Object(a.a)({parentName:"tr"},{align:null}),"Hex Code"))),Object(l.mdx)("tbody",{parentName:"table"},Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),"Dodger Blue"),Object(l.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"#1E90FF"))),Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),"Green"),Object(l.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"#00FF00"))),Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),"Orange"),Object(l.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"#FFA500"))),Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),"Red"),Object(l.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"#FF0000"))))),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},"Your ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element with the text ",Object(l.mdx)("inlineCode",{parentName:"p"},"I am red!")," should be given the ",Object(l.mdx)("inlineCode",{parentName:"p"},"color")," red.\nThe ",Object(l.mdx)("inlineCode",{parentName:"p"},"hex code")," for the color red should be used instead of the word ",Object(l.mdx)("inlineCode",{parentName:"p"},"red"),".\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element with the text ",Object(l.mdx)("inlineCode",{parentName:"p"},"I am green!")," should be given the ",Object(l.mdx)("inlineCode",{parentName:"p"},"color")," green.\nThe ",Object(l.mdx)("inlineCode",{parentName:"p"},"hex code")," for the color green should be used instead of the word ",Object(l.mdx)("inlineCode",{parentName:"p"},"green"),".\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element with the text ",Object(l.mdx)("inlineCode",{parentName:"p"},"I am dodger blue!")," should be given the ",Object(l.mdx)("inlineCode",{parentName:"p"},"color")," dodger blue.\nThe ",Object(l.mdx)("inlineCode",{parentName:"p"},"hex code")," for the color dodger blue should be used instead of the word ",Object(l.mdx)("inlineCode",{parentName:"p"},"dodgerblue"),".\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element with the text ",Object(l.mdx)("inlineCode",{parentName:"p"},"I am orange!")," should be given the ",Object(l.mdx)("inlineCode",{parentName:"p"},"color")," orange.\nThe ",Object(l.mdx)("inlineCode",{parentName:"p"},"hex code")," for the color orange should be used instead of the word ",Object(l.mdx)("inlineCode",{parentName:"p"},"orange"),".")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),'<style>\n  .red-text {\n    color: #FF0000;\n  }\n  .green-text {\n    color: #00FF00;\n  }\n  .dodger-blue-text {\n    color: #1E90FF;\n  }\n  .orange-text {\n    color: #FFA500;\n  }\n</style>\n<h1 class="red-text">I am red!</h1>\n<h1 class="green-text">I am green!</h1>\n<h1 class="dodger-blue-text">I am dodger blue!</h1>\n<h1 class="orange-text">I am orange!</h1>\n')),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"34-use-abbreviated-hex-code"},"34. Use Abbreviated Hex Code"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/use-abbreviated-hex-code"}),"Learn Basic CSS: Use Abbreviated Hex Code | freeCodeCamp.org")),Object(l.mdx)("p",null,"Many people feel overwhelmed by the possibilities of more than 16 million colors. And it's difficult to remember hex code. Fortunately, you can shorten it.\nFor example, red's hex code ",Object(l.mdx)("inlineCode",{parentName:"p"},"#FF0000")," can be shortened to ",Object(l.mdx)("inlineCode",{parentName:"p"},"#F00"),". This shortened form gives one digit for red, one digit for green, and one digit for blue.\nThis reduces the total number of possible colors to around 4,000. But browsers will interpret ",Object(l.mdx)("inlineCode",{parentName:"p"},"#FF0000")," and ",Object(l.mdx)("inlineCode",{parentName:"p"},"#F00")," as exactly the same color."),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"Go ahead, try using the abbreviated hex codes to color the correct elements."),Object(l.mdx)("table",null,Object(l.mdx)("thead",{parentName:"table"},Object(l.mdx)("tr",{parentName:"thead"},Object(l.mdx)("th",Object(a.a)({parentName:"tr"},{align:null}),"Color"),Object(l.mdx)("th",Object(a.a)({parentName:"tr"},{align:null}),"Short Hex Code"))),Object(l.mdx)("tbody",{parentName:"table"},Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),"Cyan"),Object(l.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"#0FF"))),Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),"Green"),Object(l.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"#0F0"))),Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),"Red"),Object(l.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"#F00"))),Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),"Fuchsia"),Object(l.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"#F0F"))))),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},"Your ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element with the text ",Object(l.mdx)("inlineCode",{parentName:"p"},"I am red!")," should be given the ",Object(l.mdx)("inlineCode",{parentName:"p"},"color")," red.\nThe abbreviated ",Object(l.mdx)("inlineCode",{parentName:"p"},"hex code")," for the color red should be used instead of the hex code ",Object(l.mdx)("inlineCode",{parentName:"p"},"#FF0000"),".\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element with the text ",Object(l.mdx)("inlineCode",{parentName:"p"},"I am green!")," should be given the ",Object(l.mdx)("inlineCode",{parentName:"p"},"color")," green.\nThe abbreviated ",Object(l.mdx)("inlineCode",{parentName:"p"},"hex code")," for the color green should be used instead of the hex code ",Object(l.mdx)("inlineCode",{parentName:"p"},"#00FF00"),".\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element with the text ",Object(l.mdx)("inlineCode",{parentName:"p"},"I am cyan!")," should be given the ",Object(l.mdx)("inlineCode",{parentName:"p"},"color")," cyan.\nThe abbreviated ",Object(l.mdx)("inlineCode",{parentName:"p"},"hex code")," for the color cyan should be used instead of the hex code ",Object(l.mdx)("inlineCode",{parentName:"p"},"#00FFFF"),".\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element with the text ",Object(l.mdx)("inlineCode",{parentName:"p"},"I am fuchsia!")," should be given the ",Object(l.mdx)("inlineCode",{parentName:"p"},"color")," fuchsia.\nThe abbreviated ",Object(l.mdx)("inlineCode",{parentName:"p"},"hex code")," for the color fuchsia should be used instead of the hex code ",Object(l.mdx)("inlineCode",{parentName:"p"},"#FF00FF"),".")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),'<style>\n  .red-text {\n    color: #F00;\n  }\n  .fuchsia-text {\n    color: #F0F;\n  }\n  .cyan-text {\n    color: #0FF;\n  }\n  .green-text {\n    color: #0F0;\n  }\n</style>\n<h1 class="red-text">I am red!</h1>\n<h1 class="fuchsia-text">I am fuchsia!</h1>\n<h1 class="cyan-text">I am cyan!</h1>\n<h1 class="green-text">I am green!</h1>\n')),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"35-use-rgb-values-to-color-elements"},"35. Use RGB values to Color Elements"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/use-rgb-values-to-color-elements"}),"Learn Basic CSS: Use RGB values to Color Elements | freeCodeCamp.org")),Object(l.mdx)("p",null,"Another way you can represent colors in CSS is by using ",Object(l.mdx)("inlineCode",{parentName:"p"},"RGB")," values.\nThe RGB value for black looks like this :"),Object(l.mdx)("p",null,Object(l.mdx)("inlineCode",{parentName:"p"},"rgb(0, 0, 0)")),Object(l.mdx)("p",null,"The RGB value for white looks like this :"),Object(l.mdx)("p",null,Object(l.mdx)("inlineCode",{parentName:"p"},"rgb(255, 255, 255)")),Object(l.mdx)("p",null,"Instead of using six hexadecimal digits like you do with hex code, with ",Object(l.mdx)("inlineCode",{parentName:"p"},"RGB")," you specify the brightness of each color with a number between 0 and 255.\nIf you do the math, the two digits for one color equal 16 times 16, which gives us 256 total values. So ",Object(l.mdx)("inlineCode",{parentName:"p"},"RGB"),", which starts counting from zero, has the exact same number of possible values as hex code.\nHere's an example of how you'd change the body background to orange using its RGB code."),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-css"}),"body {\n  background-color: rgb(255, 165, 0);\n}\n")),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"Let's replace the hex code in our ",Object(l.mdx)("inlineCode",{parentName:"p"},"body")," element's background color with the RGB value for black : ",Object(l.mdx)("inlineCode",{parentName:"p"},"rgb(0, 0, 0)"),"."),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},"Your ",Object(l.mdx)("inlineCode",{parentName:"p"},"body")," element should have a black background.\nYou should use ",Object(l.mdx)("inlineCode",{parentName:"p"},"rgb")," to give your ",Object(l.mdx)("inlineCode",{parentName:"p"},"body")," element a color of black.")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),"<style>\n  body {\n    background-color: rgb(0, 0, 0);\n  }\n</style>\n")),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"36-use-rgb-to-mix-colors"},"36. Use RGB to Mix Colors"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/use-rgb-to-mix-colors"}),"Learn Basic CSS: Use RGB to Mix Colors | freeCodeCamp.org")),Object(l.mdx)("p",null,"Just like with hex code, you can mix colors in RGB by using combinations of different values."),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"Replace the hex codes in our ",Object(l.mdx)("inlineCode",{parentName:"p"},"style")," element with their correct RGB values."),Object(l.mdx)("table",null,Object(l.mdx)("thead",{parentName:"table"},Object(l.mdx)("tr",{parentName:"thead"},Object(l.mdx)("th",Object(a.a)({parentName:"tr"},{align:null}),"Color"),Object(l.mdx)("th",Object(a.a)({parentName:"tr"},{align:null}),"RGB"))),Object(l.mdx)("tbody",{parentName:"table"},Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),"Blue"),Object(l.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"rgb(0, 0, 255)"))),Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),"Red"),Object(l.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"rgb(255, 0, 0)"))),Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),"Orchid"),Object(l.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"rgb(218, 112, 214)"))),Object(l.mdx)("tr",{parentName:"tbody"},Object(l.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),"Sienna"),Object(l.mdx)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(l.mdx)("inlineCode",{parentName:"td"},"rgb(160, 82, 45)"))))),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},"Your ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element with the text ",Object(l.mdx)("inlineCode",{parentName:"p"},"I am red!")," should have the ",Object(l.mdx)("inlineCode",{parentName:"p"},"color")," red.\nYou should use ",Object(l.mdx)("inlineCode",{parentName:"p"},"rgb")," for the color red.\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element with the text ",Object(l.mdx)("inlineCode",{parentName:"p"},"I am orchid!")," should have the ",Object(l.mdx)("inlineCode",{parentName:"p"},"color")," orchid.\nYou should use ",Object(l.mdx)("inlineCode",{parentName:"p"},"rgb")," for the color orchid.\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element with the text ",Object(l.mdx)("inlineCode",{parentName:"p"},"I am blue!")," should have the ",Object(l.mdx)("inlineCode",{parentName:"p"},"color")," blue.\nYou should use ",Object(l.mdx)("inlineCode",{parentName:"p"},"rgb")," for the color blue.\nYour ",Object(l.mdx)("inlineCode",{parentName:"p"},"h1")," element with the text ",Object(l.mdx)("inlineCode",{parentName:"p"},"I am sienna!")," should have the ",Object(l.mdx)("inlineCode",{parentName:"p"},"color")," sienna.\nYou should use ",Object(l.mdx)("inlineCode",{parentName:"p"},"rgb")," for the color sienna.")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),'<style>\n  .red-text {\n    color: rgb(255, 0, 0);\n  }\n  .orchid-text {\n    color: rgb(218, 112, 214);\n  }\n  .sienna-text {\n    color: rgb(160, 82, 45);\n  }\n  .blue-text {\n    color: rgb(0, 0, 255);\n  }\n</style>\n<h1 class="red-text">I am red!</h1>\n<h1 class="orchid-text">I am orchid!</h1>\n<h1 class="sienna-text">I am sienna!</h1>\n<h1 class="blue-text">I am blue!</h1>\n')),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"37-use-css-variables-to-change-several-elements-at-once"},"37. Use CSS Variables to change several elements at once"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/use-css-variables-to-change-several-elements-at-once"}),"Learn Basic CSS: Use CSS Variables to change several elements at once | freeCodeCamp.org")),Object(l.mdx)("p",null,"CSS Variables are a powerful way to change many CSS style properties at once by changing only one value.\nFollow the instructions below to see how changing just three values can change the styling of many elements."),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"In the ",Object(l.mdx)("inlineCode",{parentName:"p"},"penguin")," class, change the ",Object(l.mdx)("inlineCode",{parentName:"p"},"black")," value to ",Object(l.mdx)("inlineCode",{parentName:"p"},"gray"),", the ",Object(l.mdx)("inlineCode",{parentName:"p"},"gray")," value to ",Object(l.mdx)("inlineCode",{parentName:"p"},"white"),", and the ",Object(l.mdx)("inlineCode",{parentName:"p"},"yellow")," value to ",Object(l.mdx)("inlineCode",{parentName:"p"},"orange"),"."),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},Object(l.mdx)("inlineCode",{parentName:"p"},"penguin")," class should declare the ",Object(l.mdx)("inlineCode",{parentName:"p"},"--penguin-skin")," variable and assign it to ",Object(l.mdx)("inlineCode",{parentName:"p"},"gray"),".\n",Object(l.mdx)("inlineCode",{parentName:"p"},"penguin")," class should declare the ",Object(l.mdx)("inlineCode",{parentName:"p"},"--penguin-belly")," variable and assign it to ",Object(l.mdx)("inlineCode",{parentName:"p"},"white"),".\n",Object(l.mdx)("inlineCode",{parentName:"p"},"penguin")," class should declare the ",Object(l.mdx)("inlineCode",{parentName:"p"},"--penguin-beak")," variable and assign it to ",Object(l.mdx)("inlineCode",{parentName:"p"},"orange"),".")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),'<style>\n  .penguin {\n    /* Only change code below this line */\n    --penguin-skin: black;\n    --penguin-belly: gray;\n    --penguin-beak: yellow;\n    /* Only change code above this line */\n    position: relative;\n    margin: auto;\n    display: block;\n    margin-top: 5%;\n    width: 300px;\n    height: 300px;\n  }\n  .penguin-top {\n    top: 10%;\n    left: 25%;\n    background: var(--penguin-skin, gray);\n    width: 50%;\n    height: 45%;\n    border-radius: 70% 70% 60% 60%;\n  }\n  .penguin-bottom {\n    top: 40%;\n    left: 23.5%;\n    background: var(--penguin-skin, gray);\n    width: 53%;\n    height: 45%;\n    border-radius: 70% 70% 100% 100%;\n  }\n  .right-hand {\n    top: 0%;\n    left: -5%;\n    background: var(--penguin-skin, gray);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 120% 30%;\n    transform: rotate(45deg);\n    z-index: -1;\n  }\n  .left-hand {\n    top: 0%;\n    left: 75%;\n    background: var(--penguin-skin, gray);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 30% 120%;\n    transform: rotate(-45deg);\n    z-index: -1;\n  }\n  .right-cheek {\n    top: 15%;\n    left: 35%;\n    background: var(--penguin-belly, white);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n  .left-cheek {\n    top: 15%;\n    left: 5%;\n    background: var(--penguin-belly, white);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n  .belly {\n    top: 60%;\n    left: 2.5%;\n    background: var(--penguin-belly, white);\n    width: 95%;\n    height: 100%;\n    border-radius: 120% 120% 100% 100%;\n  }\n  .right-feet {\n    top: 85%;\n    left: 60%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(-80deg);\n    z-index: -2222;\n  }\n  .left-feet {\n    top: 85%;\n    left: 25%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(80deg);\n    z-index: -2222;\n  }\n  .right-eye {\n    top: 45%;\n    left: 60%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n  .left-eye {\n    top: 45%;\n    left: 25%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n  .sparkle {\n    top: 25%;\n    left: 15%;\n    background: white;\n    width: 35%;\n    height: 35%;\n    border-radius: 50%;\n  }\n  .blush-right {\n    top: 65%;\n    left: 15%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n  .blush-left {\n    top: 65%;\n    left: 70%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n  .beak-top {\n    top: 60%;\n    left: 40%;\n    background: var(--penguin-beak, orange);\n    width: 20%;\n    height: 10%;\n    border-radius: 50%;\n  }\n  .beak-bottom {\n    top: 65%;\n    left: 42%;\n    background: var(--penguin-beak, orange);\n    width: 16%;\n    height: 10%;\n    border-radius: 50%;\n  }\n  body {\n    background:#c6faf1;\n  }\n  .penguin * {\n    position: absolute;\n  }\n</style>\n<div class="penguin">\n  <div class="penguin-bottom">\n    <div class="right-hand"></div>\n    <div class="left-hand"></div>\n    <div class="right-feet"></div>\n    <div class="left-feet"></div>\n  </div>\n  <div class="penguin-top">\n    <div class="right-cheek"></div>\n    <div class="left-cheek"></div>\n    <div class="belly"></div>\n    <div class="right-eye">\n      <div class="sparkle"></div>\n    </div>\n    <div class="left-eye">\n      <div class="sparkle"></div>\n    </div>\n    <div class="blush-right"></div>\n    <div class="blush-left"></div>\n    <div class="beak-top"></div>\n    <div class="beak-bottom"></div>\n  </div>\n</div>\n')),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-css"}),".penguin {\n  --penguin-skin: gray;\n  --penguin-belly: white;\n  --penguin-beak: orange;\n")),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"38-create-a-custom-css-variable"},"38. Create a custom CSS Variable"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/create-a-custom-css-variable"}),"Learn Basic CSS: Create a custom CSS Variable | freeCodeCamp.org")),Object(l.mdx)("p",null,"To create a CSS variable, you just need to give it a name with two hyphens in front of it and assign it a value like this :"),Object(l.mdx)("p",null,Object(l.mdx)("inlineCode",{parentName:"p"},"--penguin-skin: gray;")),Object(l.mdx)("p",null,"This will create a variable named ",Object(l.mdx)("inlineCode",{parentName:"p"},"--penguin-skin")," and assign it the value of ",Object(l.mdx)("inlineCode",{parentName:"p"},"gray"),". Now you can use that variable elsewhere in your CSS to change the value of other elements to gray."),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"In the ",Object(l.mdx)("inlineCode",{parentName:"p"},"penguin")," class, create a variable name ",Object(l.mdx)("inlineCode",{parentName:"p"},"--penguin-skin")," and give it a value of ",Object(l.mdx)("inlineCode",{parentName:"p"},"gray"),"."),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},Object(l.mdx)("inlineCode",{parentName:"p"},"penguin")," class should declare the ",Object(l.mdx)("inlineCode",{parentName:"p"},"--penguin-skin")," variable and assign it to ",Object(l.mdx)("inlineCode",{parentName:"p"},"gray"),".")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),"<style>\n  .penguin {\n    /* Only change code below this line */\n\n    /* Only change code above this line */\n    position: relative;\n    margin: auto;\n    display: block;\n    margin-top: 5%;\n    width: 300px;\n    height: 300px;\n  }\n")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-css"}),".penguin {\n  --penguin-skin: gray;\n}\n")),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"39-use-a-custom-css-variable"},"39. Use a custom CSS Variable"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/use-a-custom-css-variable"}),"Learn Basic CSS: Use a custom CSS Variable | freeCodeCamp.org")),Object(l.mdx)("p",null,"After you create your variable, you can assign its value to other CSS properties by referencing the name you gave it."),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-css"}),"background: var(--penguin-skin);\n")),Object(l.mdx)("p",null,"This will change the background of whatever element you are targeting to gray because that is the value of the ",Object(l.mdx)("inlineCode",{parentName:"p"},"--penguin-skin")," variable. Note that styles will not be applied unless the variable names are an exact match."),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"Apply the ",Object(l.mdx)("inlineCode",{parentName:"p"},"--penguin-skin")," variable to the ",Object(l.mdx)("inlineCode",{parentName:"p"},"background")," property of the ",Object(l.mdx)("inlineCode",{parentName:"p"},"penguin-top"),", ",Object(l.mdx)("inlineCode",{parentName:"p"},"penguin-bottom"),", ",Object(l.mdx)("inlineCode",{parentName:"p"},"right-hand")," and ",Object(l.mdx)("inlineCode",{parentName:"p"},"left-hand")," classes."),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},"The ",Object(l.mdx)("inlineCode",{parentName:"p"},"--penguin-skin")," variable should be applied to the ",Object(l.mdx)("inlineCode",{parentName:"p"},"background")," property of the ",Object(l.mdx)("inlineCode",{parentName:"p"},"penguin-top")," class.\nThe ",Object(l.mdx)("inlineCode",{parentName:"p"},"--penguin-skin")," variable should be applied to the ",Object(l.mdx)("inlineCode",{parentName:"p"},"background")," property of the ",Object(l.mdx)("inlineCode",{parentName:"p"},"penguin-bottom")," class.\nThe ",Object(l.mdx)("inlineCode",{parentName:"p"},"--penguin-skin")," variable should be applied to the ",Object(l.mdx)("inlineCode",{parentName:"p"},"background")," property of the ",Object(l.mdx)("inlineCode",{parentName:"p"},"right-hand")," class.\nThe ",Object(l.mdx)("inlineCode",{parentName:"p"},"--penguin-skin")," variable should be applied to the ",Object(l.mdx)("inlineCode",{parentName:"p"},"background")," property of the ",Object(l.mdx)("inlineCode",{parentName:"p"},"left-hand")," class.")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),"<style>\n    .penguin {\n        --penguin-skin: gray;\n        position: relative;\n        margin: auto;\n        display: block;\n        margin-top: 5%;\n        width: 300px;\n        height: 300px;\n    }\n    .penguin-top {\n        top: 10%;\n        left: 25%;\n        /* Change code below this line */\n        background: black;\n        /* Change code above this line */\n        width: 50%;\n        height: 45%;\n        border-radius: 70% 70% 60% 60%;\n    }\n    .penguin-bottom {\n        top: 40%;\n        left: 23.5%;\n        /* Change code below this line */\n        background: black;\n        /* Change code above this line */\n        width: 53%;\n        height: 45%;\n        border-radius: 70% 70% 100% 100%;\n    }\n    .right-hand {\n        top: 0%;\n        left: -5%;\n        /* Change code below this line */\n        background: black;\n        /* Change code above this line */\n        width: 30%;\n        height: 60%;\n        border-radius: 30% 30% 120% 30%;\n        transform: rotate(45deg);\n        z-index: -1;\n    }\n    .left-hand {\n        top: 0%;\n        left: 75%;\n        /* Change code below this line */\n        background: black;\n        /* Change code above this line */\n        width: 30%;\n        height: 60%;\n        border-radius: 30% 30% 30% 120%;\n        transform: rotate(-45deg);\n        z-index: -1;\n    }\n// [...]\n")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),"<style>\n    .penguin {\n        --penguin-skin: gray;\n        position: relative;\n        margin: auto;\n        display: block;\n        margin-top: 5%;\n        width: 300px;\n        height: 300px;\n    }\n    .penguin-top {\n        top: 10%;\n        left: 25%;\n        /* Change code below this line */\n        background: var(--penguin-skin);\n        /* Change code above this line */\n        width: 50%;\n        height: 45%;\n        border-radius: 70% 70% 60% 60%;\n    }\n    .penguin-bottom {\n        top: 40%;\n        left: 23.5%;\n        /* Change code below this line */\n        background: var(--penguin-skin);\n        /* Change code above this line */\n        width: 53%;\n        height: 45%;\n        border-radius: 70% 70% 100% 100%;\n    }\n    .right-hand {\n        top: 0%;\n        left: -5%;\n        /* Change code below this line */\n        background: var(--penguin-skin);\n        /* Change code above this line */\n        width: 30%;\n        height: 60%;\n        border-radius: 30% 30% 120% 30%;\n        transform: rotate(45deg);\n        z-index: -1;\n    }\n    .left-hand {\n        top: 0%;\n        left: 75%;\n        /* Change code below this line */\n        background: var(--penguin-skin);\n        /* Change code above this line */\n        width: 30%;\n        height: 60%;\n        border-radius: 30% 30% 30% 120%;\n        transform: rotate(-45deg);\n        z-index: -1;\n    }\n// [...]\n")),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"40-attach-a-fallback-value-to-a-css-variable"},"40. Attach a Fallback value to a CSS Variable"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/attach-a-fallback-value-to-a-css-variable"}),"Learn Basic CSS: Attach a Fallback value to a CSS Variable | freeCodeCamp.org")),Object(l.mdx)("p",null,"When using your variable as a CSS property value, you can attach a fallback value that your browser will revert to if the given variable is invalid."),Object(l.mdx)("p",null,Object(l.mdx)("strong",{parentName:"p"},"Note :")," This fallback is not used to increase browser compatibility, and it will not work on IE browsers. Rather, it is used so that the browser has a color to display if it cannot find your variable.\nHere's how you do it :"),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-css"}),"background: var(--penguin-skin, black);\n")),Object(l.mdx)("p",null,"This will set background to black if your variable wasn't set. Note that this can be useful for debugging."),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"It looks like there is a problem with the variables supplied to the ",Object(l.mdx)("inlineCode",{parentName:"p"},".penguin-top")," and ",Object(l.mdx)("inlineCode",{parentName:"p"},".penguin-bottom")," classes. Rather than fix the typo, add a fallback value of ",Object(l.mdx)("inlineCode",{parentName:"p"},"black")," to the ",Object(l.mdx)("inlineCode",{parentName:"p"},"background")," property of the ",Object(l.mdx)("inlineCode",{parentName:"p"},".penguin-top")," and ",Object(l.mdx)("inlineCode",{parentName:"p"},".penguin-bottom")," classes."),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},"The fallback value of ",Object(l.mdx)("inlineCode",{parentName:"p"},"black")," should be used in the ",Object(l.mdx)("inlineCode",{parentName:"p"},"background")," property of the ",Object(l.mdx)("inlineCode",{parentName:"p"},"penguin-top")," class.\nThe fallback value of ",Object(l.mdx)("inlineCode",{parentName:"p"},"black")," should be used in ",Object(l.mdx)("inlineCode",{parentName:"p"},"background")," property of the ",Object(l.mdx)("inlineCode",{parentName:"p"},"penguin-bottom")," class.")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),"<style>\n  .penguin {\n    --penguin-skin: black;\n    --penguin-belly: gray;\n    --penguin-beak: yellow;\n    position: relative;\n    margin: auto;\n    display: block;\n    margin-top: 5%;\n    width: 300px;\n    height: 300px;\n  }\n  .penguin-top {\n    top: 10%;\n    left: 25%;\n    /* Change code below this line */\n    background: var(--pengiun-skin);\n    /* Change code above this line */\n    width: 50%;\n    height: 45%;\n    border-radius: 70% 70% 60% 60%;\n  }\n  .penguin-bottom {\n    top: 40%;\n    left: 23.5%;\n    /* Change code below this line */\n    background: var(--pengiun-skin);\n    /* Change code above this line */\n    width: 53%;\n    height: 45%;\n    border-radius: 70% 70% 100% 100%;\n  }\n")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),"<style>\n  .penguin {\n    --penguin-skin: black;\n    --penguin-belly: gray;\n    --penguin-beak: yellow;\n    position: relative;\n    margin: auto;\n    display: block;\n    margin-top: 5%;\n    width: 300px;\n    height: 300px;\n  }\n  .penguin-top {\n    top: 10%;\n    left: 25%;\n    /* Change code below this line */\n    background: var(--pengiun-skin, black);\n    /* Change code above this line */\n    width: 50%;\n    height: 45%;\n    border-radius: 70% 70% 60% 60%;\n  }\n  .penguin-bottom {\n    top: 40%;\n    left: 23.5%;\n    /* Change code below this line */\n    background: var(--pengiun-skin, black);\n    /* Change code above this line */\n    width: 53%;\n    height: 45%;\n    border-radius: 70% 70% 100% 100%;\n  }\n")),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"41-improve-compatibility-with-browser-fallbacks"},"41. Improve Compatibility with Browser Fallbacks"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/improve-compatibility-with-browser-fallbacks"}),"Learn Basic CSS: Improve Compatibility with Browser Fallbacks | freeCodeCamp.org")),Object(l.mdx)("p",null,"When working with CSS you will likely run into browser compatibility issues at some point. This is why it's important to provide browser fallbacks to avoid potential problems."),Object(l.mdx)("p",null,"When your browser parses the CSS of a webpage, it ignores any properties that it doesn't recognize or support. For example, if you use a CSS variable to assign a background color on a site, Internet Explorer will ignore the background color because it does not support CSS variables. In that case, the browser will use whatever value it has for that property. If it can't find any other value set for that property, it will revert to the default value, which is typically not ideal."),Object(l.mdx)("p",null,"This means that if you do want to provide a browser fallback, it's as easy as providing another more widely supported value immediately before your declaration. That way an older browser will have something to fall back on, while a newer browser will just interpret whatever declaration comes later in the cascade."),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"It looks like a variable is being used to set the background color of the ",Object(l.mdx)("inlineCode",{parentName:"p"},".red-box")," class. Let's improve our browser compatibility by adding another ",Object(l.mdx)("inlineCode",{parentName:"p"},"background")," declaration right before the existing declaration and set its value to red."),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},"Your ",Object(l.mdx)("inlineCode",{parentName:"p"},".red-box")," rule should include a fallback with the ",Object(l.mdx)("inlineCode",{parentName:"p"},"background")," set to red immediately before the existing ",Object(l.mdx)("inlineCode",{parentName:"p"},"background")," declaration.")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),'<style>\n  :root {\n    --red-color: red;\n  }\n  .red-box {\n    background: red;\n    background: var(--red-color);\n    height: 200px;\n    width: 200px;\n  }\n</style>\n<div class="red-box"></div>\n')),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"42-inherit-css-variables"},"42. Inherit CSS Variables"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/inherit-css-variables"}),"Learn Basic CSS: Inherit CSS Variables | freeCodeCamp.org")),Object(l.mdx)("p",null,"When you create a variable, it is available for you to use inside the selector in which you create it. It also is available in any of that selector's descendants. This happens because CSS variables are inherited, just like ordinary properties."),Object(l.mdx)("p",null,"To make use of inheritance, CSS variables are often defined in the :root element."),Object(l.mdx)("p",null,Object(l.mdx)("inlineCode",{parentName:"p"},":root")," is a pseudo-class selector that matches the root element of the document, usually the ",Object(l.mdx)("inlineCode",{parentName:"p"},"html")," element. By creating your variables in ",Object(l.mdx)("inlineCode",{parentName:"p"},":root"),", they will be available globally and can be accessed from any other selector in the style sheet."),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"Define a variable named ",Object(l.mdx)("inlineCode",{parentName:"p"},"--penguin-belly")," in the ",Object(l.mdx)("inlineCode",{parentName:"p"},":root")," selector and give it the value of ",Object(l.mdx)("inlineCode",{parentName:"p"},"pink"),". You can then see that the variable is inherited and that all the child elements which use it get pink backgrounds."),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},"The ",Object(l.mdx)("inlineCode",{parentName:"p"},"--penguin-belly")," variable should be declared in the ",Object(l.mdx)("inlineCode",{parentName:"p"},":root")," and assigned the value ",Object(l.mdx)("inlineCode",{parentName:"p"},"pink"),".")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),'<style>\n  :root {\n    /* Only change code below this line */\n    --penguin-belly: pink;\n    /* Only change code above this line */\n  }\n  body {\n    background: var(--penguin-belly, #c6faf1);\n  }\n  .penguin {\n    --penguin-skin: gray;\n    --penguin-beak: orange;\n    position: relative;\n    margin: auto;\n    display: block;\n    margin-top: 5%;\n    width: 300px;\n    height: 300px;\n  }\n  .right-cheek {\n    top: 15%;\n    left: 35%;\n    background: var(--penguin-belly, white);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n  .left-cheek {\n    top: 15%;\n    left: 5%;\n    background: var(--penguin-belly, white);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n  .belly {\n    top: 60%;\n    left: 2.5%;\n    background: var(--penguin-belly, white);\n    width: 95%;\n    height: 100%;\n    border-radius: 120% 120% 100% 100%;\n  }\n  .penguin-top {\n    top: 10%;\n    left: 25%;\n    background: var(--penguin-skin, gray);\n    width: 50%;\n    height: 45%;\n    border-radius: 70% 70% 60% 60%;\n  }\n  .penguin-bottom {\n    top: 40%;\n    left: 23.5%;\n    background: var(--penguin-skin, gray);\n    width: 53%;\n    height: 45%;\n    border-radius: 70% 70% 100% 100%;\n  }\n  .right-hand {\n    top: 0%;\n    left: -5%;\n    background: var(--penguin-skin, gray);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 120% 30%;\n    transform: rotate(45deg);\n    z-index: -1;\n  }\n  .left-hand {\n    top: 0%;\n    left: 75%;\n    background: var(--penguin-skin, gray);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 30% 120%;\n    transform: rotate(-45deg);\n    z-index: -1;\n  }\n  .right-feet {\n    top: 85%;\n    left: 60%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(-80deg);\n    z-index: -2222;\n  }\n  .left-feet {\n    top: 85%;\n    left: 25%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(80deg);\n    z-index: -2222;\n  }\n  .right-eye {\n    top: 45%;\n    left: 60%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n  .left-eye {\n    top: 45%;\n    left: 25%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n  .sparkle {\n    top: 25%;\n    left: 15%;\n    background: white;\n    width: 35%;\n    height: 35%;\n    border-radius: 50%;\n  }\n  .blush-right {\n    top: 65%;\n    left: 15%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n  .blush-left {\n    top: 65%;\n    left: 70%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n  .beak-top {\n    top: 60%;\n    left: 40%;\n    background: var(--penguin-beak, orange);\n    width: 20%;\n    height: 10%;\n    border-radius: 50%;\n  }\n  .beak-bottom {\n    top: 65%;\n    left: 42%;\n    background: var(--penguin-beak, orange);\n    width: 16%;\n    height: 10%;\n    border-radius: 50%;\n  }\n  .penguin * {\n    position: absolute;\n  }\n</style>\n<div class="penguin">\n  <div class="penguin-bottom">\n    <div class="right-hand"></div>\n    <div class="left-hand"></div>\n    <div class="right-feet"></div>\n    <div class="left-feet"></div>\n  </div>\n  <div class="penguin-top">\n    <div class="right-cheek"></div>\n    <div class="left-cheek"></div>\n    <div class="belly"></div>\n    <div class="right-eye">\n      <div class="sparkle"></div>\n    </div>\n    <div class="left-eye">\n      <div class="sparkle"></div>\n    </div>\n    <div class="blush-right"></div>\n    <div class="blush-left"></div>\n    <div class="beak-top"></div>\n    <div class="beak-bottom"></div>\n  </div>\n</div>\n')),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"43-change-a-variable-for-a-specific-area"},"43. Change a variable for a specific area"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/change-a-variable-for-a-specific-area"}),"Learn Basic CSS: Change a variable for a specific area | freeCodeCamp.org")),Object(l.mdx)("p",null,"When you create your variables in ",Object(l.mdx)("inlineCode",{parentName:"p"},":root")," they will set the value of that variable for the whole page.\nYou can then over-write these variables by setting them again within a specific element."),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"Change the value of ",Object(l.mdx)("inlineCode",{parentName:"p"},"--penguin-belly")," to ",Object(l.mdx)("inlineCode",{parentName:"p"},"white")," in the ",Object(l.mdx)("inlineCode",{parentName:"p"},"penguin")," class."),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},"The ",Object(l.mdx)("inlineCode",{parentName:"p"},"penguin")," class should reassign the ",Object(l.mdx)("inlineCode",{parentName:"p"},"--penguin-belly")," variable to ",Object(l.mdx)("inlineCode",{parentName:"p"},"white"),".")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),'<style>\n  :root {\n    --penguin-skin: gray;\n    --penguin-belly: pink;\n    --penguin-beak: orange;\n  }\n  body {\n    background: var(--penguin-belly, #c6faf1);\n  }\n  .penguin {\n    /* Only change code below this line */\n    --penguin-belly: white;\n    /* Only change code above this line */\n    position: relative;\n    margin: auto;\n    display: block;\n    margin-top: 5%;\n    width: 300px;\n    height: 300px;\n  }\n  .right-cheek {\n    top: 15%;\n    left: 35%;\n    background: var(--penguin-belly, pink);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n  .left-cheek {\n    top: 15%;\n    left: 5%;\n    background: var(--penguin-belly, pink);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n  .belly {\n    top: 60%;\n    left: 2.5%;\n    background: var(--penguin-belly, pink);\n    width: 95%;\n    height: 100%;\n    border-radius: 120% 120% 100% 100%;\n  }\n  .penguin-top {\n    top: 10%;\n    left: 25%;\n    background: var(--penguin-skin, gray);\n    width: 50%;\n    height: 45%;\n    border-radius: 70% 70% 60% 60%;\n  }\n  .penguin-bottom {\n    top: 40%;\n    left: 23.5%;\n    background: var(--penguin-skin, gray);\n    width: 53%;\n    height: 45%;\n    border-radius: 70% 70% 100% 100%;\n  }\n  .right-hand {\n    top: 0%;\n    left: -5%;\n    background: var(--penguin-skin, gray);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 120% 30%;\n    transform: rotate(45deg);\n    z-index: -1;\n  }\n  .left-hand {\n    top: 0%;\n    left: 75%;\n    background: var(--penguin-skin, gray);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 30% 120%;\n    transform: rotate(-45deg);\n    z-index: -1;\n  }\n  .right-feet {\n    top: 85%;\n    left: 60%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(-80deg);\n    z-index: -2222;\n  }\n  .left-feet {\n    top: 85%;\n    left: 25%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(80deg);\n    z-index: -2222;\n  }\n  .right-eye {\n    top: 45%;\n    left: 60%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n  .left-eye {\n    top: 45%;\n    left: 25%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n  .sparkle {\n    top: 25%;\n    left: 15%;\n    background: white;\n    width: 35%;\n    height: 35%;\n    border-radius: 50%;\n  }\n  .blush-right {\n    top: 65%;\n    left: 15%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n  .blush-left {\n    top: 65%;\n    left: 70%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n  .beak-top {\n    top: 60%;\n    left: 40%;\n    background: var(--penguin-beak, orange);\n    width: 20%;\n    height: 10%;\n    border-radius: 50%;\n  }\n  .beak-bottom {\n    top: 65%;\n    left: 42%;\n    background: var(--penguin-beak, orange);\n    width: 16%;\n    height: 10%;\n    border-radius: 50%;\n  }\n  .penguin * {\n    position: absolute;\n  }\n</style>\n<div class="penguin">\n  <div class="penguin-bottom">\n    <div class="right-hand"></div>\n    <div class="left-hand"></div>\n    <div class="right-feet"></div>\n    <div class="left-feet"></div>\n  </div>\n  <div class="penguin-top">\n    <div class="right-cheek"></div>\n    <div class="left-cheek"></div>\n    <div class="belly"></div>\n    <div class="right-eye">\n      <div class="sparkle"></div>\n    </div>\n    <div class="left-eye">\n      <div class="sparkle"></div>\n    </div>\n    <div class="blush-right"></div>\n    <div class="blush-left"></div>\n    <div class="beak-top"></div>\n    <div class="beak-bottom"></div>\n  </div>\n</div>\n')),Object(l.mdx)("hr",null),Object(l.mdx)("h2",{id:"44-use-a-media-query-to-change-a-variable"},"44. Use a media query to change a variable"),Object(l.mdx)("p",null,Object(l.mdx)("a",Object(a.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/responsive-web-design/basic-css/use-a-media-query-to-change-a-variable"}),"Learn Basic CSS: Use a media query to change a variable | freeCodeCamp.org")),Object(l.mdx)("p",null,"CSS Variables can simplify the way you use media queries.\nFor instance, when your screen is smaller or larger than your media query break point, you can change the value of a variable, and it will apply its style wherever it is used."),Object(l.mdx)("hr",null),Object(l.mdx)("p",null,"In the ",Object(l.mdx)("inlineCode",{parentName:"p"},":root")," selector of the ",Object(l.mdx)("inlineCode",{parentName:"p"},"media query"),", change it so ",Object(l.mdx)("inlineCode",{parentName:"p"},"--penguin-size")," is redefined and given a value of ",Object(l.mdx)("inlineCode",{parentName:"p"},"200px"),". Also, redefine ",Object(l.mdx)("inlineCode",{parentName:"p"},"--penguin-skin")," and give it a value of ",Object(l.mdx)("inlineCode",{parentName:"p"},"black"),". Then resize the preview to see this change in action."),Object(l.mdx)("blockquote",null,Object(l.mdx)("p",{parentName:"blockquote"},Object(l.mdx)("inlineCode",{parentName:"p"},":root")," should reassign the ",Object(l.mdx)("inlineCode",{parentName:"p"},"--penguin-size")," variable to ",Object(l.mdx)("inlineCode",{parentName:"p"},"200px"),".\n",Object(l.mdx)("inlineCode",{parentName:"p"},":root")," should reassign the ",Object(l.mdx)("inlineCode",{parentName:"p"},"--penguin-skin")," variable to ",Object(l.mdx)("inlineCode",{parentName:"p"},"black"),".")),Object(l.mdx)("pre",null,Object(l.mdx)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),'<style>\n  :root {\n    --penguin-size: 300px;\n    --penguin-skin: gray;\n    --penguin-belly: white;\n    --penguin-beak: orange;\n  }\n  @media (max-width: 350px) {\n    :root {\n      /* Only change code below this line */\n      --penguin-size: 200px;\n      --penguin-skin: black;\n      /* Only change code above this line */\n    }\n  }\n  .penguin {\n    position: relative;\n    margin: auto;\n    display: block;\n    margin-top: 5%;\n    width: var(--penguin-size, 300px);\n    height: var(--penguin-size, 300px);\n  }\n  .right-cheek {\n    top: 15%;\n    left: 35%;\n    background: var(--penguin-belly, white);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n  .left-cheek {\n    top: 15%;\n    left: 5%;\n    background: var(--penguin-belly, white);\n    width: 60%;\n    height: 70%;\n    border-radius: 70% 70% 60% 60%;\n  }\n  .belly {\n    top: 60%;\n    left: 2.5%;\n    background: var(--penguin-belly, white);\n    width: 95%;\n    height: 100%;\n    border-radius: 120% 120% 100% 100%;\n  }\n  .penguin-top {\n    top: 10%;\n    left: 25%;\n    background: var(--penguin-skin, gray);\n    width: 50%;\n    height: 45%;\n    border-radius: 70% 70% 60% 60%;\n  }\n  .penguin-bottom {\n    top: 40%;\n    left: 23.5%;\n    background: var(--penguin-skin, gray);\n    width: 53%;\n    height: 45%;\n    border-radius: 70% 70% 100% 100%;\n  }\n  .right-hand {\n    top: 5%;\n    left: 25%;\n    background: var(--penguin-skin, black);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 120% 30%;\n    transform: rotate(130deg);\n    z-index: -1;\n    animation-duration: 3s;\n    animation-name: wave;\n    animation-iteration-count: infinite;\n    transform-origin:0% 0%;\n    animation-timing-function: linear;\n  }\n  @keyframes wave {\n      10% {\n        transform: rotate(110deg);\n      }\n      20% {\n        transform: rotate(130deg);\n      }\n      30% {\n        transform: rotate(110deg);\n      }\n      40% {\n        transform: rotate(130deg);\n      }\n    }\n  .left-hand {\n    top: 0%;\n    left: 75%;\n    background: var(--penguin-skin, gray);\n    width: 30%;\n    height: 60%;\n    border-radius: 30% 30% 30% 120%;\n    transform: rotate(-45deg);\n    z-index: -1;\n  }\n  .right-feet {\n    top: 85%;\n    left: 60%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(-80deg);\n    z-index: -2222;\n  }\n  .left-feet {\n    top: 85%;\n    left: 25%;\n    background: var(--penguin-beak, orange);\n    width: 15%;\n    height: 30%;\n    border-radius: 50% 50% 50% 50%;\n    transform: rotate(80deg);\n    z-index: -2222;\n  }\n  .right-eye {\n    top: 45%;\n    left: 60%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n  .left-eye {\n    top: 45%;\n    left: 25%;\n    background: black;\n    width: 15%;\n    height: 17%;\n    border-radius: 50%;\n  }\n  .sparkle {\n    top: 25%;\n    left:-23%;\n    background: white;\n    width: 150%;\n    height: 100%;\n    border-radius: 50%;\n  }\n  .blush-right {\n    top: 65%;\n    left: 15%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n  .blush-left {\n    top: 65%;\n    left: 70%;\n    background: pink;\n    width: 15%;\n    height: 10%;\n    border-radius: 50%;\n  }\n  .beak-top {\n    top: 60%;\n    left: 40%;\n    background: var(--penguin-beak, orange);\n    width: 20%;\n    height: 10%;\n    border-radius: 50%;\n  }\n  .beak-bottom {\n    top: 65%;\n    left: 42%;\n    background: var(--penguin-beak, orange);\n    width: 16%;\n    height: 10%;\n    border-radius: 50%;\n  }\n  body {\n    background:#c6faf1;\n  }\n  .penguin * {\n    position: absolute;\n  }\n</style>\n<div class="penguin">\n  <div class="penguin-bottom">\n    <div class="right-hand"></div>\n    <div class="left-hand"></div>\n    <div class="right-feet"></div>\n    <div class="left-feet"></div>\n  </div>\n  <div class="penguin-top">\n    <div class="right-cheek"></div>\n    <div class="left-cheek"></div>\n    <div class="belly"></div>\n    <div class="right-eye">\n      <div class="sparkle"></div>\n    </div>\n    <div class="left-eye">\n      <div class="sparkle"></div>\n    </div>\n    <div class="blush-right"></div>\n    <div class="blush-left"></div>\n    <div class="beak-top"></div>\n    <div class="beak-bottom"></div>\n  </div>\n</div>\n')))}s.isMDXComponent=!0},214:function(e,n,t){"use strict";t.r(n),t.d(n,"MDXContext",(function(){return s})),t.d(n,"MDXProvider",(function(){return b})),t.d(n,"mdx",(function(){return x})),t.d(n,"useMDXComponents",(function(){return p})),t.d(n,"withMDXComponents",(function(){return m}));var a=t(0),o=t.n(a);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(){return(i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e}).apply(this,arguments)}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function d(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=o.a.createContext({}),m=function(e){return function(n){var t=p(n.components);return o.a.createElement(e,i({},n,{components:t}))}},p=function(e){var n=o.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):d(d({},n),e)),t},b=function(e){var n=p(e.components);return o.a.createElement(s.Provider,{value:n},e.children)},h={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},u=o.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,r=c(e,["components","mdxType","originalType","parentName"]),s=p(t),m=a,b=s["".concat(i,".").concat(m)]||s[m]||h[m]||l;return t?o.a.createElement(b,d(d({ref:n},r),{},{components:t})):o.a.createElement(b,d({ref:n},r))}));function x(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,i=new Array(l);i[0]=u;var r={};for(var d in n)hasOwnProperty.call(n,d)&&(r[d]=n[d]);r.originalType=e,r.mdxType="string"==typeof e?e:a,i[1]=r;for(var c=2;c<l;c++)i[c]=t[c];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);
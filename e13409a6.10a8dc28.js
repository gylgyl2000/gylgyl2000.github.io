(window.webpackJsonp=window.webpackJsonp||[]).push([[125],{195:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return d})),t.d(n,"rightToc",(function(){return p})),t.d(n,"default",(function(){return l}));var o=t(3),r=t(7),a=(t(0),t(212)),i={id:"freeCodeCamp-Object_Oriented_Programming-fr",title:"Programmation orient\xe9e objet"},d={unversionedId:"freeCodeCamp/freeCodeCamp-Object_Oriented_Programming-fr",id:"freeCodeCamp/freeCodeCamp-Object_Oriented_Programming-fr",isDocsHomePage:!1,title:"Programmation orient\xe9e objet",description:"Introduction aux d\xe9fis de la programmation orient\xe9e objet",source:"@site/docs/freeCodeCamp/freeCodeCamp-Object_Oriented_Programming-fr.md",slug:"/freeCodeCamp/freeCodeCamp-Object_Oriented_Programming-fr",permalink:"/docs/freeCodeCamp/freeCodeCamp-Object_Oriented_Programming-fr",editUrl:"https://github.com/gylgyl2000/laloutre.github.io/edit/main/docs/freeCodeCamp/freeCodeCamp-Object_Oriented_Programming-fr.md",version:"current",sidebar:"docs",previous:{title:"Script d'algorithme de base",permalink:"/docs/freeCodeCamp/freeCodeCamp-Basic_Algorithm_Scripting-fr"},next:{title:"Programmation fonctionnelle",permalink:"/docs/freeCodeCamp/freeCodeCamp-Functional_Programming-fr"}},p=[{value:"Introduction aux d\xe9fis de la programmation orient\xe9e objet",id:"introduction-aux-d\xe9fis-de-la-programmation-orient\xe9e-objet",children:[]},{value:"1. Cr\xe9er un objet JavaScript de base",id:"1-cr\xe9er-un-objet-javascript-de-base",children:[]},{value:"2. Utiliser la notation par points pour acc\xe9der aux propri\xe9t\xe9s d&#39;un objet",id:"2-utiliser-la-notation-par-points-pour-acc\xe9der-aux-propri\xe9t\xe9s-dun-objet",children:[]},{value:"3. Cr\xe9er une m\xe9thode sur un objet",id:"3-cr\xe9er-une-m\xe9thode-sur-un-objet",children:[]},{value:"4. Rendre le code plus r\xe9utilisable avec le mot-cl\xe9 <code>this</code>",id:"4-rendre-le-code-plus-r\xe9utilisable-avec-le-mot-cl\xe9-this",children:[]},{value:"5. D\xe9finir une fonction constructeur",id:"5-d\xe9finir-une-fonction-constructeur",children:[]},{value:"6. Utiliser un constructeur pour cr\xe9er des objets",id:"6-utiliser-un-constructeur-pour-cr\xe9er-des-objets",children:[]},{value:"7. \xc9tendre les constructeurs pour recevoir des arguments",id:"7-\xe9tendre-les-constructeurs-pour-recevoir-des-arguments",children:[]},{value:"8. V\xe9rifier le constructeur d&#39;un objet avec <code>instanceof</code>",id:"8-v\xe9rifier-le-constructeur-dun-objet-avec-instanceof",children:[]},{value:"9. Comprendre ses propres propri\xe9t\xe9s (<code>hasOwnProperty</code>)",id:"9-comprendre-ses-propres-propri\xe9t\xe9s-hasownproperty",children:[]},{value:"10. Utilisez les propri\xe9t\xe9s <code>prototype</code> pour r\xe9duire le code en double",id:"10-utilisez-les-propri\xe9t\xe9s-prototype-pour-r\xe9duire-le-code-en-double",children:[]},{value:"11. It\xe9rer sur toutes les propri\xe9t\xe9s",id:"11-it\xe9rer-sur-toutes-les-propri\xe9t\xe9s",children:[]},{value:"12. Comprendre la propri\xe9t\xe9 <code>constructor</code>",id:"12-comprendre-la-propri\xe9t\xe9-constructor",children:[]},{value:"13. Changer le prototype en nouvel objet",id:"13-changer-le-prototype-en-nouvel-objet",children:[]},{value:"14. N&#39;oubliez pas de d\xe9finir la propri\xe9t\xe9 du <code>constructor</code> lors de la modification du <code>prototype</code>",id:"14-noubliez-pas-de-d\xe9finir-la-propri\xe9t\xe9-du-constructor-lors-de-la-modification-du-prototype",children:[]},{value:"15. Comprendre d\u2019o\xf9 vient le prototype d\u2019un objet (<code>isPrototypeOf</code>)",id:"15-comprendre-do\xf9-vient-le-prototype-dun-objet-isprototypeof",children:[]},{value:"16. Comprendre la cha\xeene de prototype",id:"16-comprendre-la-cha\xeene-de-prototype",children:[]},{value:"17. Utilisez l&#39;h\xe9ritage pour ne pas vous r\xe9p\xe9ter",id:"17-utilisez-lh\xe9ritage-pour-ne-pas-vous-r\xe9p\xe9ter",children:[]},{value:"18. H\xe9riter des comportements d&#39;un supertype (<code>Object.create(obj)</code>)",id:"18-h\xe9riter-des-comportements-dun-supertype-objectcreateobj",children:[]},{value:"19. D\xe9finir le prototype de l&#39;enfant sur une instance du parent",id:"19-d\xe9finir-le-prototype-de-lenfant-sur-une-instance-du-parent",children:[]},{value:"20. R\xe9initialiser une propri\xe9t\xe9 de constructeur h\xe9rit\xe9e",id:"20-r\xe9initialiser-une-propri\xe9t\xe9-de-constructeur-h\xe9rit\xe9e",children:[]},{value:"21. Ajouter des m\xe9thodes apr\xe8s l&#39;h\xe9ritage",id:"21-ajouter-des-m\xe9thodes-apr\xe8s-lh\xe9ritage",children:[]},{value:"22. Remplacer les m\xe9thodes h\xe9rit\xe9es",id:"22-remplacer-les-m\xe9thodes-h\xe9rit\xe9es",children:[]},{value:"23. Utiliser un <code>mixin</code> pour ajouter un comportement commun entre des objets non li\xe9s",id:"23-utiliser-un-mixin-pour-ajouter-un-comportement-commun-entre-des-objets-non-li\xe9s",children:[]},{value:"24. Utiliser <code>closure</code> pour prot\xe9ger les propri\xe9t\xe9s d&#39;un objet contre toute modification externe",id:"24-utiliser-closure-pour-prot\xe9ger-les-propri\xe9t\xe9s-dun-objet-contre-toute-modification-externe",children:[]},{value:"25. Comprendre l&#39;expression de fonction imm\xe9diatement appel\xe9e (Immediately Invoked Function Expression - IIFE)",id:"25-comprendre-lexpression-de-fonction-imm\xe9diatement-appel\xe9e-immediately-invoked-function-expression---iife",children:[]},{value:"26. Utiliser un IIFE pour cr\xe9er un module",id:"26-utiliser-un-iife-pour-cr\xe9er-un-module",children:[]}],c={rightToc:p};function l(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(a.mdx)("wrapper",Object(o.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(a.mdx)("h2",{id:"introduction-aux-d\xe9fis-de-la-programmation-orient\xe9e-objet"},"Introduction aux d\xe9fis de la programmation orient\xe9e objet"),Object(a.mdx)("p",null,Object(a.mdx)("a",Object(o.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/"}),"Object Oriented Programming | freeCodeCamp.org")),Object(a.mdx)("p",null,"\xc0 la  base, le d\xe9veloppement logiciel r\xe9sout un probl\xe8me ou obtient un  r\xe9sultat avec le calcul. Le processus de d\xe9veloppement logiciel d\xe9finit  d'abord un probl\xe8me, puis pr\xe9sente une solution. La programmation  orient\xe9e objet est l'une des principales approches du processus de  d\xe9veloppement logiciel."),Object(a.mdx)("p",null,"Comme son nom l'indique, la programmation orient\xe9e objet organise le code en d\xe9finitions d'objets. Celles-ci sont parfois appel\xe9es classes et regroupent des donn\xe9es avec un comportement associ\xe9. Les donn\xe9es sont les attributs d'un objet et le comportement  (ou les fonctions) sont des m\xe9thodes."),Object(a.mdx)("p",null,"La structure de l'objet le  rend flexible au sein d'un programme. Les objets peuvent transf\xe9rer des  informations en appelant et en passant des donn\xe9es aux m\xe9thodes d'un  autre objet. De plus, les nouvelles classes peuvent recevoir ou h\xe9riter  de toutes les fonctionnalit\xe9s d'une classe de base ou parente. Cela aide \xe0 r\xe9duire le code r\xe9p\xe9t\xe9."),Object(a.mdx)("p",null,"Votre choix d'approche de  programmation d\xe9pend de quelques facteurs. Il s'agit notamment du type  de probl\xe8me, ainsi que de la mani\xe8re dont vous souhaitez structurer vos  donn\xe9es et vos algorithmes. Cette section couvre les principes de  programmation orient\xe9e objet en JavaScript."),Object(a.mdx)("hr",null),Object(a.mdx)("h2",{id:"1-cr\xe9er-un-objet-javascript-de-base"},"1. Cr\xe9er un objet JavaScript de base"),Object(a.mdx)("p",null,Object(a.mdx)("a",Object(o.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/create-a-basic-javascript-object"}),"Learn Object Oriented Programming: Create a Basic JavaScript Object | freeCodeCamp.org")),Object(a.mdx)("p",null,"Pensez aux choses que les gens voient tous les jours, comme les  voitures, les magasins et les oiseaux. Ce sont tous des objets : des  choses tangibles que les gens peuvent observer et avec lesquelles ils  peuvent interagir.\nQuelles sont les qualit\xe9s de ces objets ? Une voiture a des roues. Les magasins vendent des articles. Les oiseaux ont des ailes.\nCes qualit\xe9s, ou propri\xe9t\xe9s, d\xe9finissent ce qui constitue un objet. Notez  que des objets similaires partagent les m\xeames propri\xe9t\xe9s, mais peuvent  avoir des valeurs diff\xe9rentes pour ces propri\xe9t\xe9s. Par exemple, toutes  les voitures ont des roues, mais toutes les voitures n'ont pas le m\xeame  nombre de roues.\nLes objets en JavaScript sont utilis\xe9s pour  mod\xe9liser des objets du monde r\xe9el, en leur donnant des propri\xe9t\xe9s et un comportement tout comme leurs homologues du monde r\xe9el. Voici un  exemple utilisant ces concepts pour cr\xe9er un objet ",Object(a.mdx)("inlineCode",{parentName:"p"},"duck")," :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'let duck = {\n  name: "Aflac",\n  numLegs: 2\n};\n')),Object(a.mdx)("p",null,"Cet objet ",Object(a.mdx)("inlineCode",{parentName:"p"},"duck"),' a deux paires propri\xe9t\xe9/valeur : un nom de "Aflac" et un ',Object(a.mdx)("inlineCode",{parentName:"p"},"numLegs")," de 2."),Object(a.mdx)("hr",null),Object(a.mdx)("p",null,"Cr\xe9ez un objet ",Object(a.mdx)("inlineCode",{parentName:"p"},"dog")," avec les propri\xe9t\xe9s ",Object(a.mdx)("inlineCode",{parentName:"p"},"name")," et ",Object(a.mdx)("inlineCode",{parentName:"p"},"numLegs"),", et d\xe9finissez-les respectivement sur une cha\xeene et un nombre."),Object(a.mdx)("blockquote",null,Object(a.mdx)("p",{parentName:"blockquote"},Object(a.mdx)("inlineCode",{parentName:"p"},"dog")," doit \xeatre un objet.\n",Object(a.mdx)("inlineCode",{parentName:"p"},"dog")," doit avoir une propri\xe9t\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"name")," d\xe9finie sur ",Object(a.mdx)("inlineCode",{parentName:"p"},"string"),".\n",Object(a.mdx)("inlineCode",{parentName:"p"},"dog")," doit avoir une propri\xe9t\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"numLegs")," d\xe9finie sur ",Object(a.mdx)("inlineCode",{parentName:"p"},"number"),".")),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"let dog = {\n    name: \"toto\",\n    numLegs: 4\n};\nconsole.log(dog); // { name: 'toto', numLegs: 4 }\n")),Object(a.mdx)("hr",null),Object(a.mdx)("h2",{id:"2-utiliser-la-notation-par-points-pour-acc\xe9der-aux-propri\xe9t\xe9s-dun-objet"},"2. Utiliser la notation par points pour acc\xe9der aux propri\xe9t\xe9s d'un objet"),Object(a.mdx)("p",null,Object(a.mdx)("a",Object(o.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/use-dot-notation-to-access-the-properties-of-an-object"}),"Learn Object Oriented Programming: Use Dot Notation to Access the Properties of an Object | freeCodeCamp.org")),Object(a.mdx)("p",null,"Le dernier d\xe9fi a cr\xe9\xe9 un objet avec diverses propri\xe9t\xe9s. Vous allez  maintenant voir comment acc\xe9der aux valeurs de ces propri\xe9t\xe9s. Voici un  exemple :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"let duck = {\n  name: \"Aflac\",\n  numLegs: 2\n};\nconsole.log(duck.name);\n// Ceci imprime 'Aflac' sur la console\n")),Object(a.mdx)("p",null,"La notation par points est utilis\xe9e sur le nom de l'objet, ",Object(a.mdx)("inlineCode",{parentName:"p"},"duck"),", suivi du  nom de la propri\xe9t\xe9, ",Object(a.mdx)("inlineCode",{parentName:"p"},"name"),", pour acc\xe9der \xe0 la valeur de 'Aflac'."),Object(a.mdx)("hr",null),Object(a.mdx)("p",null,"Imprimez les deux propri\xe9t\xe9s de l'objet ",Object(a.mdx)("inlineCode",{parentName:"p"},"dog")," sur votre console."),Object(a.mdx)("blockquote",null,Object(a.mdx)("p",{parentName:"blockquote"},"Votre code doit utiliser ",Object(a.mdx)("inlineCode",{parentName:"p"},"console.log")," pour afficher la valeur de la propri\xe9t\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"name")," de l'objet chien.\nVotre code doit utiliser ",Object(a.mdx)("inlineCode",{parentName:"p"},"console.log")," pour afficher la valeur de la propri\xe9t\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"numLegs")," de l'objet chien.")),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'let dog = {\n  name: "Spot",\n  numLegs: 4\n};\n// Changer uniquement le code en dessous de cette ligne\n')),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'let dog = {\n  name: "Spot",\n  numLegs: 4\n};\n\nconsole.log(dog.name); // Spot\nconsole.log(dog.numLegs); // 4\n')),Object(a.mdx)("hr",null),Object(a.mdx)("h2",{id:"3-cr\xe9er-une-m\xe9thode-sur-un-objet"},"3. Cr\xe9er une m\xe9thode sur un objet"),Object(a.mdx)("p",null,Object(a.mdx)("a",Object(o.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/create-a-method-on-an-object"}),"Learn Object Oriented Programming: Create a Method on an Object | freeCodeCamp.org")),Object(a.mdx)("p",null,"Les objets peuvent avoir un type sp\xe9cial de propri\xe9t\xe9, appel\xe9 m\xe9thode.\nLes m\xe9thodes sont des propri\xe9t\xe9s qui sont des fonctions. Cela ajoute un  comportement diff\xe9rent \xe0 un objet. Voici l'exemple de ",Object(a.mdx)("inlineCode",{parentName:"p"},"duck")," avec une  m\xe9thode :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'let duck = {\n  name: "Aflac",\n  numLegs: 2,\n  sayName: function() {return "The name of this duck is " + duck.name + ".";}\n};\nduck.sayName();\n// Renvoie "The name of this duck is Aflac."\n')),Object(a.mdx)("p",null,"L'exemple ajoute la m\xe9thode ",Object(a.mdx)("inlineCode",{parentName:"p"},"sayName"),", qui est une fonction qui renvoie une phrase donnant le nom de ",Object(a.mdx)("inlineCode",{parentName:"p"},"duck"),". Notez que la m\xe9thode a acc\xe9d\xe9 \xe0 la propri\xe9t\xe9  ",Object(a.mdx)("inlineCode",{parentName:"p"},"name")," dans l'instruction ",Object(a.mdx)("inlineCode",{parentName:"p"},"return")," en utilisant ",Object(a.mdx)("inlineCode",{parentName:"p"},"duck.name"),". Le prochain d\xe9fi  couvrira une autre fa\xe7on de faire cela."),Object(a.mdx)("hr",null),Object(a.mdx)("p",null,"En utilisant l'objet ",Object(a.mdx)("inlineCode",{parentName:"p"},"dog"),", donnez-lui une m\xe9thode appel\xe9e ",Object(a.mdx)("inlineCode",{parentName:"p"},"sayLegs"),'. La m\xe9thode doit renvoyer la phrase "This dog has 4 legs."'),Object(a.mdx)("blockquote",null,Object(a.mdx)("p",{parentName:"blockquote"},Object(a.mdx)("inlineCode",{parentName:"p"},"dog.sayLegs()")," doit \xeatre une fonction.\n",Object(a.mdx)("inlineCode",{parentName:"p"},"dog.sayLegs()")," doit renvoyer la cha\xeene donn\xe9e - notez que la ponctuation et l'espacement sont importants.")),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'let dog = {\n  name: "Spot",\n  numLegs: 4,\n};\ndog.sayLegs();\n')),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'let dog = {\n  name: "Spot",\n  numLegs: 4,\n  sayLegs: function() {return "This dog has " + dog.numLegs + " legs.";}\n};\n\ndog.sayLegs();\nconsole.log(dog.sayLegs()); // This dog has 4 legs.\n')),Object(a.mdx)("hr",null),Object(a.mdx)("h2",{id:"4-rendre-le-code-plus-r\xe9utilisable-avec-le-mot-cl\xe9-this"},"4. Rendre le code plus r\xe9utilisable avec le mot-cl\xe9 ",Object(a.mdx)("inlineCode",{parentName:"h2"},"this")),Object(a.mdx)("p",null,Object(a.mdx)("a",Object(o.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/make-code-more-reusable-with-the-this-keyword"}),"Learn Object Oriented Programming: Make Code More Reusable with the this Keyword | freeCodeCamp.org")),Object(a.mdx)("p",null,"Le dernier d\xe9fi a introduit une m\xe9thode pour l'objet ",Object(a.mdx)("inlineCode",{parentName:"p"},"duck"),". Il a utilis\xe9 la notation par points ",Object(a.mdx)("inlineCode",{parentName:"p"},"duck.name")," pour acc\xe9der \xe0 la valeur de la  propri\xe9t\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"name")," dans l'instruction ",Object(a.mdx)("inlineCode",{parentName:"p"},"return")," :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'sayName: function() {return "The name of this duck is " + duck.name + ".";}\n')),Object(a.mdx)("p",null,"Bien que ce soit un moyen valide d'acc\xe9der \xe0 la propri\xe9t\xe9 de l'objet, il y a un pi\xe8ge ici. Si le nom de la variable change, tout code r\xe9f\xe9ren\xe7ant le nom d'origine devra \xe9galement \xeatre mis \xe0 jour. Dans une courte  d\xe9finition d'objet, ce n'est pas un probl\xe8me, mais si un objet a de  nombreuses r\xe9f\xe9rences \xe0 ses propri\xe9t\xe9s, il y a plus de risques d'erreur.\nUn moyen d'\xe9viter ces probl\xe8mes consiste \xe0 utiliser le mot-cl\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"this")," :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'let duck = {\n  name: "Aflac",\n  numLegs: 2,\n  sayName: function() {return "The name of this duck is " + this.name + ".";}\n};\n')),Object(a.mdx)("p",null,Object(a.mdx)("inlineCode",{parentName:"p"},"this")," est un sujet profond, et l'exemple ci-dessus n'est qu'une fa\xe7on de  l'utiliser. Dans le contexte actuel, ",Object(a.mdx)("inlineCode",{parentName:"p"},"this")," fait r\xe9f\xe9rence \xe0 l'objet auquel la m\xe9thode est associ\xe9e : ",Object(a.mdx)("inlineCode",{parentName:"p"},"duck"),". Si le nom de l'objet est chang\xe9 en ",Object(a.mdx)("inlineCode",{parentName:"p"},"mallard"),", il n'est pas n\xe9cessaire de trouver toutes les r\xe9f\xe9rences \xe0 ",Object(a.mdx)("inlineCode",{parentName:"p"},"duck")," dans le code. Cela rend le code r\xe9utilisable et plus facile \xe0  lire."),Object(a.mdx)("hr",null),Object(a.mdx)("p",null,"Modifiez la m\xe9thode ",Object(a.mdx)("inlineCode",{parentName:"p"},"dog.sayLegs")," pour supprimer toutes les r\xe9f\xe9rences \xe0 ",Object(a.mdx)("inlineCode",{parentName:"p"},"dog"),". Utilisez l'exemple du canard pour vous guider."),Object(a.mdx)("blockquote",null,Object(a.mdx)("p",{parentName:"blockquote"},Object(a.mdx)("inlineCode",{parentName:"p"},"dog.sayLegs()")," doit renvoyer la cha\xeene donn\xe9e.\nVotre code doit utiliser le mot cl\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"this")," pour acc\xe9der \xe0 la propri\xe9t\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"numLegs")," de ",Object(a.mdx)("inlineCode",{parentName:"p"},"dog"),".")),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'let dog = {\n  name: "Spot",\n  numLegs: 4,\n  sayLegs: function() {return "This dog has " + dog.numLegs + " legs.";}\n};\ndog.sayLegs();\nconsole.log(dog.sayLegs()); //This dog has 4 legs.\n')),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'let dog = {\n  name: "Spot",\n  numLegs: 4,\n  sayLegs: function() {return "This dog has " + this.numLegs + " legs.";}\n};\ndog.sayLegs();\n\nconsole.log(dog.sayLegs()); // This dog has 4 legs.\n')),Object(a.mdx)("hr",null),Object(a.mdx)("h2",{id:"5-d\xe9finir-une-fonction-constructeur"},"5. D\xe9finir une fonction constructeur"),Object(a.mdx)("p",null,Object(a.mdx)("a",Object(o.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/define-a-constructor-function"}),"Learn Object Oriented Programming: Define a Constructor Function | freeCodeCamp.org")),Object(a.mdx)("p",null,"Les ",Object(a.mdx)("em",{parentName:"p"},"constructeurs")," sont des fonctions qui cr\xe9ent de nouveaux objets. Ils  d\xe9finissent les propri\xe9t\xe9s et les comportements qui appartiendront au  nouvel objet. Consid\xe9rez-les comme un mod\xe8le pour la cr\xe9ation de  nouveaux objets.\nVoici un exemple de constructeur :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'function Bird() {\n  this.name = "Albert";\n  this.color = "blue";\n  this.numLegs = 2;\n}\n')),Object(a.mdx)("p",null,"Ce constructeur d\xe9finit un objet ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird")," avec les propri\xe9t\xe9s ",Object(a.mdx)("inlineCode",{parentName:"p"},"name"),", ",Object(a.mdx)("inlineCode",{parentName:"p"},"color")," et ",Object(a.mdx)("inlineCode",{parentName:"p"},"numLegs")," d\xe9finies respectivement sur ",Object(a.mdx)("inlineCode",{parentName:"p"},"Albert"),", ",Object(a.mdx)("inlineCode",{parentName:"p"},"blue")," et ",Object(a.mdx)("inlineCode",{parentName:"p"},"2"),". Les constructeurs suivent quelques conventions :"),Object(a.mdx)("ul",null,Object(a.mdx)("li",{parentName:"ul"},"Les constructeurs sont d\xe9finis avec un nom en majuscule pour les distinguer des autres fonctions qui  ne sont pas des constructeurs."),Object(a.mdx)("li",{parentName:"ul"},"Les constructeurs utilisent le mot-cl\xe9 ",Object(a.mdx)("inlineCode",{parentName:"li"},"this")," pour d\xe9finir les propri\xe9t\xe9s de l'objet qu'ils vont cr\xe9er. \xc0 l'int\xe9rieur du constructeur, cela fait r\xe9f\xe9rence au nouvel objet qu'il  cr\xe9era."),Object(a.mdx)("li",{parentName:"ul"},"Les constructeurs d\xe9finissent les propri\xe9t\xe9s et les  comportements au lieu de renvoyer une valeur comme le feraient d'autres  fonctions.")),Object(a.mdx)("hr",null),Object(a.mdx)("p",null,"Cr\xe9ez un constructeur, ",Object(a.mdx)("inlineCode",{parentName:"p"},"Dog"),", avec les propri\xe9t\xe9s ",Object(a.mdx)("inlineCode",{parentName:"p"},"name"),", ",Object(a.mdx)("inlineCode",{parentName:"p"},"color")," et ",Object(a.mdx)("inlineCode",{parentName:"p"},"numLegs")," d\xe9finies respectivement sur une cha\xeene, une cha\xeene et un nombre."),Object(a.mdx)("blockquote",null,Object(a.mdx)("p",{parentName:"blockquote"},Object(a.mdx)("inlineCode",{parentName:"p"},"Dog")," doit avoir une propri\xe9t\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"name")," d\xe9finie sur une cha\xeene.\n",Object(a.mdx)("inlineCode",{parentName:"p"},"Dog")," doit avoir une propri\xe9t\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"color")," d\xe9finie sur une cha\xeene.\n",Object(a.mdx)("inlineCode",{parentName:"p"},"Dog")," doit avoir une propri\xe9t\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"numLegs")," d\xe9finie sur un nombre.")),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'function Dog() {\n    this.name = "Spot";\n    this.color = "brown";\n    this.numLegs = 4;\n}\n')),Object(a.mdx)("hr",null),Object(a.mdx)("h2",{id:"6-utiliser-un-constructeur-pour-cr\xe9er-des-objets"},"6. Utiliser un constructeur pour cr\xe9er des objets"),Object(a.mdx)("p",null,Object(a.mdx)("a",Object(o.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/use-a-constructor-to-create-objects"}),"Learn Object Oriented Programming: Use a Constructor to Create Objects | freeCodeCamp.org")),Object(a.mdx)("p",null,"Voici le constructeur ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird")," du d\xe9fi pr\xe9c\xe9dent :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"function Bird() {\n  this.name = \"Albert\";\n  this.color  = \"blue\";\n  this.numLegs = 2;\n  // 'this' \xe0 l'int\xe9rieur du constructeur fait toujours r\xe9f\xe9rence \xe0 l'objet en cours de cr\xe9ation\n}\n\nlet blueBird = new Bird();\n")),Object(a.mdx)("p",null,"Notez que l'op\xe9rateur ",Object(a.mdx)("inlineCode",{parentName:"p"},"new")," est utilis\xe9 lors de l'appel d'un constructeur. Cela indique \xe0 JavaScript de cr\xe9er une nouvelle instance de ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird")," appel\xe9e ",Object(a.mdx)("inlineCode",{parentName:"p"},"blueBird"),". Sans l'op\xe9rateur ",Object(a.mdx)("inlineCode",{parentName:"p"},"new"),", ",Object(a.mdx)("inlineCode",{parentName:"p"},"this")," \xe0 l'int\xe9rieur du constructeur ne pointerait pas vers l'objet nouvellement cr\xe9\xe9, donnant des r\xe9sultats  inattendus. Maintenant, ",Object(a.mdx)("inlineCode",{parentName:"p"},"blueBird")," a toutes les propri\xe9t\xe9s d\xe9finies dans  le constructeur ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird")," :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"blueBird.name; // => Albert\nblueBird.color; // => blue\nblueBird.numLegs; // => 2\n")),Object(a.mdx)("p",null,"Comme tout autre objet, ses propri\xe9t\xe9s sont accessibles et modifiables :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"blueBird.name = 'Elvira';\nblueBird.name; // => Elvira\n")),Object(a.mdx)("hr",null),Object(a.mdx)("p",null,"Utilisez le constructeur ",Object(a.mdx)("inlineCode",{parentName:"p"},"Dog")," de la derni\xe8re le\xe7on pour cr\xe9er une nouvelle instance de ",Object(a.mdx)("inlineCode",{parentName:"p"},"Dog"),", en l'affectant \xe0 une variable ",Object(a.mdx)("inlineCode",{parentName:"p"},"hound"),"."),Object(a.mdx)("blockquote",null,Object(a.mdx)("p",{parentName:"blockquote"},Object(a.mdx)("inlineCode",{parentName:"p"},"hound")," doit \xeatre cr\xe9\xe9 \xe0 l'aide du constructeur ",Object(a.mdx)("inlineCode",{parentName:"p"},"Dog"),".\nVotre code doit utiliser l'op\xe9rateur ",Object(a.mdx)("inlineCode",{parentName:"p"},"new")," pour cr\xe9er une instance de ",Object(a.mdx)("inlineCode",{parentName:"p"},"Dog"),".")),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'function Dog() {\n  this.name = "Rupert";\n  this.color = "brown";\n  this.numLegs = 4;\n}\n// Changer uniquement le code en dessous de cette ligne\nlet hound = new Dog();\n')),Object(a.mdx)("hr",null),Object(a.mdx)("h2",{id:"7-\xe9tendre-les-constructeurs-pour-recevoir-des-arguments"},"7. \xc9tendre les constructeurs pour recevoir des arguments"),Object(a.mdx)("p",null,Object(a.mdx)("a",Object(o.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/extend-constructors-to-receive-arguments"}),"Learn Object Oriented Programming: Extend Constructors to Receive Arguments | freeCodeCamp.org")),Object(a.mdx)("p",null,"Les constructeurs ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird")," et ",Object(a.mdx)("inlineCode",{parentName:"p"},"Dog")," du dernier d\xe9fi ont bien fonctionn\xe9.  Cependant, notez que tous les ",Object(a.mdx)("inlineCode",{parentName:"p"},"Birds")," cr\xe9\xe9s avec le constructeur ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird")," sont automatiquement nomm\xe9s Albert, sont de couleur bleue et ont deux  pattes. Et si vous voulez des oiseaux avec des valeurs diff\xe9rentes pour  le nom et la couleur ? Il est possible de modifier manuellement les  propri\xe9t\xe9s de chaque oiseau, mais ce serait beaucoup de travail :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'let swan = new Bird();\nswan.name = "Carlos";\nswan.color = "white";\n')),Object(a.mdx)("p",null,"Supposons que vous \xe9criviez un programme pour suivre des centaines, voire des  milliers d'oiseaux diff\xe9rents dans une voli\xe8re. Il faudrait beaucoup de  temps pour cr\xe9er tous les oiseaux, puis changer les propri\xe9t\xe9s en  diff\xe9rentes valeurs pour chacun. Pour cr\xe9er plus facilement diff\xe9rents  objets ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird"),", vous pouvez concevoir votre constructeur ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird")," pour accepter les param\xe8tres :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"function Bird(name, color) {\n  this.name = name;\n  this.color = color;\n  this.numLegs = 2;\n}\n")),Object(a.mdx)("p",null,"Passez ensuite les valeurs comme arguments pour d\xe9finir chaque oiseau unique dans le constructeur ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird")," : ",Object(a.mdx)("inlineCode",{parentName:"p"},"let cardinal = new Bird('Bruce', 'red');")," Cela donne une nouvelle instance de ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird")," avec les propri\xe9t\xe9s de nom et  de couleur d\xe9finies respectivement sur Bruce et Red. La propri\xe9t\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"numLegs")," est toujours d\xe9finie sur 2. Le cardinal poss\xe8de les propri\xe9t\xe9s  suivantes :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"cardinal.name // => Bruce\ncardinal.color // => red\ncardinal.numLegs // => 2\n")),Object(a.mdx)("p",null,"Le constructeur est plus flexible. Il est maintenant possible de d\xe9finir  les propri\xe9t\xe9s de chaque ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird")," au moment de sa cr\xe9ation, ce qui est une des fa\xe7ons dont les constructeurs JavaScript sont si utiles. Ils  regroupent les objets en fonction de caract\xe9ristiques et de  comportements partag\xe9s et d\xe9finissent un plan qui automatise leur  cr\xe9ation."),Object(a.mdx)("hr",null),Object(a.mdx)("p",null,"Cr\xe9ez un autre constructeur ",Object(a.mdx)("inlineCode",{parentName:"p"},"Dog"),". Cette fois, configurez-le pour prendre ",Object(a.mdx)("inlineCode",{parentName:"p"},"name")," et ",Object(a.mdx)("inlineCode",{parentName:"p"},"color")," des param\xe8tres, et fixez la propri\xe9t\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"numLegs")," \xe0 4. Ensuite, cr\xe9ez un nouveau ",Object(a.mdx)("inlineCode",{parentName:"p"},"Dog")," enregistr\xe9 dans une variable ",Object(a.mdx)("inlineCode",{parentName:"p"},"terrier"),". Passez-lui deux cha\xeenes comme arguments pour  les propri\xe9t\xe9s ",Object(a.mdx)("inlineCode",{parentName:"p"},"name")," et ",Object(a.mdx)("inlineCode",{parentName:"p"},"color"),"."),Object(a.mdx)("blockquote",null,Object(a.mdx)("p",{parentName:"blockquote"},Object(a.mdx)("inlineCode",{parentName:"p"},"Dog")," devrait recevoir un argument pour ",Object(a.mdx)("inlineCode",{parentName:"p"},"name"),".\n",Object(a.mdx)("inlineCode",{parentName:"p"},"Dog")," devrait recevoir un argument pour ",Object(a.mdx)("inlineCode",{parentName:"p"},"color"),".\n",Object(a.mdx)("inlineCode",{parentName:"p"},"Dog")," doit avoir la propri\xe9t\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"numLegs")," d\xe9finie sur ",Object(a.mdx)("inlineCode",{parentName:"p"},"4"),".\n",Object(a.mdx)("inlineCode",{parentName:"p"},"terrier")," doit \xeatre cr\xe9\xe9 \xe0 l'aide du constructeur ",Object(a.mdx)("inlineCode",{parentName:"p"},"Dog"),".")),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'function Dog(name, color) {\n    this.name = name;\n    this.color = color;\n    this.numLegs = 4;\n}\nlet terrier = new Dog("Bouh", "white");\n\nconsole.log(terrier.name); // Bouh\nconsole.log(terrier.color); // white\nconsole.log(terrier.numLegs); // 4\n')),Object(a.mdx)("hr",null),Object(a.mdx)("h2",{id:"8-v\xe9rifier-le-constructeur-dun-objet-avec-instanceof"},"8. V\xe9rifier le constructeur d'un objet avec ",Object(a.mdx)("inlineCode",{parentName:"h2"},"instanceof")),Object(a.mdx)("p",null,Object(a.mdx)("a",Object(o.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/verify-an-objects-constructor-with-instanceof"}),"Learn Object Oriented Programming: Verify an Object's Constructor with instanceof | freeCodeCamp.org")),Object(a.mdx)("p",null,"Chaque fois qu'une fonction constructeur cr\xe9e un nouvel objet, cet objet est  consid\xe9r\xe9 comme une ",Object(a.mdx)("em",{parentName:"p"},"instance")," de son constructeur. JavaScript offre un  moyen pratique de v\xe9rifier cela avec l'op\xe9rateur ",Object(a.mdx)("inlineCode",{parentName:"p"},"instanceof"),". ",Object(a.mdx)("inlineCode",{parentName:"p"},"instanceof")," vous permet de comparer un objet \xe0 un constructeur, retournant ",Object(a.mdx)("inlineCode",{parentName:"p"},"true")," ou ",Object(a.mdx)("inlineCode",{parentName:"p"},"false")," selon que l'objet a \xe9t\xe9 cr\xe9\xe9 ou non avec le constructeur. Voici un  exemple :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'let Bird = function(name, color) {\n  this.name = name;\n  this.color = color;\n  this.numLegs = 2;\n}\n\nlet crow = new Bird("Alexis", "black");\n\ncrow instanceof Bird; // => true\n')),Object(a.mdx)("p",null,"Si un objet est cr\xe9\xe9 sans utiliser de constructeur, ",Object(a.mdx)("inlineCode",{parentName:"p"},"instanceof")," v\xe9rifiera qu'il ne s'agit pas d'une instance de ce constructeur :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'let canary = {\n  name: "Mildred",\n  color: "Yellow",\n  numLegs: 2\n};\n\ncanary instanceof Bird; // => false\n')),Object(a.mdx)("hr",null),Object(a.mdx)("p",null,"Cr\xe9ez une nouvelle instance du constructeur ",Object(a.mdx)("inlineCode",{parentName:"p"},"House"),", en l'appelant ",Object(a.mdx)("inlineCode",{parentName:"p"},"myHouse")," et  en passant un certain nombre de chambres. Ensuite, utilisez ",Object(a.mdx)("inlineCode",{parentName:"p"},"instanceof")," pour v\xe9rifier qu'il s'agit d'une instance de ",Object(a.mdx)("inlineCode",{parentName:"p"},"House"),"."),Object(a.mdx)("blockquote",null,Object(a.mdx)("p",{parentName:"blockquote"},Object(a.mdx)("inlineCode",{parentName:"p"},"myHouse")," doit avoir un attribut ",Object(a.mdx)("inlineCode",{parentName:"p"},"numBedrooms")," d\xe9fini sur un nombre.\nVous devez v\xe9rifier que ",Object(a.mdx)("inlineCode",{parentName:"p"},"myHouse")," est une instance de ",Object(a.mdx)("inlineCode",{parentName:"p"},"House")," \xe0 l'aide de l'op\xe9rateur ",Object(a.mdx)("inlineCode",{parentName:"p"},"instanceof"),".")),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"function House(numBedrooms) {\n  this.numBedrooms = numBedrooms;\n}\n// Changer uniquement le code en dessous de cette ligne\nlet myHouse = new House(4);\nmyHouse instanceof House;\nconsole.log(myHouse instanceof House); // true\n")),Object(a.mdx)("hr",null),Object(a.mdx)("h2",{id:"9-comprendre-ses-propres-propri\xe9t\xe9s-hasownproperty"},"9. Comprendre ses propres propri\xe9t\xe9s (",Object(a.mdx)("inlineCode",{parentName:"h2"},"hasOwnProperty"),")"),Object(a.mdx)("p",null,Object(a.mdx)("a",Object(o.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/understand-own-properties"}),"Learn Object Oriented Programming: Understand Own Properties | freeCodeCamp.org")),Object(a.mdx)("p",null,"Dans l'exemple suivant, le constructeur ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird")," d\xe9finit deux propri\xe9t\xe9s : ",Object(a.mdx)("inlineCode",{parentName:"p"},"name")," et ",Object(a.mdx)("inlineCode",{parentName:"p"},"numLegs")," :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'function Bird(name) {\n  this.name  = name;\n  this.numLegs = 2;\n}\n\nlet duck = new Bird("Donald");\nlet canary = new Bird("Tweety");\n')),Object(a.mdx)("p",null,Object(a.mdx)("inlineCode",{parentName:"p"},"name")," et ",Object(a.mdx)("inlineCode",{parentName:"p"},"numLegs")," sont appel\xe9s propri\xe9t\xe9s ",Object(a.mdx)("inlineCode",{parentName:"p"},"own"),", car ils sont d\xe9finis  directement sur l'objet d'instance. Cela signifie que ",Object(a.mdx)("inlineCode",{parentName:"p"},"duck")," et ",Object(a.mdx)("inlineCode",{parentName:"p"},"canary")," ont chacun leur propre copie de ces propri\xe9t\xe9s. En fait, chaque  instance de ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird")," aura sa propre copie de ces propri\xe9t\xe9s. Le code suivant ajoute toutes les propri\xe9t\xe9s ",Object(a.mdx)("inlineCode",{parentName:"p"},"own")," de ",Object(a.mdx)("inlineCode",{parentName:"p"},"duck")," au tableau ",Object(a.mdx)("inlineCode",{parentName:"p"},"ownProps")," :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'let ownProps = [];\n\nfor (let property in duck) {\n  if(duck.hasOwnProperty(property)) {\n    ownProps.push(property);\n  }\n}\n\nconsole.log(ownProps); // prints [ "name", "numLegs" ]\n')),Object(a.mdx)("hr",null),Object(a.mdx)("p",null,"Ajoutez les propri\xe9t\xe9s ",Object(a.mdx)("inlineCode",{parentName:"p"},"own")," de ",Object(a.mdx)("inlineCode",{parentName:"p"},"canary")," au tableau ",Object(a.mdx)("inlineCode",{parentName:"p"},"ownProps"),"."),Object(a.mdx)("blockquote",null,Object(a.mdx)("p",{parentName:"blockquote"},Object(a.mdx)("inlineCode",{parentName:"p"},"ownProps")," doit inclure les valeurs ",Object(a.mdx)("inlineCode",{parentName:"p"},'"numLegs"')," et ",Object(a.mdx)("inlineCode",{parentName:"p"},'"name"'),".\nVous devez r\xe9soudre ce probl\xe8me sans utiliser la m\xe9thode int\xe9gr\xe9e ",Object(a.mdx)("inlineCode",{parentName:"p"},"Object.keys()"),".\nVous devez r\xe9soudre ce probl\xe8me sans coder en dur le tableau ",Object(a.mdx)("inlineCode",{parentName:"p"},"ownProps"),".")),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"function Bird(name) {\n  this.name = name;\n  this.numLegs = 2;\n}\n\nlet canary = new Bird(\"Tweety\");\nlet ownProps = [];\n// Changer uniquement le code en dessous de cette ligne\nfor (let property in canary) {\n  if(canary.hasOwnProperty(property)) {\n    ownProps.push(property);\n  }\n}\nconsole.log(ownProps); // [ 'name', 'numLegs' ]\n")),Object(a.mdx)("p",null,Object(a.mdx)("a",Object(o.a)({parentName:"p"},{href:"https://forum.freecodecamp.org/t/freecodecamp-challenge-guide-understand-own-properties/301326"}),"solution")),Object(a.mdx)("hr",null),Object(a.mdx)("h2",{id:"10-utilisez-les-propri\xe9t\xe9s-prototype-pour-r\xe9duire-le-code-en-double"},"10. Utilisez les propri\xe9t\xe9s ",Object(a.mdx)("inlineCode",{parentName:"h2"},"prototype")," pour r\xe9duire le code en double"),Object(a.mdx)("p",null,Object(a.mdx)("a",Object(o.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/use-prototype-properties-to-reduce-duplicate-code"}),"Learn Object Oriented Programming: Use Prototype Properties to Reduce Duplicate Code | freeCodeCamp.org")),Object(a.mdx)("p",null,"Puisque ",Object(a.mdx)("inlineCode",{parentName:"p"},"numLegs")," aura probablement la m\xeame valeur pour toutes les instances de ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird"),", vous avez essentiellement une variable ",Object(a.mdx)("inlineCode",{parentName:"p"},"numLegs")," dupliqu\xe9e dans chaque instance de ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird"),".\nCela peut ne pas \xeatre un  probl\xe8me lorsqu'il n'y a que deux instances, mais imaginez s'il y a des  millions d'instances. Ce serait beaucoup de variables dupliqu\xe9es.\nUne meilleure fa\xe7on est d\u2019utiliser le ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype")," de ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird"),". Les propri\xe9t\xe9s du ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype")," sont partag\xe9es entre TOUTES les instances de ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird"),". Voici  comment ajouter des ",Object(a.mdx)("inlineCode",{parentName:"p"},"numLegs")," au ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird prototype")," :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"Bird.prototype.numLegs = 2;\n")),Object(a.mdx)("p",null,"D\xe9sormais, toutes les instances de ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird")," ont la propri\xe9t\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"numLegs"),"."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"console.log (duck.numLegs); // imprime 2\nconsole.log (canary.numLegs); // imprime 2\n")),Object(a.mdx)("p",null,"Puisque toutes les instances ont automatiquement les propri\xe9t\xe9s du ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype"),",  consid\xe9rez un ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype")," comme une \xab recette \xbb pour cr\xe9er des objets. Notez que le ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype")," pour ",Object(a.mdx)("inlineCode",{parentName:"p"},"duck")," et ",Object(a.mdx)("inlineCode",{parentName:"p"},"canary")," fait partie du  constructeur ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird")," sous le nom ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird.prototype"),". Presque chaque objet en  JavaScript a une propri\xe9t\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype")," qui fait partie de la fonction constructeur qui l'a cr\xe9\xe9."),Object(a.mdx)("hr",null),Object(a.mdx)("p",null,"Ajouter une propri\xe9t\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"numLegs")," au ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype")," de ",Object(a.mdx)("inlineCode",{parentName:"p"},"Dog"),"."),Object(a.mdx)("blockquote",null,Object(a.mdx)("p",{parentName:"blockquote"},Object(a.mdx)("inlineCode",{parentName:"p"},"beagle")," doit avoir une propri\xe9t\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"numLegs"),".\n",Object(a.mdx)("inlineCode",{parentName:"p"},"beagle.numLegs")," doit \xeatre un nombre.\n",Object(a.mdx)("inlineCode",{parentName:"p"},"numLegs")," doit \xeatre une propri\xe9t\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype")," et non une propri\xe9t\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"own"),".")),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'function Dog(name) {\n  this.name = name;\n}\nDog.prototype.numLegs = 4;\n// Changer uniquement le code au-dessus de cette ligne\nlet beagle = new Dog("Snoopy");\nconsole.log(beagle.numLegs); // 4\n')),Object(a.mdx)("hr",null),Object(a.mdx)("h2",{id:"11-it\xe9rer-sur-toutes-les-propri\xe9t\xe9s"},"11. It\xe9rer sur toutes les propri\xe9t\xe9s"),Object(a.mdx)("p",null,Object(a.mdx)("a",Object(o.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/iterate-over-all-properties"}),"Learn Object Oriented Programming: Iterate Over All Properties | freeCodeCamp.org")),Object(a.mdx)("p",null,"Vous avez maintenant vu deux types de propri\xe9t\xe9s : les propri\xe9t\xe9s ",Object(a.mdx)("inlineCode",{parentName:"p"},"own")," et les propri\xe9t\xe9s ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype"),". Les propri\xe9t\xe9s ",Object(a.mdx)("inlineCode",{parentName:"p"},"own")," sont d\xe9finies  directement sur l'instance d'objet elle-m\xeame. Et les propri\xe9t\xe9s ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype")," sont d\xe9finies sur le ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype"),"."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"function Bird (name) {\n  this.name = name; // propri\xe9t\xe9 own\n}\n\nBird.prototype.numLegs = 2; // propri\xe9t\xe9 prototype\n\nlet duck = new Bird ('Donald');\n")),Object(a.mdx)("p",null,"Voici comment ajouter les propri\xe9t\xe9s ",Object(a.mdx)("inlineCode",{parentName:"p"},"own")," de ",Object(a.mdx)("inlineCode",{parentName:"p"},"duck")," au tableau ",Object(a.mdx)("inlineCode",{parentName:"p"},"ownProps")," et les propri\xe9t\xe9s ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype")," au tableau ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototypeProps")," :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"let ownProps = [];\nlet prototypeProps = [];\n\nfor (let property in duck) {\n  if (duck.hasOwnProperty(property)) {\n    ownProps.push(property);\n  } else {\n    prototypeProps.push(property);\n  }\n}\n\nconsole.log(ownProps); // imprime ['name']\nconsole.log(prototypeProps); // imprime ['numLegs']\n")),Object(a.mdx)("hr",null),Object(a.mdx)("p",null,"Ajoutez toutes les propri\xe9t\xe9s ",Object(a.mdx)("inlineCode",{parentName:"p"},"own")," de ",Object(a.mdx)("inlineCode",{parentName:"p"},"beagle")," au tableau ",Object(a.mdx)("inlineCode",{parentName:"p"},"ownProps"),". Ajoutez toutes les propri\xe9t\xe9s ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype")," de ",Object(a.mdx)("inlineCode",{parentName:"p"},"Dog")," au tableau ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototypeProps"),"."),Object(a.mdx)("blockquote",null,Object(a.mdx)("p",{parentName:"blockquote"},"Le tableau ",Object(a.mdx)("inlineCode",{parentName:"p"},"ownProps")," doit inclure ",Object(a.mdx)("inlineCode",{parentName:"p"},'"name"'),".\nLe tableau ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototypeProps")," doit inclure ",Object(a.mdx)("inlineCode",{parentName:"p"},'"numLegs"'),".\nVous devez r\xe9soudre ce probl\xe8me sans utiliser la m\xe9thode int\xe9gr\xe9e ",Object(a.mdx)("inlineCode",{parentName:"p"},"Object.keys()"),".")),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"function Dog(name) {\n  this.name = name;\n}\n\nDog.prototype.numLegs = 4;\n\nlet beagle = new Dog(\"Snoopy\");\n\nlet ownProps = [];\nlet prototypeProps = [];\n\n// Changer uniquement le code en dessous de cette ligne\nfor (let property in beagle) {\n  if (beagle.hasOwnProperty(property)) {\n    ownProps.push(property);\n  } else {\n    prototypeProps.push(property);\n  }\n}\nconsole.log(ownProps); // [ 'name' ]\nconsole.log(prototypeProps); // [ 'numLegs' ]\n")),Object(a.mdx)("hr",null),Object(a.mdx)("h2",{id:"12-comprendre-la-propri\xe9t\xe9-constructor"},"12. Comprendre la propri\xe9t\xe9 ",Object(a.mdx)("inlineCode",{parentName:"h2"},"constructor")),Object(a.mdx)("p",null,Object(a.mdx)("a",Object(o.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/understand-the-constructor-property"}),"Learn Object Oriented Programming: Understand the Constructor Property | freeCodeCamp.org")),Object(a.mdx)("p",null,"Il existe une propri\xe9t\xe9 sp\xe9ciale de ",Object(a.mdx)("inlineCode",{parentName:"p"},"constructor")," situ\xe9e sur les instances d'objet ",Object(a.mdx)("inlineCode",{parentName:"p"},"duck")," et ",Object(a.mdx)("inlineCode",{parentName:"p"},"beagle")," cr\xe9\xe9es dans les d\xe9fis pr\xe9c\xe9dents :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"let duck = new Bird();\nlet beagle = new Dog();\n\nconsole.log(duck.constructor === Bird); // imprime true\nconsole.log(beagle.constructor === Dog); // imprime true\n")),Object(a.mdx)("p",null,"Notez que la propri\xe9t\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"constructor")," est une r\xe9f\xe9rence \xe0 la fonction constructeur qui a cr\xe9\xe9 l'instance. L'avantage de la propri\xe9t\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"constructor")," est qu'il est possible de v\xe9rifier cette propri\xe9t\xe9 pour savoir de quel type d'objet il s'agit. Voici un exemple de la fa\xe7on dont cela pourrait \xeatre utilis\xe9 :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"function joinBirdFraternity(candidate) {\n  if (candidate.constructor === Bird) {\n    return true;\n  } else {\n    return false;\n  }\n}\n")),Object(a.mdx)("p",null,Object(a.mdx)("strong",{parentName:"p"},"Remarque :")," \xc9tant donn\xe9 que la propri\xe9t\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"constructor")," peut \xeatre \xe9cras\xe9e (ce qui sera couvert dans les deux prochains d\xe9fis), il est g\xe9n\xe9ralement pr\xe9f\xe9rable  d'utiliser la m\xe9thode ",Object(a.mdx)("inlineCode",{parentName:"p"},"instanceof")," pour v\xe9rifier le type d'un objet."),Object(a.mdx)("hr",null),Object(a.mdx)("p",null,"\xc9crivez une fonction ",Object(a.mdx)("inlineCode",{parentName:"p"},"joinDogFraternity")," qui prend un param\xe8tre ",Object(a.mdx)("inlineCode",{parentName:"p"},"candidate")," et, \xe0  l'aide de la propri\xe9t\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"constructor"),", renvoie ",Object(a.mdx)("inlineCode",{parentName:"p"},"true")," si ",Object(a.mdx)("inlineCode",{parentName:"p"},"candidate")," est ",Object(a.mdx)("inlineCode",{parentName:"p"},"dog"),", sinon renvoie ",Object(a.mdx)("inlineCode",{parentName:"p"},"false"),"."),Object(a.mdx)("blockquote",null,Object(a.mdx)("p",{parentName:"blockquote"},Object(a.mdx)("inlineCode",{parentName:"p"},"joinDogFraternity")," doit \xeatre d\xe9fini comme une fonction.\n",Object(a.mdx)("inlineCode",{parentName:"p"},"joinDogFraternity")," doit renvoyer ",Object(a.mdx)("inlineCode",{parentName:"p"},"true")," si ",Object(a.mdx)("inlineCode",{parentName:"p"},"candidat")," est une instance de ",Object(a.mdx)("inlineCode",{parentName:"p"},"Dog"),".\n",Object(a.mdx)("inlineCode",{parentName:"p"},"joinDogFraternity")," doit utiliser la propri\xe9t\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"constructor"),".")),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"function Dog(name) {\n  this.name = name;\n}\n// Changer uniquement le code en dessous de cette ligne\nlet candidate = new Dog();\nfunction joinDogFraternity(candidate) {\n  if (candidate.constructor === Dog) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nconsole.log(joinDogFraternity(candidate)); // true\n")),Object(a.mdx)("hr",null),Object(a.mdx)("h2",{id:"13-changer-le-prototype-en-nouvel-objet"},"13. Changer le prototype en nouvel objet"),Object(a.mdx)("p",null,Object(a.mdx)("a",Object(o.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/change-the-prototype-to-a-new-object"}),"Learn Object Oriented Programming: Change the Prototype to a New Object | freeCodeCamp.org")),Object(a.mdx)("p",null,"Jusqu'\xe0 pr\xe9sent, vous ajoutiez individuellement des propri\xe9t\xe9s au ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype")," :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"Bird.prototype.numLegs = 2;\n")),Object(a.mdx)("p",null,"Cela devient fastidieux apr\xe8s plus de quelques propri\xe9t\xe9s."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"Bird.prototype.eat = function () {\n  console.log('nom nom nom');\n}\n\nBird.prototype.describe = function () {\n  console.log('Mon nom est ' + this.name);\n}\n")),Object(a.mdx)("p",null,"Un moyen plus efficace consiste \xe0 d\xe9finir le ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype")," sur un nouvel objet contenant d\xe9j\xe0 les propri\xe9t\xe9s. De cette fa\xe7on, les propri\xe9t\xe9s sont  ajout\xe9es en une seule fois :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"Bird.prototype = {\n  numLegs: 2,\n  eat: function() {\n    console.log('nom nom nom');\n  },\n  describe: function() {\n    console.log('Mon nom est ' + this.name);\n  }\n};\n")),Object(a.mdx)("hr",null),Object(a.mdx)("p",null,"Ajoutez la propri\xe9t\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"numLegs")," et les deux m\xe9thodes ",Object(a.mdx)("inlineCode",{parentName:"p"},"eat()")," et ",Object(a.mdx)("inlineCode",{parentName:"p"},"describe()")," au ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype")," de ",Object(a.mdx)("inlineCode",{parentName:"p"},"Dog")," en d\xe9finissant le ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype")," sur un nouvel objet."),Object(a.mdx)("blockquote",null,Object(a.mdx)("p",{parentName:"blockquote"},Object(a.mdx)("inlineCode",{parentName:"p"},"Dog.prototype")," doit \xeatre d\xe9fini sur un nouvel objet.\n",Object(a.mdx)("inlineCode",{parentName:"p"},"Dog.prototype")," doit avoir la propri\xe9t\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"numLegs"),".\n",Object(a.mdx)("inlineCode",{parentName:"p"},"Dog.prototype")," doit avoir la m\xe9thode ",Object(a.mdx)("inlineCode",{parentName:"p"},"eat()"),".\n",Object(a.mdx)("inlineCode",{parentName:"p"},"Dog.prototype")," doit avoir la m\xe9thode ",Object(a.mdx)("inlineCode",{parentName:"p"},"describe()"),".")),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"function Dog(name) {\n  this.name = name;\n}\nDog.prototype = {\n// Changer uniquement le code en dessous de cette ligne\n  numLegs: 2,\n  eat: function() {\n    console.log('chicken');\n  },\n  describe: function() {\n    console.log('My name is ' + this.name);\n  }\n};\n")),Object(a.mdx)("hr",null),Object(a.mdx)("h2",{id:"14-noubliez-pas-de-d\xe9finir-la-propri\xe9t\xe9-du-constructor-lors-de-la-modification-du-prototype"},"14. N'oubliez pas de d\xe9finir la propri\xe9t\xe9 du ",Object(a.mdx)("inlineCode",{parentName:"h2"},"constructor")," lors de la modification du ",Object(a.mdx)("inlineCode",{parentName:"h2"},"prototype")),Object(a.mdx)("p",null,Object(a.mdx)("a",Object(o.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/remember-to-set-the-constructor-property-when-changing-the-prototype"}),"Learn Object Oriented Programming: Remember to Set the Constructor Property when Changing the Prototype | freeCodeCamp.org")),Object(a.mdx)("p",null,"Il existe un effet secondaire crucial de la d\xe9finition manuelle du  prototype sur un nouvel objet. Il efface la propri\xe9t\xe9 du ",Object(a.mdx)("inlineCode",{parentName:"p"},"constructor")," !  Cette propri\xe9t\xe9 peut \xeatre utilis\xe9e pour v\xe9rifier quelle fonction ",Object(a.mdx)("inlineCode",{parentName:"p"},"constructor")," a cr\xe9\xe9 l'instance, mais comme la propri\xe9t\xe9 a \xe9t\xe9 \xe9cras\xe9e,  elle donne d\xe9sormais de faux r\xe9sultats :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"duck.constructor === Bird; // false - Oups\nduck.constructor === Objet; // true, tous les objets h\xe9ritent de Object.prototype\nduck instanceof Bird; // true, fonctionne toujours\n")),Object(a.mdx)("p",null,"Pour r\xe9soudre ce probl\xe8me, chaque fois qu'un prototype est d\xe9fini manuellement sur un nouvel objet, n'oubliez pas de d\xe9finir la propri\xe9t\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"constructor")," :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"Bird.prototype = {\n  constructor: Bird, // d\xe9finir la propri\xe9t\xe9 du constructeur\n  numLegs: 2,\n  manger: function() {\n    console.log('nom nom nom');\n  },\n  describe: function() {\n    console.log('Mon nom est' + this.name);\n  }\n};\n")),Object(a.mdx)("hr",null),Object(a.mdx)("p",null,"D\xe9finissez la propri\xe9t\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"constructor")," sur le ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype")," ",Object(a.mdx)("inlineCode",{parentName:"p"},"Dog"),"."),Object(a.mdx)("blockquote",null,Object(a.mdx)("p",{parentName:"blockquote"},Object(a.mdx)("inlineCode",{parentName:"p"},"Dog.prototype")," doit d\xe9finir la propri\xe9t\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"constructor"),".")),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'function Dog(name) {\n  this.name = name;\n}\n// Changer uniquement le code en dessous de cette ligne\nDog.prototype = {\n  constructor: Dog,\n  numLegs: 4,\n  eat: function() {\n    console.log("nom nom nom");\n  },\n  describe: function() {\n    console.log("My name is " + this.name);\n  }\n};\n')),Object(a.mdx)("hr",null),Object(a.mdx)("h2",{id:"15-comprendre-do\xf9-vient-le-prototype-dun-objet-isprototypeof"},"15. Comprendre d\u2019o\xf9 vient le prototype d\u2019un objet (",Object(a.mdx)("inlineCode",{parentName:"h2"},"isPrototypeOf"),")"),Object(a.mdx)("p",null,Object(a.mdx)("a",Object(o.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/understand-where-an-objects-prototype-comes-from"}),"Learn Object Oriented Programming: Understand Where an Object\u2019s Prototype Comes From | freeCodeCamp.org")),Object(a.mdx)("p",null,"Tout comme les gens h\xe9ritent des g\xe8nes de leurs parents, un objet h\xe9rite de son ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype")," directement de la fonction ",Object(a.mdx)("inlineCode",{parentName:"p"},"constructor")," qui l'a cr\xe9\xe9.  Par exemple, ici, le ",Object(a.mdx)("inlineCode",{parentName:"p"},"constructor")," ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird")," cr\xe9e l'objet ",Object(a.mdx)("inlineCode",{parentName:"p"},"duck")," :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"function Bird(name) {\n  this.name = name;\n}\nlet duck = new Bird ('Donald');\n")),Object(a.mdx)("p",null,Object(a.mdx)("inlineCode",{parentName:"p"},"duck")," h\xe9rite de son ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype")," de la fonction ",Object(a.mdx)("inlineCode",{parentName:"p"},"constructor")," ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird"),". Vous pouvez  afficher cette relation avec la m\xe9thode ",Object(a.mdx)("inlineCode",{parentName:"p"},"isPrototypeOf")," :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"Bird.prototype.isPrototypeOf(duck);\n// renvoie true\n")),Object(a.mdx)("hr",null),Object(a.mdx)("p",null,"Utilisez ",Object(a.mdx)("inlineCode",{parentName:"p"},"isPrototypeOf")," pour v\xe9rifier le ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype")," de ",Object(a.mdx)("inlineCode",{parentName:"p"},"beagle"),"."),Object(a.mdx)("blockquote",null,Object(a.mdx)("p",{parentName:"blockquote"},"Vous devez montrer que ",Object(a.mdx)("inlineCode",{parentName:"p"},"Dog.prototype")," est le ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype")," de ",Object(a.mdx)("inlineCode",{parentName:"p"},"beagle"),".")),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'function Dog(name) {\n  this.name = name;\n}\nlet beagle = new Dog("Snoopy");\n// Changer uniquement le code en dessous de cette ligne\nDog.prototype.isPrototypeOf(beagle);\n\nconsole.log(Dog.prototype.isPrototypeOf(beagle)); // true\n')),Object(a.mdx)("hr",null),Object(a.mdx)("h2",{id:"16-comprendre-la-cha\xeene-de-prototype"},"16. Comprendre la cha\xeene de prototype"),Object(a.mdx)("p",null,Object(a.mdx)("a",Object(o.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/understand-the-prototype-chain"}),"Learn Object Oriented Programming: Understand the Prototype Chain | freeCodeCamp.org")),Object(a.mdx)("p",null,"Tous les objets en JavaScript (\xe0 quelques exceptions pr\xe8s) ont un ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype"),". De plus, le ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype")," d\u2019un objet lui-m\xeame est un objet."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"function Bird(name) {\n  this.name = name;\n}\n\ntypeof Bird.prototype; // donne 'objet'\n")),Object(a.mdx)("p",null,"Parce qu'un ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype")," est un objet, un ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype")," peut avoir son propre ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype")," ! Dans ce cas, le ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype")," de ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird.prototype")," est ",Object(a.mdx)("inlineCode",{parentName:"p"},"Object.prototype")," :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"Object.prototype.isPrototypeOf(Bird.prototype); // renvoie true\n")),Object(a.mdx)("p",null,"En quoi est-ce utile ? Vous pouvez vous rappeler la m\xe9thode ",Object(a.mdx)("inlineCode",{parentName:"p"},"hasOwnProperty")," d'un d\xe9fi pr\xe9c\xe9dent :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"let duck = new Bird('Donald');\nduck.hasOwnProperty('name'); // donne true\n")),Object(a.mdx)("p",null,"La m\xe9thode ",Object(a.mdx)("inlineCode",{parentName:"p"},"hasOwnProperty")," est d\xe9finie dans ",Object(a.mdx)("inlineCode",{parentName:"p"},"Object.prototype"),", qui est  accessible par ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird.prototype"),", qui est ensuite accessible par ",Object(a.mdx)("inlineCode",{parentName:"p"},"duck"),".  Ceci est un exemple de la cha\xeene de ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype"),". Dans cette cha\xeene de ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype"),", ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird")," est le ",Object(a.mdx)("inlineCode",{parentName:"p"},"supertype")," pour ",Object(a.mdx)("inlineCode",{parentName:"p"},"duck"),", tandis que ",Object(a.mdx)("inlineCode",{parentName:"p"},"duck")," est le ",Object(a.mdx)("inlineCode",{parentName:"p"},"subtype"),". ",Object(a.mdx)("inlineCode",{parentName:"p"},"objet")," est un ",Object(a.mdx)("inlineCode",{parentName:"p"},"supertype")," pour ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird")," et ",Object(a.mdx)("inlineCode",{parentName:"p"},"duck"),". ",Object(a.mdx)("inlineCode",{parentName:"p"},"object")," est un ",Object(a.mdx)("inlineCode",{parentName:"p"},"supertype")," pour tous les objets en JavaScript. Par cons\xe9quent, tout objet peut utiliser la m\xe9thode ",Object(a.mdx)("inlineCode",{parentName:"p"},"hasOwnProperty"),"."),Object(a.mdx)("hr",null),Object(a.mdx)("p",null,"Modifiez le code pour afficher la cha\xeene de prototype correcte."),Object(a.mdx)("blockquote",null,Object(a.mdx)("p",{parentName:"blockquote"},"Votre code doit montrer que ",Object(a.mdx)("inlineCode",{parentName:"p"},"Object.prototype")," est le ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype")," de ",Object(a.mdx)("inlineCode",{parentName:"p"},"Dog.prototype"),".")),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'function Dog(name) {\n  this.name = name;\n}\nlet beagle = new Dog("Snoopy");\nDog.prototype.isPrototypeOf(beagle);  // donne true\n// Corrigez le code ci-dessous pour qu\'il soit \xe9valu\xe9 \xe0 true\n???.isPrototypeOf(Dog.prototype);\n')),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"Object.prototype.isPrototypeOf(Dog.prototype);\nconsole.log(Object.prototype.isPrototypeOf(Dog.prototype)); // true\n")),Object(a.mdx)("hr",null),Object(a.mdx)("h2",{id:"17-utilisez-lh\xe9ritage-pour-ne-pas-vous-r\xe9p\xe9ter"},"17. Utilisez l'h\xe9ritage pour ne pas vous r\xe9p\xe9ter"),Object(a.mdx)("p",null,Object(a.mdx)("a",Object(o.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/use-inheritance-so-you-dont-repeat-yourself"}),"Learn Object Oriented Programming: Use Inheritance So You Don't Repeat Yourself | freeCodeCamp.org")),Object(a.mdx)("p",null,"Il y a un principe dans la programmation appel\xe9 ",Object(a.mdx)("em",{parentName:"p"},"Don't Repeat Yourself (DRY)"),". La raison pour laquelle le code r\xe9p\xe9t\xe9 est un probl\xe8me est que toute modification n\xe9cessite de corriger le code \xe0 plusieurs endroits.  Cela signifie g\xe9n\xe9ralement plus de travail pour les programmeurs et plus de place pour les erreurs.\nNotez dans l'exemple ci-dessous que la m\xe9thode ",Object(a.mdx)("inlineCode",{parentName:"p"},"describe")," est partag\xe9e par ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird")," and ",Object(a.mdx)("inlineCode",{parentName:"p"},"Dog")," :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'Bird.prototype = {\n  constructor: Bird,\n  describe: function() {\n    console.log("My name is " + this.name);\n  }\n};\n\nDog.prototype = {\n  constructor: Dog,\n  describe: function() {\n    console.log("My name is " + this.name);\n  }\n};\n')),Object(a.mdx)("p",null,"La m\xe9thode ",Object(a.mdx)("inlineCode",{parentName:"p"},"describe")," est r\xe9p\xe9t\xe9e \xe0 deux endroits. Le code peut \xeatre  \xe9dit\xe9 pour suivre le principe DRY en cr\xe9ant un ",Object(a.mdx)("inlineCode",{parentName:"p"},"supertype")," (ou parent) appel\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"Animal")," :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'function Animal() { };\n\nAnimal.prototype = {\n  constructor: Animal, \n  describe: function() {\n    console.log("My name is " + this.name);\n  }\n};\n')),Object(a.mdx)("p",null,"Puisque ",Object(a.mdx)("inlineCode",{parentName:"p"},"Animal")," inclut la m\xe9thode ",Object(a.mdx)("inlineCode",{parentName:"p"},"describe"),", vous pouvez la supprimer de ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird")," and ",Object(a.mdx)("inlineCode",{parentName:"p"},"Dog")," :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"Bird.prototype = {\n  constructor: Bird\n};\n\nDog.prototype = {\n  constructor: Dog\n};\n")),Object(a.mdx)("hr",null),Object(a.mdx)("p",null,"La m\xe9thode ",Object(a.mdx)("inlineCode",{parentName:"p"},"eat")," est r\xe9p\xe9t\xe9e \xe0 la fois chez ",Object(a.mdx)("inlineCode",{parentName:"p"},"Cat")," et ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bear"),". Modifiez le code dans l'esprit de DRY en d\xe9pla\xe7ant la m\xe9thode ",Object(a.mdx)("inlineCode",{parentName:"p"},"eat")," vers le ",Object(a.mdx)("inlineCode",{parentName:"p"},"supertype")," ",Object(a.mdx)("inlineCode",{parentName:"p"},"Animal"),"."),Object(a.mdx)("blockquote",null,Object(a.mdx)("p",{parentName:"blockquote"},Object(a.mdx)("inlineCode",{parentName:"p"},"Animal.prototype")," doit avoir la propri\xe9t\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"eat"),".\n",Object(a.mdx)("inlineCode",{parentName:"p"},"Bear.prototype")," ne doit pas avoir la propri\xe9t\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"eat"),".\n",Object(a.mdx)("inlineCode",{parentName:"p"},"Cat.prototype")," ne doit pas avoir la propri\xe9t\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"eat"),".")),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'function Cat(name) {\n  this.name = name;\n}\n\nCat.prototype = {\n  constructor: Cat,\n  eat: function() {\n    console.log("nom nom nom");\n  }\n};\n\nfunction Bear(name) {\n  this.name = name;\n}\n\nBear.prototype = {\n  constructor: Bear,\n  eat: function() {\n    console.log("nom nom nom");\n  }\n};\n\nfunction Animal() { }\n\nAnimal.prototype = {\n  constructor: Animal,\n\n};\n')),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'function Cat(name) {\n  this.name = name;\n}\n\nCat.prototype = {\n  constructor: Cat,\n};\n\nfunction Bear(name) {\n  this.name = name;\n}\n\nBear.prototype = {\n  constructor: Bear,\n};\n\nfunction Animal() { }\n\nAnimal.prototype = {\n  constructor: Animal,\n  eat: function() {\n    console.log("nom nom nom");\n  }\n};\n')),Object(a.mdx)("hr",null),Object(a.mdx)("h2",{id:"18-h\xe9riter-des-comportements-dun-supertype-objectcreateobj"},"18. H\xe9riter des comportements d'un supertype (",Object(a.mdx)("inlineCode",{parentName:"h2"},"Object.create(obj)"),")"),Object(a.mdx)("p",null,Object(a.mdx)("a",Object(o.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/inherit-behaviors-from-a-supertype"}),"Learn Object Oriented Programming: Inherit Behaviors from a Supertype | freeCodeCamp.org")),Object(a.mdx)("p",null,"Dans le d\xe9fi pr\xe9c\xe9dent, vous avez cr\xe9\xe9 un ",Object(a.mdx)("inlineCode",{parentName:"p"},"supertype")," appel\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"Animal")," qui d\xe9finissait les comportements partag\xe9s par tous les animaux :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"function Animal() { }\nAnimal.prototype.eat = function() {\n  console.log('nom nom nom');\n};\n")),Object(a.mdx)("p",null,"Ce d\xe9fi et le prochain couvriront comment r\xe9utiliser les m\xe9thodes d'",Object(a.mdx)("inlineCode",{parentName:"p"},"Animal")," dans ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird")," and ",Object(a.mdx)("inlineCode",{parentName:"p"},"Dog")," sans les red\xe9finir. Il utilise une technique appel\xe9e h\xe9ritage. Ce d\xe9fi couvre la premi\xe8re \xe9tape : cr\xe9er une instance du ",Object(a.mdx)("inlineCode",{parentName:"p"},"supertype")," (ou parent). Vous connaissez d\xe9j\xe0 un moyen de cr\xe9er une  instance ",Object(a.mdx)("inlineCode",{parentName:"p"},"Animal")," \xe0 l'aide du op\xe9rateur ",Object(a.mdx)("inlineCode",{parentName:"p"},"new")," :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"let animal = new animal();\n")),Object(a.mdx)("p",null,"Il existe certains inconv\xe9nients lors de l'utilisation de cette syntaxe  pour l'h\xe9ritage, qui sont trop complexes pour la port\xe9e de ce d\xe9fi. Au  lieu de cela, voici une approche alternative sans ces inconv\xe9nients :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"let animal = Object.create(Animal.prototype);\n")),Object(a.mdx)("p",null,Object(a.mdx)("inlineCode",{parentName:"p"},"Object.create(obj)")," cr\xe9e un nouvel objet et d\xe9finit ",Object(a.mdx)("inlineCode",{parentName:"p"},"obj")," comme ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype")," du nouvel  objet. Rappelez-vous que le ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype")," est comme la \xab recette \xbb pour cr\xe9er  un objet. En d\xe9finissant le ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype")," de ",Object(a.mdx)("inlineCode",{parentName:"p"},"animal")," comme ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype d'Animal"),", vous donnez effectivement \xe0 l'instance ",Object(a.mdx)("inlineCode",{parentName:"p"},"animal")," la m\xeame  \xab recette \xbb que toute autre instance ",Object(a.mdx)("inlineCode",{parentName:"p"},"Animal"),"."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"animal.eat(); // imprime 'nom nom nom'\nanimal instanceof Animal; // => true\n")),Object(a.mdx)("hr",null),Object(a.mdx)("p",null,"Utilisez ",Object(a.mdx)("inlineCode",{parentName:"p"},"Object.create")," pour cr\xe9er deux instances ",Object(a.mdx)("inlineCode",{parentName:"p"},"Animal")," nomm\xe9es ",Object(a.mdx)("inlineCode",{parentName:"p"},"duck")," et ",Object(a.mdx)("inlineCode",{parentName:"p"},"beagle"),"."),Object(a.mdx)("blockquote",null,Object(a.mdx)("p",{parentName:"blockquote"},"La variable ",Object(a.mdx)("inlineCode",{parentName:"p"},"duck")," doit \xeatre d\xe9finie.\nLa variable ",Object(a.mdx)("inlineCode",{parentName:"p"},"beagle")," doit \xeatre d\xe9finie.\nLa variable ",Object(a.mdx)("inlineCode",{parentName:"p"},"duck")," doit \xeatre initialis\xe9e avec ",Object(a.mdx)("inlineCode",{parentName:"p"},"Object.create"),".\nLa variable ",Object(a.mdx)("inlineCode",{parentName:"p"},"beagle")," doit \xeatre initialis\xe9e avec ",Object(a.mdx)("inlineCode",{parentName:"p"},"Object.create"),".\n",Object(a.mdx)("inlineCode",{parentName:"p"},"duck")," devrait avoir un ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype")," de ",Object(a.mdx)("inlineCode",{parentName:"p"},"Animal"),".\n",Object(a.mdx)("inlineCode",{parentName:"p"},"beagle")," devrait avoir un ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype")," de ",Object(a.mdx)("inlineCode",{parentName:"p"},"Animal"),".")),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'function Animal() { }\n\nAnimal.prototype = {\n  constructor: Animal,\n  eat: function() {\n    console.log("nom nom nom");\n  }\n};\n// Changer uniquement le code en dessous de cette ligne\nlet duck; // Changer cette ligne\nlet beagle; // Changer cette ligne\n')),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'function Animal() { }\n\nAnimal.prototype = {\n  constructor: Animal,\n  eat: function() {\n    console.log("nom nom nom");\n  }\n};\n\nlet duck = Object.create(Animal.prototype);\nlet beagle = Object.create(Animal.prototype);\n')),Object(a.mdx)("hr",null),Object(a.mdx)("h2",{id:"19-d\xe9finir-le-prototype-de-lenfant-sur-une-instance-du-parent"},"19. D\xe9finir le prototype de l'enfant sur une instance du parent"),Object(a.mdx)("p",null,Object(a.mdx)("a",Object(o.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/set-the-childs-prototype-to-an-instance-of-the-parent"}),"Learn Object Oriented Programming: Set the Child's Prototype to an Instance of the Parent | freeCodeCamp.org")),Object(a.mdx)("p",null,"Dans le d\xe9fi pr\xe9c\xe9dent, vous avez vu la premi\xe8re \xe9tape pour h\xe9riter du  comportement du ",Object(a.mdx)("inlineCode",{parentName:"p"},"supertype")," (ou parent) ",Object(a.mdx)("inlineCode",{parentName:"p"},"Animal")," : cr\xe9er une nouvelle  instance de ",Object(a.mdx)("inlineCode",{parentName:"p"},"Animal"),".\nCe d\xe9fi couvre l'\xe9tape suivante : d\xe9finir le ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype")," du sous-type (ou enfant) - dans ce cas, ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird")," - comme une  instance de ",Object(a.mdx)("inlineCode",{parentName:"p"},"Animal"),"."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"Bird.prototype = Object.create(Animal.prototype);\n")),Object(a.mdx)("p",null,"N'oubliez pas que le ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype")," est comme la \xab recette \xbb pour cr\xe9er un objet. D'une  certaine mani\xe8re, la recette de ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird")," comprend d\xe9sormais tous les  \xab ingr\xe9dients \xbb cl\xe9s de ",Object(a.mdx)("inlineCode",{parentName:"p"},"Animal"),"."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"let duck = new Bird('Donald');\nduck.eat(); // imprime 'nom nom nom'\n")),Object(a.mdx)("p",null,Object(a.mdx)("inlineCode",{parentName:"p"},"duxk")," h\xe9rite de toutes les propri\xe9t\xe9s de ",Object(a.mdx)("inlineCode",{parentName:"p"},"Animal"),", y compris la m\xe9thode ",Object(a.mdx)("inlineCode",{parentName:"p"},"eat"),"."),Object(a.mdx)("hr",null),Object(a.mdx)("p",null,"Modifiez le code pour que les instances de ",Object(a.mdx)("inlineCode",{parentName:"p"},"Dog")," h\xe9ritent de ",Object(a.mdx)("inlineCode",{parentName:"p"},"Animal"),"."),Object(a.mdx)("blockquote",null,Object(a.mdx)("p",{parentName:"blockquote"},Object(a.mdx)("inlineCode",{parentName:"p"},"Dog.prototype")," doit \xeatre une instance de ",Object(a.mdx)("inlineCode",{parentName:"p"},"Animal"),".")),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'function Animal() { }\n\nAnimal.prototype = {\n  constructor: Animal,\n  eat: function() {\n    console.log("nom nom nom");\n  }\n};\nfunction Dog() { }\n// Changer uniquement le code en dessous de cette ligne\nlet beagle = new Dog();\n')),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'Dog.prototype = Object.create(Animal.prototype);\nlet beagle = new Dog("Snoopy");\n\nbeagle.eat(); // nom nom nom\n')),Object(a.mdx)("hr",null),Object(a.mdx)("h2",{id:"20-r\xe9initialiser-une-propri\xe9t\xe9-de-constructeur-h\xe9rit\xe9e"},"20. R\xe9initialiser une propri\xe9t\xe9 de constructeur h\xe9rit\xe9e"),Object(a.mdx)("p",null,Object(a.mdx)("a",Object(o.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/reset-an-inherited-constructor-property"}),"Learn Object Oriented Programming: Reset an Inherited Constructor Property | freeCodeCamp.org")),Object(a.mdx)("p",null,"Lorsqu'un objet h\xe9rite de son ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype")," d'un autre objet, il h\xe9rite \xe9galement de la propri\xe9t\xe9 constructeur du supertype.\nVoici un exemple :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"function Bird() {}\nBird.prototype = Object.create(Animal.prototype);\nlet duck = new Bird();\nduck.constructor // fonction Animal () {...}\n")),Object(a.mdx)("p",null,"Mais ",Object(a.mdx)("inlineCode",{parentName:"p"},"duck")," et toutes les instances de ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird")," doivent montrer qu'ils ont  \xe9t\xe9 construits par ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird")," et non par ",Object(a.mdx)("inlineCode",{parentName:"p"},"Animal"),". Pour ce faire, vous pouvez  d\xe9finir manuellement la propri\xe9t\xe9 constructeur de ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird")," sur l'objet ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird")," :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"Bird.prototype.constructor = Bird;\nduck.constructor // fonction Bird () {...}\n")),Object(a.mdx)("hr",null),Object(a.mdx)("p",null,"Corrigez le code pour que ",Object(a.mdx)("inlineCode",{parentName:"p"},"duck.constructor")," et ",Object(a.mdx)("inlineCode",{parentName:"p"},"beagle.constructor")," renvoient leurs constructeurs respectifs."),Object(a.mdx)("blockquote",null,Object(a.mdx)("p",{parentName:"blockquote"},Object(a.mdx)("inlineCode",{parentName:"p"},"Bird.prototype")," doit \xeatre une instance de ",Object(a.mdx)("inlineCode",{parentName:"p"},"Animal"),".\n",Object(a.mdx)("inlineCode",{parentName:"p"},"duck.constructor")," devrait retourner ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird"),".\n",Object(a.mdx)("inlineCode",{parentName:"p"},"Dog.prototype")," doit \xeatre une instance de ",Object(a.mdx)("inlineCode",{parentName:"p"},"Animal"),".\n",Object(a.mdx)("inlineCode",{parentName:"p"},"beagle.constructor")," doit renvoyer ",Object(a.mdx)("inlineCode",{parentName:"p"},"Dog"),".")),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"function Animal() { }\nfunction Bird() { }\nfunction Dog() { }\nBird.prototype = Object.create(Animal.prototype);\nDog.prototype = Object.create(Animal.prototype);\n// Changer uniquement le code en dessous de cette ligne\nlet duck = new Bird();\nlet beagle = new Dog();\n")),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"let duck = new Bird();\nlet beagle = new Dog();\n\nconsole.log(duck.constructor); // [Function: Animal]\nconsole.log(beagle.constructor); // [Function: Animal]\n\nBird.prototype.constructor = Bird;\nDog.prototype.constructor = Dog;\n\nconsole.log(duck.constructor); //[Function: Bird]\nconsole.log(beagle.constructor); // [Function: Dog]\n")),Object(a.mdx)("hr",null),Object(a.mdx)("h2",{id:"21-ajouter-des-m\xe9thodes-apr\xe8s-lh\xe9ritage"},"21. Ajouter des m\xe9thodes apr\xe8s l'h\xe9ritage"),Object(a.mdx)("p",null,Object(a.mdx)("a",Object(o.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/add-methods-after-inheritance"}),"Learn Object Oriented Programming: Add Methods After Inheritance | freeCodeCamp.org")),Object(a.mdx)("p",null,"Une fonction constructeur qui h\xe9rite de son objet ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype")," d'une  fonction constructeur de supertype peut toujours avoir ses propres  m\xe9thodes en plus des m\xe9thodes h\xe9rit\xe9es.\nPar exemple, ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird")," est un constructeur qui h\xe9rite de son prototype de ",Object(a.mdx)("inlineCode",{parentName:"p"},"Animal")," :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'function Animal() { }\nAnimal.prototype.eat = function() {\n  console.log("nom nom nom");\n};\nfunction Bird() { }\nBird.prototype = Object.create(Animal.prototype);\nBird.prototype.constructor = Bird;\n')),Object(a.mdx)("p",null,"En plus de ce qui est h\xe9rit\xe9 de ",Object(a.mdx)("inlineCode",{parentName:"p"},"Animal"),", vous souhaitez ajouter un  comportement propre aux objets ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird"),". Ici, ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird")," obtiendra une fonction ",Object(a.mdx)("inlineCode",{parentName:"p"},"fly()"),". Les fonctions sont ajout\xe9es au ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype")," de ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird")," de la m\xeame  mani\xe8re que toute fonction constructeur :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"Bird.prototype.fly = function() {\n  console.log('Je vole!');\n};\n")),Object(a.mdx)("p",null,"D\xe9sormais, les instances de ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird")," auront \xe0 la fois les m\xe9thodes ",Object(a.mdx)("inlineCode",{parentName:"p"},"eat()")," et ",Object(a.mdx)("inlineCode",{parentName:"p"},"fly()")," :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"let duck = new Bird();\nduck.eat(); // imprime 'nom nom nom'\nduck.fly(); // affiche 'Je vole!'\n")),Object(a.mdx)("hr",null),Object(a.mdx)("p",null,"Ajoutez tout le code n\xe9cessaire pour que l'objet ",Object(a.mdx)("inlineCode",{parentName:"p"},"Dog")," h\xe9rite de ",Object(a.mdx)("inlineCode",{parentName:"p"},"Animal")," et que le constructeur du ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype")," ",Object(a.mdx)("inlineCode",{parentName:"p"},"Dog")," soit d\xe9fini sur ",Object(a.mdx)("inlineCode",{parentName:"p"},"Dog"),". Ajoutez ensuite une  m\xe9thode  ",Object(a.mdx)("inlineCode",{parentName:"p"},"bark()")," \xe0 l'objet ",Object(a.mdx)("inlineCode",{parentName:"p"},"Dog")," afin que ",Object(a.mdx)("inlineCode",{parentName:"p"},"beagle")," puisse \xe0 la fois ",Object(a.mdx)("inlineCode",{parentName:"p"},"eat()")," et ",Object(a.mdx)("inlineCode",{parentName:"p"},"bark()"),". La m\xe9thode ",Object(a.mdx)("inlineCode",{parentName:"p"},"bark()")," devrait afficher ",Object(a.mdx)("inlineCode",{parentName:"p"},"'Woof!'")," \xe0 la console."),Object(a.mdx)("blockquote",null,Object(a.mdx)("p",{parentName:"blockquote"},Object(a.mdx)("inlineCode",{parentName:"p"},"Animal")," ne doit pas r\xe9pondre \xe0 la m\xe9thode ",Object(a.mdx)("inlineCode",{parentName:"p"},"bark()"),".\n",Object(a.mdx)("inlineCode",{parentName:"p"},"Dog")," doit h\xe9riter de la m\xe9thode ",Object(a.mdx)("inlineCode",{parentName:"p"},"eat()")," de ",Object(a.mdx)("inlineCode",{parentName:"p"},"Animal"),".\n",Object(a.mdx)("inlineCode",{parentName:"p"},"Dog")," devrait avoir la m\xe9thode ",Object(a.mdx)("inlineCode",{parentName:"p"},"bark()")," comme propri\xe9t\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"own"),".\n",Object(a.mdx)("inlineCode",{parentName:"p"},"beagle")," doit \xeatre une ",Object(a.mdx)("inlineCode",{parentName:"p"},"instanceof")," ",Object(a.mdx)("inlineCode",{parentName:"p"},"Animal"),".\nLe constructeur de ",Object(a.mdx)("inlineCode",{parentName:"p"},"beagle")," doit \xeatre d\xe9fini sur ",Object(a.mdx)("inlineCode",{parentName:"p"},"Dog"),".\n",Object(a.mdx)("inlineCode",{parentName:"p"},"beagle.eat()")," devrait enregistrer ",Object(a.mdx)("inlineCode",{parentName:"p"},"'nom nom nom'"),".\n",Object(a.mdx)("inlineCode",{parentName:"p"},"beagle.bark()")," devrait enregistrer ",Object(a.mdx)("inlineCode",{parentName:"p"},"'Woof!'"),".")),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'function Animal() { }\nAnimal.prototype.eat = function() { console.log("nom nom nom"); };\n\nfunction Dog() { }\n// Changer uniquement le code en dessous de cette ligne\n// Changer uniquement le code au-dessus de cette ligne\nlet beagle = new Dog();\n')),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"function Animal() { }\nAnimal.prototype.eat = function() { console.log(\"nom nom nom\"); };\n\nfunction Dog() { }\nDog.prototype = Object.create(Animal.prototype);\nDog.prototype.constructor = Dog;\nDog.prototype.bark = function() {\n    console.log('Woof!');\n};\nlet beagle = new Dog();\n\nbeagle.eat(); // nom nom nom\nbeagle.bark(); // Woof!\n")),Object(a.mdx)("p",null,Object(a.mdx)("a",Object(o.a)({parentName:"p"},{href:"https://forum.freecodecamp.org/t/freecodecamp-challenge-guide-add-methods-after-inheritance/301315"}),"solution")),Object(a.mdx)("hr",null),Object(a.mdx)("h2",{id:"22-remplacer-les-m\xe9thodes-h\xe9rit\xe9es"},"22. Remplacer les m\xe9thodes h\xe9rit\xe9es"),Object(a.mdx)("p",null,Object(a.mdx)("a",Object(o.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/override-inherited-methods"}),"Learn Object Oriented Programming: Override Inherited Methods | freeCodeCamp.org")),Object(a.mdx)("p",null,"Dans les le\xe7ons pr\xe9c\xe9dentes, vous avez appris qu'un objet peut h\xe9riter de son comportement (m\xe9thodes) d'un autre objet en r\xe9f\xe9ren\xe7ant son objet ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype")," :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"ChildObject.prototype = Object.create(ParentObject.prototype);\n")),Object(a.mdx)("p",null,"Puis le ",Object(a.mdx)("inlineCode",{parentName:"p"},"ChildObject")," a re\xe7u ses propres m\xe9thodes en les cha\xeenant sur son ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype")," :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"ChildObject.prototype.methodName = function() {...};\n")),Object(a.mdx)("p",null,"Il est possible de remplacer une m\xe9thode h\xe9rit\xe9e. C'est fait de la m\xeame mani\xe8re - en ajoutant une m\xe9thode \xe0 ",Object(a.mdx)("inlineCode",{parentName:"p"},"ChildObject.prototype")," en utilisant  le m\xeame nom de m\xe9thode que celui \xe0 remplacer. Voici un exemple de ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird")," \xe9crasant la m\xe9thode ",Object(a.mdx)("inlineCode",{parentName:"p"},"eat()")," h\xe9rit\xe9e de ",Object(a.mdx)("inlineCode",{parentName:"p"},"Animal")," :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'function Animal() { }\nAnimal.prototype.eat = function () {\n  return "nom nom nom";\n};\nfunction Bird() { }\n\n// H\xe9rite de toutes les m\xe9thodes de Animal\nBird.prototype = Object.create(Animal.prototype);\n\n// Bird.eat() remplace Animal.eat()\nBird.prototype.eat = function() {\n  return "peck peck peck";\n};\n')),Object(a.mdx)("p",null,"Si vous avez une instance, ",Object(a.mdx)("inlineCode",{parentName:"p"},"let duck = new Bird();")," et vous appelez ",Object(a.mdx)("inlineCode",{parentName:"p"},"duck.eat()"),", voici comment JavaScript recherche la m\xe9thode sur la cha\xeene de ",Object(a.mdx)("inlineCode",{parentName:"p"},"prototype")," de ",Object(a.mdx)("inlineCode",{parentName:"p"},"duck")," :"),Object(a.mdx)("ol",null,Object(a.mdx)("li",{parentName:"ol"},"duck => Est-ce que eat() est d\xe9fini ici ? Non."),Object(a.mdx)("li",{parentName:"ol"},"Bird => Est-ce que eat() est d\xe9fini ici ? => Oui. Ex\xe9cutez-le et arr\xeatez la recherche."),Object(a.mdx)("li",{parentName:"ol"},"Animal => eat() est \xe9galement d\xe9fini, mais JavaScript a arr\xeat\xe9 la recherche avant d'atteindre ce niveau."),Object(a.mdx)("li",{parentName:"ol"},"Object => JavaScript a arr\xeat\xe9 la recherche avant d'atteindre ce niveau.")),Object(a.mdx)("hr",null),Object(a.mdx)("p",null,"Remplacez la m\xe9thode ",Object(a.mdx)("inlineCode",{parentName:"p"},"fly()")," pour ",Object(a.mdx)("inlineCode",{parentName:"p"},"Penguin"),' afin qu\'elle renvoie "Alas, this is a flightless bird."'),Object(a.mdx)("blockquote",null,Object(a.mdx)("p",{parentName:"blockquote"},Object(a.mdx)("inlineCode",{parentName:"p"},"penguin.fly()"),' doit renvoyer la cha\xeene "Alas, this is a flightless bird."\nLa m\xe9thode ',Object(a.mdx)("inlineCode",{parentName:"p"},"bird.fly()"),' doit renvoyer "I am flying!"')),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'function Bird() { }\n\nBird.prototype.fly = function() { return "I am flying!"; };\n\nfunction Penguin() { }\nPenguin.prototype = Object.create(Bird.prototype);\nPenguin.prototype.constructor = Penguin;\n// Changer uniquement le code en dessous de cette ligne\n// Changer uniquement le code au-dessus de cette ligne\nlet penguin = new Penguin();\nconsole.log(penguin.fly());\n')),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'function Bird() { }\n\nBird.prototype.fly = function() { return "I am flying!"; };\n\nfunction Penguin() { }\nPenguin.prototype = Object.create(Bird.prototype);\nPenguin.prototype.constructor = Penguin;\nPenguin.prototype.fly = function() { return "Alas, this is a flightless bird."; };\nlet penguin = new Penguin();\nconsole.log(penguin.fly()); // Alas, this is a flightless bird.\nconsole.log(Bird.prototype.fly()); // I am flying!\n')),Object(a.mdx)("hr",null),Object(a.mdx)("h2",{id:"23-utiliser-un-mixin-pour-ajouter-un-comportement-commun-entre-des-objets-non-li\xe9s"},"23. Utiliser un ",Object(a.mdx)("inlineCode",{parentName:"h2"},"mixin")," pour ajouter un comportement commun entre des objets non li\xe9s"),Object(a.mdx)("p",null,Object(a.mdx)("a",Object(o.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/use-a-mixin-to-add-common-behavior-between-unrelated-objects"}),"Learn Object Oriented Programming: Use a Mixin to Add Common Behavior Between Unrelated Objects | freeCodeCamp.org")),Object(a.mdx)("p",null,"Comme vous l'avez vu, le comportement est partag\xe9 par h\xe9ritage. Cependant, il existe des cas o\xf9 l'h\xe9ritage n'est pas la meilleure solution. L'h\xe9ritage ne fonctionne pas bien pour les objets non li\xe9s  tels que ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird")," et ",Object(a.mdx)("inlineCode",{parentName:"p"},"Airplane"),". Ils peuvent tous les deux voler, mais un ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird")," n'est pas un type de ",Object(a.mdx)("inlineCode",{parentName:"p"},"Airplane")," et vice versa.\nPour les objets  non li\xe9s, il est pr\xe9f\xe9rable d'utiliser des ",Object(a.mdx)("em",{parentName:"p"},"mixins"),". Un mixin permet \xe0  d'autres objets d'utiliser une collection de fonctions."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"let flyMixin = function(obj) {\n  obj.fly = function() {\n    console.log('Flying, wooosh!');\n  }\n};\n")),Object(a.mdx)("p",null,"Le ",Object(a.mdx)("inlineCode",{parentName:"p"},"flyMixin")," prend n'importe quel objet et lui donne la m\xe9thode ",Object(a.mdx)("inlineCode",{parentName:"p"},"fly"),"."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'let bird = {\n  name: "Donald",\n  numLegs: 2\n};\n\nlet plane = {\n  model: "777",\n  numPassengers: 524\n};\n\nflyMixin(bird);\nflyMixin(plane);\n')),Object(a.mdx)("p",null,"Ici, ",Object(a.mdx)("inlineCode",{parentName:"p"},"bird")," et ",Object(a.mdx)("inlineCode",{parentName:"p"},"plane")," sont pass\xe9s dans ",Object(a.mdx)("inlineCode",{parentName:"p"},"flyMixin"),", qui attribue ensuite la  fonction ",Object(a.mdx)("inlineCode",{parentName:"p"},"fly")," \xe0 chaque objet. Maintenant, ",Object(a.mdx)("inlineCode",{parentName:"p"},"bird")," et ",Object(a.mdx)("inlineCode",{parentName:"p"},"plane")," peuvent  voler:"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"bird.fly(); // imprime 'Flying, wooosh!'\nplane.fly(); // imprime 'Flying, wooosh!'\n")),Object(a.mdx)("p",null,"Notez comment le mixin permet \xe0 la m\xeame m\xe9thode ",Object(a.mdx)("inlineCode",{parentName:"p"},"fly")," d'\xeatre r\xe9utilis\xe9e par des objets sans rapport avec ",Object(a.mdx)("inlineCode",{parentName:"p"},"bird")," et ",Object(a.mdx)("inlineCode",{parentName:"p"},"plane"),"."),Object(a.mdx)("hr",null),Object(a.mdx)("p",null,"Cr\xe9ez un mixin nomm\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"glideMixin")," qui d\xe9finit une m\xe9thode nomm\xe9e ",Object(a.mdx)("inlineCode",{parentName:"p"},"glide"),".  Ensuite, utilisez le ",Object(a.mdx)("inlineCode",{parentName:"p"},"glideMixin")," pour donner \xe0 ",Object(a.mdx)("inlineCode",{parentName:"p"},"bird")," et ",Object(a.mdx)("inlineCode",{parentName:"p"},"boat")," la  capacit\xe9 de planer."),Object(a.mdx)("blockquote",null,Object(a.mdx)("p",{parentName:"blockquote"},"Votre code doit d\xe9clarer une variable ",Object(a.mdx)("inlineCode",{parentName:"p"},"glideMixin")," qui est une fonction.\nVotre code doit utiliser le ",Object(a.mdx)("inlineCode",{parentName:"p"},"glideMixin")," sur l'objet ",Object(a.mdx)("inlineCode",{parentName:"p"},"bird")," pour lui donner la m\xe9thode ",Object(a.mdx)("inlineCode",{parentName:"p"},"glide"),".\nVotre code doit utiliser le ",Object(a.mdx)("inlineCode",{parentName:"p"},"glideMixin")," sur l'objet ",Object(a.mdx)("inlineCode",{parentName:"p"},"boat")," pour lui donner la m\xe9thode ",Object(a.mdx)("inlineCode",{parentName:"p"},"glide"),".")),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'let bird = {\n  name: "Donald",\n  numLegs: 2\n};\n\nlet boat = {\n  name: "Warrior",\n  type: "race-boat"\n};\n// Changer uniquement le code en dessous de cette ligne\nlet glideMixin = function(obj) {\n  obj.glide = function() {\n    console.log(\'Gliding, wooosh!\');\n  }\n};\nglideMixin(bird);\nglideMixin(boat);\n\nbird.glide(); // Gliding, wooosh!\nboat.glide(); // Gliding, wooosh!\n')),Object(a.mdx)("hr",null),Object(a.mdx)("h2",{id:"24-utiliser-closure-pour-prot\xe9ger-les-propri\xe9t\xe9s-dun-objet-contre-toute-modification-externe"},"24. Utiliser ",Object(a.mdx)("inlineCode",{parentName:"h2"},"closure")," pour prot\xe9ger les propri\xe9t\xe9s d'un objet contre toute modification externe"),Object(a.mdx)("p",null,Object(a.mdx)("a",Object(o.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/use-closure-to-protect-properties-within-an-object-from-being-modified-externally"}),"Learn Object Oriented Programming: Use Closure to Protect Properties Within an Object from Being Modified Externally | freeCodeCamp.org")),Object(a.mdx)("p",null,"Dans le d\xe9fi pr\xe9c\xe9dent, ",Object(a.mdx)("inlineCode",{parentName:"p"},"bird")," avait une propri\xe9t\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"name")," publique. Il  est consid\xe9r\xe9 comme public car il peut \xeatre consult\xe9 et modifi\xe9 en  dehors de la d\xe9finition de ",Object(a.mdx)("inlineCode",{parentName:"p"},"bird"),"."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'bird.name = "Duffy";\n')),Object(a.mdx)("p",null,"Par cons\xe9quent, n'importe quelle partie de votre code peut facilement  changer le nom de ",Object(a.mdx)("inlineCode",{parentName:"p"},"bird")," en n'importe quelle valeur. Pensez \xe0 des  choses comme les mots de passe et les comptes bancaires qui peuvent \xeatre facilement modifi\xe9s par n'importe quelle partie de votre base de code.  Cela pourrait causer de nombreux probl\xe8mes.\nLe moyen le plus  simple de rendre cette propri\xe9t\xe9 publique priv\xe9e consiste \xe0 cr\xe9er une  variable dans la fonction constructeur. Cela modifie la port\xe9e de cette  variable pour qu'elle soit dans la fonction constructeur contre la disponibilit\xe9 globale. De cette fa\xe7on, la variable ne peut \xeatre acc\xe9d\xe9e et modifi\xe9e que par des m\xe9thodes \xe9galement dans la fonction  constructeur."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"function Bird() {\n  let hatchedEgg = 10; // variable priv\xe9e\n\n  /* m\xe9thode accessible au public qu'un objet bird peut utiliser */\n  this.getHatchedEggCount = function() { \n    return hatchedEgg;\n  };\n}\nlet ducky = new Bird();\nducky.getHatchedEggCount(); // renvoie 10\n")),Object(a.mdx)("p",null,"Ici, ",Object(a.mdx)("inlineCode",{parentName:"p"},"getHatchedEggCount")," est une m\xe9thode privil\xe9gi\xe9e, car elle a acc\xe8s \xe0 la variable priv\xe9e ",Object(a.mdx)("inlineCode",{parentName:"p"},"hatchedEgg"),". Cela est possible car ",Object(a.mdx)("inlineCode",{parentName:"p"},"hatchedEgg")," est d\xe9clar\xe9 dans le m\xeame contexte que ",Object(a.mdx)("inlineCode",{parentName:"p"},"getHatchedEggCount"),". En JavaScript, une  fonction a toujours acc\xe8s au contexte dans lequel elle a \xe9t\xe9 cr\xe9\xe9e.  C'est ce qu'on appelle ",Object(a.mdx)("inlineCode",{parentName:"p"},"closure"),"."),Object(a.mdx)("hr",null),Object(a.mdx)("p",null,"Modifiez la fa\xe7on dont ",Object(a.mdx)("inlineCode",{parentName:"p"},"weight")," est d\xe9clar\xe9 dans la fonction ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird")," afin qu'il s'agisse d'une variable priv\xe9e. Ensuite, cr\xe9ez une m\xe9thode ",Object(a.mdx)("inlineCode",{parentName:"p"},"getWeight")," qui renvoie la valeur 15 de ",Object(a.mdx)("inlineCode",{parentName:"p"},"weight"),"."),Object(a.mdx)("blockquote",null,Object(a.mdx)("p",{parentName:"blockquote"},"La propri\xe9t\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"weight")," doit \xeatre une variable priv\xe9e et doit avoir la valeur ",Object(a.mdx)("inlineCode",{parentName:"p"},"15"),".\nVotre code doit cr\xe9er une m\xe9thode dans ",Object(a.mdx)("inlineCode",{parentName:"p"},"Bird")," appel\xe9e ",Object(a.mdx)("inlineCode",{parentName:"p"},"getWeight")," qui renvoie la valeur de la variable priv\xe9e ",Object(a.mdx)("inlineCode",{parentName:"p"},"weight"),".\nVotre fonction ",Object(a.mdx)("inlineCode",{parentName:"p"},"getWeight")," doit renvoyer la variable priv\xe9e ",Object(a.mdx)("inlineCode",{parentName:"p"},"weight"),".")),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"function Bird() {\n  this.weight = 15;\n}\n")),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"function Bird() {\n  let weight = 15;\n\n  this.getWeight = function() {\n    return weight;\n  };\n}\n\nlet ducky = new Bird();\nconsole.log(ducky.getWeight()); // 15\n")),Object(a.mdx)("hr",null),Object(a.mdx)("h2",{id:"25-comprendre-lexpression-de-fonction-imm\xe9diatement-appel\xe9e-immediately-invoked-function-expression---iife"},"25. Comprendre l'expression de fonction imm\xe9diatement appel\xe9e (Immediately Invoked Function Expression - IIFE)"),Object(a.mdx)("p",null,Object(a.mdx)("a",Object(o.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/understand-the-immediately-invoked-function-expression-iife"}),"Learn Object Oriented Programming: Understand the Immediately Invoked Function Expression (IIFE) | freeCodeCamp.org")),Object(a.mdx)("p",null,"Un mod\xe8le courant en JavaScript consiste \xe0 ex\xe9cuter une fonction d\xe8s qu'elle est d\xe9clar\xe9e :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"(fonction() {\n  console.log('Chirp, chirp!');\n})(); // c'est une expression de fonction anonyme qui s'ex\xe9cute tout de suite\n// Sort 'Chirp, chirp!' imm\xe9diatement\n")),Object(a.mdx)("p",null,"Notez que la fonction n'a pas de nom et n'est pas stock\xe9e dans une variable.  Les deux parenth\xe8ses () \xe0 la fin de l'expression de la fonction  provoquent son ex\xe9cution ou son appel imm\xe9diat. Ce mod\xe8le est appel\xe9 ",Object(a.mdx)("em",{parentName:"p"},"expression de fonction imm\xe9diatement appel\xe9e ou  immediately invoked function expression IIFE"),"."),Object(a.mdx)("hr",null),Object(a.mdx)("p",null,"R\xe9\xe9crivez  la fonction ",Object(a.mdx)("inlineCode",{parentName:"p"},"makeNest")," et supprimez son appel afin qu'il s'agisse plut\xf4t  d'une expression de fonction anonyme imm\xe9diatement invoqu\xe9e (IIFE)."),Object(a.mdx)("blockquote",null,Object(a.mdx)("p",{parentName:"blockquote"},"La fonction doit \xeatre anonyme.\nVotre fonction doit avoir des parenth\xe8ses \xe0 la fin de l'expression pour l'appeler imm\xe9diatement.")),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'function makeNest() {\n  console.log("A cozy nest is ready");\n}\nmakeNest(); // A cozy nest is ready\n')),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'(function () {\n  console.log("A cozy nest is ready");\n})();\n// A cozy nest is ready\n')),Object(a.mdx)("hr",null),Object(a.mdx)("h2",{id:"26-utiliser-un-iife-pour-cr\xe9er-un-module"},"26. Utiliser un IIFE pour cr\xe9er un module"),Object(a.mdx)("p",null,Object(a.mdx)("a",Object(o.a)({parentName:"p"},{href:"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/object-oriented-programming/use-an-iife-to-create-a-module"}),"Learn Object Oriented Programming: Use an IIFE to Create a Module | freeCodeCamp.org")),Object(a.mdx)("p",null,"Une expression de fonction imm\xe9diatement invoqu\xe9e (IIFE) est souvent  utilis\xe9e pour regrouper les fonctionnalit\xe9s associ\xe9es en un seul objet  ou ",Object(a.mdx)("em",{parentName:"p"},"module"),". Par exemple, un d\xe9fi pr\xe9c\xe9dent d\xe9finissait deux mixins :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'function glideMixin(obj) {\n  obj.glide = function() {\n    console.log("Gliding on the water");\n  };\n}\nfunction flyMixin(obj) {\n  obj.fly = function() {\n    console.log("Flying, wooosh!");\n  };\n}\n')),Object(a.mdx)("p",null,"Nous pouvons regrouper ces mixins dans un module comme suit :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'let motionModule = (function () {\n  return {\n    glideMixin: function(obj) {\n      obj.glide = function() {\n        console.log("Gliding on the water");\n      };\n    },\n    flyMixin: function(obj) {\n      obj.fly = function() {\n        console.log("Flying, wooosh!");\n      };\n    }\n  }\n})(); // Les deux parenth\xe8ses provoquent l\'appel imm\xe9diat de la fonction\n')),Object(a.mdx)("p",null,"Notez que vous disposez d'une expression de fonction imm\xe9diatement appel\xe9e  (IIFE) qui renvoie un objet ",Object(a.mdx)("inlineCode",{parentName:"p"},"motionModule"),". Cet objet retourn\xe9 contient  tous les comportements de mixin en tant que propri\xe9t\xe9s de l'objet.  L'avantage du mod\xe8le de module est que tous les comportements de  mouvement peuvent \xeatre regroup\xe9s dans un seul objet qui peut ensuite  \xeatre utilis\xe9 par d'autres parties de votre code. Voici un exemple de son utilisation :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"motionModule.glideMixin(duck);\nduck.glide();\n")),Object(a.mdx)("hr",null),Object(a.mdx)("p",null,"Cr\xe9ez un module nomm\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"funModule")," pour envelopper les deux mixins ",Object(a.mdx)("inlineCode",{parentName:"p"},"isCuteMixin")," et ",Object(a.mdx)("inlineCode",{parentName:"p"},"singMixin"),". ",Object(a.mdx)("inlineCode",{parentName:"p"},"funModule")," doit renvoyer un objet."),Object(a.mdx)("blockquote",null,Object(a.mdx)("p",{parentName:"blockquote"},Object(a.mdx)("inlineCode",{parentName:"p"},"funModule")," doit \xeatre d\xe9fini et renvoyer un objet.\n",Object(a.mdx)("inlineCode",{parentName:"p"},"funModule.isCuteMixin")," doit acc\xe9der \xe0 une fonction.\n",Object(a.mdx)("inlineCode",{parentName:"p"},"funModule.singMixin")," doit acc\xe9der \xe0 une fonction.")),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'let isCuteMixin = function(obj) {\n  obj.isCute = function() {\n    return true;\n  };\n};\nlet singMixin = function(obj) {\n  obj.sing = function() {\n    console.log("Singing to an awesome tune");\n  };\n};\n')),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),'let funModule = (function () {\n  return {\n    isCuteMixin: function(obj) {\n      obj.isCute = function() {\n        return true;\n      };\n    },\n    singMixin: function(obj) {\n      obj.sing = function() {\n        console.log("Singing to an awesome tune");\n      };\n    }\n  }\n})();\n')))}l.isMDXComponent=!0},212:function(e,n,t){"use strict";t.r(n),t.d(n,"MDXContext",(function(){return l})),t.d(n,"MDXProvider",(function(){return u})),t.d(n,"mdx",(function(){return O})),t.d(n,"useMDXComponents",(function(){return s})),t.d(n,"withMDXComponents",(function(){return m}));var o=t(0),r=t.n(o);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(){return(i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e}).apply(this,arguments)}function d(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?d(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):d(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=r.a.createContext({}),m=function(e){return function(n){var t=s(n.components);return r.a.createElement(e,i({},n,{components:t}))}},s=function(e){var n=r.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},u=function(e){var n=s(e.components);return r.a.createElement(l.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},j=r.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),l=s(t),m=o,u=l["".concat(i,".").concat(m)]||l[m]||b[m]||a;return t?r.a.createElement(u,p(p({ref:n},d),{},{components:t})):r.a.createElement(u,p({ref:n},d))}));function O(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=j;var d={};for(var p in n)hasOwnProperty.call(n,p)&&(d[p]=n[p]);d.originalType=e,d.mdxType="string"==typeof e?e:o,i[1]=d;for(var c=2;c<a;c++)i[c]=t[c];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}j.displayName="MDXCreateElement"}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{145:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return u}));var r=t(3),i=t(7),a=(t(0),t(212)),o={id:"guide_JS-03",title:"Contr\xf4le du flux d'instructions et gestion des erreurs"},c={unversionedId:"MDN-web-docs/guide_JS-03",id:"MDN-web-docs/guide_JS-03",isDocsHomePage:!1,title:"Contr\xf4le du flux d'instructions et gestion des erreurs",description:"JavaScript supporte nativement un ensemble d'instructions. Ces instructions permettent de d\xe9finir les logiques des algorithmes, le flux des informations, etc. Ce chapitre fournit un aper\xe7u sur le fonctionnement de ces diff\xe9rentes instructions JavaScript.",source:"@site/docs/MDN-web-docs/guide_JS-03.md",slug:"/MDN-web-docs/guide_JS-03",permalink:"/docs/MDN-web-docs/guide_JS-03",editUrl:"https://github.com/gylgyl2000/laloutre.github.io/edit/main/docs/MDN-web-docs/guide_JS-03.md",version:"current",sidebar:"docs",previous:{title:"Types et grammaire",permalink:"/docs/MDN-web-docs/guide_JS-02"},next:{title:"Boucles et it\xe9rations",permalink:"/docs/MDN-web-docs/guide_JS-04"}},s=[{value:"Les blocs",id:"les-blocs",children:[{value:"Exemple",id:"exemple",children:[]}]},{value:"Les instructions conditionnelles",id:"les-instructions-conditionnelles",children:[{value:"Instruction <code>if...else</code>",id:"instruction-ifelse",children:[]},{value:"L&#39;instruction <code>switch</code>",id:"linstruction-switch",children:[]}]},{value:"Les instructions pour g\xe9rer les exceptions",id:"les-instructions-pour-g\xe9rer-les-exceptions",children:[{value:"Les types d&#39;exception",id:"les-types-dexception",children:[]},{value:"L&#39;instruction <code>throw</code>",id:"linstruction-throw",children:[]},{value:"L&#39;instruction <code>try...catch</code>",id:"linstruction-trycatch",children:[]},{value:"Utiliser les objets <code>Error</code>",id:"utiliser-les-objets-error",children:[]}]}],l={rightToc:s};function u(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(a.mdx)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(a.mdx)("p",null,"JavaScript supporte nativement un ensemble d'instructions. Ces instructions permettent de d\xe9finir les logiques des algorithmes, le flux des informations, etc. Ce chapitre fournit un aper\xe7u sur le fonctionnement de ces diff\xe9rentes instructions JavaScript."),Object(a.mdx)("p",null,"Toute expression est une instruction, voir la page ",Object(a.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Expressions_et_Op%C3%A9rateurs"}),"Expressions et op\xe9rateurs")," pour plus d'informations sur les expressions. En JavaScript, le point-virgule (",Object(a.mdx)("inlineCode",{parentName:"p"},";"),") est utilis\xe9 afin de s\xe9parer des instructions dans le code."),Object(a.mdx)("p",null,"Voir la ",Object(a.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Instructions"}),"R\xe9f\xe9rence JavaScript")," pour plus de d\xe9tails sur les diff\xe9rentes instructions d\xe9crites dans ce chapitre."),Object(a.mdx)("h2",{id:"les-blocs"},"Les blocs"),Object(a.mdx)("p",null,"L'instruction la plus simple est l'instruction de bloc qui permet de regrouper des instructions. Un bloc est d\xe9limit\xe9 par une paire d'accolades :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"{\n   instruction_1;\n   instruction_2;\n   .\n   .\n   .\n   instruction_n;\n}\n")),Object(a.mdx)("h3",{id:"exemple"},"Exemple"),Object(a.mdx)("p",null,"Les instructions de blocs sont souvent utilis\xe9es avec les instructions conditionnelles et it\xe9ratives telles que ",Object(a.mdx)("inlineCode",{parentName:"p"},"if"),", ",Object(a.mdx)("inlineCode",{parentName:"p"},"for"),", ",Object(a.mdx)("inlineCode",{parentName:"p"},"while"),"."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"while (x < 10) {\n  x++;\n}\n")),Object(a.mdx)("p",null,"Ici, ",Object(a.mdx)("inlineCode",{parentName:"p"},"{ x++; }")," repr\xe9sente le bloc."),Object(a.mdx)("p",null,Object(a.mdx)("strong",{parentName:"p"},"Note importante")," : En JavaScript, avant ECMAScript 2015 (aussi appel\xe9 ES6), les blocs ",Object(a.mdx)("strong",{parentName:"p"},"n'introduisaient pas de nouvelles port\xe9es"),". Les variables introduites dans le bloc avec l'instruction ",Object(a.mdx)("inlineCode",{parentName:"p"},"var")," font partie de la port\xe9e de la fonction englobante ou du script. Les effets de leur d\xe9finition persistent en dehors du bloc. Les blocs seuls utilis\xe9s avec ",Object(a.mdx)("inlineCode",{parentName:"p"},"var")," (et non ",Object(a.mdx)("inlineCode",{parentName:"p"},"let"),") pourront laisser penser que ce bloc se comportera comme en C ou en Java. Par exemple :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"var x = 1;\n{\n  var x = 2;\n}\nconsole.log(x); // affichera 2\n")),Object(a.mdx)("p",null,"Cella affichera 2 car l'instruction ",Object(a.mdx)("inlineCode",{parentName:"p"},"var x")," contenue dans le bloc fait partie de la m\xeame port\xe9e que l'instruction ",Object(a.mdx)("inlineCode",{parentName:"p"},"var x")," \xe9crite avant le bloc. En C ou en Java, le code \xe9quivalent \xe0 cet exemple aurait produit 1."),Object(a.mdx)("p",null,"Cela a \xe9volu\xe9 avec ECMAScript 2015 (ES6). Les instructions ",Object(a.mdx)("inlineCode",{parentName:"p"},"let"),"et ",Object(a.mdx)("inlineCode",{parentName:"p"},"const")," permettent de d\xe9clarer des variables dont la port\xe9e est celle du bloc courant. Voir les pages des r\xe9f\xe9rences ",Object(a.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Instructions/let"}),Object(a.mdx)("inlineCode",{parentName:"a"},"let"))," et ",Object(a.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Instructions/const"}),Object(a.mdx)("inlineCode",{parentName:"a"},"const")),"."),Object(a.mdx)("p",null,Object(a.mdx)("strong",{parentName:"p"},"Note :")," Pour plus d'informations sur les blocs, voir ",Object(a.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Instructions/bloc"}),"l'article sur les blocs")," de la r\xe9f\xe9rence JavaScript."),Object(a.mdx)("h2",{id:"les-instructions-conditionnelles"},"Les instructions conditionnelles"),Object(a.mdx)("p",null,"Une instruction conditionnelle est un ensemble de commandes qui s'ex\xe9cutent si une condition donn\xe9e est v\xe9rifi\xe9e. JavaScript poss\xe8de deux instructions conditionnelles : ",Object(a.mdx)("inlineCode",{parentName:"p"},"if...else")," et ",Object(a.mdx)("inlineCode",{parentName:"p"},"switch"),"."),Object(a.mdx)("h3",{id:"instruction-ifelse"},"Instruction ",Object(a.mdx)("inlineCode",{parentName:"h3"},"if...else")),Object(a.mdx)("p",null,"On utilise l'instruction ",Object(a.mdx)("inlineCode",{parentName:"p"},"if")," lorsqu'on souhaite ex\xe9cuter une instruction si une condition logique est v\xe9rifi\xe9e (vraie). La clause ",Object(a.mdx)("inlineCode",{parentName:"p"},"else")," est optionnelle et permet de pr\xe9ciser les instructions \xe0 ex\xe9cuter si la condition logique n'est pas v\xe9rifi\xe9e (l'assertion est fausse). Voici un exemple qui illustre l'utilisation de l'instruction ",Object(a.mdx)("inlineCode",{parentName:"p"},"if")," :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"if (condition) {\n  instruction_1;\n} else {\n  instruction_2;\n}\n")),Object(a.mdx)("p",null,Object(a.mdx)("inlineCode",{parentName:"p"},"condition")," peut correspondre \xe0 n'importe quelle expression qui est \xe9valu\xe9e \xe0 ",Object(a.mdx)("inlineCode",{parentName:"p"},"true")," (vrai) ou ",Object(a.mdx)("inlineCode",{parentName:"p"},"false")," (faux). Voir la page sur les ",Object(a.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Boolean#Description"}),"bool\xe9ens")," pour plus d'informations sur les \xe9valuations qui fournissent les valeurs ",Object(a.mdx)("inlineCode",{parentName:"p"},"true")," ou ",Object(a.mdx)("inlineCode",{parentName:"p"},"false"),". Si la ",Object(a.mdx)("inlineCode",{parentName:"p"},"condition")," vaut ",Object(a.mdx)("inlineCode",{parentName:"p"},"true"),", ",Object(a.mdx)("inlineCode",{parentName:"p"},"instruction_1")," est ex\xe9cut\xe9e, sinon ",Object(a.mdx)("inlineCode",{parentName:"p"},"instruction_2")," sera ex\xe9cut\xe9e. ",Object(a.mdx)("inlineCode",{parentName:"p"},"instruction_1")," et ",Object(a.mdx)("inlineCode",{parentName:"p"},"instruction_2")," peuvent correspondre \xe0 n'importe quelle instruction, y compris d'autres instructions ",Object(a.mdx)("inlineCode",{parentName:"p"},"if"),"."),Object(a.mdx)("p",null,"Si on doit tester diff\xe9rentes conditions les unes \xe0 la suite des autres, il est possible d'utiliser ",Object(a.mdx)("inlineCode",{parentName:"p"},"else if")," pour lier les diff\xe9rents tests. On l'utilise de la fa\xe7on suivante :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"if (condition_1) {\n  instruction_1;\n} else if (condition_2) {\n  instruction_2;\n} else if (condition_n) {\n  instruction_n;\n} else {\n  derni\xe8re_instruction;\n}\n")),Object(a.mdx)("p",null,"Afin d'ex\xe9cuter plusieurs instructions, on peut les regrouper gr\xe2ce aux blocs (",Object(a.mdx)("inlineCode",{parentName:"p"},"{ ... }"),") vus pr\xe9c\xe9demment. C'est une bonne pratique que de les utiliser, surtout si on imbrique plusieurs instructions ",Object(a.mdx)("inlineCode",{parentName:"p"},"if")," les unes dans les autres:"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"if (condition) {\n  instruction_1_ex\xe9cut\xe9e_si_condition_vraie;\n  instruction_2_ex\xe9cut\xe9e_si_condition_vraie;\n} else {\n  instruction_3_ex\xe9cut\xe9e_si_condition_fausse;\n  instruction_4_ex\xe9cut\xe9e_si_condition_fausse;\n}\n")),Object(a.mdx)("p",null,"Attention \xe0 ne pas utiliser des intructions d'affectation dans les expressions conditionnelles. On peut, en effet, tr\xe8s facilement confondre l'affectation et le test d'\xe9galit\xe9 en lisant le code. Voici un exemple de ce qu'il ne faut ",Object(a.mdx)("strong",{parentName:"p"},"pas")," faire :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"if (x = y) {\n  /* ex\xe9cuter des instructions */\n}\n")),Object(a.mdx)("p",null,"Ici, on ne teste pas si x vaut y, on affecte la valeur de y \xe0 x ! Si vous devez \xe0 tout prix utiliser une affectation dans une expression conditionnelle, une bonne pratique sera d'ajouter des parenth\xe8ses en plus autour de l'affectation. Par exemple :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"if ((x = y)) {\n  /* ex\xe9cuter des instructions */\n}\n")),Object(a.mdx)("h4",{id:"valeurs-\xe9quivalents-\xe0-false-dans-un-contexte-bool\xe9en-falsy-values"},"Valeurs \xe9quivalents \xe0 false dans un contexte bool\xe9en (",Object(a.mdx)("em",{parentName:"h4"},"falsy")," values)"),Object(a.mdx)("p",null,"Lors d'un test, les valeurs suivantes seront consid\xe9r\xe9es comme \xe9quivalentes \xe0 ",Object(a.mdx)("inlineCode",{parentName:"p"},"false")," :"),Object(a.mdx)("ul",null,Object(a.mdx)("li",{parentName:"ul"},Object(a.mdx)("inlineCode",{parentName:"li"},"false")),Object(a.mdx)("li",{parentName:"ul"},Object(a.mdx)("inlineCode",{parentName:"li"},"undefined")),Object(a.mdx)("li",{parentName:"ul"},Object(a.mdx)("inlineCode",{parentName:"li"},"null")),Object(a.mdx)("li",{parentName:"ul"},Object(a.mdx)("inlineCode",{parentName:"li"},"0")),Object(a.mdx)("li",{parentName:"ul"},Object(a.mdx)("inlineCode",{parentName:"li"},"NaN")),Object(a.mdx)("li",{parentName:"ul"},"la cha\xeene de caract\xe8res vide (",Object(a.mdx)("inlineCode",{parentName:"li"},'""'),")")),Object(a.mdx)("p",null,"Les autres valeurs, y compris les objets, seront \xe9quivalents \xe0 ",Object(a.mdx)("inlineCode",{parentName:"p"},"true"),"."),Object(a.mdx)("p",null,"Attention \xe0 ne pas confondre les valeurs bool\xe9ennes \xab primitives \xbb ",Object(a.mdx)("inlineCode",{parentName:"p"},"true")," et ",Object(a.mdx)("inlineCode",{parentName:"p"},"false")," avec les valeurs cr\xe9es gr\xe2ce \xe0 un objet ",Object(a.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/JavaScript/Reference/Objets_globaux/Boolean"}),Object(a.mdx)("inlineCode",{parentName:"a"},"Boolean")),". Par exemple, on aura :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"var b = new Boolean(false);\nif (b) // cette condition est bien v\xe9rifi\xe9e !\nif (b === true) // cette condition n'est pas v\xe9rifi\xe9e !\n")),Object(a.mdx)("h4",{id:"exemple-1"},"Exemple"),Object(a.mdx)("p",null,"Dans l'exemple qui suit, la fonction",Object(a.mdx)("inlineCode",{parentName:"p"},"checkData"),"renvoie ",Object(a.mdx)("inlineCode",{parentName:"p"},"true")," si une cha\xeene de caract\xe8res mesure trois caract\xe8res. Sinon, elle affiche une alerte et renvoie ",Object(a.mdx)("inlineCode",{parentName:"p"},"false"),"."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'function checkData(maCha\xeene) {\n  if (maCha\xeene.length == 3) {\n    return true;\n  } else {\n    alert("Veuillez saisir trois caract\xe8res. " +\n      maCha\xeene + " n\'est pas valide.");\n    return false;\n  }\n}\n')),Object(a.mdx)("p",null,Object(a.mdx)("strong",{parentName:"p"},"Note :")," Pour plus d'informations sur cette instruction, voir la page de la r\xe9f\xe9rence JavaScript sur ",Object(a.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Instructions/if...else"}),Object(a.mdx)("inlineCode",{parentName:"a"},"if"),", ",Object(a.mdx)("inlineCode",{parentName:"a"},"else")," et ",Object(a.mdx)("inlineCode",{parentName:"a"},"else if")),"."),Object(a.mdx)("h3",{id:"linstruction-switch"},"L'instruction ",Object(a.mdx)("inlineCode",{parentName:"h3"},"switch")),Object(a.mdx)("p",null,"L'instruction ",Object(a.mdx)("inlineCode",{parentName:"p"},"switch")," permet \xe0 un programme d'\xe9valuer une expression et d'effectuer des instructions en fonction des diff\xe9rents cas de figures correspondants aux diff\xe9rentes valeurs. Si un cas correspond au r\xe9sultat de l'\xe9valuation, le programme ex\xe9cute l'instruction associ\xe9e. Voici un exemple utilisant une instruction ",Object(a.mdx)("inlineCode",{parentName:"p"},"switch")," :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"switch (expression) {\n  case label_1:\n    instructions_1\n    [break;]\n  case label_2:\n    instructions_2\n    [break;]\n  ...\n  default:\n    instructions_par_defaut\n    [break;]\n}\n")),Object(a.mdx)("p",null,"Pour commencer, le programme recherche (dans l'ordre) une clause ",Object(a.mdx)("inlineCode",{parentName:"p"},"case")," dont le label (ou \xe9tiquette) correspond \xe0 la valeur de l'expression. Si une telle clause est trouv\xe9e, le programme ex\xe9cutera les instructions associ\xe9es. Si aucune clause ",Object(a.mdx)("inlineCode",{parentName:"p"},"case")," ne correspond, le programme ex\xe9cutera les instructions de la clause ",Object(a.mdx)("inlineCode",{parentName:"p"},"default")," si elle est pr\xe9sente. Sinon, le programme continuera avec les instructions qui suivent l'instruction ",Object(a.mdx)("inlineCode",{parentName:"p"},"switch"),". Par convention, la clause ",Object(a.mdx)("inlineCode",{parentName:"p"},"default")," est g\xe9n\xe9ralement pr\xe9sent\xe9e en derni\xe8re bien que ce ne soit pas obligatoire."),Object(a.mdx)("p",null,"L'instruction optionnelle ",Object(a.mdx)("inlineCode",{parentName:"p"},"break"),", \xe9ventuellement contenue pour chaque clause ",Object(a.mdx)("inlineCode",{parentName:"p"},"case"),", permet de ne pas ex\xe9cuter les instructions pour les cas suivants. Si ",Object(a.mdx)("inlineCode",{parentName:"p"},"break")," n'est pas utilis\xe9, le programme continuera son ex\xe9cution avec les autres instructions contenues dans l'instruction ",Object(a.mdx)("inlineCode",{parentName:"p"},"switch"),"."),Object(a.mdx)("p",null,Object(a.mdx)("strong",{parentName:"p"},"Exemple")),Object(a.mdx)("p",null,"Dans l'exemple suivant, si ",Object(a.mdx)("inlineCode",{parentName:"p"},"fruit"),' vaut "Banane", le programme ex\xe9cutera les instructions associ\xe9es. Quand ',Object(a.mdx)("inlineCode",{parentName:"p"},"break")," est rencontr\xe9, le programme passe aux instructions d\xe9crites apr\xe8s ",Object(a.mdx)("inlineCode",{parentName:"p"},"switch"),". Ici, si ",Object(a.mdx)("inlineCode",{parentName:"p"},"break"),' n\'\xe9tait pas pr\xe9sent, les instructions pour le cas "Cerise" aurait \xe9galement \xe9t\xe9 ex\xe9cut\xe9es.'),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'switch (fruit) {\n  case "Orange":\n    console.log("Les oranges sont \xe0 60 centimes le kilo.");\n    break;\n  case "Pomme":\n    console.log("Les pommes sont \xe0 32 centimes le kilo.");\n    break;\n  case "Banane":\n    console.log("Les bananes sont \xe0 48 centimes le kilo.");\n    break;\n  case "Cerise":\n    console.log("Les cerises sont \xe0 3\u20ac le kilo.");\n    break;\n  case "Mangue":\n    console.log("Les mangues sont \xe0 50 centimes le kilo.");\n    break;\n  default:\n    console.log("D\xe9sol\xe9, nous n\'avons pas de " + fruittype + ".");\n}\nconsole.log("Souhaitez-vous autre chose ?");\n')),Object(a.mdx)("p",null,Object(a.mdx)("strong",{parentName:"p"},"Note :")," Pour plus de d\xe9tails sur cette instruction, voir la page ",Object(a.mdx)("inlineCode",{parentName:"p"},"switch")," de la r\xe9f\xe9rence JavaScript."),Object(a.mdx)("h2",{id:"les-instructions-pour-g\xe9rer-les-exceptions"},"Les instructions pour g\xe9rer les exceptions"),Object(a.mdx)("p",null,"Il est possible de lever des exceptions avec l'instruction ",Object(a.mdx)("inlineCode",{parentName:"p"},"throw")," et de les g\xe9rer (les intercepter) avec des instructions ",Object(a.mdx)("inlineCode",{parentName:"p"},"try...catch"),"."),Object(a.mdx)("ul",null,Object(a.mdx)("li",{parentName:"ul"},Object(a.mdx)("a",Object(r.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Contr%C3%B4le_du_flux_Gestion_des_erreurs#L'instruction_throw"}),"L'instruction throw")),Object(a.mdx)("li",{parentName:"ul"},Object(a.mdx)("a",Object(r.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Guide/Contr%C3%B4le_du_flux_Gestion_des_erreurs#L'instruction_try...catch"}),"L'instruction try...catch"))),Object(a.mdx)("h3",{id:"les-types-dexception"},"Les types d'exception"),Object(a.mdx)("p",null,"En JavaScript, n'importe quel objet peut \xeatre signal\xe9 comme une exception. Cependant, afin de respecter certaines conventions et de b\xe9n\xe9ficier de certaines informations, on pourra utiliser les types destin\xe9s \xe0 cet effet :"),Object(a.mdx)("ul",null,Object(a.mdx)("li",{parentName:"ul"},Object(a.mdx)("a",Object(r.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Error#Error_types"}),"Les exceptions ECMAScript")),Object(a.mdx)("li",{parentName:"ul"},Object(a.mdx)("a",Object(r.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/API/DOMException"}),Object(a.mdx)("inlineCode",{parentName:"a"},"DOMException"))," et ",Object(a.mdx)("a",Object(r.a)({parentName:"li"},{href:"https://developer.mozilla.org/fr/docs/Web/API/DOMError"}),Object(a.mdx)("inlineCode",{parentName:"a"},"DOMError")))),Object(a.mdx)("h3",{id:"linstruction-throw"},"L'instruction ",Object(a.mdx)("inlineCode",{parentName:"h3"},"throw")),Object(a.mdx)("p",null,"L'instruction ",Object(a.mdx)("inlineCode",{parentName:"p"},"throw")," est utilis\xe9e afin de signaler (",Object(a.mdx)("em",{parentName:"p"},"throw")," en anglais) une exception. Lorsqu'on signale une exception, on d\xe9finit une expression qui contient la valeur \xe0 renvoyer pour l'exception :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"throw expression;\n")),Object(a.mdx)("p",null,"Il est possible d'utiliser n'importe quelle expression, sans restriction de type. Le fragment de code qui suit illustre les diff\xe9rentes possibilit\xe9s :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'throw "Erreur2";  //type String\nthrow 42;         //type Number\nthrow true;       //type Boolean\nthrow {toString: function () { return "je suis un objet !"; } };\n')),Object(a.mdx)("p",null,Object(a.mdx)("strong",{parentName:"p"},"Note :")," Il est possible de renvoyer un objet quand on signale une exception. Les propri\xe9t\xe9s de cet objet pourront \xeatre utilis\xe9es dans le bloc ",Object(a.mdx)("inlineCode",{parentName:"p"},"catch")," d\xe9crit ci-apr\xe8s. Dans l'exemple suivant, on d\xe9finit un objet ",Object(a.mdx)("inlineCode",{parentName:"p"},"monException")," du type ",Object(a.mdx)("inlineCode",{parentName:"p"},"ExceptionUtilisateur"),", on utilise cet objet dans l'instruction ",Object(a.mdx)("inlineCode",{parentName:"p"},"throw"),"."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'// On cr\xe9e le constructeur pour cet objet\nfunction ExceptionUtilisateur(message) {\n  this.message = message;\n  this.name = "ExceptionUtilisateur";\n}\n\n// On surcharge la m\xe9thode toString pour afficher \n// un message plus explicite (par exemple dans la console)\nExceptionUtilisateur.prototype.toString = function() {\n  return this.name + \': "\' + this.message + \'"\';\n}\n\n// On cr\xe9e une instance pour ce type d\'objet \n// et on renvoie une exception avec cette instance\nthrow new ExceptionUtilisateur("La valeur fournie est trop \xe9lev\xe9e.");\n')),Object(a.mdx)("p",null,Object(a.mdx)("strong",{parentName:"p"},"Note :")," Pour plus d'informations sur cette instruction, voir la page de la r\xe9f\xe9rence JavaScript sur ",Object(a.mdx)("inlineCode",{parentName:"p"},"throw"),"."),Object(a.mdx)("h3",{id:"linstruction-trycatch"},"L'instruction ",Object(a.mdx)("inlineCode",{parentName:"h3"},"try...catch")),Object(a.mdx)("p",null,"L'instruction ",Object(a.mdx)("inlineCode",{parentName:"p"},"try...catch")," permet de d\xe9finir un bloc d'instructions qu'on essaye (",Object(a.mdx)("em",{parentName:"p"},"try")," en anglais) d'ex\xe9cuter, ainsi qu'une ou plusieurs instructions \xe0 utiliser en cas d'erreur lorsqu'une exception se produit. Si une exception est signal\xe9e, l'instruction ",Object(a.mdx)("inlineCode",{parentName:"p"},"try...catch")," permettra de l' \xab attraper \xbb (",Object(a.mdx)("em",{parentName:"p"},"catch")," en anglais) et de d\xe9finir ce qui se passe dans ce cas."),Object(a.mdx)("p",null,"L'instruction ",Object(a.mdx)("inlineCode",{parentName:"p"},"try...catch")," se compose d'un bloc ",Object(a.mdx)("inlineCode",{parentName:"p"},"try")," qui contient une ou plusieurs instructions et blocs ",Object(a.mdx)("inlineCode",{parentName:"p"},"catch")," qui contiennent les instructions \xe0 ex\xe9cuter lorsqu'une exception se produit dans le bloc ",Object(a.mdx)("inlineCode",{parentName:"p"},"try"),". Autrement dit, dans la plupart des cas pour le programme, on veut que les instructions du bloc ",Object(a.mdx)("inlineCode",{parentName:"p"},"try")," se d\xe9roulent normalement et en cas de probl\xe8me, on passe le contr\xf4le au bloc ",Object(a.mdx)("inlineCode",{parentName:"p"},"catch"),". Si une instruction contenue dans le bloc ",Object(a.mdx)("inlineCode",{parentName:"p"},"try")," renvoie une exception, le contr\xf4le sera imm\xe9diatement transf\xe9r\xe9 au bloc ",Object(a.mdx)("inlineCode",{parentName:"p"},"catch"),". Si aucune exception n'est signal\xe9e au sein du bloc ",Object(a.mdx)("inlineCode",{parentName:"p"},"try"),", le bloc ",Object(a.mdx)("inlineCode",{parentName:"p"},"catch")," ne sera pas utilis\xe9. Cette instruction peut comporter un bloc ",Object(a.mdx)("inlineCode",{parentName:"p"},"finally")," qui s'ex\xe9cute apr\xe8s les blocs ",Object(a.mdx)("inlineCode",{parentName:"p"},"try")," et ",Object(a.mdx)("inlineCode",{parentName:"p"},"catch")," mais avant les instructions suivant l'instruction ",Object(a.mdx)("inlineCode",{parentName:"p"},"try...catch"),"."),Object(a.mdx)("p",null,"Dans l'exemple qui suit, on utilise une instruction ",Object(a.mdx)("inlineCode",{parentName:"p"},"try...catch"),". On d\xe9finit une fonction qui prend un nombre et renvoie le nom du mois correspondant \xe0 ce nombre. Si la valeur fournie n'est pas comprise entre 1 et 12, on signale une exception avec la valeur ",Object(a.mdx)("inlineCode",{parentName:"p"},'"Num\xe9roMoisInvalide"'),". Lorsque cette exception est g\xe9r\xe9e dans le bloc ",Object(a.mdx)("inlineCode",{parentName:"p"},"catch"),", la variable ",Object(a.mdx)("inlineCode",{parentName:"p"},"nomMois")," recevra la valeur ",Object(a.mdx)("inlineCode",{parentName:"p"},'"inconnu"'),"."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'function getNomMois(numMois) {\n  numMois = numMois - 1; // On d\xe9cale de 1 car les indices du tableaux commencent \xe0 0\n  var mois = ["Janvier", "F\xe9vrier", "Mars", "Avril" ,"Mai", "Juin", "Juillet",\n              "Ao\xfbt", "Septembre", "Octobre", "Novembre", "D\xe9cembre"];\n  if (mois[numMois] != null) {\n    return mois[numMois];\n  } else {\n    throw "Num\xe9roMoisInvalide";  // Ici on utilise l\'instruction throw\n  }\n}\n\ntry { // les instructions \xe0 essayer si tout se passe bien\n  nomMois = getNomMois(maVarMois); // La fonction peut renvoyer une exception\n} catch (e) {\n  nomMois = "inconnu";\n  gestionErreurLog(e); // on g\xe8re l\'erreur avec une fonction\n}\n')),Object(a.mdx)("h4",{id:"le-bloc-catch"},"Le bloc ",Object(a.mdx)("inlineCode",{parentName:"h4"},"catch")),Object(a.mdx)("p",null,"Un bloc ",Object(a.mdx)("inlineCode",{parentName:"p"},"catch")," peut \xeatre utilis\xe9 afin de g\xe9rer les exceptions pouvant \xeatre g\xe9n\xe9r\xe9es par les instructions du bloc ",Object(a.mdx)("inlineCode",{parentName:"p"},"try"),"."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(r.a)({parentName:"pre"},{}),"catch (ident) {\n  statements\n}\n")),Object(a.mdx)("p",null,"Le bloc ",Object(a.mdx)("inlineCode",{parentName:"p"},"catch")," d\xe9finit un identifiant (",Object(a.mdx)("inlineCode",{parentName:"p"},"ident")," dans le fragment de code pr\xe9c\xe9dent) qui contiendra la valeur pass\xe9e par l'instruction ",Object(a.mdx)("inlineCode",{parentName:"p"},"throw"),". Cet identifiant peut \xeatre utilis\xe9 afin de r\xe9cup\xe9rer des informations sur l'exception qui a \xe9t\xe9 signal\xe9e. Le moteur JavaScript cr\xe9e cet identifiant lorsque le contr\xf4le passe au bloc ",Object(a.mdx)("inlineCode",{parentName:"p"},"catch"),". L'identifiant ne \xab vit \xbb qu'\xe0 l'int\xe9rieur du bloc ",Object(a.mdx)("inlineCode",{parentName:"p"},"catch")," et une fois que l'ex\xe9cution du bloc ",Object(a.mdx)("inlineCode",{parentName:"p"},"catch")," est termin\xe9e, l'identifiant n'est plus disponible."),Object(a.mdx)("p",null,"Dans l'exemple suivant, le code renvoie une exception. Lorsque celle-ci est signal\xe9e, le contr\xf4le passe au bloc ",Object(a.mdx)("inlineCode",{parentName:"p"},"catch"),"."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"try {\n  throw \"monException\"; // on g\xe9n\xe8re une exception\n} catch (e) {\n  // les instructions utilis\xe9es pour g\xe9rer les exceptions\n  enregistrerErreurs(e); // on passe l'objet repr\xe9sentant l'exception \xe0 une fonction utilis\xe9e pour g\xe9rer les erreurs\n}\n")),Object(a.mdx)("p",null,Object(a.mdx)("strong",{parentName:"p"},"Note :")," Pour plus d'informations sur cette instruction, voir la page de la r\xe9f\xe9rence JavaScript sur ",Object(a.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Instructions/try...catch"}),Object(a.mdx)("inlineCode",{parentName:"a"},"try...catch")),"."),Object(a.mdx)("p",null,Object(a.mdx)("strong",{parentName:"p"},"Note :")," Quand on souhaite afficher des erreurs dans la console, on privil\xe9giera ",Object(a.mdx)("inlineCode",{parentName:"p"},"console.error()")," plut\xf4t que ",Object(a.mdx)("inlineCode",{parentName:"p"},"console.log()"),". En effet, cette premi\xe8re m\xe9thode est plus adapt\xe9e et indiquera plus d'informations."),Object(a.mdx)("h4",{id:"le-bloc-finally"},"Le bloc ",Object(a.mdx)("inlineCode",{parentName:"h4"},"finally")),Object(a.mdx)("p",null,"Le bloc ",Object(a.mdx)("inlineCode",{parentName:"p"},"finally")," contient les instructions \xe0 ex\xe9cuter apr\xe8s les blocs ",Object(a.mdx)("inlineCode",{parentName:"p"},"try")," et ",Object(a.mdx)("inlineCode",{parentName:"p"},"catch")," mais avant l'instruction suivant le ",Object(a.mdx)("inlineCode",{parentName:"p"},"try...catch...finally"),"."),Object(a.mdx)("p",null,"Le bloc ",Object(a.mdx)("inlineCode",{parentName:"p"},"finally")," est ex\xe9cut\xe9 dans tous les cas, ",Object(a.mdx)("strong",{parentName:"p"},"qu'une exception ait \xe9t\xe9 lev\xe9e ou non"),". Si une exception est signal\xe9e et qu'il n'y a pas de bloc ",Object(a.mdx)("inlineCode",{parentName:"p"},"catch")," pour la g\xe9rer, les instructions du bloc ",Object(a.mdx)("inlineCode",{parentName:"p"},"finally")," seront tout de m\xeame ex\xe9cut\xe9es."),Object(a.mdx)("p",null,"Le bloc ",Object(a.mdx)("inlineCode",{parentName:"p"},"finally")," peut \xeatre utilis\xe9 afin de finir proprement l'ex\xe9cution malgr\xe9 une exception. On peut, par exemple, devoir lib\xe9rer une ressource, ou fermer un flux, etc. Dans l'exemple suivant, on \xe9crit dans un fichier, si une exception se produit lors de l'\xe9criture, on utilisera le bloc ",Object(a.mdx)("inlineCode",{parentName:"p"},"finally")," afin de bien fermer le flux vers le fichier avant la fin du script."),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"ouvrirFichier();\ntry {\n  \xe9crireFichier(donn\xe9es); // Une erreur peut se produire\n} catch(e) {\n  g\xe9rerException(e); // On g\xe8re le cas o\xf9 on a une exception\n} finally {\n  fermerFichier(); // On n'oublie jamais de fermer le flux.\n}\n")),Object(a.mdx)("p",null,"Si le bloc ",Object(a.mdx)("inlineCode",{parentName:"p"},"finally")," renvoie une valeur, cette valeur sera consid\xe9r\xe9e comme la valeur de retour pour tout l'ensemble ",Object(a.mdx)("inlineCode",{parentName:"p"},"try-catch-finally"),", quel que soient les instructions ",Object(a.mdx)("inlineCode",{parentName:"p"},"return")," \xe9ventuellement utilis\xe9es dans les blocs ",Object(a.mdx)("inlineCode",{parentName:"p"},"try")," et ",Object(a.mdx)("inlineCode",{parentName:"p"},"catch")," :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'function f() {\n  try {\n    console.log(0);\n    throw "bug";\n  } catch(e) {\n    console.log(1);\n    return true; // Cette instruction est bloqu\xe9e jusqu\'\xe0 la fin du bloc finally\n    console.log(2); // Ne pourra jamais \xeatre ex\xe9cut\xe9\n  } finally {\n    console.log(3);\n    return false; // On surcharge l\'instruction "return" pr\xe9c\xe9dente\n    console.log(4); // Ne pourra jamais \xeatre ex\xe9cut\xe9\n  }\n  // "return false" est ex\xe9cut\xe9\n    \n  console.log(5); // Ne pourra jamais \xeatre ex\xe9cut\xe9\n}\nf(); // affiche 0, 1, 3 puis renvoie false\n')),Object(a.mdx)("p",null,"Lorsqu'on surcharge les valeurs de retour avec le bloc ",Object(a.mdx)("inlineCode",{parentName:"p"},"finally"),", cela s'applique \xe9galement aux exceptions qui sont lev\xe9es (ou retransmises) au sein du bloc ",Object(a.mdx)("inlineCode",{parentName:"p"},"catch")," :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'function f() {\n  try {\n    throw "probl\xe8me";\n  } catch(e) {\n    console.log(\'"probl\xe8me" interne intercept\xe9\');\n    throw e; // cette instruction est mise en attente \n             // tant que le bloc finally n\'est pas fini\n  } finally {\n    return false; // surcharge le "throw" pr\xe9c\xe9dent\n  }\n  // "return false" est ex\xe9cut\xe9 \xe0 ce moment\n}\n\ntry {\n  f();\n} catch(e) {\n  // ce bloc n\'est jamais utilis\xe9 car le throw\n  // utilis\xe9 dans le bloc catch a \xe9t\xe9 surcharg\xe9\n  // par l\'instruction return de finally\n  console.log(\'"probl\xe8me" externe intercept\xe9\');\n}\n\n// Sortie\n// "probl\xe8me" interne attrap\xe9\n')),Object(a.mdx)("h4",{id:"imbriquer-des-instructions-trycatch"},"Imbriquer des instructions ",Object(a.mdx)("inlineCode",{parentName:"h4"},"try...catch")),Object(a.mdx)("p",null,"Il est possible d'imbriquer une ou plusieurs instructions ",Object(a.mdx)("inlineCode",{parentName:"p"},"try...catch"),". Si une instruction ",Object(a.mdx)("inlineCode",{parentName:"p"},"try...catch")," imbriqu\xe9e ne comporte pas de bloc ",Object(a.mdx)("inlineCode",{parentName:"p"},"catch"),", elle doit contenir une instruction ",Object(a.mdx)("inlineCode",{parentName:"p"},"finally")," et le bloc ",Object(a.mdx)("inlineCode",{parentName:"p"},"catch")," de l'instruction ",Object(a.mdx)("inlineCode",{parentName:"p"},"try...catch")," englobante sera utilis\xe9 si jamais il y a une exception. Pour plus de d\xe9tails, voir la page sur ",Object(a.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Instructions/try...catch"}),"l'instruction ",Object(a.mdx)("inlineCode",{parentName:"a"},"try...catch")),"."),Object(a.mdx)("h3",{id:"utiliser-les-objets-error"},"Utiliser les objets ",Object(a.mdx)("inlineCode",{parentName:"h3"},"Error")),Object(a.mdx)("p",null,"En fonction du type d'erreur qui est cr\xe9\xe9e, on pourra utiliser les propri\xe9t\xe9s ",Object(a.mdx)("inlineCode",{parentName:"p"},"name")," et ",Object(a.mdx)("inlineCode",{parentName:"p"},"message")," afin d'obtenir plus d'informations. G\xe9n\xe9ralement on a ",Object(a.mdx)("inlineCode",{parentName:"p"},"name")," qui fournit le type d'erreur rencontr\xe9e (ex : ",Object(a.mdx)("inlineCode",{parentName:"p"},"DOMException")," ou ",Object(a.mdx)("inlineCode",{parentName:"p"},"Error"),"). La propri\xe9t\xe9 ",Object(a.mdx)("inlineCode",{parentName:"p"},"message"),", quant \xe0 elle fournit un message descriptif de l'erreur (qu'on utilisera g\xe9n\xe9ralement lorsqu'on voudra convertir/afficher le texte correspondant \xe0 une erreur)."),Object(a.mdx)("p",null,"Si vous construisez des erreurs, vous pouvez utiliser le constructeur ",Object(a.mdx)("a",Object(r.a)({parentName:"p"},{href:"https://developer.mozilla.org/fr/docs/JavaScript/Reference/Objets_globaux/Error"}),Object(a.mdx)("inlineCode",{parentName:"a"},"Error"))," afin de disposer de ces propri\xe9t\xe9s. Ainsi, on pourra avoir :"),Object(a.mdx)("pre",null,Object(a.mdx)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"function causerErreurs() {\n  if (toutEstSourceDErreurs()) {\n    throw (new Error('mon message'));\n  } else {\n    g\xe9n\xe9rerUneAutreErreur();\n  }\n}\n....\ntry {\n  causerErreurs();\n} catch (e) {\n  console.error(e.name);// affiche 'Error'\n  console.erro(e.message); // affiche 'mon message' ou un message d'erreur JavaScript\n}\n")))}u.isMDXComponent=!0},212:function(e,n,t){"use strict";t.r(n),t.d(n,"MDXContext",(function(){return u})),t.d(n,"MDXProvider",(function(){return m})),t.d(n,"mdx",(function(){return j})),t.d(n,"useMDXComponents",(function(){return d})),t.d(n,"withMDXComponents",(function(){return p}));var r=t(0),i=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(){return(o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var u=i.a.createContext({}),p=function(e){return function(n){var t=d(n.components);return i.a.createElement(e,o({},n,{components:t}))}},d=function(e){var n=i.a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},m=function(e){var n=d(e.components);return i.a.createElement(u.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},x=i.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(t),p=r,m=u["".concat(o,".").concat(p)]||u[p]||b[p]||a;return t?i.a.createElement(m,s(s({ref:n},c),{},{components:t})):i.a.createElement(m,s({ref:n},c))}));function j(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=x;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var l=2;l<a;l++)o[l]=t[l];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,t)}x.displayName="MDXCreateElement"}}]);
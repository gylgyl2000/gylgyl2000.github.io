(window.webpackJsonp=window.webpackJsonp||[]).push([[97],{167:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return c})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return d}));var n=a(3),r=a(7),o=(a(0),a(212)),i={id:"Codecademy-Learn_JavaScript-10",title:"Browser Compatibility and Transpilation"},c={unversionedId:"Codecademy/Codecademy-Learn_JavaScript-10",id:"Codecademy/Codecademy-Learn_JavaScript-10",isDocsHomePage:!1,title:"Browser Compatibility and Transpilation",description:"In this lesson, you will learn how to transpile JavaScript ES6 code to ES5.",source:"@site/docs/Codecademy/Codecademy-Learn_JavaScript-10.md",slug:"/Codecademy/Codecademy-Learn_JavaScript-10",permalink:"/docs/Codecademy/Codecademy-Learn_JavaScript-10",editUrl:"https://github.com/gylgyl2000/laloutre.github.io/edit/main/docs/Codecademy/Codecademy-Learn_JavaScript-10.md",version:"current"},l=[{value:"01. Introduction",id:"01-introduction",children:[]},{value:"02. caniuse.com I",id:"02-caniusecom-i",children:[]},{value:"03. caniuse.com II",id:"03-caniusecom-ii",children:[]},{value:"04. Why ES6 ?",id:"04-why-es6-",children:[]},{value:"05. Transpilation With Babel",id:"05-transpilation-with-babel",children:[]},{value:"06. npm init",id:"06-npm-init",children:[]},{value:"07. Install Node Packages",id:"07-install-node-packages",children:[]},{value:"08. .babelrc",id:"08-babelrc",children:[]},{value:"09. Babel Source Lib",id:"09-babel-source-lib",children:[]},{value:"10. Build",id:"10-build",children:[]},{value:"11. Review",id:"11-review",children:[]}],s={rightToc:l};function d(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(o.mdx)("wrapper",Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(o.mdx)("p",null,"In this lesson, you will learn how to transpile JavaScript ES6 code to ES5."),Object(o.mdx)("h2",{id:"01-introduction"},"01. Introduction"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/browser-compatibility-and-transpilation/exercises/browser-compatibility-introduction"}),"Learn JavaScript | Codecademy")),Object(o.mdx)("p",null,"You\u2019re probably prompted to update your web browser every few months. Do you know why ? A few reasons include addressing security vulnerabilities, adding features, and supporting new HTML, CSS, and JavaScript syntax."),Object(o.mdx)("p",null,"The reasons above imply there is a period before a software update is released when there are security vulnerabilities and unsupported language syntax. "),Object(o.mdx)("p",null,"This lesson focuses on the latter. Specifically, how developers address the gap between the new JavaScript syntax that they use and the JavaScript syntax that web browsers recognize."),Object(o.mdx)("p",null,"This has become a widespread concern for web developers since Ecma International, the organization responsible for standardizing JavaScript, released a new version of it in 2015, called ECMAScript2015, commonly referred to as ES6. Note, the 6 refers to the version of JavaScript and is not related to the year it was released (the previous version was ES5). "),Object(o.mdx)("p",null,"Upon release, web developers quickly adopted the new ES6 syntax, as it improved readability and efficiency. However, ES6 was not supported by most web browsers, so developers ran into browser compatibility issues. "),Object(o.mdx)("p",null,"In this lesson, you will learn about two important tools for addressing browser compatibility issues."),Object(o.mdx)("ul",null,Object(o.mdx)("li",{parentName:"ul"},"caniuse.com \u2014 A website that provides data on web browser compatibility for HTML, CSS, and JavaScript features. You will learn how to use it to look up ES6 feature support."),Object(o.mdx)("li",{parentName:"ul"},"Babel \u2014 A Javascript library that you can use to convert new, unsupported JavaScript (ES6), into an older version (ES5) that is recognized by most modern browsers.")),Object(o.mdx)("p",null,"Let\u2019s get started by running ES6 JavaScript on a fake old web browser version."),Object(o.mdx)("p",null,Object(o.mdx)("strong",{parentName:"p"},"Instructions")),Object(o.mdx)("p",null,Object(o.mdx)("strong",{parentName:"p"},"1.")," Copy the following code into ",Object(o.mdx)("strong",{parentName:"p"},"main.js"),". The code includes three features of ES6 syntax : ",Object(o.mdx)("inlineCode",{parentName:"p"},"const"),", ",Object(o.mdx)("inlineCode",{parentName:"p"},"let"),", and ES6 string interpolation."),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'var pasta = "Spaghetti"; // ES5 syntax\n\nconst meat = "Pancetta"; // ES6 syntax\n\nlet sauce = "Eggs and cheese"; // ES6 syntax\n\n// Template literals, like the one below, were introduced in ES6\nconst carbonara = `You can make carbonara with ${pasta}, ${meat}, and a sauce made with ${sauce}.`;\n')),Object(o.mdx)("p",null,"Run the code when you are ready. Look at the errors displayed in our LetScape"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"ERROR\n-> SyntaxError: Block-scoped declaration const not supported in this web browser\n\nERROR\n-> SyntaxError: Block-scoped declaration let not supported in this web browser\n\nERROR\n-> SyntaxError: Template literals not supported in this web browser\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"02-caniusecom-i"},"02. caniuse.com I"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/browser-compatibility-and-transpilation/exercises/can-i-use-i"}),"Learn JavaScript | Codecademy")),Object(o.mdx)("p",null,"Since Ecma\u2019s release of ECMAScript2015 (ES6), software companies have slowly added support for ES6 features and syntax. While most new browser versions support the majority of the ES6 library, there are still a couple sources of compatibility issues:"),Object(o.mdx)("ul",null,Object(o.mdx)("li",{parentName:"ul"},"Some users have not updated to the latest, ES6 supported web browser version."),Object(o.mdx)("li",{parentName:"ul"},"A few ES6 features, like modules, are still not supported by most web browsers.")),Object(o.mdx)("p",null,"Because companies add support for ES6 features gradually, it\u2019s important for you to know how to look up browser support on a feature-by-feature basis. The website ",Object(o.mdx)("a",Object(n.a)({parentName:"p"},{href:"http://caniuse.com/"}),"caniuse.com")," is the best resource for finding browser compatibility information."),Object(o.mdx)("p",null,"In caniuse, you can enter an ES6 feature, like ",Object(o.mdx)("inlineCode",{parentName:"p"},"let"),", and see the percentage of browsers that recognize it. You can also see when each major web browser (Chrome, Safari, Edge, etc.) added support for the keyword."),Object(o.mdx)("p",null,"The video to the right shows you how to get started with caniuse.com."),Object(o.mdx)("p",null,Object(o.mdx)("strong",{parentName:"p"},"Instructions")),Object(o.mdx)("p",null,"In the video, we will use caniuse.com to find the percentage of browsers that support the entire ES5 library, then we will look at the percentage of browsers that support modules, a feature introduced in ES6."),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://s3.amazonaws.com/codecademy-content/courses/learn-javascript-transpilation/videos/caniuse.mov"}),"https://s3.amazonaws.com/codecademy-content/courses/learn-javascript-transpilation/videos/caniuse.mov")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"03-caniusecom-ii"},"03. caniuse.com II"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/browser-compatibility-and-transpilation/exercises/can-i-use-ii"}),"Learn JavaScript | Codecademy")),Object(o.mdx)("p",null,"Now, it\u2019s your turn to get some practice with ",Object(o.mdx)("a",Object(n.a)({parentName:"p"},{href:"http://caniuse.com/"}),"caniuse.com"),". In a new tab, open caniuse.com and complete the tasks below."),Object(o.mdx)("p",null,Object(o.mdx)("strong",{parentName:"p"},"Instructions")),Object(o.mdx)("p",null,Object(o.mdx)("strong",{parentName:"p"},"1.")," Look up the percentage of browsers that support JavaScript ES5. Save the value, as a number, to the variable ",Object(o.mdx)("inlineCode",{parentName:"p"},"esFivePercentageSupport"),"."),Object(o.mdx)("p",null,Object(o.mdx)("strong",{parentName:"p"},"2.")," Look up the percentage of browsers that support \u201cTemplate Literals\u201d, a feature that was introduced in ES6.\nSave the value, as a number, to the variable ",Object(o.mdx)("inlineCode",{parentName:"p"},"esSixTemplateLiterals"),"."),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"// Set the variable below to a number\nlet esFivePercentageSupport = 99.27;\n\n// Set the variable below to a number\nlet esSixTemplateLiterals = 90.11;\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"04-why-es6-"},"04. Why ES6 ?"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/browser-compatibility-and-transpilation/exercises/why-update"}),"Learn JavaScript | Codecademy")),Object(o.mdx)("p",null,"Before we learn how to set up a JavaScript project that converts ES6 to an older version, it\u2019s worth understanding a few of the reasons Ecma made such substantial updates. "),Object(o.mdx)("p",null,"The version of JavaScript that preceded ES6 is called JavaScript ES5. Three reasons for the ES5 to ES6 updates are listed below :"),Object(o.mdx)("ul",null,Object(o.mdx)("li",{parentName:"ul"},"Readability and economy of code \u2014 The new syntax is often easier to understand (more readable) and requires fewer characters to create the same functionality (economy of code). "),Object(o.mdx)("li",{parentName:"ul"},"Addresses sources of ES5 bugs \u2014 Some ES5 syntax led to common bugs. With ES6, Ecma introduced syntax that mitigates some of the most common pitfalls."),Object(o.mdx)("li",{parentName:"ul"},"A similarity to other programming languages \u2014 JavaScript ES6 is syntactically more similar to other object-oriented programming languages. This leads to less friction when experienced, non-JavaScript developers want to learn JavaScript.")),Object(o.mdx)("p",null,"Because ES6 addressed the above issues, Ecma knew that adoption by web developers would occur quickly, while web browser support lagged behind."),Object(o.mdx)("p",null,"To limit the impact of ES6 browser compatibility issues, Ecma made the new syntax backwards compatible, which means you can map JavaScript ES6 code to ES5. "),Object(o.mdx)("p",null,Object(o.mdx)("strong",{parentName:"p"},"Instructions")),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'var pasta = "Spaghetti"; // ES5 syntax\n\nconst meat = "Pancetta"; // ES6 syntax\n\nlet sauce = "Eggs and cheese"; // ES6 syntax\n\n// Template literals, like the one below, were introduced in ES6\nconst carbonara = `You can make carbonara with ${pasta}, ${meat}, and a sauce made with ${sauce}.`;\n')),Object(o.mdx)("p",null,Object(o.mdx)("strong",{parentName:"p"},"1.")," In these tasks, you will manually change the code in ",Object(o.mdx)("strong",{parentName:"p"},"main.js")," to ES5 syntax.\nThe ",Object(o.mdx)("inlineCode",{parentName:"p"},"let")," and ",Object(o.mdx)("inlineCode",{parentName:"p"},"const")," keywords were introduced in ES6. Before that, we declared all variables with the ",Object(o.mdx)("inlineCode",{parentName:"p"},"var")," keyword.\nChange the ",Object(o.mdx)("inlineCode",{parentName:"p"},"let")," and ",Object(o.mdx)("inlineCode",{parentName:"p"},"const")," keywords in ",Object(o.mdx)("strong",{parentName:"p"},"main.js")," to ",Object(o.mdx)("inlineCode",{parentName:"p"},"var"),"."),Object(o.mdx)("p",null,Object(o.mdx)("strong",{parentName:"p"},"2.")," The following line of code is written with ES6 string interpolation :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"`You can make carbonara with ${pasta}, ${meat}, and a sauce made with ${sauce}.`\n")),Object(o.mdx)("p",null,"In ES5, we used plus signs (",Object(o.mdx)("inlineCode",{parentName:"p"},"+"),") to interpolate variables into strings.\nIn ",Object(o.mdx)("strong",{parentName:"p"},"main.js"),", use ES5 string interpolation to set ",Object(o.mdx)("inlineCode",{parentName:"p"},"carbonara")," to the same string as above."),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'var pasta = "Spaghetti";\nvar meat = "Pancetta";\nvar sauce = "Eggs and cheese";\nvar carbonara = `You can make carbonara with + pasta +, + meat + , and a sauce made with + sauce + .`;\n')),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"05-transpilation-with-babel"},"05. Transpilation With Babel"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/browser-compatibility-and-transpilation/exercises/transpilation-with-babel"}),"Learn JavaScript | Codecademy")),Object(o.mdx)("p",null,"In the last exercise, you manually converted ES6 code to ES5. Although manual conversion only took you a few minutes, it is unsustainable as the size of the JavaScript file increases."),Object(o.mdx)("p",null,"Because ES6 is predictably backwards compatible, a collection of JavaScript programmers developed a JavaScript library called Babel that ",Object(o.mdx)("em",{parentName:"p"},"transpiles")," ES6 JavaScript to ES5. "),Object(o.mdx)("p",null,"Transpilation is the process of converting one programming language to another. "),Object(o.mdx)("p",null,"In the remaining exercises of this lesson, you will learn how to use Babel to transpile the new, easy-to-write version of JavaScript (ES6) to the old, browser-compatible version of JavaScript (ES5)."),Object(o.mdx)("p",null,"In the instructions below, you will pass JavaScript ES6 code to Babel, which will transpile it to ES5 and write it to a file in the ",Object(o.mdx)("strong",{parentName:"p"},"lib")," directory."),Object(o.mdx)("p",null,Object(o.mdx)("strong",{parentName:"p"},"Instructions")),Object(o.mdx)("p",null,Object(o.mdx)("strong",{parentName:"p"},"1.")," In the terminal window type :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"npm install babel-cli\n")),Object(o.mdx)("p",null,"This installs one of the two required Babel packages."),Object(o.mdx)("p",null,Object(o.mdx)("strong",{parentName:"p"},"2.")," In the terminal window type :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"npm install babel-preset-env\n")),Object(o.mdx)("p",null,"This installs the second of two required Babel packages."),Object(o.mdx)("p",null,Object(o.mdx)("strong",{parentName:"p"},"3.")," In the terminal, type ",Object(o.mdx)("inlineCode",{parentName:"p"},"npm run build")," and press enter.\nYou can view the ES5 code in ",Object(o.mdx)("strong",{parentName:"p"},"./lib/main.js"),".\nYou may need to refresh to see the newly created ",Object(o.mdx)("strong",{parentName:"p"},"lib")," directory."),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'// ./lib/main.js\n\n"use strict";\nvar pasta = "Spaghetti"; // ES5 syntax\nvar meat = "Pancetta"; // ES6 syntax\nvar sauce = "Eggs and cheese"; // ES6 syntax\n// Template literals, like the one below, were introduced in ES6\nvar carbonara = "You can make carbonara with " + pasta + ", " + meat + ", and a sauce made with " + sauce + ".";\n')),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"06-npm-init"},"06. npm init"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/browser-compatibility-and-transpilation/exercises/npm-init"}),"Learn JavaScript | Codecademy")),Object(o.mdx)("p",null,"In the last exercise, you wrote one command in your terminal to transpile ES6 code to ES5. In the next five exercises you will learn how to setup a JavaScript project that transpiles code when you run ",Object(o.mdx)("inlineCode",{parentName:"p"},"npm run build")," from the root directory of a JavaScript project."),Object(o.mdx)("p",null,"The first step is to place your ES6 JavaScript file in a directory called ",Object(o.mdx)("strong",{parentName:"p"},"src"),". From your root directory, the path to the ES6 file is ",Object(o.mdx)("strong",{parentName:"p"},"./src/main.js")),Object(o.mdx)("p",null,"The initial JavaScript project file structure is :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"project\n|_ src\n|___ main.js\n")),Object(o.mdx)("p",null,"Before we install Babel, we need to setup our project to use the ",Object(o.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://docs.npmjs.com/getting-started/what-is-npm"}),"node package manager (npm)"),". Developers use ",Object(o.mdx)("em",{parentName:"p"},"npm")," to access and manage Node packages. Node packages are directories that contain JavaScript code written by other developers. You can use these packages to reduce duplication of work and avoid bugs."),Object(o.mdx)("p",null,"Before we can add Babel to our project directory, we need to run ",Object(o.mdx)("inlineCode",{parentName:"p"},"npm init"),". The ",Object(o.mdx)("inlineCode",{parentName:"p"},"npm init")," command creates a ",Object(o.mdx)("strong",{parentName:"p"},"package.json")," file in the root directory."),Object(o.mdx)("p",null,"A ",Object(o.mdx)("strong",{parentName:"p"},"package.json")," file contains information about the current JavaScript project. Some of this information includes :"),Object(o.mdx)("ul",null,Object(o.mdx)("li",{parentName:"ul"},"Metadata \u2014 This includes a project title, description, authors, and more."),Object(o.mdx)("li",{parentName:"ul"},"A list of node packages required for the project \u2014 If another developer wants to run your project, npm looks inside ",Object(o.mdx)("strong",{parentName:"li"},"package.json")," and downloads the packages in this list. "),Object(o.mdx)("li",{parentName:"ul"},"Key-value pairs for command line scripts \u2014 You can use npm to run these shorthand scripts to perform some process. In a later exercise, we will add a script that runs Babel and transpiles ES6 to ES5.")),Object(o.mdx)("p",null,"If you have Node installed on your computer, you can create a ",Object(o.mdx)("strong",{parentName:"p"},"package.json")," file by typing ",Object(o.mdx)("inlineCode",{parentName:"p"},"npm init")," into the terminal."),Object(o.mdx)("p",null,"The terminal prompts you to fill in fields for the project\u2019s metadata (name, description, etc.)"),Object(o.mdx)("p",null,"You are not required to answer the prompts, though we recommend at minimum, you add your own title and description. If you don\u2019t want to fill in a field, you can press enter. npm will leave fill these fields with default values or leave them empty when it creates the ",Object(o.mdx)("strong",{parentName:"p"},"package.json")," file."),Object(o.mdx)("p",null,"After you run ",Object(o.mdx)("inlineCode",{parentName:"p"},"npm init")," your directory structure will contain the following files and folders :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"project\n|_ src\n|___ main.js\n|_ package.json\n")),Object(o.mdx)("p",null,"npm adds the ",Object(o.mdx)("strong",{parentName:"p"},"package.json")," file to the same level as the ",Object(o.mdx)("strong",{parentName:"p"},"src")," directory."),Object(o.mdx)("p",null,Object(o.mdx)("strong",{parentName:"p"},"Instructions")),Object(o.mdx)("p",null,Object(o.mdx)("strong",{parentName:"p"},"1.")," Run ",Object(o.mdx)("inlineCode",{parentName:"p"},"ls")," in the terminal to see the file structure of your current directory."),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"$ ls\nsrc\n")),Object(o.mdx)("p",null,Object(o.mdx)("strong",{parentName:"p"},"2.")," Use npm to create a new ",Object(o.mdx)("strong",{parentName:"p"},"package.json")," file. We recommend you set the ",Object(o.mdx)("inlineCode",{parentName:"p"},"name")," and ",Object(o.mdx)("inlineCode",{parentName:"p"},"description")," properties to the following values :"),Object(o.mdx)("ul",null,Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("inlineCode",{parentName:"li"},"name")," \u2014 ",Object(o.mdx)("inlineCode",{parentName:"li"},"learning-babel")),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("inlineCode",{parentName:"li"},"description")," \u2014 ",Object(o.mdx)("inlineCode",{parentName:"li"},"Use Babel to transpile JavaScript ES6 to ES5"))),Object(o.mdx)("p",null,"Enter ",Object(o.mdx)("inlineCode",{parentName:"p"},"ls")," into the terminal to see the file structure of your current directory. Notice the addition of ",Object(o.mdx)("strong",{parentName:"p"},"package.json"),"."),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),'$ npm init\nThis utility will walk you through creating a package.json file.\nIt only covers the most common items, and tries to guess sensible defaults.\n\nSee `npm help json` for definitive documentation on these fields\nand exactly what they do.\n\nUse `npm install <pkg> --save` afterwards to install a package and\nsave it as a dependency in the package.json file.\n\nPress ^C at any time to quit.\nname: (learn-javascript-transpilation-bct-npm-init) learning-babel\nversion: (1.0.0) \ndescription: Use Babel to transpile JavaScript ES6 to ES5\nentry point: (index.js) \ntest command: \ngit repository: \nkeywords: \nauthor: \nlicense: (ISC) \nAbout to write to /home/ccuser/workspace/learn-javascript-transpilation-bct-npm-init/package.json:\n\n{\n  "name": "learning-babel",\n  "version": "1.0.0",\n  "description": "Use Babel to transpile JavaScript ES6 to ES5",\n  "main": "index.js",\n  "scripts": {\n    "test": "echo \\"Error: no test specified\\" && exit 1"\n  },\n  "author": "",\n  "license": "ISC"\n}\n\n\nIs this ok? (yes) \n$ ls\npackage.json  src\n$ \n')),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"07-install-node-packages"},"07. Install Node Packages"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/browser-compatibility-and-transpilation/exercises/npm-install"}),"Learn JavaScript | Codecademy")),Object(o.mdx)("p",null,"We use the npm ",Object(o.mdx)("inlineCode",{parentName:"p"},"install")," command to install new Node packages locally. The ",Object(o.mdx)("inlineCode",{parentName:"p"},"install")," command creates a folder called ",Object(o.mdx)("strong",{parentName:"p"},"node_modules")," and copies the package files to it. The ",Object(o.mdx)("inlineCode",{parentName:"p"},"install")," command also installs all of the dependencies for the given package. "),Object(o.mdx)("p",null,"To install Babel, we need to ",Object(o.mdx)("inlineCode",{parentName:"p"},"npm install")," two packages, ",Object(o.mdx)("inlineCode",{parentName:"p"},"babel-cli")," and ",Object(o.mdx)("inlineCode",{parentName:"p"},"babel-preset-env"),". However, npm installs over one hundred other packages that are dependencies for Babel to run properly. "),Object(o.mdx)("p",null,"We install Babel with the following two commands :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"$ npm install babel-cli -D\n$ npm install babel-preset-env -D\n")),Object(o.mdx)("p",null,"The ",Object(o.mdx)("inlineCode",{parentName:"p"},"babel-cli")," package includes command line Babel tools, and the ",Object(o.mdx)("inlineCode",{parentName:"p"},"babel-preset-env")," package has the code that maps any JavaScript feature, ES6 and above (ES6+), to ES5. "),Object(o.mdx)("p",null,"The ",Object(o.mdx)("inlineCode",{parentName:"p"},"-D")," flag instructs npm to add each package to a property called ",Object(o.mdx)("inlineCode",{parentName:"p"},"devDependencies")," in ",Object(o.mdx)("strong",{parentName:"p"},"package.json"),". Once the project\u2019s dependencies are listed in ",Object(o.mdx)("inlineCode",{parentName:"p"},"devDependencies"),", other developers can run your project without installing each package separately. Instead, they can simply run ",Object(o.mdx)("inlineCode",{parentName:"p"},"npm install")," \u2014 it instructs npm to look inside ",Object(o.mdx)("strong",{parentName:"p"},"package.json")," and download all of the packages listed in ",Object(o.mdx)("inlineCode",{parentName:"p"},"devDependencies"),"."),Object(o.mdx)("p",null,"Once you ",Object(o.mdx)("inlineCode",{parentName:"p"},"npm install")," packages, you can find the Babel packages and all their dependencies in the ",Object(o.mdx)("strong",{parentName:"p"},"node_modules")," folder. The new directory structure contains the following :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"project\n|_ node_modules\n|___ .bin\n|___ ...\n|_ src\n|___ main.js\n|_ package.json\n")),Object(o.mdx)("p",null,"The ",Object(o.mdx)("inlineCode",{parentName:"p"},"...")," in the file structure above is a placeholder for 100+ packages that npm installed."),Object(o.mdx)("p",null,Object(o.mdx)("strong",{parentName:"p"},"Instructions")),Object(o.mdx)("p",null,Object(o.mdx)("strong",{parentName:"p"},"1.")," Enter ",Object(o.mdx)("inlineCode",{parentName:"p"},"ls")," into the terminal to view the current directory\u2019s file structure."),Object(o.mdx)("p",null,Object(o.mdx)("strong",{parentName:"p"},"2.")," Use npm with the ",Object(o.mdx)("inlineCode",{parentName:"p"},"-D")," flag to install the Babel command line package and add it to the ",Object(o.mdx)("inlineCode",{parentName:"p"},"devDependencies")," property in ",Object(o.mdx)("strong",{parentName:"p"},"package.json"),"."),Object(o.mdx)("p",null,Object(o.mdx)("strong",{parentName:"p"},"3.")," Use npm with the ",Object(o.mdx)("inlineCode",{parentName:"p"},"-D")," flag to install the Babel preset environment package and add it to the ",Object(o.mdx)("inlineCode",{parentName:"p"},"devDependencies")," property in ",Object(o.mdx)("strong",{parentName:"p"},"package.json"),".\nEnter ",Object(o.mdx)("inlineCode",{parentName:"p"},"ls")," into the terminal to see the file structure of your current directory. Notice the addition of ",Object(o.mdx)("strong",{parentName:"p"},"node_modules"),".\nYou can also see the new folder by clicking on the file navigation button above the text editor."),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"$ ls\nnode_modules  package.json  src\n")),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"08-babelrc"},"08. .babelrc"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/browser-compatibility-and-transpilation/exercises/babelrc"}),"Learn JavaScript | Codecademy")),Object(o.mdx)("p",null,"Now that you\u2019ve downloaded the Babel packages, you need to specify the version of the source JavaScript code.\nYou can specify the initial JavaScript version inside of a file named ",Object(o.mdx)("strong",{parentName:"p"},".babelrc"),". In your root directory, you can run ",Object(o.mdx)("inlineCode",{parentName:"p"},"touch .babelrc")," to create this file.\nYour project directory contains the following folders and files :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"project\n|_ node_modules\n|___ .bin\n|___ ...\n|_ src\n|___ main.js\n|_ .babelrc\n|_ package.json\n")),Object(o.mdx)("p",null,"Inside ",Object(o.mdx)("strong",{parentName:"p"},".babelrc")," you need to define the ",Object(o.mdx)("em",{parentName:"p"},"preset")," for your source JavaScript file. The preset specifies the version of your initial JavaScript file.\nUsually, you want to transpile JavaScript code from versions ES6 and later (ES6+) to ES5. From this point on, we will refer to our source code as ES6+, because Ecma introduces new syntax with each new version of JavaScript.\nTo specify that we are transpiling code from an ES6+ source, we have to add the following JavaScript object into ",Object(o.mdx)("strong",{parentName:"p"},".babelrc")," :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),'{\n  "presets": ["env"]\n}\n')),Object(o.mdx)("p",null,"When you run Babel, it looks in ",Object(o.mdx)("strong",{parentName:"p"},".babelrc")," to determine the version of the initial JavaScript file. In this case, ",Object(o.mdx)("inlineCode",{parentName:"p"},'["env"]')," instructs Babel to transpile any code from versions ES6 and later."),Object(o.mdx)("p",null,Object(o.mdx)("strong",{parentName:"p"},"Instructions")),Object(o.mdx)("p",null,Object(o.mdx)("strong",{parentName:"p"},"1.")," In the root directory, use ",Object(o.mdx)("inlineCode",{parentName:"p"},"touch")," to create a new ",Object(o.mdx)("strong",{parentName:"p"},".babelrc")," file."),Object(o.mdx)("p",null,Object(o.mdx)("strong",{parentName:"p"},"2.")," Open the ",Object(o.mdx)("strong",{parentName:"p"},".babelrc")," file and add an object that specifies the preset to ",Object(o.mdx)("inlineCode",{parentName:"p"},'"env"'),".\nRun the code once you\u2019ve added the object."),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"09-babel-source-lib"},"09. Babel Source Lib"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/browser-compatibility-and-transpilation/exercises/babel-source-lib"}),"Learn JavaScript | Codecademy")),Object(o.mdx)("p",null,"There\u2019s one last step before we can transpile our code. We need to specify a script in ",Object(o.mdx)("strong",{parentName:"p"},"package.json")," that initiates the ES6+ to ES5 transpilation.\nInside of the ",Object(o.mdx)("strong",{parentName:"p"},"package.json")," file, there is a property named ",Object(o.mdx)("inlineCode",{parentName:"p"},'"scripts"')," that holds an object for specifying command line shortcuts. It looks like this :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'...\n"scripts": {\n  "test": "echo \\"Error: no test specified\\" && exit 1"\n}, ...\n')),Object(o.mdx)("p",null,"In the code above, the ",Object(o.mdx)("inlineCode",{parentName:"p"},'"scripts"')," property contains an object with one property called ",Object(o.mdx)("inlineCode",{parentName:"p"},'"test"'),". Below the ",Object(o.mdx)("inlineCode",{parentName:"p"},'"test"')," property, we will add a script that runs Babel like this :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'...\n"scripts": {\n  "test": "echo \\"Error: no test specified\\" && exit 1",\n  "build": "babel src -d lib"\n}\n')),Object(o.mdx)("p",null,"In the ",Object(o.mdx)("inlineCode",{parentName:"p"},'"scripts"')," object above, we add a property called ",Object(o.mdx)("inlineCode",{parentName:"p"},'"build"'),". The property\u2019s value, ",Object(o.mdx)("inlineCode",{parentName:"p"},'"babel src -d lib"'),", is a command line method that transpiles ES6+ code to ES5. Let\u2019s consider each argument in the method call :"),Object(o.mdx)("ul",null,Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("inlineCode",{parentName:"li"},"babel")," \u2014 The Babel command call responsible for transpiling code."),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("inlineCode",{parentName:"li"},"src")," \u2014 Instructs Babel to transpile all JavaScript code inside the ",Object(o.mdx)("strong",{parentName:"li"},"src")," directory."),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("inlineCode",{parentName:"li"},"-d")," \u2014 Instructs Babel to write the transpiled code to a directory. "),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("inlineCode",{parentName:"li"},"lib")," \u2014 Babel writes the transpiled code to a directory called ",Object(o.mdx)("inlineCode",{parentName:"li"},"lib"),". ")),Object(o.mdx)("p",null,"In the next exercise, we\u2019ll run the ",Object(o.mdx)("inlineCode",{parentName:"p"},"babel src -d lib")," method to transpile our ES6+ code."),Object(o.mdx)("p",null,Object(o.mdx)("strong",{parentName:"p"},"Instructions")),Object(o.mdx)("p",null,Object(o.mdx)("strong",{parentName:"p"},"1.")," In ",Object(o.mdx)("strong",{parentName:"p"},"package.json"),", add a script called ",Object(o.mdx)("inlineCode",{parentName:"p"},'"build"'),".\nWhen run, the ",Object(o.mdx)("inlineCode",{parentName:"p"},'"build"')," script should use Babel to transpile JavaScript code inside of the ",Object(o.mdx)("strong",{parentName:"p"},"src")," folder and write it to a folder called ",Object(o.mdx)("strong",{parentName:"p"},"lib"),".\nDon\u2019t forget to add a comma after the ",Object(o.mdx)("inlineCode",{parentName:"p"},"\u201ctest\u201d")," script."),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'// package.json\n{\n  "name": "learning-babel",\n  "version": "1.0.0",\n  "description": "Use Babel to transpile JavaScript ES6 to ES5",\n  "main": "index.js",\n  "scripts": {\n    "test": "echo \\"Error: no test specified\\" && exit 1",\n    "build": "babel src -d lib"\n  },\n  "author": "",\n  "license": "ISC"\n}\n')),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"10-build"},"10. Build"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/browser-compatibility-and-transpilation/exercises/npm-run-build"}),"Learn JavaScript | Codecademy")),Object(o.mdx)("p",null,"We\u2019re ready to transpile our code ! In the last exercise, we wrote the following script in ",Object(o.mdx)("strong",{parentName:"p"},"package.json "),":"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'"build": "babel src -d lib"\n')),Object(o.mdx)("p",null,"Now, we need to call ",Object(o.mdx)("inlineCode",{parentName:"p"},'"build"')," from the command line to transpile and write ES5 code to a directory called ",Object(o.mdx)("inlineCode",{parentName:"p"},"lib"),".\nFrom the command line, we type :"),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"npm run build\n")),Object(o.mdx)("p",null,"The command above runs the ",Object(o.mdx)("inlineCode",{parentName:"p"},"build")," script in ",Object(o.mdx)("strong",{parentName:"p"},"package.json"),".\nBabel writes the ES5 code to a file named ",Object(o.mdx)("strong",{parentName:"p"},"main.js")," (it\u2019s always the same name as the original file), inside of a folder called ",Object(o.mdx)("inlineCode",{parentName:"p"},"lib"),". The resulting directory structure is : "),Object(o.mdx)("pre",null,Object(o.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"project\n|_ lib\n|___ main.js\n|_ node_modules\n|___ .bin\n|___ ...\n|_ src\n|___ main.js\n|_ .babelrc\n|_ package.json\n")),Object(o.mdx)("p",null,"Notice, the directory contains a new folder named ",Object(o.mdx)("strong",{parentName:"p"},"lib"),", with one file, called ",Object(o.mdx)("strong",{parentName:"p"},"main.js"),".\nThe ",Object(o.mdx)("inlineCode",{parentName:"p"},"npm run build")," command will transpile all JavaScript files inside of the ",Object(o.mdx)("strong",{parentName:"p"},"src")," folder. This is helpful as you build larger JavaScript projects \u2014 regardless of the number of JavaScript files, you only need to run one command (",Object(o.mdx)("inlineCode",{parentName:"p"},"npm run build"),") to transpile all of your code."),Object(o.mdx)("p",null,Object(o.mdx)("strong",{parentName:"p"},"Instructions")),Object(o.mdx)("p",null,Object(o.mdx)("strong",{parentName:"p"},"1.")," Transpile the ES6+ code to ",Object(o.mdx)("inlineCode",{parentName:"p"},"lib")," using the ",Object(o.mdx)("inlineCode",{parentName:"p"},"build")," command.\nOnce you\u2019ve done this, navigate to the new ",Object(o.mdx)("strong",{parentName:"p"},"lib")," folder and open ",Object(o.mdx)("strong",{parentName:"p"},"main.js"),"."),Object(o.mdx)("hr",null),Object(o.mdx)("h2",{id:"11-review"},"11. Review"),Object(o.mdx)("p",null,Object(o.mdx)("a",Object(n.a)({parentName:"p"},{href:"https://www.codecademy.com/courses/introduction-to-javascript/lessons/browser-compatibility-and-transpilation/exercises/review"}),"Learn JavaScript | Codecademy")),Object(o.mdx)("p",null,"In this lesson, you learned about browser compatibility and transpilation. Let\u2019s review the key concepts :"),Object(o.mdx)("ul",null,Object(o.mdx)("li",{parentName:"ul"},"ES5 \u2014 The old JavaScript version that is supported by all modern web browsers."),Object(o.mdx)("li",{parentName:"ul"},"ES6 \u2014 The new(er) JavaScript version that is ",Object(o.mdx)("em",{parentName:"li"},"not")," supported by all modern web browsers. The syntax is more readable, similar to other programming languages, and addresses the source of common bugs in ES5."),Object(o.mdx)("li",{parentName:"ul"},"caniuse.com \u2014 a website you can use to look up HTML, CSS, and JavaScript browser compatibility information."),Object(o.mdx)("li",{parentName:"ul"},"Babel \u2014 A JavaScript package that transpiles JavaScript ES6+ code to ES5. "),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("inlineCode",{parentName:"li"},"npm init")," \u2014 A terminal command that creates a ",Object(o.mdx)("strong",{parentName:"li"},"package.json")," file."),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("strong",{parentName:"li"},"package.json")," \u2014 A file that contains information about a JavaScript project."),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("inlineCode",{parentName:"li"},"npm install")," \u2014 A command that installs Node packages."),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("inlineCode",{parentName:"li"},"babel-cli")," \u2014 A Node package that contains command line tools for Babel."),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("inlineCode",{parentName:"li"},"babel-preset-env")," \u2014 A Node package that contains ES6+ to ES5 syntax mapping information."),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("strong",{parentName:"li"},".babelrc")," \u2014 A file that specifies the version of the JavaScript source code."),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("inlineCode",{parentName:"li"},'"build"')," script \u2014 A ",Object(o.mdx)("strong",{parentName:"li"},"package.json")," script that you use to tranpsile ES6+ code to ES5."),Object(o.mdx)("li",{parentName:"ul"},Object(o.mdx)("inlineCode",{parentName:"li"},"npm run build")," \u2014 A command that runs the ",Object(o.mdx)("inlineCode",{parentName:"li"},"build")," script and transpiles ES6+ code to ES5.")),Object(o.mdx)("p",null,"For future reference, here is a list of the steps needed to set up a project for transpilation :"),Object(o.mdx)("ol",null,Object(o.mdx)("li",{parentName:"ol"},Object(o.mdx)("p",{parentName:"li"},"Initialize your project using ",Object(o.mdx)("inlineCode",{parentName:"p"},"npm init")," and create a directory called ",Object(o.mdx)("strong",{parentName:"p"},"src"))),Object(o.mdx)("li",{parentName:"ol"},Object(o.mdx)("p",{parentName:"li"},"Install babel dependencies by running"),Object(o.mdx)("pre",{parentName:"li"},Object(o.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),"npm install babel-cli -D\nnpm install babel-preset-env -D\n"))),Object(o.mdx)("li",{parentName:"ol"},Object(o.mdx)("p",{parentName:"li"},"Create a ",Object(o.mdx)("strong",{parentName:"p"},".babelrc"),"  file inside your project and add the following code inside it :"),Object(o.mdx)("pre",{parentName:"li"},Object(o.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-bash"}),'{\n  "presets": ["env"]\n}\n'))),Object(o.mdx)("li",{parentName:"ol"},Object(o.mdx)("p",{parentName:"li"},"Add the following script to your ",Object(o.mdx)("inlineCode",{parentName:"p"},"scripts")," object in ",Object(o.mdx)("strong",{parentName:"p"},"package.json")," :"),Object(o.mdx)("pre",{parentName:"li"},Object(o.mdx)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'"build": "babel src -d lib"\n'))),Object(o.mdx)("li",{parentName:"ol"},Object(o.mdx)("p",{parentName:"li"},"Run ",Object(o.mdx)("inlineCode",{parentName:"p"},"npm run build")," whenever you want to transpile your code from your ",Object(o.mdx)("strong",{parentName:"p"},"src")," to ",Object(o.mdx)("strong",{parentName:"p"},"lib")," directories."))),Object(o.mdx)("p",null,Object(o.mdx)("strong",{parentName:"p"},"Instructions")),Object(o.mdx)("p",null,"If you want some more practice, take a moment to add JavaScript files and ES6 syntax to the ",Object(o.mdx)("strong",{parentName:"p"},"src")," folder and try transpiling them.\nOnce you feel comfortable with this process, try setting up Babel on your own computer. "))}d.isMDXComponent=!0},212:function(e,t,a){"use strict";a.r(t),a.d(t,"MDXContext",(function(){return d})),a.d(t,"MDXProvider",(function(){return b})),a.d(t,"mdx",(function(){return h})),a.d(t,"useMDXComponents",(function(){return m})),a.d(t,"withMDXComponents",(function(){return p}));var n=a(0),r=a.n(n);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=r.a.createContext({}),p=function(e){return function(t){var a=m(t.components);return r.a.createElement(e,i({},t,{components:a}))}},m=function(e){var t=r.a.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},b=function(e){var t=m(e.components);return r.a.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},j=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=m(a),p=n,b=d["".concat(i,".").concat(p)]||d[p]||u[p]||o;return a?r.a.createElement(b,l(l({ref:t},c),{},{components:a})):r.a.createElement(b,l({ref:t},c))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=j;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:n,i[1]=c;for(var s=2;s<o;s++)i[s]=a[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,a)}j.displayName="MDXCreateElement"}}]);